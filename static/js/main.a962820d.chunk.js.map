{"version":3,"sources":["helpers/ElectronHelper.ts","PitTheme.tsx","components/LinkTo.tsx","components/KeyMaps.tsx","services/MockSaveService.ts","components/MenuCards.tsx","pages/MainMenu.tsx","services/MockItemService.ts","helpers/AttributeHelper.ts","services/MockHeroService.ts","services/MockPartyService.ts","components/Header.tsx","services/MockGameStateService.ts","models/character/Hero.ts","models/Item.ts","models/character/Trait.ts","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","services/MockStoryEncounterService.ts","components/HeroSelector.tsx","components/PartySelection.tsx","components/HeroDismiss.tsx","services/StringConverters.ts","components/ItemTooltipContent.tsx","components/InventorySelector.tsx","components/Stash.tsx","components/EncounterDialog.tsx","components/markers/VertexMarker.tsx","models/Queue.ts","components/markers/Drift_Marker.tsx","components/markers/DriftMarker2.tsx","components/markers/PartyMarker.tsx","components/OverheadMap.tsx","components/LoadingProgress.tsx","components/OverheadMapLoader.tsx","services/MockDetailedEncounterService.ts","components/markers/HeroMarker.tsx","helpers/Transforms.ts","helpers/GridHelpers.ts","models/CharacterEncounterData.ts","components/markers/GridMarker.tsx","components/markers/FoeMarker.tsx","components/encounter-map/StaticMarker.tsx","components/encounter-map/CombatPath.tsx","components/markers/CustomMarker.tsx","components/markers/DamageDisplay.tsx","components/CombatIndicator.tsx","components/ActionBar.tsx","services/DiceRoller.ts","services/DiceSeedTracker.ts","services/InitiativeTracker.ts","models/AttackResult.ts","services/EffectTableServiceStatic.ts","helpers/HeroHelper.ts","helpers/CombatHelper.ts","helpers/CombatPositionHelper.ts","helpers/CombatActionHelper.ts","components/markers/IsoMarker.tsx","components/EncounterMap.tsx","services/MockNpcService.ts","helpers/ArrayHelper.ts","components/EncounterMapLoader.tsx","pages/MapPage.tsx","services/MockWorldService.ts","components/PartyInventory.tsx","components/EquippedItems.tsx","components/StatisticsBlock.tsx","components/CalculatedStatisticsBlock.tsx","components/TraitList.tsx","pages/HeroProfile.tsx","pages/EncounterPage.tsx","MainLayout.tsx","components/SaveGameSelector.tsx","pages/GameNewMenu.tsx","pages/GameLoadMenu.tsx","pages/GameDeleteMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ElectronHelper","window","process","type","versions","electron","navigator","userAgent","indexOf","PitTheme","createMuiTheme","palette","primary","light","main","dark","LinkTo","props","url","children","top","left","width","classes","makeStyles","container","zIndex","display","cursor","containerAbsolute","position","useStyles","isPositioned","history","useHistory","className","onClick","event","push","KeyMaps","backUrl","navigateToUrl","Mousetrap","bind","MockSaveService","setCurrentSave","slot","_currentSave","localStorage","setItem","toString","getCurrentSave","getItem","slotId","Number","parseInt","markSlotUpdated","Date","getSlotUpdateTimes","slot1","slot2","slot3","deleteSlot","Error","removeItem","key","value","this","JSON","stringify","json","parse","undefined","card","margin","backgroundColor","right","boxShadow","cardDisabled","cardActive","MenuCards","selectClass","i","active","enabled","items","Grid","item","xs","map","Card","onSelected","CardHeader","title","Typography","variant","avatar","icon","CardContent","description","root","height","close","filter","cardIcon","fontSize","titleContainer","padding","appLogo","pointerEvents","MainMenu","React","useState","saveTimes","setSaveTimes","useEffect","saveService","loadSaves","slotCount","s","length","allSlotsFull","oneSlotFull","isElectron","require","ipcRenderer","send","src","alt","MockItemService","getItems","ids","id","getItemDetail","TokenOfServitude","HagTeeth","CeramicHelm","CeramicArmor","WolfSpear","AttributeHelper","attribute","total","base","bonus","convertSimpleToComplex","attributes","strength","dexterity","constitution","intelligence","wisdom","charisma","luck","MockHeroService","hero","getHeroData","convertToDetailed","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroes","heroId","itemId","heroMatch","find","itemService","originalItem","itemWithSameType","currentStatus","equippedItems","itemType","saveObject","getObject","permanentTraits","baseTraits","temporaryTraits","currentHitPoints","baseHitPoints","lostSpells","name","background","imageUrl","tokenUrl","tokenOffset","abilities","alignment","level","stats","status","armour","meleeAttackBonus","meleeAttackSpeed","meleeEffectId","meleeDamageBonus","rangedAttackBonus","rangedAttackSpeed","rangedEffectId","rangedDamageBonus","spellAttackBonus","spellAttackSpeed","spellDamageBonus","spells","moveSpeed","maxHitPoints","spellResistance","damageResistance","behavior","MockPartyService","reputation","traits","heroService","getPartyIds","getHeroDetail","_heroIds","heroIds","defaultHeroIds","_inventoryItemIds","inventoryIds","defaultInventoryIds","itemIds","inventoryItems","getInventory","setInventory","_stashItemIds","stashIds","defaultStashIds","getStash","setStash","stashItems","appHeader","headerSpan","headerParty","headerImg","border","borderRadius","borderWidth","borderColor","Header","party","setParty","newParty","getParty","console","error","loadParty","MockGameStateService","_state","stateJson","state","defaultState","log","currentMapId","currentVertextId","currentMapCovers","seed","Math","random","MAX_SAFE_INTEGER","Alignment","StatusFlags","AbilityFlags","ItemType","TraitType","ModifierType","MockMapService","BlackTempleMap","TownMap","coverUrls","pathColor","vertices","v","Leaflet","latLng","clickRadius","encounterId","marker","exitId","coverIds","edges","distance","x","y","latDist","lat","lngDist","lng","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","from","weight","MockStoryEncounterService","currentStory","currentId","currentTitle","Story","TheInterceptContent","commonRoomContent","chasmContent","homeContent","nineBellsContent","brawlContent","dartTrapContent","createEmptyStory","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","variablesState","GetVariableWithName","detailedEncounter","paragraphText","choices","isFinished","finishData","Continue","encounterChoices","currentChoices","c","index","text","heroSelected","HeroSelector","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","partyService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","currentTarget","newSelected","t","selectedHeroIds","imgClass","output","Tooltip","renderParty","partyButton","partyButtonDiv","textAlign","PartySelection","setHeroIds","isValid","Button","setPartyIds","disabled","color","HeroDismiss","setHeroId","StringConverters","resourceMap","Resources","alignmentToString","resources","getResources","modifierToString","modifierType","itemTypeText","abilitiesToString","None","Acrobatics","Devices","PatronBond","Perception","Sorcery","Stealth","Survival","join","ItemTooltipContent","renderBehaviors","effects","e","modifierValue","Fragment","align","traitJsx","newTraits","behaviour","concat","renderTraits","gridItem","inventory","itemSelected","InventorySelector","selectedIds","spacing","alignItems","justify","itemGrids","arrow","emptyItems","emptyGrids","renderInventory","stashImg","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","Stash","stashSelectedIds","setStashSelectedIds","inventorySelectedIds","setInventorySelectedIds","setStashItems","setInventoryItems","stashItemIds","inventoryItemIds","newStashItems","newInventoryItems","loadItems","isStashSelected","isInventorySelected","willInventoryBeTooBig","service","removeStashItem","addInventoryItem","startIcon","removeInventoryItem","addStashItem","paper","overflow","dialog","userSelect","opacity","content","minWidth","minHeight","fontFamily","actions","portrait","placeholder","float","paragraph","EncounterDialog","onClose","MockEncounterService","encounterService","setParagraph","setTitle","setChoices","storyStarted","setStoryStarted","open","handleClose","handleChoice","encounter","chooseChoice","encounterFinish","processFinish","handleContinue","finish","encounterDetailId","startEncounter","encChoices","Dialog","aria-labelledby","DialogContent","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","renderParagraph","DialogActions","tooltip","whiteSpace","verticalAlign","justifyContent","marginLeft","marginRight","flexShrink","VertexMarker","onHover","onHoverEnd","vertextId","Icon","iconUrl","image","iconSize","dimensions","iconAnchor","anchor","Marker","onclick","onmouseover","onmouseout","renderTooltipIcon","Queue","_store","val","shift","exports","Leaflet_module","L","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","dragging","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","DriftMarker2","leafletElement","rest","DivIcon","el","contextValue","leaflet","popupContainer","createLeafletElement","forceUpdate","fromProps","toProps","zIndexOffset","setZIndexOffset","setOpacity","draggable","_icon","portal","createPortal","MapLayer","withLeaflet","PartyMarker","isActive","onMoveEnd","iconActive","_","OverheadMap","startState","mapUrl","onNewMap","setPos","path","setPath","vertexQueue","setEncounterId","gameState","setGameState","initialNode","setInitialNode","visibleCovers","setVisibleCovers","handleMoveEnd","targetVertex","pop","thisCoverIds","splits","split","newState","currentEncounterId","clear","stateService","getState","setState","vertexId","npath","aStar","nextVertex","pathVertexes","p","moveToVertexId","mapGraph","match","bounds","LatLngBounds","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","round","zoomControl","ImageOverlay","covers","renderCovers","renderMarkers","Polyline","positions","dashArray","dashOffset","LoadingProgress","CircularProgress","OverheadMapLoader","setGraph","setPathColor","setMapUrl","setCoverUrls","getMap","Build","loadMap","MockDetailedEncounterService","TavernMap","HeroMarker","progress","circularProgress","percentHp","details","displayPos","colorPrimary","thickness","size","Transforms","isoX","carX","carY","isoY","cardinalToIsometric","car","cardinalToIsometric2","isometricToCardinal","iso","offset","scale","GridHelpers","tokenGrid","grid","mergeGridEntry","gridToDisplayTuple","gridScale","gridOffset","gridToDisplayCenterTuple","gridToDisplay","gridToDisplayCenter","reverseOffset","coords","reverseScale","displayToGrid","result","floor","getGridLocation","char","getInitialPositions","characters","gridPosition","CharacterEncounterData","tokenEntry","baseEntry","buildAstarGrid","isWalkable","getGridPath","start","end","isHeroMove","mergedGrid","buildMergedGrids","endEntry","isFoe","isHero","isBlocked","AStarFinder","matrix","startGridPosition","endGridPosition","findPath","reverse","getRangedGridPath","range","distanceSquared","splice","getHeroPath","getFoePath","findNearestHero","paths","heroEntries","sortedPaths","sort","p1","p2","entry","isEncounter","canEndMove","displayGrid","displayStrings","gridEntry","selectedAttack","gridPos","isMoving","queueStrings","convertFunc","GridMarker","gridToDisplayFunc","FoeMarker","foe","meleeHover","hoverUrl","attackIcon","onMouseOver","onMouseOut","StaticMarker","CombatPath","move","fullPath","remainderPathLength","fullMoveStart","fullMoveEnd","halfMoveStart","remainderPath","slice","fullMovePath","halfMovePath","halfMoveMarker","fullMoveMarker","CustomMarker","RL","zIndexOff","fromPosition","fromZIndexOffset","fromOpacity","fromDraggable","fromClassName","toPosition","toZIndexOffset","toOpacity","toDraggable","toClassName","difference","itemsToRemove","includes","fromClasses","toClasses","classList","remove","updateLeafletElement","LeafletProvider","explode","death","miss","DamageDisplay","damage","show","Fade","in","style","transitionDelay","timeout","enter","exit","button","bottom","CombatIndicator","isCombat","initiative","ActionBar","renderButton","renderSpells","DiceRoller","rollDie","dieType","ceil","generate","roll20","roll10","DiceSeedTracker","reduce","a","b","charCodeAt","mulberry32","imul","InitiativeTracker","initiatives","_initiatives","processDelay","delay","init","getInitiatives","getNextInitiative","displayInitiatives","gameId","foes","fromEncounterId","roller","heroInitiatives","h","next","getModifier","foeInitiatives","f","n1","n2","AttackResult","createMiss","createFumble","createHit","createCritical","createDeath","EffectTableServiceStatic","Fists","Spear","Bow","MagicMissle","table","rawRoll","matches","useRaw","resultMin","resultMax","HeroHelper","statistics","modifier","getItemTraits","itemTraits","getAllTraits","calculateAttributesWithModifiers","allTraits","strMod","dexMod","conMod","intMod","wisMod","chaMod","luckMod","j","Strength","Dexterity","Constitution","Intelligence","Wisdom","Charisma","Luck","calculateStatsWithModifiers","armorMod","moveSpeedMod","meleeAttackMod","meleeAttackSpeedMod","meleeDamageMod","rangedAttackMod","rangedAttackSpeedMod","rangedDamageMod","spellAttackMod","spellAttackSpeedMod","spellDamageMod","hpMod","spellResistMod","damageResistMod","Armor","MoveSpeed","MeleeAttack","MeleeAttackSpeed","MeleeDamage","MeleeEffect","RangedEffect","RangedAttack","RangedAttackSpeed","RangedDamage","SpellAttack","SpellAttackSpeed","SpellDamage","HitPoints","SpellResistance","DamageResistance","Status","meleeEffect","getEffect","rangedEffect","meleeEffectAttackModifier","attackModifier","rangedEffectAttackModifier","getStatModifier","CombatHelper","determineAttackResultShared","seedAttack","seedDamage","attacker","target","effectId","attackBonus","damageBonus","targetPos","attackerPos","attackerDetail","targetDetail","resultService","effect","attackRoll","attackValue","isMiss","dodgeWith","isFumble","isCritical","getResultEntry","damageDieCount","damageDie","damageModifier","determineAttackResult","determineMeleeAttackResult","determineRangedAttackResult","determineSpellAttackResult","determineMaxRange","CombatPositionHelper","updatePosition","newPosition","oldPositions","newPositions","removePosition","getPositionByEntry","findIndex","clearAllQueues","CombatActionHelper","trimPathToMove","maxPath","buildAttack","movePath","isAttack","character","action","buildMove","IsoMarker","dot","dotActive","EncounterMap","heroData","setHeroData","foeData","setFoeData","damagePos","setDamagePos","setTokenGrid","selectedHero","setSelectedHero","attackTarget","setAttackTarget","setInitiatives","currentAction","setCurrentAction","setSeed","params","useParams","startNextActor","initiativeTracker","newNextToMove","gridDisplay","foeMatch","closestHeroPath","newCharacterAction","newInitiatives","numMoves","heroPos","getPosition","setCharacterPosition","executeCurrentAction","onHeroClick","encounters","handleAttack","targetMatch","attackSeed","damageSeed","results","newFoeDetails","removeCharacter","addDamagePos","showHoverPath","hoverGridPos","displayPath","onFoeHover","onFoeHoverEnd","onClickGridMarker","processMarkerAction","onFoeClick","endPos","endToken","newAction","markers","renderGridMarkers","useTokens","renderHeroes","damages","displayResults","dam","renderDamageMarkers","MockNpcService","getFoeData","clone","thugContent","ArrayHelper","array","count","clonedArray","Object","assign","self","EncounterMapLoader","setEncounter","setFoes","encounterData","getEncounterDetail","newHeroes","foeEntries","entries","npcs","foeIds","removeDuplicates","npcService","newFoes","getFoeDetail","foeInstances","foeDeepClone","buildInitial","loadEncounter","showGrid","MapPage","newGameState","loadGameState","MockWorldService","PartyInventory","onEquipItem","isItemEquipable","itemContainer","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","portraitItemWeapon","portraitItemShield","portraitNoItemImg","portraitItemImg","EquippedItems","headItem","WearableHead","bodyItem","WearableBody","armsItem","WearableArms","feetItem","WearableFeet","weaponItem","WeaponMelee1h","StyledTableCell","withStyles","theme","head","common","black","white","body","TableCell","StyledTableRow","hover","TableRow","StatisticsBlock","createData","calculation","attributeTotal","attributeCalculation","showModifier","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","row","scope","maxWidth","statisticsBlock","CalculatedStatisticsBlock","setEffects","meleeEffectEntry","rangedEffectEntry","loadEffects","md","List","ListItem","ListItemAvatar","Avatar","ListItemText","secondary","TraitList","renderTraitIcon","renderTrait","characterGrid","gridAutoRows","breakpoints","down","gridTemplateColumns","up","sectionHeading","bannerContainer","portraitImg","overflowY","gridRowEnd","HeroProfile","setHero","world","setWorld","setEquippedItems","setCurrentId","newHero","getPartyStatistics","newWorld","getWorld","newItems","loadHero","removedItemId","equipItem","EncounterPage","MainLayout","SaveGameSelector","saves","enabledSlots","currentSlot","getDateString","date","toLocaleString","getDescription","isCurrentSlot","saveButtons","chooseText","GameNewMenu","currentSave","clearCache","GameLoadMenu","calculateEnabledSlots","GameDeleteMenu","App","onContextMenu","preventDefault","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a962820d.chunk.js","sourcesContent":["export default class ElectronHelper {\r\n    /*\r\n     * Are we running under electron?\r\n     */\r\n    public static isElectron(): boolean {\r\n        \r\n        // Renderer process\r\n        if (typeof window !== \"undefined\" && typeof window.process === \"object\" && window.process.type === \"renderer\") {\r\n            return true;\r\n        }\r\n\r\n        // Main process\r\n        if (typeof process !== \"undefined\" && typeof process.versions === \"object\" && !!process.versions.electron) {\r\n            return true;\r\n        }\r\n\r\n        // Detect the user agent when the `nodeIntegration` option is set to true\r\n        if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n//import { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: \"#ffd600\",\r\n            main: \"#ffd600\",\r\n            dark: \"#ffd600\",\r\n        },\r\n        // secondary: {\r\n        //     light: blue[100],\r\n        //     main: blue[100],\r\n        //     dark: blue[100],\r\n        // },\r\n        // action: {\r\n        //     hover: blue[800],\r\n        // },\r\n    },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\ntype LinkToProps = {\r\n    url: string;\r\n    children?: React.ReactNode;\r\n    top?: string,\r\n    left?: string;\r\n    width?: string;\r\n};\r\n\r\nconst LinkTo: React.FunctionComponent<LinkToProps> = (props: LinkToProps) => {\r\n    \r\n    const { url, children, top, left, width } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        container: {\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n        containerAbsolute: {\r\n            position: \"absolute\",\r\n            top: top ?? \"20px\",\r\n            left: left ?? \"20px\",\r\n            width: width ?? \"40px\",\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    const isPositioned = top || left || width;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => history.push(url);\r\n\r\n    return (\r\n        <div className={isPositioned ? classes.containerAbsolute : classes.container} onClick={navigateToUrl}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LinkTo;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Mousetrap from \"mousetrap\";\r\n\r\ntype KeyMapsProps = {\r\n    backUrl: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst KeyMaps: React.FunctionComponent<KeyMapsProps> = (props: KeyMapsProps) => {\r\n    const { backUrl, children } = props;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string): void => history.push(url);\r\n\r\n    Mousetrap.bind(\"1\", () => navigateToUrl(\"/profile/1\"));\r\n    Mousetrap.bind(\"2\", () => navigateToUrl(\"/profile/2\"));\r\n    Mousetrap.bind(\"3\", () => navigateToUrl(\"/profile/3\"));\r\n    Mousetrap.bind(\"4\", () => navigateToUrl(\"/profile/4\"));\r\n    Mousetrap.bind(\"esc\", () => navigateToUrl(backUrl));\r\n\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default KeyMaps;\r\n","export default class MockSaveService {\r\n    private static _currentSave = -1;\r\n\r\n    public setCurrentSave = (slot: number) => {\r\n        MockSaveService._currentSave = slot;\r\n        localStorage.setItem(\"currentSlot\", slot.toString());\r\n    };\r\n\r\n    public getCurrentSave = (): number => {\r\n        if (MockSaveService._currentSave > 0) return MockSaveService._currentSave;\r\n        const slot = localStorage.getItem(\"currentSlot\");\r\n\r\n        const slotId = slot ? Number.parseInt(slot) : 0;\r\n\r\n        MockSaveService._currentSave = slotId;\r\n\r\n        return slotId;\r\n    };\r\n\r\n    public markSlotUpdated = () => {\r\n        localStorage.setItem(this.getCurrentSave() + \"_time\", new Date().toString());\r\n    };\r\n\r\n    public getSlotUpdateTimes = (): (Date | null)[] => {\r\n        const slot1 = localStorage.getItem(\"0_time\");\r\n        const slot2 = localStorage.getItem(\"1_time\");\r\n        const slot3 = localStorage.getItem(\"2_time\");\r\n\r\n        const items: (Date | null)[] = [slot1 ? new Date(slot1) : null, slot2 ? new Date(slot2) : null, slot3 ? new Date(slot3) : null];\r\n\r\n        return items;\r\n    }\r\n\r\n    public deleteSlot = (slot: number) => {\r\n\r\n        if (slot === this.getCurrentSave()) {\r\n            throw new Error(\"Can't delete current save\");\r\n        }\r\n\r\n        localStorage.removeItem(slot + \"_time\");\r\n        localStorage.removeItem(slot + \"_state\");\r\n    }\r\n\r\n    public saveObject<T>(key: string, value: T) {\r\n        localStorage.setItem(this.getCurrentSave() + \"_\" + key, JSON.stringify(value));\r\n        this.markSlotUpdated();\r\n    }\r\n\r\n    public getObject<T>(key: string): T | undefined {\r\n        const json = localStorage.getItem(this.getCurrentSave() + \"_\" + key);\r\n        return json ? JSON.parse(json) : undefined;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        top: \"1vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"lightsteelblue\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n            backgroundColor: \"ghostwhite\",\r\n        },\r\n    },\r\n    cardDisabled: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkgrey\",\r\n    },\r\n    cardActive: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkseagreen\",\r\n    },\r\n});\r\n\r\nexport type MenuCard = {\r\n    title: string;\r\n    description: string;\r\n    enabled: boolean;\r\n    active?: boolean;\r\n    icon?: JSX.Element;\r\n    onSelected: () => void;\r\n};\r\n\r\ntype MenuCardsProps = {\r\n    items: MenuCard[];\r\n};\r\n\r\nconst MenuCards: React.FunctionComponent<MenuCardsProps> = (props: MenuCardsProps) => {\r\n    const classes = useStyles();\r\n\r\n    const selectClass = (i: MenuCard) => (i.active ? classes.cardActive : i.enabled ? classes.card : classes.cardDisabled);\r\n\r\n    const { items } = props;\r\n    const renderCards = () =>\r\n        items.map((i) => (\r\n            <Card className={selectClass(i)} onClick={i.onSelected}>\r\n                <CardHeader title={<Typography variant=\"h2\">{i.title}</Typography>} avatar={i.icon} />\r\n                <CardContent>{i.description}</CardContent>\r\n            </Card>\r\n        ));\r\n\r\n    return (\r\n        <Grid container className={classes.container}>\r\n            <Grid item xs={3}></Grid>\r\n            <Grid item xs={6}>\r\n                {renderCards()}\r\n            </Grid>\r\n            <Grid item xs={3}></Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MenuCards;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport SystemUpdateAltIcon from \"@material-ui/icons/SystemUpdateAlt\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\n\r\nimport LinkTo from '../components/LinkTo';\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport ElectronHelper from '../helpers/ElectronHelper';\r\nimport MockSaveService from '../services/MockSaveService';\r\nimport MenuCards, { MenuCard } from '../components/MenuCards';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"9vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n});\r\n\r\nconst MainMenu: React.FunctionComponent = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n\r\n    let history = useHistory();\r\n    const navigateToNewGame = () => history.push(\"/game/new\");\r\n    const navigateToLoadGame = () => history.push(\"/game/load\");\r\n    const navigateToDeleteGame = () => history.push(\"/game/delete\");\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    const onElectronExit = () => {\r\n        const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n        ipcRenderer.send(\"close-app\");\r\n    }\r\n\r\n    if (!saveTimes)\r\n        return null;\r\n\r\n    const slotCount = saveTimes.filter(s => s !== null).length;\r\n    const allSlotsFull = slotCount >= 3;\r\n    const oneSlotFull = slotCount === 1;\r\n\r\n    const items: MenuCard[] = [\r\n        {\r\n            title: \"New Game\",\r\n            description: \"Start a new game\" + (allSlotsFull ? \" (All slots full)\" : \"\"),\r\n            enabled: !allSlotsFull,\r\n            icon: <AddCircleOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToNewGame,\r\n        },\r\n        {\r\n            title: \"Load Game\",\r\n            description: \"Load a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <SystemUpdateAltIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToLoadGame,\r\n        },\r\n        {\r\n            title: \"Delete Game\",\r\n            description: \"Delete a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <DeleteOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToDeleteGame,\r\n        },\r\n    ];\r\n\r\n    // Add a quit option if running under Electron\r\n    if (ElectronHelper.isElectron()) {\r\n        items.push({\r\n            title: \"Quit\",\r\n            description: \"Exit the game\",\r\n            enabled: true,\r\n            icon: <ExitToAppIcon className={classes.cardIcon} />,\r\n            onSelected: onElectronExit,\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <MenuCards items={items} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\nimport CeramicHelm from \"./items/ceramic_helm.json\";\r\nimport CeramicArmor from \"./items/ceramic_armor.json\";\r\n\r\nexport default class MockItemService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude;\r\n            case \"hag_teeth\":\r\n                return HagTeeth;\r\n            case \"ceramic_helm\":\r\n                return CeramicHelm;\r\n            case \"ceramic_armor\":\r\n                return CeramicArmor;\r\n            case \"wolf_spear\":\r\n            default:\r\n                return WolfSpear;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import Attribute from \"../models/character/Attribute\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\nimport AttributeSimple from \"../models/character/AttributesSimple\";\r\n\r\nexport default class AttributeHelper {\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static convertSimpleToComplex = (attributes: AttributeSimple): AttributeList => {\r\n        const attributesComplex = {\r\n            strength: { base: attributes.strength, bonus: 0 },\r\n            dexterity: { base: attributes.dexterity, bonus: 0 },\r\n            constitution: { base: attributes.constitution, bonus: 0 },\r\n            intelligence: { base: attributes.intelligence, bonus: 0 },\r\n            wisdom: { base: attributes.wisdom, bonus: 0 },\r\n            charisma: { base: attributes.charisma, bonus: 0 },\r\n            luck: { base: attributes.luck, bonus: 0 },\r\n        };\r\n        return attributesComplex;\r\n    };\r\n\r\n    public static getModifier(attribute: Attribute): number {\r\n        const total = attribute.base + attribute.bonus;\r\n        if (total <= 1) return -5;\r\n        if (total <= 3) return -4;\r\n        if (total <= 5) return -3;\r\n        if (total <= 7) return -2;\r\n        if (total <= 9) return -1;\r\n        if (total <= 11) return 0;\r\n        if (total <= 13) return 1;\r\n        if (total <= 15) return 2;\r\n        if (total <= 17) return 3;\r\n        if (total <= 19) return 4;\r\n        if (total <= 21) return 5;\r\n        if (total <= 23) return 6;\r\n        if (total <= 25) return 7;\r\n        if (total <= 27) return 8;\r\n        return 9;\r\n    }\r\n}\r\n","import Hero  from \"../models/character/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\nimport MockItemService from \"./MockItemService\";\r\nimport HeroData from \"../models/character/HeroData\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport MockSaveService from \"./MockSaveService\";\r\nimport CurrentStatus from \"../models/character/CurrentStats\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        const hero = this.getHeroData(id);\r\n        return MockHeroService.convertToDetailed(hero);\r\n    }\r\n\r\n    private static convertToDetailed(hero: HeroData): Hero {\r\n\r\n        const saveService = new MockSaveService();\r\n        const currentStatus = saveService.getObject<CurrentStatus>(\"heroStatus_\" + hero.id) ?? {\r\n            permanentTraits: hero.baseTraits,\r\n            temporaryTraits: [],\r\n            equippedItems: hero.equippedItems,\r\n            currentHitPoints: hero.baseHitPoints,\r\n            lostSpells: [],\r\n        };\r\n\r\n        const clone = {\r\n            id: hero.id,\r\n            name: hero.name,\r\n            description: hero.description,\r\n            background: hero.background,\r\n            imageUrl: hero.imageUrl,\r\n            tokenUrl: hero.tokenUrl,\r\n            tokenOffset: hero.tokenOffset,\r\n            abilities: hero.abilities,\r\n            alignment: hero.alignment,\r\n            level: hero.level,\r\n            attributes: AttributeHelper.convertSimpleToComplex(hero.attributes),\r\n            currentStatus: currentStatus,\r\n            // TODO: Fix this calculation\r\n            stats: {\r\n                status: 0,\r\n                armour: 10,\r\n                meleeAttackBonus: 0,\r\n                meleeAttackSpeed: 5,\r\n                meleeEffectId: \"Fists\",\r\n                meleeDamageBonus: 0,\r\n                rangedAttackBonus: 0,\r\n                rangedAttackSpeed: 5,\r\n                rangedEffectId: \"Bow\",\r\n                rangedDamageBonus: 0,\r\n                spellAttackBonus: 0,\r\n                spellAttackSpeed: 5,\r\n                spellDamageBonus: 0,\r\n                spells: hero.spells,\r\n                moveSpeed: 3,\r\n                maxHitPoints: hero.baseHitPoints,\r\n                spellResistance: 3,\r\n                damageResistance: 0,\r\n            },\r\n            spells: hero.spells,\r\n            behavior: [],\r\n        } as Hero;\r\n\r\n        return clone;\r\n    }\r\n\r\n    private getHeroData(id: string): HeroData {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroes: Hero[] = [\r\n        MockHeroService.convertToDetailed(Gyvwain),\r\n        MockHeroService.convertToDetailed(Balthazar),\r\n        MockHeroService.convertToDetailed(Gossamer),\r\n        MockHeroService.convertToDetailed(Gargamela),\r\n        MockHeroService.convertToDetailed(Justin),\r\n    ];\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return MockHeroService._heroes;\r\n    }\r\n\r\n    /*\r\n     * Equip an item in one of the equip slots\r\n     * If an item needs to be removed, return the item Id\r\n     */\r\n    equipItem(heroId: string, itemId: string): string | null {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const originalItem = itemService.getItemDetail(itemId);\r\n        if (!originalItem) throw new Error(\"Can't find original item\");\r\n\r\n        // Check if the hero already has an item of this type equipped\r\n        const items = itemService.getItems(heroMatch.currentStatus.equippedItems);\r\n        const itemWithSameType = items.find((item) => item.itemType === originalItem.itemType);\r\n\r\n        // TODO: We need special logic around equipable weapons\r\n\r\n        heroMatch.currentStatus.equippedItems.push(itemId);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n\r\n        if (!itemWithSameType) return null;\r\n\r\n        return itemWithSameType.id;\r\n    }\r\n\r\n    unequipItem(heroId: string, itemId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const item = itemService.getItemDetail(itemId);\r\n        if (!item) throw new Error(\"Can't find original item\");\r\n\r\n        // Remove the item\r\n        heroMatch.currentStatus.equippedItems = heroMatch.currentStatus.equippedItems.filter((i) => i !== item.id);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n    }\r\n}\r\n","import Hero from \"../models/character/Hero\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockHeroService from \"./MockHeroService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockPartyService {\r\n    getPartyStatistics(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static defaultHeroIds = (): string[] => [\r\n        \"gyvwain_the_chivalrous\",\r\n        \"balthazar_the_unblemished\",\r\n        \"gossamer\",\r\n        \"gargomela_the_black\",\r\n    ];\r\n\r\n    private static _heroIds: string[] | undefined = undefined;\r\n\r\n    getParty(): Hero[] {\r\n        const heroService = new MockHeroService();\r\n        const party = this.getPartyIds().map((id) => heroService.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    getPartyIds(): string[] {\r\n        if (MockPartyService._heroIds) {\r\n            return MockPartyService._heroIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const heroIds: string[] = saveService.getObject<string[]>(\"heroIds\") ?? MockPartyService.defaultHeroIds();\r\n\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        return MockPartyService._heroIds;\r\n    }\r\n\r\n    setPartyIds(heroIds: string[]): void {\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroIds\", heroIds);\r\n    }\r\n\r\n    private static defaultInventoryIds = (): string[] => [\"wolf_spear\", \"ceramic_helm\", \"ceramic_armor\"];\r\n\r\n    private static defaultStashIds = (): string[] => [\"hag_teeth\", \"token_of_servitude\"];\r\n\r\n    private static _inventoryItemIds: string[] | undefined = undefined;\r\n    private static _stashItemIds: string[] | undefined = undefined;\r\n\r\n    getInventory(): string[] {\r\n        if (MockPartyService._inventoryItemIds) {\r\n            return MockPartyService._inventoryItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const inventoryIds: string[] = saveService.getObject<string[]>(\"inventoryItemIds\") ?? MockPartyService.defaultInventoryIds();\r\n\r\n        MockPartyService._inventoryItemIds = inventoryIds;\r\n\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"inventoryItemIds\", itemIds);\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory();\r\n        inventoryItems.push(id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory().filter(i => i !== id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._stashItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n\r\n        const stashIds: string[] = saveService.getObject<string[]>(\"stashItemIds\") ?? MockPartyService.defaultStashIds();\r\n\r\n        MockPartyService._stashItemIds = stashIds;\r\n\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"stashItemIds\", itemIds);\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        const items = this.getStash();\r\n        items.push(id);\r\n        this.setStash(items);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        const stashItems = this.getStash().filter(i => i !== id);\r\n        this.setStash(stashItems);\r\n    }\r\n\r\n    public clearCache() {\r\n        MockPartyService._heroIds = undefined;\r\n        MockPartyService._inventoryItemIds = undefined;\r\n        MockPartyService._stashItemIds = undefined;\r\n    }\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"./LinkTo\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        \"-webkit-app-region\": \"drag\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"2vh\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n    headerImg: {\r\n        width: \"7vh\",\r\n        height: \"7vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"5vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\n\r\nconst Header: React.FunctionComponent<HeaderProps> = (props: HeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = React.useState<Hero[] | null>(null); // The map graph data\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockPartyService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <LinkTo key={hero.id} url={`${process.env.PUBLIC_URL}/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </LinkTo>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                </LinkTo>\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import GameState from \"../models/GameState\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static defaultState = (): GameState => {\r\n        return {\r\n            currentMapId: \"town\",\r\n            currentVertextId: \"hut-road\", // \"scupperden-road\"\r\n            currentMapCovers: [],\r\n            seed: Math.random() * Number.MAX_SAFE_INTEGER\r\n        }\r\n    };\r\n\r\n    private static _state: GameState | undefined = undefined;\r\n\r\n    public getState(): GameState {\r\n        if (MockGameStateService._state != null) \r\n            return MockGameStateService._state;\r\n            \r\n        const saveService = new MockSaveService();\r\n        \r\n        const stateJson = localStorage.getItem(saveService.getCurrentSave() + \"_state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService.defaultState();\r\n\r\n        MockGameStateService._state = state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        const saveService = new MockSaveService();\r\n\r\n        MockGameStateService._state = state;\r\n        console.log(\"setState : \" + JSON.stringify(state));\r\n        localStorage.setItem(saveService.getCurrentSave() + \"_state\", JSON.stringify(state));\r\n        saveService.markSlotUpdated();\r\n    }\r\n\r\n    public clearCache() {\r\n        MockGameStateService._state = undefined;\r\n    }\r\n}\r\n","import AttributeList from \"./AttributeList\";\r\nimport CalculatedStats from \"./CalculatedStats\";\r\nimport CharacterBehavior from \"./CharacterBehavior\";\r\nimport CurrentStatus from \"./CurrentStats\";\r\n\r\nexport enum Alignment {\r\n    Lawful = 0,\r\n    Neutral = 1,\r\n    Chaotic = 2,\r\n}\r\n\r\n/**\r\n * Special ongoing status effects on a character\r\n * \r\n * Limit this list for now and add one at a time slowly\r\n * TODO: Sleeping, Petrified, Paralysed (Are these just Stunned with other modifiers?)\r\n */\r\nexport enum StatusFlags {\r\n    None = 0x00,\r\n    Stunned = 0x01,\r\n    Poisoned = 0x04,\r\n    Bleeding = 0x08,\r\n    Terrified = 0x10,\r\n    Charmed = 0x20,\r\n}\r\n\r\nexport enum AbilityFlags {\r\n    None = 0x00,\r\n    Sorcery = 0x01,\r\n    Stealth = 0x02,\r\n    Perception = 0x04,\r\n    PatronBond = 0x08,\r\n    Survival = 0x10,\r\n    Devices = 0x20,\r\n    Acrobatics = 0x40,\r\n}\r\n\r\n// TODO: Split hero into core stats & calculated (view) ?\r\nexport default interface Hero {\r\n    // ID of the hero\r\n    id: string;\r\n\r\n    // Display name of the hero\r\n    name: string;\r\n\r\n    /** Short description of the hero */\r\n    description: string;\r\n\r\n    // Origins of the hero\r\n    background: string;\r\n\r\n    /** Portrait image location */\r\n    imageUrl: string;\r\n\r\n    /** Map token image location */\r\n    tokenUrl: string;\r\n\r\n    /** Offset to display the token at */\r\n    tokenOffset: number[];\r\n\r\n    // Hero attributes\r\n    attributes: AttributeList;\r\n\r\n    // Any special states\r\n    currentStatus: CurrentStatus;\r\n\r\n    stats: CalculatedStats;\r\n\r\n    abilities: AbilityFlags;\r\n\r\n    alignment: Alignment;\r\n\r\n    behavior: CharacterBehavior[];\r\n\r\n    level: number;\r\n\r\n    spells: string[];\r\n}\r\n\r\n","import Trait from \"./character/Trait\";\r\n\r\nexport enum ItemType {\r\n    Usable = 1,\r\n    Quest = 2,\r\n    WearableHead = 10,\r\n    WearableBody = 11,\r\n    WearableArms = 12,\r\n    WearableFeet = 13,\r\n    WeaponMelee1h = 20,\r\n    WeaponMelee2h = 21,\r\n    WeaponRanged1h = 22,\r\n    WeaponRanged2h = 23,\r\n    Shield = 24,\r\n}\r\n\r\nexport default interface Item {\r\n    /** ID of the item */\r\n    id: string;\r\n\r\n    /** Name of the item */\r\n    name: string;\r\n\r\n    /** Text description for the item */\r\n    description: string;\r\n\r\n    /** URL of the image to display for the item */\r\n    imageUrl: string;\r\n\r\n    /** The type of item */\r\n    itemType: ItemType;\r\n\r\n    /** For weapons, the attack effect table to use */\r\n    effectTable?: string;\r\n\r\n    /** Item traits */\r\n    traits: Trait[];\r\n}","\r\nexport enum TraitType {\r\n    Uncategorised = 0,\r\n    Mental = 1,\r\n    Mystical = 2,\r\n    Physical = 3,\r\n    Item = 4,\r\n    // MentalPhobia = 100,\r\n    // MysticalCurse = 200,\r\n};\r\n\r\nexport enum ModifierType {\r\n    None = 0,\r\n    Strength = 10,\r\n    Dexterity = 11,\r\n    Constitution = 12,\r\n    Intelligence = 13,\r\n    Wisdom = 14,\r\n    Charisma = 15,\r\n    Luck = 16,\r\n    HitPoints = 20,\r\n    Armor = 22,\r\n    SpellResistance = 23,\r\n    MoveSpeed = 24,\r\n    MeleeAttackSpeed = 25,\r\n    MeleeAttack = 26,\r\n    MeleeEffect = 27,\r\n    MeleeDamage = 28,\r\n    RangedAttackSpeed = 29,\r\n    RangedAttack = 30,\r\n    RangedEffect = 31,\r\n    RangedDamage = 32,\r\n    SpellAttackSpeed = 33,\r\n    SpellAttack = 34,\r\n    SpellDamage = 35,\r\n    DamageResistance = 33,\r\n    MeleeChanceForParalysis = 50,\r\n    MeleeChanceForPoisoned = 51,\r\n    MeleeChanceForBleeding = 52,\r\n    MeleeChanceForTerrified = 53,\r\n    MeleeChanceForCharmed = 54,\r\n    RangedChanceForParalysis = 60,\r\n    RangedChanceForPoisoned = 61,\r\n    RangedChanceForBleeding = 62,\r\n    RangedChanceForTerrified = 63,\r\n    RangedChanceForCharmed = 64,\r\n    AddAbility = 100,\r\n    RemoveAbility = 101, // Items can prevent abilities being used (e.g. Armor prevents Sorcery)\r\n    AbilitySorcery = 110,\r\n    AbilityStealth = 111,\r\n    AbilityPerception = 112,\r\n    AbilityPatronBond = 113,\r\n    AbilitySurvival = 114,\r\n    AbilityDevices = 115,\r\n    AbilityAcrobatics = 116,\r\n    /** Add a status effect to the character */\r\n    Status = 200,\r\n    /** Character is immune to this type of status effects */\r\n    StatusImmunity = 201,\r\n};\r\n\r\nexport interface TraitEffect {\r\n\r\n    modifierType: ModifierType;\r\n\r\n    modifierValue: string;\r\n}\r\n\r\nexport default interface Trait {\r\n\r\n    // ID for the trait\r\n    id: string;\r\n\r\n    // A name for the trait\r\n    name: string;\r\n\r\n    // The type of trait\r\n    type: TraitType;\r\n\r\n    // What does it do\r\n    behaviour: TraitEffect[];\r\n}\r\n","import Leaflet from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            coverUrls: json.coverUrls,\r\n            pathColor: json.pathColor,\r\n            vertices: json.vertices.map((v: any) => {\r\n                return {\r\n                    id: v.id,\r\n                    position: Leaflet.latLng(v.position[0], v.position[1]),\r\n                    clickRadius: v.clickRadius,\r\n                    encounterId: v.encounterId,\r\n                    marker: v.marker,\r\n                    exitId: v.exitId,\r\n                    coverIds: v.coverIds,\r\n                } as MapVertex;\r\n            }),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\nimport CustomMarker from \"./CustomMarker\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): Node<NodeData> | null => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n    marker?: CustomMarker;\r\n    /** The cover layer to obscure this vertex */\r\n    coverIds?: number[];\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n                marker: item.marker,\r\n                coverIds: item.coverIds,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\nimport TheInterceptContent from \"./encounters/TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/chasm.ink.json\";\r\nimport homeContent from \"./encounters/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/nine-bells.ink.json\";\r\nimport brawlContent from \"./encounters/brawl.ink.json\";\r\nimport dartTrapContent from \"./encounters/dart-trap.ink.json\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        switch (id) {\r\n            case \"hoard\":\r\n                this.currentTitle = \"Treasure !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                //paragraphText: \"You stumble tired and exhaused into a room stuffed to the ceiling with well-crafted wooden coffers.\",\r\n                break;\r\n            case \"wet-room\":\r\n                this.currentTitle = \"The Intercept !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"common-room\":\r\n                this.currentTitle = \"Tracking the Yellow-Bellied Crook\";\r\n                this.currentStory = new Story(commonRoomContent);\r\n                break;\r\n            case \"chasm\":\r\n                this.currentTitle = \"Across the Chasm\";\r\n                this.currentStory = new Story(chasmContent);\r\n                break;\r\n            case \"warrens\":\r\n                this.currentTitle = \"Rats !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"home\":\r\n                this.currentTitle = \"Scupperden\";\r\n                this.currentStory = new Story(homeContent);\r\n                break;\r\n            case \"nine-bells\":\r\n                this.currentTitle = \"The Cathedral\";\r\n                this.currentStory = new Story(nineBellsContent);\r\n                break;\r\n            case \"brawl\":\r\n                this.currentTitle = \"Thugs!\";\r\n                this.currentStory = new Story(brawlContent);\r\n                break;\r\n            case \"dart-trap\":\r\n                this.currentTitle = \"Trap !\";\r\n                this.currentStory = new Story(dartTrapContent);\r\n                break;\r\n            default:\r\n                return MockStoryEncounterService.createEmptyStory();\r\n        }\r\n        this.currentId = id;\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value ?? undefined,\r\n                    detailedEncounter: detailedEncounter?.value ?? undefined,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map(\r\n            (c: Choice) => {\r\n                return {\r\n                    index: c.index,\r\n                    text: c.text,\r\n                } as InkStoryChoice\r\n            }\r\n        );\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    party: {\r\n        padding: \"30px\",\r\n        position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroSelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\n/*\r\n* The selection of heroes one the menu bar\r\n*/\r\nconst HeroSelector: React.FunctionComponent<HeroSelectorProps> = (props: HeroSelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    let [heroes, setHeroes] = React.useState<Hero[] | null>(null); // The map graph data\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <Grid container>{renderParty()}</Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nconst PartySelection: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [heroIds, setHeroIds] = React.useState<string[]>([]);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = () => heroIds.length === 4; \r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockPartyService();\r\n        service.setPartyIds(heroIds);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} multiSelect={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={changeParty} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default PartySelection;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\n\r\nconst HeroDismiss: React.FunctionComponent = (): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [heroId, setHeroId] = React.useState(\"\");\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        if (ids.length > 0)\r\n            setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = () => heroId.length > 0; \r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockHeroService();\r\n        \r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={dismissHero} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Dismiss\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default HeroDismiss;\r\n","import { AbilityFlags, Alignment } from \"../models/character/Hero\";\r\nimport { ItemType } from \"../models/Item\";\r\nimport { ModifierType } from \"../models/character/Trait\";\r\nimport Resources from \"../resources.en.json\";\r\n\r\nexport default class StringConverters {\r\n    private static resourceMap: any = null;\r\n\r\n    static getResources(): any {\r\n        if (!StringConverters.resourceMap) {\r\n            // TODO: This is silly\r\n            StringConverters.resourceMap = JSON.parse(JSON.stringify(Resources));\r\n        }\r\n\r\n        return StringConverters.resourceMap;\r\n    }\r\n\r\n    static alignmentToString = (alignment: Alignment): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"Alignment_\" + Alignment[alignment];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static modifierToString = (modifierType: ModifierType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ModifierType_\" + ModifierType[modifierType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static itemTypeText = (itemType: ItemType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ItemType_\" + ItemType[itemType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static abilitiesToString = (abilities: AbilityFlags): string => {\r\n        if (abilities === AbilityFlags.None) return \"None\";\r\n\r\n        const output: string[] = [];\r\n\r\n        if (abilities & AbilityFlags.Acrobatics) output.push(\"Acrobatics\");\r\n        if (abilities & AbilityFlags.Devices) output.push(\"Disable/Modify Devices\");\r\n        if (abilities & AbilityFlags.PatronBond) output.push(\"Patron Bond\");\r\n        if (abilities & AbilityFlags.Perception) output.push(\"Perception\");\r\n        if (abilities & AbilityFlags.Sorcery) output.push(\"Sorcery\");\r\n        if (abilities & AbilityFlags.Stealth) output.push(\"Stealth\");\r\n        if (abilities & AbilityFlags.Survival) output.push(\"Survival\");\r\n\r\n        return output.join(\", \");\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport Item from \"../models/Item\";\r\nimport Trait, { TraitEffect } from \"../models/character/Trait\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        padding: \"5px\",\r\n    },\r\n    description: {\r\n        padding: \"10px\",\r\n        margin: \"10px 0\",\r\n        backgroundColor: \"#999\",\r\n    },\r\n    itemType: {\r\n        padding: \"500px 10px 0 10px\",\r\n        margin: \"100px 0 0 0 \",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n    traits: {\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n});\r\n\r\ntype ItemTooltipContentProps = {\r\n    item: Item | undefined;\r\n};\r\n\r\nconst ItemTooltipContent: React.FunctionComponent<ItemTooltipContentProps> = (props: ItemTooltipContentProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { item } = props;\r\n\r\n    const renderTraits = (traits: Trait[]): JSX.Element => {\r\n        let traitJsx: JSX.Element[] = [];\r\n        for (let i = 0; i < traits.length; i++) {\r\n            const newTraits = renderBehaviors(traits[i].behaviour);\r\n            traitJsx = traitJsx.concat(newTraits);\r\n        }\r\n        return <div>{traitJsx}</div>;\r\n    };\r\n\r\n    const renderBehaviors = (effects: TraitEffect[]): JSX.Element[] => {\r\n        return effects.map((e) => (\r\n            <p>\r\n                {e.modifierValue} {StringConverters.modifierToString(e.modifierType)}\r\n            </p>\r\n        ));\r\n    };\r\n\r\n    if (!item) return <p>\"None\"</p>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography className={classes.title} color=\"inherit\">\r\n                {item.name}\r\n            </Typography>\r\n            <p className={classes.description}>{item.description}</p>\r\n            <Typography className={classes.itemType}>{StringConverters.itemTypeText(item.itemType)}</Typography>\r\n            <Typography className={classes.traits} align=\"right\">\r\n                {renderTraits(item.traits)}\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemTooltipContent;\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\nimport Item from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: React.FunctionComponent<InventorySelectorProps> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, items, multiSelect } = props;\r\n\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        const selectedIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedIds.push(items[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) {\r\n            onSelectionChanged(selectedIds);\r\n        }\r\n    };\r\n\r\n    const renderInventory = () => {\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={item.id}>\r\n                    <Tooltip title={<ItemTooltipContent item={item} />} key={index} arrow>\r\n                        <img src={item.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt={item.name} />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map((i) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={index.toString()}>\r\n                    <Tooltip title={\"Nothing\"} key={index}>\r\n                        <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InventorySelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Item from \"../models/Item\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    stashImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\nconst Stash: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [stashSelectedIds, setStashSelectedIds] = React.useState<string[]>([]);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState<string[]>([]);\r\n\r\n    let [stashItems, setStashItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n\r\n    const maxItems = 8;\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const stashSelectionChanged = (ids: string[]) => setStashSelectedIds(ids);\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);;\r\n\r\n    const isStashSelected = (): boolean => stashSelectedIds.length > 0; \r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n\r\n    const willStashBeTooBig = (): boolean => (stashItems ? stashItems.length + inventorySelectedIds.length > maxItems : false);\r\n    const willInventoryBeTooBig = (): boolean => (inventoryItems ? inventoryItems.length + stashSelectedIds.length > maxItems : false);\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isStashSelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < stashSelectedIds.length; i++) {\r\n            service.removeStashItem(stashSelectedIds[i]);\r\n            service.addInventoryItem(stashSelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setStashSelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n\r\n        // TODO: How to trigger a reload?\r\n    }\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < inventorySelectedIds.length; i++) {\r\n            service.removeInventoryItem(inventorySelectedIds[i]);\r\n            service.addStashItem(inventorySelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setInventorySelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    if (!stashItems || !inventoryItems)\r\n        return null;\r\n\r\n    const stashToolTip = () => {\r\n        if (willInventoryBeTooBig())\r\n            return \"Too many items in inventory\";\r\n\r\n        return isStashSelected() ? \"Take Item from the Stash\" : \"Please select a stash item\";\r\n    }\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in stash\";\r\n\r\n        return isInventorySelected() ? \"Put Item in the Stash\" : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src=\"./images/stash.png\" alt=\"stash\" className={classes.stashImg} />\r\n                <InventorySelector items={stashItems} multiSelect={true} onSelectionChanged={stashSelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={stashToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isStashSelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willStashBeTooBig() || !isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector items={inventoryItems} multiSelect={true} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Stash;\r\n","import React from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\nimport PartySelection from \"./PartySelection\";\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\nimport StoryEncounterFinish from \"../models/InkStoryFinish\";\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        overflow: \"visible\",\r\n    },\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n        userSelect: \"none\",\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n    portrait: {\r\n        borderRadius: \"50%\",\r\n        width: \"200px\",\r\n        position: \"absolute\",\r\n        top: \"-60px\",\r\n        left: \"-60px\",\r\n        border: \"8px solid white\",\r\n    },\r\n    placeholder: {\r\n        float: \"left\",\r\n        width: \"130px\",\r\n        height: \"140px\",\r\n    },\r\n    paragraph: {\r\n        display: \"inline-block\",\r\n        width: \"100%\",\r\n    }\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveToNode?: string, startEncounterId?: string) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nconst EncounterDialog: React.FunctionComponent<EncounterDialogProps> = (props: EncounterDialogProps) => {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = React.useState(new MockEncounterService());\r\n    let [paragraph, setParagraph] = React.useState(\"\");\r\n    let [title, setTitle] = React.useState(\"\");\r\n    let [choices, setChoices] = React.useState<InkStoryChoice[]>([]);\r\n    let [storyStarted, setStoryStarted] = React.useState(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo?: string, encounterDetailId?: string) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo, encounterDetailId);\r\n    };\r\n\r\n    const handleChoice = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            const encounterFinish = encounterService.continue();\r\n            processFinish(encounterFinish.finishData);\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraph(encounter.paragraphText);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            processFinish(encounter.finishData);\r\n        }\r\n    };\r\n\r\n    const processFinish = (finish?: StoryEncounterFinish): void => {\r\n        // Finished -> Check variables\r\n        if (!finish || (!finish.moveTo && !finish.detailedEncounter)) {\r\n            handleClose();\r\n        } else {\r\n            handleCloseWithValue(finish.moveTo, finish.detailedEncounter);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n        if (encChoices.length === 0) {\r\n            return <Button onClick={handleContinue}>Continue</Button>;\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    const renderParagraph = (text: string) => {\r\n\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n        }\r\n\r\n        return (\r\n            <div className={classes.paragraph}>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelection /> : null}\r\n                {isHeroSelect ? <HeroSelector /> : null}\r\n                {isHeroDismiss ? <HeroDismiss /> : null}\r\n                {isStash ? <Stash /> : null}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                classes={{\r\n                    paper: classes.paper,\r\n                }}\r\n                className={classes.dialog}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-dialog-title\"\r\n                open={open}\r\n            >\r\n                <DialogContent className={classes.content}>\r\n                    <img src=\"./images/knight.jpg\" className={classes.portrait} alt=\"portrait\" />\r\n                    <div className={classes.placeholder}></div>\r\n                    {/* <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" /> */}\r\n                    <h1>{title}</h1>\r\n                    {renderParagraph(paragraph)}\r\n                </DialogContent>\r\n                <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EncounterDialog;\r\n","import React from \"react\";\r\n\r\nimport Leaflet from \"leaflet\";\r\nimport { Marker, Tooltip } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\n\r\nimport { Node } from \"ngraph.graph\";\r\nimport { NodeData } from \"../../models/MapGraph\";\r\n\r\nconst useStyles = makeStyles({\r\n    tooltip: {\r\n        padding: \"3px 8px 3px 3px\",\r\n        height: \"32px\",\r\n        display: \"inline-flex\",\r\n        fontSize: \"0.8125rem\",\r\n        // //transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        alignItems: \"center\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"',\r\n        whiteSpace: \"nowrap\",\r\n        borderRadius: \"10px\",\r\n        verticalAlign: \"middle\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        color: \"#616161\",\r\n        marginLeft: \"3px\",\r\n        marginRight: \"5px\",\r\n        width: \"1em\",\r\n        height: \"1em\",\r\n        display: \"inline-block\",\r\n        fontSize: \"1.5rem\",\r\n        //transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        flexShrink: 0,\r\n        userSelect: \"none\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype VertexMarkerProps = {\r\n    vertex: Node<NodeData>;\r\n    onHover: (id: string) => void;\r\n    onHoverEnd: (id: string) => void;\r\n    onClick: (id: string) => void;\r\n};\r\n\r\nconst VertexMarker: React.FunctionComponent<VertexMarkerProps> = (props: VertexMarkerProps) => {\r\n\r\n    const { vertex, onHover, onHoverEnd, onClick } = props;\r\n    const vertextId = vertex.id.toString();\r\n\r\n    const classes = useStyles();\r\n\r\n    const iconConversionX = 1.4;\r\n    const iconConversionY = 1.5;\r\n\r\n    const renderTooltipIcon = () => {\r\n        if (vertex.data.exitId) \r\n            return <ExitToAppIcon className={classes.icon} />;\r\n\r\n        // Render icons for special encounters\r\n        switch(vertex.data.encounterId) {\r\n            case \"home\":\r\n                return <HomeIcon className={classes.icon} />;\r\n            default:\r\n                return <GpsFixedIcon className={classes.icon} />;\r\n        }\r\n    }\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: vertex.data.marker ? `/images/markers/${vertex.data.marker.image}.png` : \"images/blank.svg\",\r\n        iconSize: vertex.data.marker\r\n            ? [vertex.data.marker.dimensions[0] * iconConversionX, vertex.data.marker.dimensions[1] * iconConversionY]\r\n            : [50, 50],\r\n        iconAnchor: vertex.data.marker\r\n            ? [vertex.data.marker.anchor[0] * iconConversionX, vertex.data.marker.anchor[1] * iconConversionY]\r\n            : [25, 25],\r\n        className: vertex.data.marker ? \"vertex-icon\" : vertex.data.exitId ? \"exit-icon\" : \"bullseye-icon\",\r\n    });\r\n\r\n    // Note: Leaflet tooltips breaks the onclick detection on the map object\r\n    return (\r\n        <Marker\r\n            key={vertextId}\r\n            position={vertex.data.position}\r\n            icon={icon}\r\n            onclick={() => onClick(vertextId)}\r\n            onmouseover={() => onHover(vertextId)}\r\n            onmouseout={() => onHoverEnd(vertextId)}\r\n        >\r\n            <Tooltip className={classes.tooltip}>\r\n                {renderTooltipIcon()}\r\n                <span>{vertex.id.toString()}</span>\r\n            </Tooltip>\r\n        </Marker>\r\n    );\r\n};\r\n\r\nexport default VertexMarker;\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n  length = (): number => this._store.length;\r\n}\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        // ES: Ignore slides where destination is same as the source\r\n        // ES: I'm not sure why this happens when any state is set on the encounter page\r\n        // const slideTo = latLng(this._slideToLatLng)\r\n        // if (slideTo.lat === this.getLatLng().lat && slideTo.lng === this.getLatLng().lng)\r\n        //     return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import { createPortal } from \"react-dom\";\r\nimport Drift_Marker from \"./Drift_Marker\";\r\nimport { DivIcon, LatLngExpression } from \"leaflet\";\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from \"react-leaflet\";\r\n\r\ntype LeafletElement = Drift_Marker;\r\n\r\ntype DriftMarker2Props = {\r\n    draggable?: boolean;\r\n    opacity?: number;\r\n    position: LatLngExpression;\r\n    duration: number;\r\n    keepAtCenter?: boolean;\r\n    zIndexOffset?: number;\r\n    onClick?: (name: DriftMarker2) => void;\r\n    onMoveEnd?: (name: DriftMarker2) => void;\r\n    onMouseOver?: (name: DriftMarker2) => void;\r\n    onMouseOut?: (name: DriftMarker2) => void;\r\n} & MapLayerProps;\r\n\r\n/*\r\n * A marker combining the drift marker and allowing react components as children\r\n * Modified from CustomMarker & here : https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n */\r\nclass DriftMarker2 extends MapLayer<DriftMarker2Props, LeafletElement> {\r\n    // private onMoveEndCallback?: (name: DriftMarker2) => void;\r\n    // private onClickCallback?: (name: DriftMarker2) => void;\r\n    // private onHover?: (name: DriftMarker2) => void;\r\n    // private onHoverEnd?: (name: DriftMarker2) => void;\r\n\r\n    leafletElement: any;\r\n\r\n    createLeafletElement(props: DriftMarker2Props): any {\r\n        const { position, ...rest } = props;\r\n\r\n        // // when not providing className, the element's background is a white square\r\n        // // when not providing iconSize, the element will be 12x12 pixels\r\n        const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n        const el = new Drift_Marker(position, { icon: icon, ...rest }) as any;\r\n\r\n        // this.onMoveEndCallback = props.onMoveEnd;\r\n        // this.onClickCallback = props.onClick;\r\n        // el.onHover = props.onHover;\r\n        // el.onHoverEnd = props.onHoverEnd;\r\n        // el.on(\"moveend\", this.moveEnd);\r\n        // el.on(\"click\", this.clicked);\r\n        // el.on(\"moveend\", () => {\r\n        //     if (props.onMoveEnd) this.moveEnd(props.onMoveEnd);\r\n        // });\r\n        // el.on(\"click\", () => {\r\n        //     if (props.onClick) this.moveEnd(props.onClick);\r\n        // });\r\n        // el.on(\"mouseover\", () => {\r\n        //     debugger;\r\n        //     if (this.onHover) {\r\n        //         this.onHover(this);\r\n        //     }\r\n        // });\r\n        // el.on(\"mouseout\", () => {\r\n        //     if (this.onHoverEnd) {\r\n        //         this.onHoverEnd(this);\r\n        //     }\r\n        // });\r\n        this.contextValue = { ...props.leaflet, popupContainer: el };\r\n        return el;\r\n    }\r\n\r\n    // moveEnd(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onMoveEndCallback) {\r\n    //     //     this.onMoveEndCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    // clicked(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onClickCallback) {\r\n    //     //     this.onClickCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (super.componentWillMount) {\r\n            super.componentWillMount();\r\n        }\r\n        this.leafletElement = this.createLeafletElement(this.props);\r\n        this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n    }\r\n\r\n    // Turning this on stops the moveend update\r\n    // componentDidUpdate(fromProps: any) {\r\n    //     this.updateLeafletElement(fromProps, this.props);\r\n    // }\r\n\r\n    updateLeafletElement(fromProps: DriftMarker2Props, toProps: DriftMarker2Props) {\r\n        if (toProps.position !== fromProps.position && typeof toProps.duration == \"number\") {\r\n            this.leafletElement.slideTo(toProps.position, {\r\n                duration: toProps.duration,\r\n                keepAtCenter: toProps.keepAtCenter,\r\n            });\r\n        }\r\n        if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n            this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\r\n        }\r\n        if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n            this.leafletElement.setOpacity(toProps.opacity);\r\n        }\r\n        if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n            if (toProps.draggable === true) {\r\n                this.leafletElement.dragging.enable();\r\n            } else {\r\n                this.leafletElement.dragging.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const container = this.leafletElement._icon;\r\n\r\n        if (!container) {\r\n            return null;\r\n        }\r\n\r\n        const portal = createPortal(children, container);\r\n\r\n        return children == null || this.contextValue == null ? null : <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>;\r\n    }\r\n}\r\n\r\nexport default withLeaflet<DriftMarker2Props>(DriftMarker2);\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { LatLng } from \"leaflet\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\n\r\ntype PartyMarkerProps = {\r\n    name: string;\r\n    id: string;\r\n    imageUrl: string;\r\n    position: LatLng;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (id: string) => void;\r\n    onMoveEnd: (id: string) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst PartyMarker: React.FunctionComponent<PartyMarkerProps> = (props: PartyMarkerProps) => {\r\n    const { id, imageUrl, isActive, position, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={position}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(id)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(id);\r\n            }}\r\n        >\r\n            <div>\r\n                <img src={imageUrl} className={isActive ? classes.iconActive : classes.icon} alt=\"party\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default PartyMarker;\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Polyline } from \"react-leaflet\";\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\nimport VertexMarker from \"./markers/VertexMarker\";\r\n\r\n// Pathfinding imports\r\nimport npath from \"ngraph.path\";\r\nimport { Node } from \"ngraph.graph\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport Queue from \"../models/Queue\";\r\nimport { MapGraph, NodeData } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport PartyMarker from \"./markers/PartyMarker\";\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    graph: MapGraph; // The map graph data\r\n    mapUrl: string;\r\n    coverUrls: string[];\r\n    pathColor: string; // The default path colour is brown\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMap: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState, graph, mapUrl, pathColor, onNewMap } = props;\r\n\r\n    const [pos, setPos] = React.useState<LatLng | undefined>(undefined); // The current (target) position of the player marker\r\n    const [path, setPath] = React.useState<LatLng[]>([]); // The path to the hovered vertex\r\n    const [vertexQueue] = React.useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // TODO: Derived state anti-pattern\r\n    const [gameState, setGameState] = React.useState<GameState>(startState);\r\n    const [initialNode, setInitialNode] = React.useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    const [visibleCovers, setVisibleCovers] = React.useState<number[]>(startState.currentMapCovers);\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (name: string) => {\r\n        console.log(`Move ended : ${name} with ${vertexQueue.length()} queued`);\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update visibile covers list (that hide the map with a fog of war)\r\n            if (targetVertex.data.coverIds) {\r\n                for (let i = 0; i < targetVertex.data.coverIds.length; i++) {\r\n                    const thisCoverIds = targetVertex.data.coverIds[i];\r\n                    if (visibleCovers.indexOf(thisCoverIds) < 0) {\r\n                        visibleCovers.push(thisCoverIds);\r\n                        setVisibleCovers(visibleCovers);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update user state\r\n            gameState.currentVertextId = targetVertex.id.toString();\r\n            setGameState(gameState);\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState: GameState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                        currentEncounterId: undefined,\r\n                        currentMapCovers: [],\r\n                        seed: startState.seed,\r\n                    };\r\n\r\n                    vertexQueue.clear();\r\n                    onNewMap(newState);\r\n                }\r\n            } else if (vertexQueue.length() <= 0) {\r\n                // Save the movement if its the last move\r\n                const stateService = new MockGameStateService();\r\n                const newState = stateService.getState();\r\n                newState.currentVertextId = targetVertex.id.toString();\r\n                newState.currentMapCovers = visibleCovers;\r\n                console.log(visibleCovers);\r\n                stateService.setState(newState);\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n    };\r\n\r\n    const onClick = (vertexId: string) => {\r\n        console.log(`Clicked on vertex ${vertexId}`);\r\n\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        if (path.length <= 1) {\r\n            console.log(`No route found to ${vertexId}`);\r\n            return;\r\n        }\r\n\r\n        path.pop(); // Remove the current/start node\r\n\r\n        vertexQueue.clear();\r\n        let nextVertex = path.pop();\r\n        while (nextVertex) {\r\n            vertexQueue.push(nextVertex);\r\n            // Stop if a vertex with an an encounter is hit\r\n            if (nextVertex.data.encounterId) {\r\n                break;\r\n            }\r\n            nextVertex = path.pop();\r\n        }\r\n\r\n        handleMoveEnd(\"party\"); // Trigger the move to the next vertex\r\n    };\r\n\r\n    // On hover, show the path to the marker\r\n    const onHover = (vertexId: string) => {\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        let pathVertexes = path.map((p) => p.data.position);\r\n        setPath(pathVertexes);\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(\"party\");\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (encounterDetailId) {\r\n            console.log(\"Start detailed encounter : \" + encounterDetailId);\r\n            const newState: GameState = {\r\n                currentMapId: startState.currentMapId,\r\n                currentVertextId: startState.currentVertextId,\r\n                currentEncounterId: encounterDetailId,\r\n                currentMapCovers: [],\r\n                seed: startState.seed,\r\n            };\r\n\r\n            vertexQueue.clear();\r\n            onNewMap(newState);\r\n        }\r\n\r\n        if (moveTo) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (initialNode) {\r\n            console.log(\"Initial node : \" + gameState.currentMapId + \", \" + gameState.currentVertextId);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(graph, gameState.currentVertextId);\r\n            setInitialNode(false);\r\n        }\r\n    }, [initialNode, gameState.currentMapId, gameState.currentVertextId, moveToVertexId, graph]);\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n\r\n    if (!pos) return null;\r\n\r\n    const isMarkerVisible = (node: NodeData) => {\r\n        // if (node.coverIds === undefined) \r\n        //     return true;\r\n        // const intersect = node.coverIds.filter((value) => visibleCovers.includes(value));\r\n        // return intersect.length > 0;\r\n        return true;\r\n    };\r\n\r\n    const renderMarkers = (graph: MapGraph) =>\r\n        graph\r\n            .getVertices()\r\n            .map((v) =>\r\n                isMarkerVisible(v.data) ? (\r\n                    <VertexMarker key={v.id} vertex={v} onHover={onHover} onHoverEnd={() => setPath([])} onClick={onClick} />\r\n                ) : null\r\n            );\r\n\r\n    const renderCovers = (coverUrls: string[]): JSX.Element[] => {\r\n        const covers: JSX.Element[] = [];\r\n        for (let i = 0; i < coverUrls.length; i++) {\r\n            if (visibleCovers.indexOf(i) < 0) covers.push(<ImageOverlay url={coverUrls[i]} bounds={bounds} />);\r\n        }\r\n        return covers;\r\n    };\r\n\r\n    return (\r\n        <Map\r\n            crs={CRS.Simple}\r\n            zoom={-1}\r\n            minZoom={-1}\r\n            maxZoom={-1}\r\n            bounds={bounds}\r\n            maxBounds={bounds}\r\n            scrollWheelZoom={false}\r\n            onClick={handleClick}\r\n            zoomControl={false}\r\n        >\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n            <ImageOverlay url={mapUrl} bounds={bounds} />\r\n            {renderCovers(props.coverUrls)}\r\n            {renderMarkers(graph)}\r\n            <Polyline positions={path} color={pathColor} dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n            <PartyMarker name=\"party\" id=\"party\" imageUrl=\"images/knight.jpg\" position={pos} onMoveEnd={handleMoveEnd} isActive={true} />\r\n        </Map>\r\n    );\r\n};\r\n\r\nexport default OverheadMap;\r\n","import React from \"react\";\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nconst LoadingProgress: React.FunctionComponent = () => {\r\n    const useStyles = makeStyles(() => ({\r\n        root: {\r\n            textAlign: \"center\",\r\n            padding: \"40vh 0 0 0\",\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingProgress;\r\n","import React from 'react';\r\n\r\n// Models\r\nimport GameState from '../models/GameState';\r\nimport { MapGraph } from '../models/MapGraph';\r\n\r\n// Services\r\nimport MockMapService from \"../services/MockMapService\";\r\nimport GraphBuilder from \"../services/GraphBuilder\";\r\nimport OverheadMap from './OverheadMap';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMapLoader: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n\r\n    const { startState } = props;\r\n\r\n    const [graph, setGraph] = React.useState<MapGraph | undefined>(undefined); // The map graph data\r\n    const [pathColor, setPathColor] = React.useState<string | undefined>(undefined);\r\n\r\n    const [mapUrl, setMapUrl] = React.useState<string | undefined>(undefined);\r\n    const [coverUrls, setCoverUrls] = React.useState<string[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const service = new MockMapService();\r\n\r\n            const data = service.getMap(startState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\r\n                `Loaded map : ${startState.currentMapId}, ${startState.currentVertextId}. ${data?.vertices.length} vertices. Path Color ${\r\n                    data.pathColor ?? \"None\"\r\n                }`\r\n            );\r\n\r\n            setMapUrl(data.imageUrl);\r\n            setCoverUrls(data.coverUrls);\r\n            setPathColor(data.pathColor ?? \"#5E4E00\"); // The default path colour is brown\r\n\r\n            const mapGraph = GraphBuilder.Build(data);\r\n            setGraph(mapGraph);\r\n        };\r\n\r\n        if (!graph) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n\r\n        props.onNewMap(newState);\r\n\r\n        // Force a reload of the map\r\n        // Need to set the graph last, or the load can happen after the useEffect\r\n        setMapUrl(undefined);\r\n        setPathColor(undefined);\r\n        setGraph(undefined);\r\n        setCoverUrls([]);\r\n    };\r\n\r\n    if (!mapUrl || !graph || !pathColor) return <LoadingProgress />;\r\n\r\n    return <OverheadMap startState={startState} graph={graph} mapUrl={mapUrl} coverUrls={coverUrls} pathColor={pathColor} onNewMap={onNewMap} />;\r\n};\r\n\r\nexport default OverheadMapLoader;\r\n","import EncounterDetail from \"../models/EncounterDetail\";\r\n\r\nimport TavernMap from \"./encounter-maps/tavern.json\";\r\n\r\nexport default class MockDetailedEncounterService {\r\n    public getEncounterDetail(id: string): EncounterDetail | null {\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"tavern\":\r\n            default:\r\n                json = TavernMap;\r\n                break;\r\n        }\r\n\r\n        return json\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype HeroMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst HeroMarker: React.FunctionComponent<HeroMarkerProps> = (props: HeroMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-32px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.currentStatus.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={hero.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={hero.details.name} />\r\n            </div>\r\n            <div className={classes.root}></div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default HeroMarker;\r\n","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\n\r\nexport default class Transforms {\r\n    // Conversion functions from isometric to cardinal co-ordinates\r\n    public static isoX = (carX: number, carY: number): number => carX + carY;\r\n    public static isoY = (carX: number, carY: number): number => carY - carX;\r\n\r\n    /*\r\n     * Convert cardinal co-ordinates to isometric co-ordinates\r\n     */\r\n    public static cardinalToIsometric = (car: LatLngTuple): LatLng =>\r\n        latLng(Transforms.isoY(car[0], car[1]), Transforms.isoX(car[0], car[1]));\r\n\r\n    public static cardinalToIsometric2 = (car: LatLng): LatLng =>\r\n        latLng(Transforms.isoY(car.lat, car.lng), Transforms.isoX(car.lat, car.lng));\r\n\r\n    public static carX = (isoX: number, isoY: number): number => (isoX + isoY) * 0.5;\r\n    public static carY = (isoX: number, isoY: number): number => (isoY - isoX) * 0.5;\r\n\r\n    /*\r\n     * Convert isometric co-ordinates to cardinal co-ordinates\r\n     */\r\n    public static isometricToCardinal = (iso: LatLng): LatLng =>\r\n        latLng(Transforms.carY(iso.lat, iso.lng), Transforms.carX(iso.lat, iso.lng));\r\n\r\n    public static offset = (iso: LatLng, offset: LatLngTuple): LatLng => latLng(iso.lat + offset[0], iso.lng + offset[1]);\r\n    public static scale = (iso: LatLng, scale: LatLngTuple): LatLng => latLng(iso.lat * scale[0], iso.lng * scale[1]);\r\n}","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\nimport Transforms from \"./Transforms\";\r\nimport EncounterDetail, { GridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { AStarFinder } from \"astar-typescript\";\r\nimport Hero from \"../models/character/Hero\";\r\n\r\nexport default class GridHelpers {\r\n    // Convert a grid co-ordinate to a display co-ordinate by converting to isometric, scaling & offsetting\r\n    public static gridToDisplayTuple = (car: LatLngTuple, encounter: EncounterDetail): LatLng =>\r\n        Transforms.offset(Transforms.scale(Transforms.cardinalToIsometric(car), encounter.gridScale), encounter.gridOffset);\r\n\r\n    public static gridToDisplayCenterTuple = (car: LatLngTuple, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayTuple([car[0] + 0.5, car[1] + 0.5], encounter);\r\n\r\n    public static gridToDisplay = (car: LatLng, encounter: EncounterDetail): LatLng =>\r\n        GridHelpers.gridToDisplayTuple([car.lat, car.lng], encounter);\r\n\r\n    public static gridToDisplayCenter = (car: LatLng, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayCenterTuple([car.lat, car.lng], encounter);\r\n\r\n    // And the reverse transforms\r\n    public static reverseOffset = (coords: LatLng, gridOffset: LatLngTuple) => Transforms.offset(coords, [-gridOffset[0], -gridOffset[1]]);\r\n\r\n    public static reverseScale = (coords: LatLng, gridScale: LatLngTuple) =>\r\n        Transforms.scale(coords, [1.0 / gridScale[0], 1.0 / gridScale[1]]);\r\n\r\n    public static displayToGrid = (iso: LatLng, encounter: EncounterDetail): [number, number] => {\r\n        const { gridOffset, gridScale } = encounter;\r\n\r\n        const result = Transforms.isometricToCardinal(GridHelpers.reverseScale(GridHelpers.reverseOffset(iso, gridOffset), gridScale));\r\n        return [Math.floor(result.lat), Math.floor(result.lng)];\r\n    };\r\n\r\n    /*\r\n     * Get the first found location for a grid entry (hero or encoutner ID)\r\n     */\r\n    private static getGridLocation = (grid: TokenGridEntry[][], char: GridEntry): LatLng | undefined => {\r\n        for (let x = 0; x < grid.length; x++) {\r\n            const currentRow = grid[x];\r\n            const index = currentRow.indexOf(char);\r\n            if (index >= 0) {\r\n                return latLng(x, index);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /*\r\n     * Get the initial locations for a grid entry (hero or encoutner ID)\r\n     */\r\n    public static getInitialPositions = (encounter: EncounterDetail, characters: [NpcGridEntry, Hero][]): CharacterEncounterData[] => {\r\n        return characters.map((c: [NpcGridEntry, Hero]) => {\r\n            const gridPosition = GridHelpers.getGridLocation(encounter.tokenGrid, c[0]);\r\n            return new CharacterEncounterData(\r\n                c[1],\r\n                c[0],\r\n                \"melee\",\r\n                gridPosition,\r\n                GridHelpers.gridToDisplayCenter(gridPosition ?? latLng([0, 0]), encounter)\r\n            );\r\n        });\r\n    };\r\n\r\n    public static mergeGridEntry = (tokenEntry: TokenGridEntry, baseEntry: GridEntry): GridEntry =>\r\n        tokenEntry !== \" \" ? (tokenEntry as GridEntry) : baseEntry;\r\n\r\n    private static buildMergedGrids(tokenGrid: TokenGridEntry[][], grid: GridEntry[][]): GridEntry[][] {\r\n        const output: GridEntry[][] = [];\r\n\r\n        for (let x = 0; x < grid.length; x++) {\r\n            output[x] = [];\r\n            for (let y = 0; y < grid.length; y++) {\r\n                output[x][y] = GridHelpers.mergeGridEntry(tokenGrid[x][y], grid[x][y]);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private static buildAstarGrid = (grid: GridEntry[][]): number[][] => {\r\n        return grid.map((e) => e.map((item) => (GridHelpers.isWalkable(item) ? 0 : 1)));\r\n    };\r\n\r\n    public static getGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const mergedGrid = GridHelpers.buildMergedGrids(tokenGrid, grid);\r\n        const endEntry = mergedGrid[end.lat][end.lng];\r\n\r\n        const isFoe = GridHelpers.isFoe(endEntry);\r\n        const isHero = GridHelpers.isHero(endEntry);\r\n        const isBlocked = endEntry === \"0\";\r\n\r\n        // Allow movement on start/end points\r\n        mergedGrid[start.lat][start.lng] = \"1\";\r\n        if (isHeroMove && !isBlocked && !isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n        else if (!isHeroMove && !isBlocked && isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n\r\n        // Build a new crid each time because everything heroes, foes move\r\n        const aStar = new AStarFinder({\r\n            grid: {\r\n                matrix: GridHelpers.buildAstarGrid(mergedGrid),\r\n            },\r\n        });\r\n\r\n        const startGridPosition = { x: start.lng, y: start.lat };\r\n        const endGridPosition = { x: end.lng, y: end.lat };\r\n\r\n        //console.log(`Path from : (${startGridPosition.x},${startGridPosition.y}) to (${endGridPosition.x},${endGridPosition.y})`);\r\n\r\n        const path = aStar.findPath(startGridPosition, endGridPosition);\r\n\r\n        //console.log(`Path length : ${path.length}`);\r\n        // If attacking a foe, don't move onto the foe\r\n        if (isFoe || isHero) path.pop();\r\n\r\n        return path.reverse();\r\n    };\r\n\r\n    public static getRangedGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const path = GridHelpers.getGridPath(tokenGrid, grid, start, end, isHeroMove);\r\n\r\n        if (range <= 1) return path;\r\n\r\n        const distanceSquared = (x: LatLng, y: LatLng): number => {\r\n            const latDist = x.lat - y.lat;\r\n            const lngDist = x.lng - y.lng;\r\n            // Note: Removed Math.sqrt to make slightly faster?\r\n            return latDist * latDist + lngDist * lngDist;\r\n        };\r\n\r\n        for (let i = path.length - 1; i >= 0; i--) {\r\n            const dist = distanceSquared(latLng(path[i][1], path[i][0]), end);\r\n            // console.log(`Dist from ${path[i][1]}, ${path[i][0]} to ${end.lat}, ${end.lng} = ${dist}`);\r\n            if (dist < range * range) {\r\n                return path.splice(i);\r\n            }\r\n        }\r\n\r\n        // TODO: Instead check each node on the path to check if its within range\r\n        return path.splice(range - 1);\r\n    };\r\n\r\n    public static getHeroPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number\r\n    ): number[][] =>\r\n        range > 0\r\n            ? GridHelpers.getRangedGridPath(tokenGrid, grid, start, end, range, true)\r\n            : GridHelpers.getGridPath(tokenGrid, grid, start, end, true);\r\n\r\n    public static getFoePath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number\r\n    ): number[][] =>\r\n        range > 0\r\n            ? GridHelpers.getRangedGridPath(tokenGrid, grid, start, end, range, false)\r\n            : GridHelpers.getGridPath(tokenGrid, grid, start, end, false);\r\n\r\n    public static findNearestHero = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng\r\n    ): [GridEntry, number[][]] | undefined => {\r\n        const paths: [GridEntry, number[][]][] = [];\r\n        const heroEntries: HeroGridEntry[] = [\"A\", \"B\", \"C\", \"D\"];\r\n        for (let i = 0; i < heroEntries.length; i++) {\r\n            const end = GridHelpers.getGridLocation(tokenGrid, heroEntries[i]);\r\n            if (end) {\r\n                paths.push([heroEntries[i], GridHelpers.getFoePath(tokenGrid, grid, start, end, 0)]);\r\n            }\r\n        }\r\n\r\n        const sortedPaths = paths.filter((p) => p[1].length > 0).sort((p1, p2) => p1[1].length - p2[1].length);\r\n        return sortedPaths.length > 0 ? sortedPaths[0] : undefined;\r\n    };\r\n\r\n    public static isHero = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"A\":\r\n            case \"B\":\r\n            case \"C\":\r\n            case \"D\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isEncounter = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"E\":\r\n            case \"F\":\r\n            case \"G\":\r\n            case \"H\":\r\n            case \"I\":\r\n            case \"J\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isFoe = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"K\":\r\n            case \"L\":\r\n            case \"M\":\r\n            case \"N\":\r\n            case \"O\":\r\n            case \"P\":\r\n            case \"Q\":\r\n            case \"R\":\r\n            case \"S\":\r\n            case \"T\":\r\n            case \"U\":\r\n            case \"V\":\r\n            case \"W\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isWalkable = (entry: GridEntry) => entry !== \"0\" && !GridHelpers.isFoe(entry) && !GridHelpers.isHero(entry);\r\n\r\n    public static canEndMove = (entry: GridEntry) => entry === \"1\" || entry === \"2\" || entry === \"X\" || GridHelpers.isEncounter(entry);\r\n\r\n    public static displayGrid = (tokenGrid: TokenGridEntry[][]): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < tokenGrid.length; i++) {\r\n            displayStrings.push(tokenGrid[i].join(\" - \"));\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","\r\nimport { LatLng } from \"leaflet\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport { NpcGridEntry } from \"./EncounterDetail\";\r\nimport Hero from \"./character/Hero\";\r\nimport Queue from \"./Queue\";\r\n\r\nexport default class CharacterEncounterData {\r\n    constructor(details: Hero, gridEntry: NpcGridEntry, selectedAttack: string, gridPos?: LatLng, displayPos?: LatLng, vertexQueue?: Queue<[number, number]>) {\r\n        this.gridPos = gridPos;\r\n        this.gridEntry = gridEntry;\r\n        this.displayPos = displayPos;\r\n        this.selectedAttack = selectedAttack;\r\n        this.vertexQueue = vertexQueue ?? new Queue<[number, number]>();\r\n        this.details = details;\r\n    }\r\n\r\n    public details: Hero;\r\n\r\n    public gridEntry: NpcGridEntry;\r\n\r\n    public gridPos?: LatLng;\r\n\r\n    public displayPos?: LatLng;\r\n\r\n    public vertexQueue: Queue<[number, number]>;\r\n\r\n    public selectedAttack: string;\r\n\r\n    // TODO\r\n    // public lastAttack: string;\r\n\r\n    public static buildFromGrid(gridPos: LatLng | undefined, convertFunc: (pos: LatLng) => LatLng): CharacterEncounterData {\r\n        const result = <CharacterEncounterData>{\r\n            gridPos: gridPos,\r\n            displayPos: gridPos ? convertFunc(gridPos) : undefined,\r\n            selectedAttack: \"melee\",\r\n            vertexQueue: new Queue<[number, number]>(),\r\n        };\r\n        return result;\r\n    }\r\n\r\n    // TODO: Disable path display when moving\r\n    public isMoving = (): boolean => this.vertexQueue.length() > 0;\r\n\r\n    public toString(): string {\r\n        const queueStrings = this.vertexQueue._store.map((i) => `${i[0]},${i[1]}`);\r\n\r\n        return `${this.gridPos?.lat},${this.gridPos?.lng} display ${this.displayPos?.lat},${this.displayPos?.lng} [${queueStrings.join(\r\n            \"],[\"\r\n        )}]`;\r\n    }\r\n\r\n    public isFoe = (): boolean => GridHelpers.isFoe(this.gridEntry);\r\n\r\n    public isHero = (): boolean => GridHelpers.isHero(this.gridEntry);\r\n}\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLng, LatLngTuple } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { GridEntry } from \"../../models/EncounterDetail\";\r\nimport GridHelpers from \"../../helpers/GridHelpers\";\r\n\r\ntype GridMarkerProps = {\r\n    gridPos: [number, number];\r\n    entry: GridEntry;\r\n    gridToDisplayFunc: (car: LatLngTuple) => LatLng;\r\n    onHover: (gridPos: [number, number]) => void;\r\n    onHoverEnd: (gridPos: [number, number]) => void;\r\n    onClick: (gridPos: [number, number]) => void;\r\n};\r\n\r\nconst GridMarker: React.FunctionComponent<GridMarkerProps> = (props: GridMarkerProps) => {\r\n    const { gridPos, entry, gridToDisplayFunc, onHover, onHoverEnd, onClick } = props;\r\n\r\n    const displayPos = gridToDisplayFunc([gridPos[0] + 0.5, gridPos[1] + 0.5]);\r\n\r\n    const isHero = GridHelpers.isHero(entry);\r\n    const isFoe = GridHelpers.isFoe(entry);\r\n    if (isHero || isFoe) return null; // No markers on hero or foe positions\r\n        \r\n    const canEndMove = GridHelpers.canEndMove(entry);\r\n\r\n    const iconUrl = canEndMove ? \"/images/bullseye-flat.svg\" : \"/images/times-solid.svg\";\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        // TODO: Size not scaled\r\n        iconSize: [50, 50],\r\n        iconAnchor: [25, 25],\r\n        className: \"hover-icon\",\r\n    });\r\n\r\n    return (\r\n        <Marker\r\n            key={`${gridPos[0]}.${gridPos[1]}`}\r\n            position={displayPos}\r\n            icon={icon}\r\n            onclick={() => onClick(gridPos)}\r\n            onmouseover={() => onHover(gridPos)}\r\n            onmouseout={() => onHoverEnd(gridPos)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GridMarker;\r\n","import React from \"react\";\r\n\r\nimport { makeStyles, CircularProgress } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype FoeMarkerProps = {\r\n    foe: CharacterEncounterData;\r\n    isActive: boolean;\r\n    attackIcon: string;\r\n    duration?: number;\r\n    onClick?: (foe: CharacterEncounterData) => void;\r\n    onMoveEnd: (foe: CharacterEncounterData) => void;\r\n    onHover: (hero: CharacterEncounterData) => void;\r\n    onHoverEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A map marker that represents an enemy or foe\r\n */\r\nconst FoeMarker: React.FunctionComponent<FoeMarkerProps> = (props: FoeMarkerProps) => {\r\n    const { foe, isActive, duration, onClick, onMoveEnd, onHover, onHoverEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-54px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid indianred\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            \"&:hover\": {\r\n                border: \"6px solid red\",\r\n            },\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid red\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        meleeHover: {\r\n            position: \"absolute\",\r\n            zIndex: 9,\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            opacity: 0,\r\n            \"&:hover\": {\r\n                filter: \"invert(1)\",\r\n                opacity: 1,\r\n            },\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (foe.details.currentStatus.currentHitPoints / foe.details.stats.maxHitPoints) * 100;\r\n\r\n    //const ff = foe.details;\r\n\r\n    //console.log(`# ${ff.id},${foe.gridEntry} has ${percentHp}% hp`);\r\n\r\n    if (!foe.displayPos) return null;\r\n\r\n    const hoverUrl =\r\n        props.attackIcon === \"melee\"\r\n            ? \"./images/melee.svg\"\r\n            : props.attackIcon === \"ranged\"\r\n            ? \"./images/ranged.svg\"\r\n            : \"./images/meteor-solid.svg\";\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={foe.displayPos}\r\n            keepAtCenter={false}\r\n            onMouseOver={() => onHover(foe)}\r\n            onMouseOut={() => onHoverEnd(foe)}\r\n            onMoveEnd={(_: any) => onMoveEnd(foe)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(foe);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={5}\r\n                    size={62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={foe.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={foe.details.name} />\r\n                <img src={hoverUrl} className={classes.meleeHover} alt=\"melee\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default FoeMarker;\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLngExpression } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        filter: \"invert(100%)\",\r\n    },\r\n});\r\n\r\ntype StaticMarkerProps = {\r\n    displayPos: LatLngExpression | undefined;\r\n    iconUrl: string;\r\n    width: number;\r\n    height: number;\r\n    zIndexOffset: number;\r\n};\r\n\r\nconst StaticMarker: React.FunctionComponent<StaticMarkerProps> = (props: StaticMarkerProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { displayPos, iconUrl, width, height } = props;\r\n\r\n    if (!displayPos) return null;\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        iconSize: [width, height],\r\n        iconAnchor: [width >> 1, height >> 1],\r\n        className: classes.icon,\r\n    });\r\n\r\n    return <Marker zIndexOffset={props.zIndexOffset} key={displayPos.toString()} position={displayPos} icon={icon} />;\r\n};\r\n\r\nexport default StaticMarker;\r\n","import React from \"react\";\r\nimport { LatLng } from \"leaflet\";\r\nimport { Polyline } from \"react-leaflet\";\r\nimport StaticMarker from \"./StaticMarker\";\r\n\r\ntype CombatPathProps = {\r\n    // How far the hero can move\r\n    move: number;\r\n\r\n    // The path color\r\n    pathColor: string;\r\n\r\n    // The path to display\r\n    path: LatLng[];\r\n};\r\n\r\n/*\r\n * Display a movement path during combat, split into segments showing how much movement is consumed\r\n */\r\nconst CombatPath: React.FunctionComponent<CombatPathProps> = (props: CombatPathProps): JSX.Element => {\r\n    const { move, pathColor } = props;\r\n\r\n    const fullPath = props.path;\r\n\r\n    const length = fullPath.length;\r\n    const remainderPathLength = length - move * 2;\r\n    const fullMoveStart = remainderPathLength > 0 ? remainderPathLength - 1 : 0;\r\n    const fullMoveEnd = length - move;\r\n    const halfMoveStart = fullMoveEnd > 0 ? length - move - 1 : 0;\r\n\r\n    const remainderPath = remainderPathLength > 0 ? fullPath.slice(0, remainderPathLength) : [];\r\n    const fullMovePath = fullMoveEnd > 0 ? fullPath.slice(fullMoveStart, fullMoveEnd) : [];\r\n    const halfMovePath = fullPath.slice(halfMoveStart);\r\n\r\n    // A marker for the half move path\r\n    const halfMoveMarker = halfMovePath.length > 0 ? halfMovePath[0] : undefined;\r\n\r\n    // A marker for the (!damagePos) move path\r\n    const fullMoveMarker = fullMovePath.length > 0 ? fullMovePath[0] : undefined;\r\n\r\n    const zIndexOffset = -1000;\r\n\r\n    return (\r\n        <div>\r\n            <StaticMarker zIndexOffset={zIndexOffset} displayPos={halfMoveMarker} iconUrl=\"./images/half.svg\" width={30} height={20} />\r\n            <StaticMarker zIndexOffset={zIndexOffset} displayPos={fullMoveMarker} iconUrl=\"./images/circle.svg\" width={30} height={20} />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={remainderPath}\r\n                color=\"indianred\"\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={fullMovePath}\r\n                color=\"#c6c6c6\"\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={halfMovePath}\r\n                color={pathColor}\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatPath;\r\n","import * as React from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { DivIcon, LatLngExpression, marker } from \"leaflet\";\r\nimport * as RL from \"react-leaflet\";\r\nimport { MapLayer, MapLayerProps } from \"react-leaflet\";\r\n\r\ntype CustomMarkerProps = {\r\n    position: LatLngExpression,\r\n    zIndexOff: number;\r\n} & MapLayerProps;\r\n\r\n/*\r\n* From:\r\n* https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n*/\r\nconst CustomMarker = (RL as any).withLeaflet(\r\n    class extends MapLayer<CustomMarkerProps> {\r\n        leafletElement: any;\r\n\r\n        createLeafletElement(props: CustomMarkerProps) {\r\n            const { position, ...rest } = props;\r\n\r\n            // when not providing className, the element's background is a white square\r\n            // when not providing iconSize, the element will be 12x12 pixels\r\n            const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n            const el = marker(position, { icon: icon, zIndexOffset: props.zIndexOff, ...rest });\r\n            this.contextValue = { ...props.leaflet, popupContainer: el };\r\n            return el;\r\n        }\r\n\r\n        updateLeafletElement(fromProps: any, toProps: any) {\r\n            const {\r\n                position: fromPosition,\r\n                zIndexOffset: fromZIndexOffset,\r\n                opacity: fromOpacity,\r\n                draggable: fromDraggable,\r\n                className: fromClassName,\r\n            } = fromProps;\r\n            const {\r\n                position: toPosition,\r\n                zIndexOffset: toZIndexOffset,\r\n                toOpacity,\r\n                draggable: toDraggable,\r\n                className: toClassName,\r\n            } = toProps;\r\n\r\n            function difference<T>(items: Array<T>, itemsToRemove: Array<T>): Array<T> {\r\n                return items.filter((item) => !itemsToRemove.includes(item));\r\n            }\r\n\r\n            if (toPosition !== fromPosition) {\r\n                this.leafletElement.setLatLng(toPosition);\r\n            }\r\n            if (toZIndexOffset !== fromZIndexOffset) {\r\n                this.leafletElement.setZIndexOffset(toZIndexOffset);\r\n            }\r\n            if (toOpacity !== fromOpacity) {\r\n                this.leafletElement.setOpacity(toOpacity);\r\n            }\r\n            if (toDraggable !== fromDraggable) {\r\n                if (toDraggable) {\r\n                    this.leafletElement.dragging.enable();\r\n                } else {\r\n                    this.leafletElement.dragging.disable();\r\n                }\r\n            }\r\n            if (toClassName !== fromClassName) {\r\n                const fromClasses = fromClassName.split(\" \");\r\n                const toClasses = toClassName.split(\" \");\r\n                this.leafletElement._icon.classList.remove(...difference(fromClasses, toClasses));\r\n                this.leafletElement._icon.classList.add(...difference(toClasses, fromClasses));\r\n            }\r\n        }\r\n\r\n        componentWillMount() {\r\n            if (super.componentWillMount) {\r\n                super.componentWillMount();\r\n            }\r\n            this.leafletElement = this.createLeafletElement(this.props);\r\n            this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n        }\r\n\r\n        componentDidUpdate(fromProps: any) {\r\n            this.updateLeafletElement(fromProps, this.props);\r\n        }\r\n\r\n        render() {\r\n            const { children } = this.props;\r\n            const container = this.leafletElement._icon;\r\n\r\n            if (!container) {\r\n                return null;\r\n            }\r\n\r\n            const portal = createPortal(children, container);\r\n\r\n            const LeafletProvider = (RL as any).LeafletProvider;\r\n\r\n            return children == null || portal == null || this.contextValue == null ? null : (\r\n                <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport default CustomMarker;","import React from \"react\";\r\n\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\nimport { Fade } from \"@material-ui/core\";\r\nimport CustomMarker from \"./CustomMarker\";\r\nimport { latLng, LatLng } from \"leaflet\";\r\nimport AttackResult from \"../../models/AttackResult\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"relative\",\r\n        top: \"-20px\",\r\n        left: \"-20px\",\r\n        pointerEvents: \"none\",\r\n    },\r\n    explode: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n    },\r\n    death: {\r\n        position: \"absolute\",\r\n        width: \"55px\",\r\n        height: \"55px\",\r\n        filter: \"invert(0.9)\",\r\n    },\r\n    miss: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n        filter: \"invert(0.67)\", // TODO: Use different svg\r\n    },\r\n    text: {\r\n        position: \"absolute\",\r\n        color: \"white\",\r\n        top: \"27px\",\r\n        width: \"80px\",\r\n    },\r\n});\r\n\r\ntype DamageDisplayProps = {\r\n    result: AttackResult;\r\n};\r\n\r\nconst DamageDisplay: React.FunctionComponent<DamageDisplayProps> = (props: DamageDisplayProps): JSX.Element => {\r\n    const { position, damage, result } = props.result;\r\n    const classes = useStyles();\r\n\r\n    const show = damage !== undefined;\r\n\r\n    return (\r\n        <CustomMarker position={position ?? latLng([0, 0])} zIndexOff={1000}>\r\n            <Fade in={show} style={{ transitionDelay: \"300ms\" }} timeout={{ enter: 500, exit: 500 }}>\r\n                {result === \"death\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/skull.svg\" className={classes.death} alt=\"death\" />\r\n                    </div>\r\n                ) : result === \"miss\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.miss} alt=\"miss\" />\r\n                        <Typography className={classes.text}>Miss</Typography>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.explode} alt=\"damage\" />\r\n                        <Typography className={classes.text}>{damage}</Typography>\r\n                    </div>\r\n                )}\r\n            </Fade>\r\n        </CustomMarker>\r\n    );\r\n};\r\n\r\nexport default DamageDisplay;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport SportsKabaddiIcon from \"@material-ui/icons/SportsKabaddi\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        zIndex: 501,\r\n        position: \"absolute\",\r\n        bottom: \"30px\",\r\n        right: \"30px\",\r\n    },\r\n    icon: {\r\n    },\r\n});\r\n\r\ntype CombatIndicatorProps = {\r\n    isCombat: boolean;\r\n    initiative: number;\r\n};\r\n\r\nconst CombatIndicator: React.FunctionComponent<CombatIndicatorProps> = (props: CombatIndicatorProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            {props.isCombat ? (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <Typography>{Math.round(props.initiative)}</Typography>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <SportsKabaddiIcon className={classes.icon} />\r\n                </Button>\r\n            ) : (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <VisibilityIcon className={classes.icon} />\r\n                </Button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatIndicator;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography, Fade } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"absolute\",\r\n        bottom: \"25px\",\r\n        left: \"25px\",\r\n    },\r\n    button: {\r\n        zIndex: 501,\r\n        padding: \"6px 0px\",\r\n        margin: \"5px\",\r\n        opacity: 0.8,\r\n    },\r\n    icon: {\r\n        width: \"50px\",\r\n        height: \"50px\",\r\n        borderRadius: \"5px\",\r\n    },\r\n});\r\n\r\ntype ActionBarProps = {\r\n    spells: string[];\r\n    selected: string;\r\n    onSelect: (id: string) => void;\r\n};\r\n\r\nconst ActionBar: React.FunctionComponent<ActionBarProps> = (props: ActionBarProps): JSX.Element => {\r\n    const { spells, selected, onSelect } = props;\r\n    const classes = useStyles();\r\n\r\n    const renderButton = (name: string) => (\r\n        <Button\r\n            key={name}\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            className={classes.button}\r\n            color={selected === name ? \"primary\" : \"default\"}\r\n            onClick={() => onSelect(name)}\r\n        >\r\n            <img src={`./images/skills/${name}.png`} className={classes.icon} alt={`${name}`} />\r\n        </Button>\r\n    );\r\n\r\n    const renderSpells = (spells: string[]): JSX.Element[] => spells.map((s) => renderButton(s));\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {renderButton(\"melee\")}\r\n            {renderButton(\"ranged\")}\r\n            {renderSpells(spells)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActionBar;\r\n","/*\r\n* Use the random game seed & encounter ID to determine initiative values\r\n* in a random but recreateable way\r\n*/\r\nexport default class DiceRoller {\r\n\r\n    private generate(seed: number): number {\r\n        const result = seed / 4294967296;\r\n        return result;\r\n    }\r\n\r\n    public rollDie = (seed: number, dieType: number): number => {\r\n        return Math.ceil(this.generate(seed) * dieType);\r\n    };\r\n\r\n    public roll20 = (seed: number): number => this.rollDie(seed, 20);\r\n\r\n    public roll10 = (seed: number): number => this.rollDie(seed, 10);\r\n}\r\n","import MockGameStateService from \"./MockGameStateService\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class DiceSeedTracker {\r\n    public static fromEncounterId(id: string) {\r\n        const hashCode = (s: string) =>\r\n            s.split(\"\").reduce((a, b) => {\r\n                a = (a << 5) - a + b.charCodeAt(0);\r\n                return a & a;\r\n            }, 0);\r\n\r\n        const service = new MockGameStateService();\r\n        const state = service.getState();\r\n\r\n        return hashCode(id) ^ state.seed;\r\n    }\r\n\r\n    public static next(seed: number): number {\r\n        const result = DiceSeedTracker.mulberry32(seed);\r\n        return result;\r\n    }\r\n\r\n    private static mulberry32(a: number): number {\r\n        var t = (a += 0x6d2b79f5);\r\n        t = Math.imul(t ^ (t >>> 15), t | 1);\r\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n        return ((t ^ (t >>> 14)) >>> 0);\r\n    }\r\n}\r\n","import { NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport DiceRoller from \"./DiceRoller\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport DiceSeedTracker from \"./DiceSeedTracker\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class InitiativeTracker {\r\n    private _initiatives: [string, NpcGridEntry, number][] = [];\r\n\r\n    constructor(initiatives: [string, NpcGridEntry, number][]) {\r\n        this._initiatives = initiatives;\r\n    }\r\n\r\n    public static buildInitial(\r\n        gameId: string,\r\n        heroes: [NpcGridEntry, Hero][],\r\n        foes: [NpcGridEntry, Hero][]\r\n    ): [string, NpcGridEntry, number][] {\r\n        // Generate some random initial initiatives\r\n        let seed = DiceSeedTracker.fromEncounterId(gameId);\r\n        const roller = new DiceRoller();\r\n        const heroInitiatives: [string, NpcGridEntry, number][] = heroes.map((h) => {\r\n            seed = DiceSeedTracker.next(seed);\r\n            return [h[1].id, h[0], -(roller.roll10(seed) - AttributeHelper.getModifier(h[1].attributes.dexterity))];\r\n        });\r\n        const foeInitiatives: [string, NpcGridEntry, number][] = foes.map((f) => {\r\n            seed = DiceSeedTracker.next(seed);\r\n            return [f[1].id, f[0], -(roller.roll10(seed) - AttributeHelper.getModifier(f[1].attributes.dexterity))];\r\n        });\r\n\r\n        const initiatives = heroInitiatives.concat(foeInitiatives);\r\n        return InitiativeTracker.sort(initiatives);\r\n    }\r\n\r\n    public processDelay = (name: string, delay: number): [string, NpcGridEntry, number][] => {\r\n        const match = this._initiatives.find((init) => init[0] === name);\r\n        if (!match) {\r\n            console.log(\"Initiative not found : \" + name);\r\n            return this._initiatives;\r\n        }\r\n        match[2] += delay;\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    };\r\n\r\n    public remove = (name: string): [string, NpcGridEntry, number][] => {\r\n        this._initiatives = this._initiatives.filter(i => i[0] !== name);\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    }\r\n\r\n    private static sort = (initiatives: [string, NpcGridEntry, number][]): [string, NpcGridEntry, number][] => {\r\n        const result = initiatives.sort((n1, n2) => n1[2] - n2[2]);\r\n        return result;\r\n    };\r\n\r\n    public getInitiatives = (): [string, NpcGridEntry, number][] => this._initiatives;\r\n\r\n    public getNextInitiative = () => this._initiatives[0];\r\n\r\n    public displayInitiatives = (): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < this._initiatives.length; i++) {\r\n            displayStrings.push(`${this._initiatives[i][0]} : ${this._initiatives[i][1]}`);\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","import { LatLng } from \"leaflet\";\r\n\r\nexport default class AttackResult {\r\n    public constructor(result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\", damage: number, position: LatLng) {\r\n        this.result = result;\r\n        this.damage = damage;\r\n        this.position = position;\r\n    }\r\n\r\n    public result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\";\r\n    public damage: number;\r\n    public position: LatLng;\r\n\r\n    public static createMiss = (position: LatLng): AttackResult => new AttackResult(\"miss\", 0, position);\r\n    public static createFumble = (position: LatLng): AttackResult => new AttackResult(\"fumble\", 0, position);\r\n    public static createHit = (damage: number, position: LatLng): AttackResult => new AttackResult(\"hit\", damage, position);\r\n    public static createCritical = (damage: number, position: LatLng): AttackResult => new AttackResult(\"critical\", damage, position);\r\n    public static createDeath = (damage: number, position: LatLng): AttackResult => new AttackResult(\"death\", damage, position);\r\n}\r\n","import EffectTable from \"../models/EffectTable\";\r\nimport EffectTableEntry from \"../models/EffectTableEntry\";\r\n\r\nimport Spear from \"./effects/spear.json\";\r\nimport Bow from \"./effects/bow.json\";\r\nimport Fists from \"./effects/fists.json\";\r\nimport MagicMissle from \"./effects/magic_missile.json\";\r\n\r\nexport default class EffectTableServiceStatic {\r\n    public getEffect(id: string): EffectTable | null {\r\n        switch (id) {\r\n            case \"Fists\":\r\n                return Fists as EffectTable;\r\n            case \"Spear\":\r\n                return Spear as EffectTable;\r\n            case \"Bow\":\r\n                return Bow as EffectTable;\r\n            case \"Magic Missile\":\r\n                return MagicMissle as EffectTable;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public getResultEntry(table: EffectTable | null, rawRoll: number, total: number): EffectTableEntry | null {\r\n        if (!table) return null;\r\n        \r\n        const matches = table.effects.filter(\r\n            (e) =>\r\n                (e.useRaw && rawRoll >= e.resultMin && rawRoll <= e.resultMax) ||\r\n                (!e.useRaw && total >= e.resultMin && total <= e.resultMax)\r\n        );\r\n        return matches.length > 0 ? matches[0] : null;\r\n    }\r\n}\r\n","import AttributeList from \"../models/character/AttributeList\";\r\nimport CalculatedStats from \"../models/character/CalculatedStats\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\nimport { ModifierType } from \"../models/character/Trait\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport AttributeHelper from \"./AttributeHelper\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nexport default class HeroHelper {\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getItemTraits = (hero: Hero): HeroTrait[] => {\r\n        let traits: HeroTrait[] = [];\r\n        const service = new MockItemService();\r\n\r\n        // TODO: This might be a few queries, we can consider a cache if we move to server side requests\r\n        const items = hero.currentStatus.equippedItems.map((i) => service.getItemDetail(i));\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            const itemTraits = item.traits.map((t) => {\r\n                return {\r\n                    id: t.id,\r\n                    name: t.name,\r\n                    type: t.type,\r\n                    behaviour: t.behaviour,\r\n                    from: item.name,\r\n                };\r\n            });\r\n            traits = traits.concat(itemTraits);\r\n        }\r\n\r\n        return traits;\r\n    };\r\n\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getAllTraits = (hero: Hero): HeroTrait[] =>\r\n        HeroHelper.getItemTraits(hero).concat(hero.currentStatus.permanentTraits).concat(hero.currentStatus.temporaryTraits);\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static calculateAttributesWithModifiers = (hero: Hero): AttributeList => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let strMod = 0,\r\n            dexMod = 0,\r\n            conMod = 0,\r\n            intMod = 0,\r\n            wisMod = 0,\r\n            chaMod = 0,\r\n            luckMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Strength:\r\n                        strMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.Dexterity:\r\n                        dexMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.Constitution:\r\n                        conMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.Intelligence:\r\n                        intMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.Wisdom:\r\n                        wisMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.Charisma:\r\n                        chaMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.Luck:\r\n                        luckMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attributes = hero.attributes;\r\n        const newAttributeList: AttributeList = {\r\n            strength: { base: attributes.strength.base, bonus: strMod },\r\n            dexterity: { base: attributes.dexterity.base, bonus: dexMod },\r\n            constitution: { base: attributes.constitution.base, bonus: conMod },\r\n            intelligence: { base: attributes.intelligence.base, bonus: intMod },\r\n            wisdom: { base: attributes.wisdom.base, bonus: wisMod },\r\n            charisma: { base: attributes.charisma.base, bonus: chaMod },\r\n            luck: { base: attributes.luck.base, bonus: luckMod },\r\n        };\r\n\r\n        return newAttributeList;\r\n    };\r\n\r\n    public static calculateStatsWithModifiers = (hero: Hero): CalculatedStats => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let armorMod = 0,\r\n            moveSpeedMod = 0,\r\n            meleeAttackMod = 0,\r\n            meleeAttackSpeedMod = 0,\r\n            meleeDamageMod = 0,\r\n            rangedAttackMod = 0,\r\n            rangedAttackSpeedMod = 0,\r\n            rangedDamageMod = 0,\r\n            spellAttackMod = 0,\r\n            spellAttackSpeedMod = 0,\r\n            spellDamageMod = 0,\r\n            hpMod = 0,\r\n            spellResistMod = 0,\r\n            damageResistMod = 0;\r\n        let status = 0;\r\n        let meleeEffectId = hero.stats.meleeEffectId;\r\n        let rangedEffectId = hero.stats.rangedEffectId;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Armor:\r\n                        armorMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.MoveSpeed:\r\n                        moveSpeedMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeAttack:\r\n                        meleeAttackMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeAttackSpeed:\r\n                        meleeAttackSpeedMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeDamage:\r\n                        meleeDamageMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeEffect:\r\n                        meleeEffectId = behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedEffect:\r\n                        rangedEffectId = behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttack:\r\n                        rangedAttackMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.RangedAttackSpeed:\r\n                        rangedAttackSpeedMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.RangedDamage:\r\n                        rangedDamageMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellAttack:\r\n                        spellAttackMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellAttackSpeed:\r\n                        spellAttackSpeedMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellDamage:\r\n                        spellDamageMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.HitPoints:\r\n                        hpMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellResistance:\r\n                        spellResistMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.DamageResistance:\r\n                        damageResistMod += parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    case ModifierType.Status:\r\n                        status |= parseInt(behaviour.modifierValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const stats = hero.stats;\r\n        const service = new EffectTableServiceStatic();\r\n        const meleeEffect = service.getEffect(stats.meleeEffectId);\r\n        const rangedEffect = service.getEffect(stats.rangedEffectId);\r\n        const meleeEffectAttackModifier = HeroHelper.getModifier(hero, meleeEffect?.attackModifier);\r\n        const rangedEffectAttackModifier = HeroHelper.getModifier(hero, rangedEffect?.attackModifier);\r\n\r\n        const newStats: CalculatedStats = {\r\n            // TODO\r\n            status: status,\r\n\r\n            armour: stats.armour + armorMod,\r\n\r\n            meleeAttackBonus: stats.meleeAttackBonus + meleeEffectAttackModifier + meleeAttackMod,\r\n            meleeAttackSpeed: stats.meleeAttackSpeed + meleeAttackSpeedMod,\r\n            meleeDamageBonus: stats.meleeAttackBonus + meleeDamageMod,\r\n            meleeEffectId: meleeEffectId,\r\n\r\n            rangedAttackBonus: stats.rangedAttackBonus + rangedEffectAttackModifier + rangedAttackMod,\r\n            rangedAttackSpeed: stats.rangedAttackSpeed + rangedAttackSpeedMod,\r\n            rangedDamageBonus: stats.rangedAttackBonus + rangedDamageMod,\r\n            rangedEffectId: stats.rangedEffectId,\r\n\r\n            spellAttackBonus: stats.spellAttackBonus + spellAttackMod,\r\n            spellAttackSpeed: stats.spellAttackSpeed + spellAttackSpeedMod,\r\n            spellDamageBonus: stats.spellDamageBonus + spellDamageMod,\r\n\r\n            spells: hero.spells.filter(s => hero.currentStatus.lostSpells.indexOf(s) < 0),\r\n            moveSpeed: stats.moveSpeed + moveSpeedMod,\r\n            maxHitPoints: stats.maxHitPoints + hpMod,\r\n            spellResistance: stats.spellResistance + spellResistMod,\r\n            damageResistance: stats.damageResistance + damageResistMod,\r\n        };\r\n\r\n        // TODO: Are there class & level bonuses, or we represent these as traits?\r\n\r\n        return newStats;\r\n    };\r\n\r\n    public static getModifier = (\r\n        hero: Hero,\r\n        modifier: \"str\" | \"dex\" | \"con\" | \"wis\" | \"int\" | \"cha\" | \"luck\" | \"magic\" | \"melee\" | \"ranged\" | \"armor\" | \"level\" | undefined\r\n    ): number => HeroHelper.getStatModifier(hero.stats, hero.attributes, modifier);\r\n\r\n    public static getStatModifier(\r\n        statistics: CalculatedStats,\r\n        attributes: AttributeList,\r\n        modifier: \"str\" | \"dex\" | \"con\" | \"wis\" | \"int\" | \"cha\" | \"luck\" | \"magic\" | \"melee\" | \"ranged\" | \"armor\" | \"level\" | undefined\r\n    ): number {\r\n        switch (modifier) {\r\n            case undefined:\r\n                return 0;\r\n            case \"str\":\r\n                return AttributeHelper.getModifier(attributes.strength);\r\n            case \"dex\":\r\n                return AttributeHelper.getModifier(attributes.dexterity);\r\n            case \"con\":\r\n                return AttributeHelper.getModifier(attributes.constitution);\r\n            case \"wis\":\r\n                return AttributeHelper.getModifier(attributes.wisdom);\r\n            case \"int\":\r\n                return AttributeHelper.getModifier(attributes.intelligence);\r\n            case \"cha\":\r\n                return AttributeHelper.getModifier(attributes.charisma);\r\n            case \"luck\":\r\n                return AttributeHelper.getModifier(attributes.luck);\r\n            case \"magic\":\r\n                return statistics.spellAttackBonus;\r\n            case \"melee\":\r\n                return statistics.meleeAttackBonus;\r\n            case \"ranged\":\r\n                return statistics.rangedAttackBonus;\r\n            case \"armor\":\r\n                return statistics.armour;\r\n            case \"level\":\r\n                throw new Error(\"Not implemented\");\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n}\r\n","import AttackResult from \"../models/AttackResult\";\r\nimport IAttackResult from \"../models/AttackResult\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport DiceRoller from \"../services/DiceRoller\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport HeroHelper from \"./HeroHelper\";\r\n\r\n/** Combat results helper functions */\r\nexport default class CombatHelper {\r\n    private static determineAttackResultShared = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData,\r\n        effectId: string,\r\n        attackBonus: number,\r\n        damageBonus: number\r\n    ): IAttackResult => {\r\n        const targetPos = target.gridPos;\r\n        const attackerPos = attacker.gridPos;\r\n\r\n        if (!attackerPos) throw new Error(\"Attacker missing position\");\r\n        if (!targetPos) throw new Error(\"Target missing position\");\r\n\r\n        const roller = new DiceRoller();\r\n        const attackerDetail = attacker.details;\r\n        const targetDetail = target.details;\r\n\r\n        const resultService = new EffectTableServiceStatic();\r\n        const effect = resultService.getEffect(effectId);\r\n        if (effect === null) {\r\n            throw new Error(\"Can't find effect: \" + effectId);\r\n        }\r\n\r\n        const attackRoll = roller.roll20(seedAttack);\r\n        const attackModifier = HeroHelper.getModifier(attackerDetail, effect.attackModifier);\r\n        const attackValue = attackBonus + attackModifier + attackRoll;\r\n\r\n        console.log(`Attack : ${attackBonus} + ${attackModifier} + ${attackRoll}`);\r\n\r\n        const targetNumber = HeroHelper.getModifier(targetDetail, effect.dodgeWith);\r\n        const isMiss = attackValue < targetNumber;\r\n        const isFumble = attackRoll <= 1;\r\n        const isCritical = attackRoll >= 20;\r\n\r\n        const entry = resultService.getResultEntry(effect, attackRoll, attackValue);\r\n        if (entry === null) {\r\n            throw new Error(\"Can't find effect entry: \" + effectId);\r\n        }\r\n\r\n        // TODO: Use table instead\r\n        if (isFumble) {\r\n            console.log(`${attackerDetail.id} : Funbles`);\r\n            // TODO: Add a fumble table?\r\n            return AttackResult.createFumble(attackerPos);\r\n        }\r\n\r\n        if (isMiss) {\r\n            // Miss\r\n            console.log(\r\n                `${attackerDetail.id} : Miss ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry})`\r\n            );\r\n            return AttackResult.createMiss(targetPos);\r\n        }\r\n\r\n        //console.log(`Effect table : ${effectId} = d${entry.damageDie} x ${entry.damageDieCount} + ${entry.damageModifier}`);\r\n\r\n        // Hit, calculate damage\r\n        let damage = 0;\r\n        for (let i = 0; i < entry.damageDieCount; i++) {\r\n            damage += roller.rollDie(seedDamage, entry.damageDie);\r\n            damage += damageBonus;\r\n            if (entry.damageModifier) {\r\n                damage += HeroHelper.getModifier(attackerDetail, entry.damageModifier);\r\n            }\r\n            //console.log(`Damage total : ${damage}`);\r\n        }\r\n\r\n        console.log(\r\n            `${attackerDetail.id} hits ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry}) for ${damage}`\r\n        );\r\n\r\n        return isCritical ? AttackResult.createCritical(damage, targetPos) : AttackResult.createHit(damage, targetPos);\r\n    };\r\n\r\n    public static determineAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        if (attacker.selectedAttack === \"melee\") \r\n            return CombatHelper.determineMeleeAttackResult(seedAttack, seedDamage, attacker, target);\r\n\r\n        if (attacker.selectedAttack === \"ranged\") \r\n            return CombatHelper.determineRangedAttackResult(seedAttack, seedDamage, attacker, target);\r\n\r\n        return CombatHelper.determineSpellAttackResult(seedAttack, seedDamage, attacker, target, attacker.selectedAttack);\r\n    };\r\n\r\n    public static determineSpellAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData,\r\n        effectId: string\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            effectId,\r\n            attacker.details.stats.spellAttackBonus,\r\n            attacker.details.stats.spellDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineMeleeAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            attacker.details.stats.meleeEffectId,\r\n            attacker.details.stats.meleeAttackBonus,\r\n            attacker.details.stats.meleeDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineRangedAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            attacker.details.stats.rangedEffectId,\r\n            attacker.details.stats.rangedAttackBonus,\r\n            attacker.details.stats.rangedDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineMaxRange = (attacker: CharacterEncounterData): number => {\r\n        var effectId;\r\n        switch (attacker.selectedAttack) {\r\n            case \"melee\":\r\n                effectId = attacker.details.stats.meleeEffectId;\r\n                break;\r\n            case \"ranged\":\r\n                effectId = attacker.details.stats.rangedEffectId;\r\n                break;\r\n            default:\r\n                effectId = attacker.selectedAttack;\r\n                break;\r\n        }\r\n        const resultService = new EffectTableServiceStatic();\r\n        const effect = resultService.getEffect(effectId);\r\n        if (effect === null) {\r\n            throw new Error(\"Can't find effect: \" + effectId);\r\n        }\r\n        const baseRange = effect.range;\r\n\r\n        // TODO: We might allow traits to increase or decrease range?\r\n        return baseRange;\r\n    };\r\n}\r\n","import CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { NpcGridEntry } from \"../models/EncounterDetail\";\r\n\r\nexport default class CombatPositionHelper {\r\n    /** Update the hero or foe position */\r\n    public static updatePosition = (\r\n        newPosition: CharacterEncounterData,\r\n        oldPositions: CharacterEncounterData[]\r\n    ): CharacterEncounterData[] => {\r\n        // We need a new array here, or the update is not detected\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            newPositions.push(oldPositions[i].gridEntry === newPosition.gridEntry ? newPosition : oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Remove the position of the foe or hero (death of fled) */\r\n    public static removePosition = (entry: NpcGridEntry, oldPositions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            if (oldPositions[i].gridEntry !== entry) newPositions.push(oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Get the position of a hero or foe by the grid entry */\r\n    public static getPositionByEntry = (entry: NpcGridEntry, positions: CharacterEncounterData[]): CharacterEncounterData | undefined => {\r\n        const index = positions.findIndex((h) => h.gridEntry === entry);\r\n        if (index < 0 || index >= positions.length) {\r\n            console.error(\"Can't find character : \" + entry);\r\n            return undefined;\r\n        }\r\n        return positions[index];\r\n    };\r\n\r\n    /** Clear all hero/foe movement queues */\r\n    public static clearAllQueues = (positions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < positions.length; i++) {\r\n            newPositions.push(positions[i]); // TODO: Should we deep clone here?\r\n            newPositions[i].vertexQueue.clear();\r\n        }\r\n        return newPositions;\r\n    };\r\n}\r\n","import CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { TokenGridEntry } from \"../models/EncounterDetail\";\r\n\r\n/** Trim the move path to just the max move allowed */\r\nexport default class CombatActionHelper {\r\n    public static trimPathToMove = (path: number[][], maxPath: number): number[][] => {\r\n        let remainderPathLength = path.length - maxPath * 2 - 1;\r\n        if (remainderPathLength <= 0) remainderPathLength = 0; // Always remove the start grid item\r\n\r\n        return path.slice(remainderPathLength);\r\n    };\r\n\r\n    /**\r\n     * Build an action to attack foe, or move toward them if too far away\r\n     */\r\n    public static buildAttack = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        // TODO: Trim path to max ranged distance. Maybe simple trim by length to begin with\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n        const isAttack = path.length === movePath.length;\r\n\r\n        if (isAttack) {\r\n            console.log(`${attacker.gridEntry} ${attacker.selectedAttack} attack ${target} (${path.length})`);\r\n        } else {\r\n            console.log(`${attacker.gridEntry} move towards ${target} (${path.length})`);\r\n        }\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: isAttack ? attacker.selectedAttack : \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n\r\n    /**\r\n     * Build an action to melee attack foe, or move toward them if too far away\r\n     */\r\n    public static buildMove = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n\r\n        console.log(`${attacker.gridEntry} melee attack ${target} (${path.length})`);\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype IsoMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst IsoMarker: React.FunctionComponent<IsoMarkerProps> = (props: IsoMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            position: \"absolute\",\r\n        },\r\n        icon: {\r\n            position: \"relative\",\r\n        },\r\n        dot: {\r\n            height: \"35px\",\r\n            width: \"65px\",\r\n            backgroundColor: \"#bbb\",\r\n            borderRadius: \"50%\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            bottom: \"18px\",\r\n            left: \"14px\",\r\n            zIndex: -1,\r\n        },\r\n        dotActive: {\r\n            height: \"35px\",\r\n            width: \"65px\",\r\n            backgroundColor: \"#d4af37\",\r\n            borderRadius: \"50%\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            bottom: \"18px\",\r\n            left: \"14px\",\r\n            zIndex: -1,\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.currentStatus.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root} style={{ top: hero.details.tokenOffset[1], left: hero.details.tokenOffset[0] }}>\r\n                {/* <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                /> */}\r\n                <img src={hero.details.tokenUrl} className={classes.icon} alt={hero.details.name} />\r\n                <span className={isActive ? classes.dotActive : classes.dot} />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default IsoMarker;\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds, LatLngTuple } from \"leaflet\";\r\nimport { Map, ImageOverlay } from \"react-leaflet\";\r\nimport EncounterDialog from \"./EncounterDialog\";\r\n\r\n// Models\r\nimport EncounterDetail, { EncounterGridEntry, FoeGridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport HeroMarker from \"./markers/HeroMarker\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\n\r\n// Markers\r\nimport GridMarker from \"./markers/GridMarker\";\r\nimport FoeMarker from \"./markers/FoeMarker\";\r\nimport CombatPath from \"./encounter-map/CombatPath\";\r\nimport DamageDisplay from \"./markers/DamageDisplay\";\r\nimport CombatIndicator from \"./CombatIndicator\";\r\nimport ActionBar from \"./ActionBar\";\r\n\r\n// Helpers\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport CombatHelper from \"../helpers/CombatHelper\";\r\nimport CombatPositionHelper from \"../helpers/CombatPositionHelper\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport CombatActionHelper from \"../helpers/CombatActionHelper\";\r\nimport AttackResult from \"../models/AttackResult\";\r\nimport IsoMarker from \"./markers/IsoMarker\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport DiceSeedTracker from \"../services/DiceSeedTracker\";\r\n\r\ntype EncounterMapProps = {\r\n    /** The encounter data */\r\n    encounter: EncounterDetail;\r\n\r\n    /** The heroes detailed information, referenced by grid-entry */\r\n    heroes: [HeroGridEntry, Hero][];\r\n\r\n    /** The foes detailed information, referenced by grid-entry */\r\n    foes: [FoeGridEntry, Hero][];\r\n\r\n    /** If true, show a helper grid */\r\n    showGrid: boolean;\r\n\r\n    /** The inititive scores for heroes & foes */\r\n    initiatives: [string, NpcGridEntry, number][];\r\n};\r\n\r\ntype EncounterParams = {\r\n    useTokens?: string;\r\n};\r\n\r\nconst EncounterMap: React.FunctionComponent<EncounterMapProps> = (props: EncounterMapProps): JSX.Element => {\r\n    const { encounter } = props;\r\n\r\n    const pathColor = props.encounter.pathColor ?? \"white\";\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n    const {\r\n        gridToDisplayTuple,\r\n        gridToDisplayCenterTuple,\r\n        gridToDisplayCenter,\r\n        displayToGrid,\r\n        getInitialPositions,\r\n        mergeGridEntry,\r\n    } = GridHelpers;\r\n\r\n    // The current (grid) position of the hero markers\r\n    const [heroData, setHeroData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.heroes));\r\n    const [foeData, setFoeData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.foes));\r\n\r\n    // The positions to display damage markers\r\n    const [damagePos, setDamagePos] = React.useState<AttackResult[]>([]);\r\n\r\n    // The path to the hovered vertex (display when hovering over the grid)\r\n    const [path, setPath] = React.useState<LatLng[]>([]);\r\n\r\n    // The current grid state\r\n    const [tokenGrid, setTokenGrid] = React.useState<TokenGridEntry[][]>(encounter.tokenGrid);\r\n    // TODO: We could go further and custom create a network of these grid points and use the other pathfindind algorithm?\r\n\r\n    // The current ink encouter begind displayed\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // The ID of the currently selected hero. Inital hero is selected on initiative score\r\n    const [selectedHero, setSelectedHero] = React.useState<NpcGridEntry | undefined>(undefined);\r\n\r\n    // Is the current move an attack?\r\n    const [attackTarget, setAttackTarget] = React.useState<TokenGridEntry | undefined>(undefined);\r\n\r\n    // TODO: Is this a state - This a state anti-pattern\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][]>(props.initiatives);\r\n\r\n    const [currentAction, setCurrentAction] = React.useState<CharacterAction | undefined>(undefined);\r\n\r\n    const [seed, setSeed] = React.useState<number>(DiceSeedTracker.fromEncounterId(encounter.id));\r\n\r\n    // Is the encounter is combat mode?\r\n    const isCombat = (): boolean => foeData.length > 0;\r\n\r\n    // The max length of a path\r\n    const maxPath = isCombat() ? 3 : 20;\r\n\r\n    const params = useParams<EncounterParams>();\r\n\r\n    // This effect tracks when the end of the current character's turn happens\r\n    React.useEffect(() => {\r\n        // Start the next character's turn\r\n        const startNextActor = () => {\r\n            const initiativeTracker = new InitiativeTracker(initiatives);\r\n            const newNextToMove = initiativeTracker.getNextInitiative();\r\n            const name = newNextToMove[0];\r\n            const entry = newNextToMove[1];\r\n\r\n            console.log(`** Next to move ${name} (${entry})`);\r\n\r\n            // console.log(\" - \" + initiativeTracker.displayInitiatives().join(\"\\n- \"));\r\n\r\n            const gridDisplay = GridHelpers.displayGrid(tokenGrid);\r\n            console.log(gridDisplay.join(\"\\n\"));\r\n\r\n            setSelectedHero(entry);\r\n\r\n            if (!GridHelpers.isHero(entry)) {\r\n                // TODO: Foe has their action\r\n                const foeMatch = foeData.find((f) => f.gridEntry === entry);\r\n                if (foeMatch && foeMatch.gridPos) {\r\n                    const closestHeroPath = GridHelpers.findNearestHero(tokenGrid, encounter.grid, foeMatch.gridPos);\r\n                    if (closestHeroPath !== undefined) {\r\n                        const newCharacterAction = CombatActionHelper.buildAttack(\r\n                            foeMatch,\r\n                            closestHeroPath[0],\r\n                            closestHeroPath[1],\r\n                            maxPath\r\n                        );\r\n                        if (newCharacterAction.action === \"melee\") {\r\n                            setAttackTarget(newCharacterAction.target);\r\n                        }\r\n                        setCurrentAction(newCharacterAction);\r\n                    } else {\r\n                        console.error(`Foe : ${foeMatch.gridEntry} has no hero accessible`);\r\n                        const newInitiatives = initiativeTracker.processDelay(name, foeMatch.details.stats.moveSpeed);\r\n                        setInitiatives(newInitiatives);\r\n                        startNextActor(); // Trigger next to move\r\n                    }\r\n                } else {\r\n                    console.error(\"Can't find matching foe : \" + name);\r\n                    const newInitiatives = initiativeTracker.remove(name);\r\n                    setInitiatives(newInitiatives);\r\n                    startNextActor(); // Trigger next to move\r\n                }\r\n                //startNextActor(); // Trigger next to move\r\n            }\r\n        };\r\n\r\n        const executeCurrentAction = (currentAction: CharacterAction) => {\r\n            try {\r\n                const { id, path, action } = currentAction;\r\n\r\n                const numMoves = Math.ceil((path.length - 1) / maxPath);\r\n                console.log(`Moving ${id} (${currentAction.character}) distance ${path.length - 1} with ${numMoves} moves`);\r\n\r\n                const heroPos = getPosition(currentAction.character);\r\n                if (heroPos === undefined) {\r\n                    console.error(\"Can't find hero for action : \" + id);\r\n                    return;\r\n                }\r\n\r\n                // TODO: Chech nodes for encounters\r\n                let nextVertex = path.pop();\r\n                while (nextVertex) {\r\n                    //console.log(`Queue vertex ${nextVertex[0]}, ${nextVertex[1]}`);\r\n                    heroPos.vertexQueue.push([nextVertex[0], nextVertex[1]]);\r\n                    nextVertex = path.pop();\r\n                }\r\n\r\n                const newPosition = new CharacterEncounterData(\r\n                    heroPos.details,\r\n                    heroPos.gridEntry,\r\n                    heroPos.selectedAttack,\r\n                    heroPos.gridPos,\r\n                    heroPos.displayPos,\r\n                    heroPos.vertexQueue\r\n                );\r\n                setCharacterPosition(newPosition);\r\n\r\n                // Calculates new initiatives after move\r\n                const initiativeTracker = new InitiativeTracker(initiatives);\r\n                let delay = numMoves * heroPos.details.stats.moveSpeed;\r\n                // TODO: Make based on spell or attack table?\r\n                if (action === \"melee\") delay += heroPos.details.stats.meleeAttackSpeed;\r\n                else if (action === \"ranged\") delay += heroPos.details.stats.rangedAttackSpeed;\r\n                else delay += heroPos.details.stats.spellAttackSpeed;\r\n                const newInitiatives = initiativeTracker.processDelay(id, delay);\r\n                setInitiatives(newInitiatives);\r\n\r\n                // Trigger the move to the next vertex\r\n                handleMoveEnd(newPosition);\r\n            } finally {\r\n                // Clear the current action so that we don't run again\r\n                setCurrentAction(undefined);\r\n            }\r\n        };\r\n\r\n        // console.log(\"useEffect end of turn\");\r\n        if (!selectedHero) {\r\n            startNextActor();\r\n        }\r\n        if (currentAction) {\r\n            executeCurrentAction(currentAction);\r\n        }\r\n    }, [selectedHero, currentAction]);\r\n\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    /** Clicked on a hero to move if in combat mode */\r\n    const onHeroClick = (hero: CharacterEncounterData) => {\r\n        console.log(\"Select hero : \" + hero.details.id);\r\n        setSelectedHero(hero.gridEntry);\r\n    };\r\n\r\n    /** Get the position of a hero or foe */\r\n    const getPosition = (entry?: NpcGridEntry): CharacterEncounterData | undefined =>\r\n        entry\r\n            ? GridHelpers.isHero(entry)\r\n                ? CombatPositionHelper.getPositionByEntry(entry, heroData)\r\n                : CombatPositionHelper.getPositionByEntry(entry, foeData)\r\n            : undefined;\r\n\r\n    /** Clear hero & foe movement queues */\r\n    const clearAllQueues = () => {\r\n        setHeroData(CombatPositionHelper.clearAllQueues(heroData));\r\n        setFoeData(CombatPositionHelper.clearAllQueues(foeData));\r\n    };\r\n\r\n    /** Update the hero or foe position */\r\n    const setCharacterPosition = (position: CharacterEncounterData) => {\r\n        // console.log(`setCharacterPosition : ${position.details.id}`);\r\n        if (position.isHero()) {\r\n            setHeroData(CombatPositionHelper.updatePosition(position, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.updatePosition(position, foeData));\r\n        }\r\n    };\r\n\r\n    /** Remove the hero or foe position due to death or fleeing */\r\n    const removeCharacter = (character: CharacterEncounterData) => {\r\n        const initiativeTracker = new InitiativeTracker(initiatives);\r\n        const newInitiatives = initiativeTracker.remove(character.details.id);\r\n        setInitiatives(newInitiatives);\r\n        if (GridHelpers.isHero(character.gridEntry)) {\r\n            setHeroData(CombatPositionHelper.removePosition(character.gridEntry, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.removePosition(character.gridEntry, foeData));\r\n        }\r\n    };\r\n\r\n    /** Clicked on the map (not on grid) */\r\n    const onMapClick = (e: any) => console.log(`Clicked at: ${e.latlng}, grid ${displayToGrid(e.latlng, encounter)}`);\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (character: CharacterEncounterData) => {\r\n        setPath([]);\r\n\r\n        //console.log(`handleMoveEnd : ${character.details.id}`);\r\n\r\n        const targetVertex = character.vertexQueue.pop();\r\n        if (targetVertex !== undefined) {\r\n            const gridPos = latLng(targetVertex[1], targetVertex[0]);\r\n            const displayPos = gridToDisplayCenter(gridPos, encounter);\r\n\r\n            // Update the token grid\r\n            if (character.gridPos) {\r\n                // const oldEntry = tokenGrid[prevPos.gridPos.lat][prevPos.gridPos.lng];\r\n                tokenGrid[character.gridPos.lat][character.gridPos.lng] = \" \";\r\n                tokenGrid[gridPos.lat][gridPos.lng] = character.gridEntry;\r\n\r\n                console.log(\r\n                    `Move end: ${character.details.id} (${character.vertexQueue.length()} queued) next, ${targetVertex[0]},${\r\n                        targetVertex[1]\r\n                    }, previous position : ${character.gridPos.lng},${character.gridPos.lat}`\r\n                );\r\n            } else {\r\n                console.error(`Can't find current grid pos ${targetVertex[0]},${targetVertex[1]}`);\r\n                return;\r\n            }\r\n\r\n            const newPosition = new CharacterEncounterData(\r\n                character.details,\r\n                character.gridEntry,\r\n                character.selectedAttack,\r\n                gridPos,\r\n                displayPos,\r\n                character.vertexQueue\r\n            );\r\n            setCharacterPosition(newPosition);\r\n\r\n            // Stop if a vertex with an an encounter is hit\r\n            const entry = encounter.grid[gridPos.lat][gridPos.lng];\r\n            if (GridHelpers.isEncounter(entry)) {\r\n                const encounterId = encounter.encounters[entry as EncounterGridEntry];\r\n                if (encounterId) {\r\n                    console.log(`Encounter : ${encounterId}`);\r\n                    clearAllQueues();\r\n                    setEncounterId(encounterId);\r\n                }\r\n            }\r\n\r\n            // Check if the current hero has finished their move\r\n            if (character.vertexQueue.length() > 0) {\r\n                //console.log(\"Continuing move\");\r\n                return;\r\n            }\r\n        } else {\r\n            handleAttack(character);\r\n\r\n            // Trigger the end of turn effect for this hero\r\n            setSelectedHero(undefined);\r\n            setTokenGrid(tokenGrid);\r\n        }\r\n    };\r\n\r\n    const handleAttack = (character: CharacterEncounterData) => {\r\n        if (attackTarget) {\r\n            // Get the attacker & target\r\n            console.log(`Finished move : ${character.details.id} with attack`);\r\n            const targetMatch = getPosition(attackTarget as NpcGridEntry);\r\n            if (targetMatch && targetMatch.displayPos) {\r\n                // Calculate the attack roll seeds\r\n                const attackSeed = DiceSeedTracker.next(seed);\r\n                const damageSeed = DiceSeedTracker.next(seed);\r\n                // Set the seed for the next rolls\r\n                setSeed(damageSeed);\r\n\r\n                let results = CombatHelper.determineAttackResult(attackSeed, damageSeed, character, targetMatch);\r\n                if (results.result !== \"fumble\" && results.result !== \"miss\") {\r\n                    const newFoeDetails = { ...targetMatch };\r\n\r\n                    // Reduce hit points & check for death\r\n                    newFoeDetails.details.currentStatus.currentHitPoints -= results.damage;\r\n                    const isDeath = newFoeDetails.details.currentStatus.currentHitPoints <= 0;\r\n\r\n                    if (isDeath) {\r\n                        console.log(`DEAD : ${newFoeDetails.details.id}`);\r\n                        if (newFoeDetails.gridPos) results = AttackResult.createDeath(results.damage, newFoeDetails.gridPos);\r\n                        removeCharacter(targetMatch);\r\n                        if (targetMatch.gridPos) tokenGrid[targetMatch.gridPos.lat][targetMatch.gridPos.lng] = \" \";\r\n                    } else {\r\n                        setCharacterPosition(newFoeDetails);\r\n                    }\r\n                }\r\n                addDamagePos(results);\r\n            } else console.error(`Can't find foe at : ${attackTarget}`);\r\n\r\n            setAttackTarget(undefined);\r\n        } else {\r\n            console.log(`Finished move : ${character.details.id} no attack`);\r\n        }\r\n    };\r\n\r\n    const addDamagePos = (result: AttackResult) => {\r\n        setDamagePos((state) => state.concat(result));\r\n    };\r\n\r\n    const showHoverPath = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n        if (heroPos.isMoving()) return;\r\n\r\n        const range = isFoe ? CombatHelper.determineMaxRange(heroPos) : 0;\r\n\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, latLng(hoverGridPos), range);\r\n        const displayPath = fullPath.map((item) => gridToDisplayCenterTuple([item[1], item[0]], encounter));\r\n        setPath(displayPath);\r\n    };\r\n\r\n    const onHover = (hoverGridPos: [number, number]) => showHoverPath(hoverGridPos, false);\r\n\r\n    const onHoverEnd = (hoverGridPos: [number, number]) => setPath([]);\r\n\r\n    const onFoeHover = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            showHoverPath([foe.gridPos.lat, foe.gridPos.lng], true);\r\n        }\r\n    };\r\n\r\n    const onFoeHoverEnd = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            onHoverEnd([foe.gridPos.lat, foe.gridPos.lng]);\r\n        }\r\n    };\r\n\r\n    const onClickGridMarker = (gridPos: [number, number]) => processMarkerAction(gridPos, false);\r\n\r\n    /** Clicked on a foe to attack */\r\n    const onFoeClick = (position: CharacterEncounterData) => {\r\n        if (position.gridPos) processMarkerAction([position.gridPos.lat, position.gridPos.lng], true);\r\n    };\r\n\r\n    const processMarkerAction = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n\r\n        clearAllQueues();\r\n        setDamagePos([]);\r\n\r\n        const range = CombatHelper.determineMaxRange(heroPos);\r\n\r\n        const endPos = latLng(hoverGridPos);\r\n        const endToken = tokenGrid[endPos.lat][endPos.lng];\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, endPos, range);\r\n\r\n        const newAction = !isFoe\r\n            ? CombatActionHelper.buildMove(heroPos, endToken, fullPath, maxPath)\r\n            : CombatActionHelper.buildAttack(heroPos, endToken, fullPath, maxPath);\r\n\r\n        if (newAction.action !== \"move\") {\r\n            setAttackTarget(endToken);\r\n        }\r\n\r\n        setCurrentAction(newAction);\r\n\r\n        console.log(`Set current action : ${newAction.id} ${newAction.action}`);\r\n    };\r\n\r\n    const selectedAttackChanged = (id: string) => {\r\n        const position = getPosition(selectedHero);\r\n        if (!position) return;\r\n\r\n        position.selectedAttack = id;\r\n        setCharacterPosition(position);\r\n    };\r\n\r\n    const renderHeroes = () => {\r\n        return params.useTokens ?? false\r\n            ? heroData.map((hero) => (\r\n                  <IsoMarker\r\n                      hero={hero}\r\n                      isActive={selectedHero === hero.gridEntry}\r\n                      duration={300}\r\n                      onMoveEnd={handleMoveEnd}\r\n                      onClick={onHeroClick}\r\n                  />\r\n              ))\r\n            : heroData.map((hero) => (\r\n                  <HeroMarker\r\n                      hero={hero}\r\n                      isActive={selectedHero === hero.gridEntry}\r\n                      duration={300}\r\n                      onMoveEnd={handleMoveEnd}\r\n                      onClick={onHeroClick}\r\n                  />\r\n              ));\r\n    };\r\n\r\n    const renderFoes = () => {\r\n        return foeData.map((foe) => (\r\n            <FoeMarker\r\n                foe={foe}\r\n                attackIcon={getPosition(selectedHero)?.selectedAttack ?? \"melee\"}\r\n                isActive={selectedHero === foe.gridEntry}\r\n                duration={300}\r\n                onMoveEnd={handleMoveEnd}\r\n                onClick={onFoeClick}\r\n                onHover={onFoeHover}\r\n                onHoverEnd={onFoeHoverEnd}\r\n            />\r\n        ));\r\n    };\r\n\r\n    const renderGridMarkers = (encounter: EncounterDetail): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        for (let x = 0; x < encounter.grid.length; x++) {\r\n            for (let y = 0; y < encounter.grid.length; y++) {\r\n                markers.push(\r\n                    <GridMarker\r\n                        gridPos={[x, y]}\r\n                        entry={mergeGridEntry(encounter.tokenGrid[x][y], encounter.grid[x][y])}\r\n                        gridToDisplayFunc={(pos: LatLngTuple) => gridToDisplayTuple(pos, encounter)}\r\n                        onHover={onHover}\r\n                        onHoverEnd={onHoverEnd}\r\n                        onClick={onClickGridMarker}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    const renderDamageMarkers = (damages: AttackResult[]): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        // Map damage markers to dsipaly positions\r\n        const displayResults = damages.map((dam) => new AttackResult(dam.result, dam.damage, gridToDisplayCenter(dam.position, encounter)));\r\n        for (let i = 0; i < displayResults.length; i++) {\r\n            markers.push(<DamageDisplay result={displayResults[i]} />);\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    // Note: Order of markers matters for z-index\r\n    return (\r\n        <div>\r\n            <CombatIndicator isCombat={isCombat()} initiative={initiatives[0][2]} />\r\n            <ActionBar\r\n                spells={getPosition(selectedHero)?.details.stats.spells ?? []}\r\n                selected={getPosition(selectedHero)?.selectedAttack ?? \"melee\"}\r\n                onSelect={selectedAttackChanged}\r\n            />\r\n            <Map\r\n                crs={CRS.Simple}\r\n                zoom={0}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={onMapClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                <ImageOverlay url={encounter.imageUrl} bounds={bounds} />\r\n                <CombatPath path={path} pathColor={pathColor} move={maxPath} />\r\n                {renderGridMarkers(encounter)}\r\n                {renderHeroes()}\r\n                {renderFoes()}\r\n                {renderDamageMarkers(damagePos)}\r\n            </Map>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterMap;\r\n","import AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport FoeData from \"../models/character/FoeData\";\r\nimport Hero, { AbilityFlags } from \"../models/character/Hero\";\r\nimport thugContent from \"./npcs/thug.json\";\r\n\r\nexport default class MockNpcService {\r\n    \r\n    getFoeDetail(id: string): Hero {\r\n        const foe = this.getFoeData(id);\r\n\r\n        const clone = (({ attributes, ...o }) => o)(foe) as Hero;\r\n        clone.attributes = AttributeHelper.convertSimpleToComplex(foe.attributes);\r\n        clone.currentStatus = {\r\n            lostSpells: [],\r\n            temporaryTraits: [],\r\n            permanentTraits: [],\r\n            currentHitPoints: foe.stats.maxHitPoints,\r\n            equippedItems: [],\r\n        };\r\n        clone.abilities = AbilityFlags.None;\r\n        clone.description = \"\";\r\n        clone.background = \"\";  \r\n        return clone;\r\n    }\r\n\r\n    private getFoeData(id: string): FoeData {\r\n        switch (id) {\r\n            case \"thug\":\r\n            default:\r\n                return thugContent as FoeData;\r\n        }\r\n    }\r\n}\r\n","export default class ArrayHelper {\r\n    /*\r\n     * Take the first N items from an array\r\n     */\r\n    public static take<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        if (count > array.length) return clonedArray;\r\n        clonedArray.splice(count);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Take the last N items from an array\r\n     */\r\n    public static takeLast<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        const offset = clonedArray.length - count - 1;\r\n        if (offset > array.length) return clonedArray;\r\n        clonedArray.splice(0, offset);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Remove duplicates from an array\r\n     */\r\n    public static removeDuplicates<T>(array: T[]): Array<T> {\r\n        function onlyUnique(value: T, index: number, self: Array<T>) {\r\n            return self.indexOf(value) === index;\r\n        }\r\n\r\n        return array.filter(onlyUnique);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport EncounterDetail, { FoeGridEntry, HeroGridEntry, NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport EncounterMap from \"./EncounterMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockNpcService from \"../services/MockNpcService\";\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport GameState from \"../models/GameState\";\r\n\r\ntype EncounterMapLoaderProps = {\r\n    encounterId: string;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst EncounterMapLoader: React.FunctionComponent<EncounterMapLoaderProps> = (props: EncounterMapLoaderProps): JSX.Element => {\r\n    const [encounter, setEncounter] = React.useState<EncounterDetail | undefined>(undefined);\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][] | undefined>(undefined);\r\n\r\n    // The heroe detailed information\r\n    const [heroes, setHeroes] = React.useState<[HeroGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    // The foe detailed information, referenced my token entries so that we can keep track of each foe instamce\r\n    const [foes, setFoes] = React.useState<[FoeGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEncounter = () => {\r\n            const service = new MockDetailedEncounterService();\r\n            const encounterData = service.getEncounterDetail(props.encounterId);\r\n            if (!encounterData) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n            setEncounter(encounterData);\r\n\r\n            // Load heroes\r\n            const partyService = new MockPartyService();\r\n            const newHeroes = partyService.getParty();\r\n            if (!newHeroes) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n\r\n            const heroEntries: [HeroGridEntry, Hero][] = [\r\n                [\"A\", newHeroes[0]],\r\n                [\"B\", newHeroes[1]],\r\n                [\"C\", newHeroes[2]],\r\n                [\"D\", newHeroes[3]],\r\n            ];\r\n\r\n            setHeroes(heroEntries);\r\n\r\n            // Load foes\r\n            const foeEntries = Object.entries(encounterData.npcs);\r\n            const foeIds = ArrayHelper.removeDuplicates(foeEntries.map((f) => f[1]));\r\n            const npcService = new MockNpcService();\r\n\r\n            const newFoes = foeIds.map((id) => npcService.getFoeDetail(id));\r\n            const foeInstances: [FoeGridEntry, Hero][] = [];\r\n            for (let i = 0; i < foeEntries.length; i++) {\r\n                const foeData = foeEntries[i];\r\n                const foe = newFoes.find((f) => f.id === foeData[1]);\r\n                if (foe) {\r\n                    // Add a clone of the foe data referenced by grid location so that we can track for instance stats separately\r\n                    const foeDeepClone: Hero = JSON.parse(JSON.stringify(foe)); // Was { ...foe }\r\n                    foeInstances.push([foeData[0] as FoeGridEntry, foeDeepClone]);\r\n                }\r\n            }\r\n            setFoes(foeInstances);\r\n\r\n            // Generate some random initial initiatives\r\n            const initiatives: [string, NpcGridEntry, number][] = InitiativeTracker.buildInitial(\r\n                encounterData.id,\r\n                heroEntries,\r\n                foeInstances\r\n            );\r\n            console.log(\" - \" + new InitiativeTracker(initiatives).displayInitiatives().join(\"\\n- \"));\r\n            setInitiatives(initiatives);\r\n        };\r\n\r\n        if (encounter == null) {\r\n            loadEncounter();\r\n        }\r\n    });\r\n\r\n    if (!encounter || !initiatives || !heroes || !foes) return <LoadingProgress />;\r\n\r\n    return <EncounterMap encounter={encounter} heroes={heroes} foes={foes} showGrid={true} initiatives={initiatives} />;\r\n};\r\n\r\nexport default EncounterMapLoader;\r\n","import React from \"react\";\r\n\r\n// Pathfinding imports\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport GameState from \"../models/GameState\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport OverheadMapLoader from \"../components/OverheadMapLoader\";\r\nimport EncounterMapLoader from \"../components/EncounterMapLoader\";\r\n\r\nconst MapPage: React.FunctionComponent = () => {\r\n    let [gameState, setGameState] = React.useState<GameState | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of game state data\r\n        const loadGameState = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newGameState = stateService.getState();\r\n            if (!newGameState) {\r\n                console.error(`No game state data`);\r\n                return;\r\n            }\r\n\r\n            setGameState(newGameState);\r\n        };\r\n\r\n        if (gameState == null) {\r\n            loadGameState();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n        console.log(`New map : ${newState.currentMapId}, ${newState.currentVertextId}, ${newState.currentEncounterId}`);\r\n\r\n        // Save the new map state\r\n        const stateService = new MockGameStateService();\r\n        stateService.setState(newState);\r\n        setGameState(newState);\r\n    };\r\n\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    if (!gameState) return null;\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            {gameState.currentEncounterId ? (\r\n                <EncounterMapLoader encounterId={gameState.currentEncounterId} onNewMap={onNewMap} />\r\n            ) : (\r\n                <OverheadMapLoader startState={gameState} onNewMap={onNewMap} />\r\n            )}\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default MapPage;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventoryProps = {\r\n    items: Item[];\r\n    onEquipItem: (itemId: string) => void;\r\n};\r\n\r\nconst PartyInventory: React.FunctionComponent<PartyInventoryProps> = (props: PartyInventoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, onEquipItem } = props;\r\n\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState<string[]>([]);\r\n\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);\r\n\r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n    const isItemEquipable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n\r\n        const match = items.find((item) => item.id === inventorySelectedIds[0]);\r\n        if (!match) return false; // Error?\r\n\r\n        return match.itemType >= 10;\r\n    };\r\n\r\n    const equipItem = () => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        if (onEquipItem) onEquipItem(inventorySelectedIds[0]);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected()) return \"Please select an inventory item\";\r\n\r\n        return isItemEquipable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={items} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventory;\r\n","import React from \"react\";\r\nimport { makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport Item, { ItemType } from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"7vw\",\r\n        top: \"-1vh\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"7vw\",\r\n        top: \"6.5vh\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"7vw\",\r\n        top: \"14vh\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"7vw\",\r\n        top: \"21.5vh\",\r\n    },\r\n    portraitItemWeapon: {\r\n        left: \"3.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitItemShield: {\r\n        left: \"10.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitNoItemImg: {\r\n        filter: \"brightness(35%)\",\r\n    },\r\n    portraitItemImg: {\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"50%\",\r\n    },\r\n});\r\n\r\ntype EquippedItemsProps = {\r\n    equippedItems: Item[];\r\n};\r\n\r\n/*\r\n* Hero Profile Screen : Display the items that the hero has equipped\r\n*/\r\nconst EquippedItems: React.FunctionComponent<EquippedItemsProps> = (props: EquippedItemsProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const { equippedItems } = props;\r\n\r\n    const headItem = equippedItems.find((item) => item.itemType === ItemType.WearableHead);\r\n    const bodyItem = equippedItems.find((item) => item.itemType === ItemType.WearableBody);\r\n    const armsItem = equippedItems.find((item) => item.itemType === ItemType.WearableArms);\r\n    const feetItem = equippedItems.find((item) => item.itemType === ItemType.WearableFeet);\r\n    const weaponItem = equippedItems.find((item) => item.itemType === ItemType.WeaponMelee1h);\r\n\r\n    return (\r\n        <div className={classes.itemContainer}>\r\n            <Tooltip title={<ItemTooltipContent item={headItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemHelm}`}>\r\n                    {headItem ? (\r\n                        <img src={headItem.imageUrl} className={classes.portraitItemImg} alt=\"helm\" />\r\n                    ) : (\r\n                        <img src=\"images/helm.svg\" className={classes.portraitNoItemImg} alt=\"helm\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={bodyItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}>\r\n                    {bodyItem ? (\r\n                        <img src={bodyItem.imageUrl} className={classes.portraitItemImg} alt=\"breastplate\" />\r\n                    ) : (\r\n                        <img src=\"images/breastplate.svg\" className={classes.portraitNoItemImg} alt=\"breastplate\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={feetItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemLegs}`}>\r\n                    {feetItem ? (\r\n                        <img src={feetItem.imageUrl} className={classes.portraitItemImg} alt=\"legs\" />\r\n                    ) : (\r\n                        <img src=\"images/leg.svg\" className={classes.portraitNoItemImg} alt=\"legs\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={armsItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemGloves}`}>\r\n                    {armsItem ? (\r\n                        <img src={armsItem.imageUrl} className={classes.portraitItemImg} alt=\"gloves\" />\r\n                    ) : (\r\n                        <img src=\"images/glove.svg\" className={classes.portraitNoItemImg} alt=\"gloves\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={weaponItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemWeapon}`}>\r\n                    {weaponItem ? (\r\n                        <img src={weaponItem.imageUrl} className={classes.portraitItemImg} alt=\"weapon\" />\r\n                    ) : (\r\n                        <img src=\"images/sword.svg\" className={classes.portraitNoItemImg} alt=\"weapon\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemShield}`}>\r\n                    <img src=\"images/shield.svg\" className={classes.portraitNoItemImg} alt=\"shield\" />\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EquippedItems;\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\nimport Attribute from \"../models/character/Attribute\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nconst StatisticsBlock: React.FunctionComponent<StatisticsBlockProps> = (props: StatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    const createData = (name: string, calculation: string, modifier: string) => {\r\n        return { name, calculation, modifier };\r\n    };\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.bonus;\r\n    const attributeCalculation = (attribute: Attribute) =>\r\n        attributeTotal(attribute) === attribute.base ? attribute.base.toString() : `${attribute.base} (${attributeTotal(attribute)})`;\r\n    const displayWithPlusMinus = (val: number) => val > 0 ? `+${val}` : val.toString();\r\n    const showModifier = (attribute: Attribute) => displayWithPlusMinus(AttributeHelper.getModifier(attribute));\r\n\r\n    const rows = [\r\n        createData(\"Strength\", attributeCalculation(statistics.strength), showModifier(statistics.strength)),\r\n        createData(\"Dexterity\", attributeCalculation(statistics.dexterity), showModifier(statistics.dexterity)),\r\n        createData(\"Consitution\", attributeCalculation(statistics.constitution), showModifier(statistics.constitution)),\r\n        createData(\"Intelligence\", attributeCalculation(statistics.intelligence), showModifier(statistics.intelligence)),\r\n        createData(\"Wisdom\", attributeCalculation(statistics.wisdom), showModifier(statistics.wisdom)),\r\n        createData(\"Charisma\", attributeCalculation(statistics.charisma), showModifier(statistics.charisma)),\r\n        createData(\"Luck\", attributeCalculation(statistics.strength), showModifier(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Value</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.calculation}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default StatisticsBlock;","import React from \"react\";\r\nimport { Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport LocationSearchingIcon from \"@material-ui/icons/LocationSearching\";\r\n\r\nimport CalculatedStats from \"../models/character/CalculatedStats\";\r\nimport EffectTable from \"../models/EffectTable\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport EffectTableEntry from \"../models/EffectTableEntry\";\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        //backgroundColor: theme.palette.background.paper,\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype CalculatedStatisticsBlockProps = {\r\n    statistics: CalculatedStats;\r\n    attributes: AttributeList;\r\n    level: number;\r\n    currentHitPoints: number;\r\n};\r\n\r\ntype EffectResults = {\r\n    meleeEffect: EffectTable;\r\n    meleeEffectEntry: EffectTableEntry;\r\n    rangedEffect: EffectTable;\r\n    rangedEffectEntry: EffectTableEntry;\r\n};\r\n\r\nconst CalculatedStatisticsBlock: React.FunctionComponent<CalculatedStatisticsBlockProps> = (props: CalculatedStatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics, attributes } = props;\r\n\r\n    const [effects, setEffects] = React.useState<EffectResults | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEffects = () => {\r\n            const service = new EffectTableServiceStatic();\r\n            const meleeEffect = service.getEffect(statistics.meleeEffectId);\r\n            const rangedEffect = service.getEffect(statistics.rangedEffectId);\r\n            const meleeEffectEntry = service.getResultEntry(meleeEffect, 15, 15);\r\n            const rangedEffectEntry = service.getResultEntry(rangedEffect, 15, 15);\r\n\r\n            if (meleeEffect && rangedEffect && meleeEffectEntry && rangedEffectEntry)\r\n                setEffects({\r\n                    meleeEffect: meleeEffect,\r\n                    meleeEffectEntry: meleeEffectEntry,\r\n                    rangedEffect: rangedEffect,\r\n                    rangedEffectEntry: rangedEffectEntry,\r\n                });\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (!effects) {\r\n            loadEffects();\r\n        }\r\n    }, [effects]);\r\n\r\n    if (!effects) return null;\r\n\r\n    return (\r\n        <div className={classes.statisticsBlock}>\r\n            <Grid container>\r\n                <Grid item xs={1} md={1}></Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FavoriteIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Hit Points ${props.currentHitPoints} / ${statistics.maxHitPoints}`}\r\n                                secondary={`Level ${props.level}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <SecurityIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Armor Class ${statistics.armour}`}\r\n                                secondary={`Spell Resistance ${statistics.spellResistance}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FastForwardIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack Speed ${statistics.meleeAttackSpeed}`}\r\n                                secondary={`Move Speed ${statistics.moveSpeed}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <LocationSearchingIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack +${statistics.meleeAttackBonus} (${statistics.meleeEffectId} Table)`}\r\n                                secondary={`Damage D${effects.meleeEffectEntry.damageDie} + ${\r\n                                    statistics.meleeDamageBonus +\r\n                                    HeroHelper.getStatModifier(statistics, attributes, effects.meleeEffectEntry.damageModifier)\r\n                                }`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={1} md={1}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CalculatedStatisticsBlock;\r\n","import React from \"react\";\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, ListItemText, Grid } from \"@material-ui/core\";\r\n\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\n\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\n\r\nconst useStyles = makeStyles({\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype TraitListProps = {\r\n    traits: HeroTrait[];\r\n};\r\n\r\nconst TraitList: React.FunctionComponent<TraitListProps> = (props: TraitListProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { traits } = props;\r\n\r\n    const renderTraitIcon = ((t: HeroTrait) => {\r\n        switch (t.type) {\r\n            case 1: // Mental\r\n                return <FaceIcon />;\r\n            case 2: // Mystical\r\n                return <FlashOnIcon />;\r\n            case 3: // Physical\r\n                return <AccessibilityNewIcon />;\r\n            case 4: // Item\r\n                return <AllInboxIcon />;\r\n            default:\r\n                return <AllInboxIcon />;\r\n        }\r\n    });\r\n\r\n\r\n    // TODO: Add behiavor , {t.behaviour}\r\n    const renderTrait = (t: HeroTrait) => (\r\n        <ListItem key={t.id}>\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    {renderTraitIcon(t)}\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={t.name}\r\n                secondary={t.from}\r\n            />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <Grid container className={classes.statisticsBlock}>\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8}>\r\n                <List>{traits.map((t) => renderTrait(t))}</List>\r\n            </Grid>\r\n            <Grid item xs={2}></Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TraitList;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport Item from \"../models/Item\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\nimport MockItemService from \"../services/MockItemService\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nimport PartyInventory from \"../components/PartyInventory\";\r\nimport EquippedItems from \"../components/EquippedItems\";\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport CalculatedStatisticsBlock from \"../components/CalculatedStatisticsBlock\";\r\nimport TraitList from \"../components/TraitList\";\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"91.5vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"56vh\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        //left: \"20%\",\r\n        width: \"18vw\",\r\n        height: \"18vw\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"28px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"34vh\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statistics: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n}));\r\n\r\ntype HeroProfileProps = {\r\n    id: string;\r\n};\r\n\r\nconst HeroProfile: React.FunctionComponent<HeroProfileProps> = (props: HeroProfileProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { id } = props;\r\n\r\n    let [hero, setHero] = React.useState<Hero | null>(null);\r\n    let [party, setParty] = React.useState<PartyStatistics | null>(null);\r\n    let [world, setWorld] = React.useState<WorldStatistics | null>(null);\r\n    let [equippedItems, setEquippedItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n    let [currentId, setCurrentId] = React.useState(\"\");\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const partyService = new MockPartyService();\r\n\r\n            // Process special keypress IDs, and re-direct to the correct hero\r\n            switch (id) {\r\n                case \"1\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[0]);\r\n                    return;\r\n                case \"2\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[1]);\r\n                    return;\r\n                case \"3\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[2]);\r\n                    return;\r\n                case \"4\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[3]);\r\n                    return;\r\n            }\r\n\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const newParty = partyService.getPartyStatistics();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            const itemsService = new MockItemService();\r\n            const newItems = itemsService.getItems(newHero.currentStatus.equippedItems);\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n            if (!newItems) {\r\n                console.error(`No items data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n            setEquippedItems(newItems);\r\n        };\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world || !equippedItems || !inventoryItems) return null;\r\n\r\n    const onEquipItem = (itemId: string) => {\r\n        // console.log(`hero '${id}' equips ${itemId}`);\r\n\r\n        // Equip the item\r\n        const heroService = new MockHeroService();\r\n        const removedItemId = heroService.equipItem(id, itemId);\r\n\r\n        // Remove the item from party inventory\r\n        const partyService = new MockPartyService();\r\n        partyService.removeInventoryItem(itemId);\r\n        if (removedItemId) {\r\n            partyService.addInventoryItem(removedItemId);\r\n        }\r\n\r\n        // Force a refresh\r\n        setCurrentId(\"\");\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.characterGrid}>\r\n                <div className={classes.left}>\r\n                    <div className={classes.portrait}>\r\n                        <br />\r\n                        <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                            <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                        </LinkTo>\r\n                        <div className={classes.bannerContainer}>\r\n                            <h1 className=\"banner\">{hero.name}</h1>\r\n                        </div>\r\n                        <div className={classes.itemContainer}>\r\n                            <p>\r\n                                {hero.description} - {StringConverters.alignmentToString(hero.alignment)}\r\n                            </p>\r\n                            <Grid container>\r\n                                <Grid item xs={3}>\r\n                                    <EquippedItems equippedItems={equippedItems} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                                </Grid>\r\n                                <Grid item xs={3}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.inventory}>\r\n                        <br />\r\n                        <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                        <PartyInventory items={inventoryItems} onEquipItem={onEquipItem} />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.statistics}>\r\n                    <br />\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{hero.background}</p>\r\n                    </div>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <StatisticsBlock statistics={HeroHelper.calculateAttributesWithModifiers(hero)} />\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Other</h1>\r\n                    <CalculatedStatisticsBlock\r\n                        statistics={HeroHelper.calculateStatsWithModifiers(hero)}\r\n                        attributes={hero.attributes}\r\n                        level={hero.level}\r\n                        currentHitPoints={hero.currentStatus.currentHitPoints}\r\n                    />\r\n                    <h1 className={classes.sectionHeading}>Abilities</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{StringConverters.abilitiesToString(hero.abilities)}</p>\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Traits</h1>\r\n                    <TraitList traits={HeroHelper.getAllTraits(hero)} />\r\n                    <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>Reputation {party.reputation}</p>\r\n                        {party.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        {world.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default HeroProfile;\r\n","import React from 'react';\r\n\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport EncounterMapLoader from '../components/EncounterMapLoader';\r\nimport GameState from '../models/GameState';\r\n\r\n/*\r\n* Page for testing encounters\r\n* Actual encounters will be loaded through the main map page tracking the GameState.\r\n*/\r\nconst EncounterPage: React.FunctionComponent = (): JSX.Element => {\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n\r\n        console.log(\"New map : \" + newState.currentMapId + \", \" + newState.currentVertextId);\r\n    };\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <EncounterMapLoader encounterId=\"tavern\" onNewMap={onNewMap} />\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default EncounterPage;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\n\r\n// Pages\r\nimport MapPage from \"./pages/MapPage\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterPage from \"./pages/EncounterPage\";\r\nimport KeyMaps from \"./components/KeyMaps\";\r\n\r\nconst MainLayout: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <KeyMaps backUrl=\"/menu\">\r\n                <Header />\r\n            </KeyMaps>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path={`${process.env.PUBLIC_URL}/profile/:id`}\r\n                        component={(props: any) => <HeroProfile id={props.match.params.id} />}\r\n                    />\r\n                    <Route path={`${process.env.PUBLIC_URL}/encounter/:useTokens/`} component={EncounterPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/`} component={MapPage} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport MenuCards, { MenuCard } from \"./MenuCards\";\r\n\r\nconst useStyles = makeStyles({\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n});\r\n\r\ntype SaveGameSelectorProps = {\r\n    enabledSlots: boolean[];\r\n    saves: (Date | null)[];\r\n    currentSlot: number;\r\n    onSelected: (slot: number) => void;\r\n};\r\n\r\nconst SaveGameSelector: React.FunctionComponent<SaveGameSelectorProps> = (props: SaveGameSelectorProps) => {\r\n    const classes = useStyles();\r\n    \r\n    const { saves, enabledSlots, currentSlot, onSelected } = props;\r\n\r\n    const getDateString = (date: Date | null) => (date ? `${date.toLocaleString()}` : \"Empty\");\r\n    const getDescription = (date: Date | null, isCurrentSlot: boolean) => {\r\n        return isCurrentSlot ? `Current Save (${getDateString(date)})` : getDateString(date);\r\n    };\r\n\r\n    const saveButtons: MenuCard[] = [\r\n        {\r\n            title: \"Slot A\",\r\n            description: getDescription(saves[0], currentSlot === 0),\r\n            enabled: enabledSlots[0],\r\n            active: currentSlot === 0,\r\n            onSelected: () => onSelected(0),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot B\",\r\n            description: getDescription(saves[1], currentSlot === 1),\r\n            enabled: enabledSlots[1],\r\n            active: currentSlot === 1,\r\n            onSelected: () => onSelected(1),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot C\",\r\n            description: getDescription(saves[2], currentSlot === 2),\r\n            enabled: enabledSlots[2],\r\n            active: currentSlot === 2,\r\n            onSelected: () => onSelected(2),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n    ];\r\n\r\n    return <MenuCards items={saveButtons} />;\r\n};\r\n\r\nexport default SaveGameSelector;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameNewMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHome = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"New game in slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHome();\r\n    };\r\n\r\n    // Can choose any empty slots\r\n    const enabledSlots = (): boolean[] => saveTimes.map((s) => s === null);\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose an empty save slot\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameNewMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameLoadMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHomeMap = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Loaing slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHomeMap();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const calculateEnabledSlots = (saves: (Date | null)[]): boolean[] => {\r\n        const enabledSlots = saves.map((s) => s !== null);\r\n        console.log(\"Games : \" + JSON.stringify(enabledSlots));\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to load\r\n                </Typography>\r\n                <SaveGameSelector\r\n                    enabledSlots={calculateEnabledSlots(saveTimes)}\r\n                    currentSlot={currentSave}\r\n                    saves={saveTimes}\r\n                    onSelected={saveSelected}\r\n                />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameLoadMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameDeleteMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToMenu = () => history.push(\"/menu\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Deleting slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.deleteSlot(slot);\r\n\r\n        navigateToMenu();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const enabledSlots = (): boolean[] => {\r\n        const enabledSlots = saveTimes.map((s) => s !== null);\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to delete\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameDeleteMenu;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport PitTheme from \"./PitTheme\";\r\n\r\n// Pages\r\nimport MainMenu from \"./pages/MainMenu\";\r\nimport MainLayout from \"./MainLayout\";\r\nimport GameNewMenu from \"./pages/GameNewMenu\";\r\nimport GameLoadMenu from \"./pages/GameLoadMenu\";\r\nimport GameDeleteMenu from \"./pages/GameDeleteMenu\";\r\n\r\nconst App : React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <div\r\n            className=\"app\"\r\n            onContextMenu={(e) => {\r\n                // Disable right-lick menu\r\n                e.preventDefault();\r\n                return false;\r\n            }}\r\n        >\r\n            <ThemeProvider theme={PitTheme}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path={`${process.env.PUBLIC_URL}/menu`} component={MainMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/new`} component={GameNewMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/load`} component={GameLoadMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/delete`} component={GameDeleteMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/`} component={MainLayout} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}