{"version":3,"sources":["helpers/ElectronHelper.ts","PitTheme.tsx","components/LinkTo.tsx","components/KeyMaps.tsx","services/MockSaveService.ts","components/MenuCards.tsx","pages/MainMenu.tsx","services/MockItemService.ts","helpers/AttributeHelper.ts","services/MockTraitService.ts","services/MockHeroService.ts","services/MockPartyService.ts","components/Header.tsx","services/MockGameStateService.ts","models/character/Hero.ts","models/character/Trait.ts","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","services/MockVariableService.ts","services/MockStoryEncounterService.ts","components/HeroList.tsx","components/encounter-dialog/PartySelect.tsx","components/encounter-dialog/HeroSelect.tsx","components/encounter-dialog/HeroDismiss.tsx","services/StringConverters.ts","components/ItemTooltipContent.tsx","components/InventoryGridItem.tsx","components/InventorySelector.tsx","components/encounter-dialog/ItemSelect.tsx","components/encounter-dialog/Stash.tsx","components/TraitList.tsx","components/encounter-dialog/TraitSelect.tsx","components/encounter-dialog/PartyInventorySelect.tsx","components/encounter-dialog/ItemLoot.tsx","components/encounter-dialog/ItemUse.tsx","components/encounter-dialog/AttackResolve.tsx","components/encounter-dialog/EncounterDialog.tsx","components/markers/VertexMarker.tsx","models/Queue.ts","components/markers/Drift_Marker.tsx","components/markers/DriftMarker2.tsx","components/markers/PartyMarker.tsx","services/TimeTracker.ts","components/OverheadMap.tsx","components/LoadingProgress.tsx","components/OverheadMapLoader.tsx","services/MockDetailedEncounterService.ts","components/markers/HeroMarker.tsx","helpers/Transforms.ts","helpers/GridHelpers.ts","models/CharacterEncounterData.ts","components/markers/GridMarker.tsx","components/markers/FoeMarker.tsx","components/encounter-map/StaticMarker.tsx","components/encounter-map/CombatPath.tsx","components/markers/CustomMarker.tsx","components/markers/DamageDisplay.tsx","components/CombatIndicator.tsx","components/ActionBar.tsx","services/DiceRoller.ts","services/DiceSeedTracker.ts","services/InitiativeTracker.ts","models/AttackResult.ts","services/EffectTableServiceStatic.ts","helpers/HeroHelper.ts","helpers/CombatHelper.ts","helpers/CombatPositionHelper.ts","helpers/CombatActionHelper.ts","components/markers/IsoMarker.tsx","components/EncounterMap.tsx","services/MockNpcService.ts","helpers/ArrayHelper.ts","components/EncounterMapLoader.tsx","pages/MapPage.tsx","services/MockWorldService.ts","components/PartyInventoryEquip.tsx","components/EquippedItems.tsx","components/StatisticsBlock.tsx","components/CalculatedStatisticsBlock.tsx","pages/HeroProfile.tsx","pages/EncounterPage.tsx","services/MockQuestService.ts","pages/QuestsPage.tsx","MainLayout.tsx","components/SaveGameSelector.tsx","pages/GameNewMenu.tsx","pages/GameLoadMenu.tsx","pages/GameDeleteMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ElectronHelper","window","process","type","versions","electron","navigator","userAgent","indexOf","PitTheme","createMuiTheme","palette","primary","light","main","dark","LinkTo","props","url","children","top","left","width","classes","makeStyles","container","zIndex","display","cursor","containerAbsolute","position","useStyles","isPositioned","history","useHistory","className","onClick","event","push","KeyMaps","backUrl","navigateToUrl","Mousetrap","bind","MockSaveService","setCurrentSave","slot","_currentSave","localStorage","setItem","toString","getCurrentSave","getItem","slotId","Number","parseInt","markSlotUpdated","Date","getSlotUpdateTimes","slot1","slot2","slot3","deleteSlot","Error","slotStart","saveKeys","Object","entries","map","item","filter","i","length","removeItem","key","value","this","JSON","stringify","json","parse","undefined","card","margin","backgroundColor","right","boxShadow","cardDisabled","cardActive","MenuCards","selectClass","active","enabled","items","Grid","xs","Card","onSelected","CardHeader","title","Typography","variant","avatar","icon","CardContent","description","root","height","close","cardIcon","fontSize","titleContainer","padding","appLogo","pointerEvents","MainMenu","React","useState","saveTimes","setSaveTimes","useEffect","saveService","loadSaves","slotCount","s","allSlotsFull","oneSlotFull","isElectron","require","ipcRenderer","send","src","alt","MockItemService","getItems","ids","id","getItemDetail","TokenOfServitude","HagTeeth","CeramicHelm","CeramicArmor","Torch","Shovel","Rope","WolfSpear","AttributeHelper","attribute","total","base","bonus","convertSimpleToComplex","attributes","strength","dexterity","constitution","intelligence","wisdom","charisma","luck","MockTraitService","getTraits","getTraitDetail","PhobiaUndead","ToughSkin","ResurrectionBotched","CompulsionKleptomaniac","MockHeroService","hero","getHeroData","convertToDetailed","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroes","heroId","itemId","heroMatch","find","itemService","originalItem","itemWithSameType","currentStatus","equippedItems","itemType","saveObject","traitId","from","newTrait","heroTrait","name","behavior","permanentTraits","findIndex","t","getObject","baseTraits","temporaryTraits","currentHitPoints","baseHitPoints","lostSpells","background","imageUrl","tokenUrl","tokenOffset","abilities","alignment","level","stats","status","armour","meleeAttackBonus","meleeAttackSpeed","meleeEffectId","meleeDamageBonus","rangedAttackBonus","rangedAttackSpeed","rangedEffectId","rangedDamageBonus","spellAttackBonus","spellAttackSpeed","spellDamageBonus","spells","moveSpeed","maxHitPoints","spellResistance","damageResistance","MockPartyService","reputation","traits","heroService","getPartyIds","getHeroDetail","_heroIds","heroIds","defaultHeroIds","_inventoryItemIds","inventoryIds","defaultInventoryIds","itemIds","inventoryItems","getInventory","setInventory","_stashItemIds","stashIds","defaultStashIds","getStash","setStash","stashItems","_quests","quests","defaultQuests","quest","newQuests","q","appHeader","headerSpan","headerParty","headerImg","border","borderRadius","borderWidth","borderColor","Header","party","setParty","newParty","getParty","console","error","loadParty","MockGameStateService","_state","stateJson","state","defaultState","log","currentMapId","currentVertextId","currentMapCovers","currentTurn","seed","Math","random","MAX_SAFE_INTEGER","Alignment","StatusFlags","AbilityFlags","TraitType","ModifierType","MockMapService","BlackTempleMap","TownMap","coverUrls","useDayNight","pathColor","vertices","v","Leaflet","latLng","clickRadius","encounterId","marker","exitId","coverIds","edges","distance","x","y","latDist","lat","lngDist","lng","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","weight","MockVariableService","startsWith","substr","MockStoryEncounterService","currentStory","currentId","currentTitle","once","TheInterceptContent","commonRoomContent","chasmContent","homeContent","storeRoomContent","nineBellsContent","brawlContent","squallsEndEntryContent","dartTrapContent","fetchJson","Story","createEmptyStory","storyStateJson","LoadJson","GoToStart","tags","globalTags","titleTag","substring","trimStart","variableService","skipVariableTag","skipVariable","getVariable","variableValues","join","split","forEach","variablesState","SetGlobal","StringValue","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","GetVariableWithName","detailedEncounter","coverVisible","storyState","toJson","paragraphText","choices","isFinished","finishData","Continue","encounterChoices","currentChoices","c","index","text","heroSelected","HeroList","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","partyService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","currentTarget","newSelected","selectedHeroIds","imgClass","output","style","textAlign","Tooltip","renderParty","partyButton","partyButtonDiv","PartySelect","setHeroIds","isApplied","setIsApplied","isValid","Button","setPartyIds","onReady","disabled","color","startIcon","HeroSelector","HeroDismiss","setHeroId","StringConverters","resourceMap","Resources","alignmentToString","resources","getResources","modifierToString","modifierType","itemTypeText","abilitiesToString","None","Acrobatics","Devices","PatronBond","Perception","Sorcery","Stealth","Survival","ItemTooltipContent","renderBehaviors","effects","e","modifierValue","Fragment","align","traitJsx","newTraits","concat","renderTraits","gridItem","itemSelected","InventoryGridItem","arrow","inventory","InventorySelector","spacing","alignItems","justify","itemGrids","emptyItems","emptyGrids","renderInventory","lootImg","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","ItemSelect","useStash","itemsSelected","setItemsSelected","inventorySelected","setInventorySelected","itemsSelectedCount","inventorySelectedCount","isItemSelected","isInventorySelected","willInventoryBeTooBig","deselectAll","lootSourceName","match","newItemsSelected","splice","takeItems","onTake","putItems","onPut","newInventorySelected","Stash","setStashItems","setInventoryItems","stashItemIds","inventoryItemIds","newStashItems","newInventoryItems","loadItems","removeInventoryItem","addStashItem","removeStashItem","addInventoryItem","notSelected","TraitList","selectedTrait","setSelectedTrait","renderTraitIcon","renderTrait","ListItem","trait","ListItemAvatar","Avatar","ListItemText","secondary","List","dense","traitsBlock","button","buttonDiv","TraitSelect","traitIds","setTraits","loadTraits","addPermanentTrait","PartyInventorySelect","selectedIndex","ItemLoot","lootItems","setLootItems","loadLootItems","loadInventoryItems","service","takenItems","ItemUse","setItems","used","setUsed","newItems","isSelected","selectedItem","selectionChanged","AttackResolve","attackResult","determineAttackResult","paper","overflow","dialog","userSelect","opacity","content","minWidth","minHeight","fontFamily","actions","portrait","placeholder","float","paragraph","EncounterDialog","onClose","MockEncounterService","encounterService","paragraphs","setParagraphs","setTitle","setChoices","storyStarted","setStoryStarted","isReady","setIsReady","open","handleClose","handleChoice","encounter","chooseChoice","encounterFinish","processFinish","handleContinue","finish","encounterDetailId","startEncounter","isBlockingDialog","Dialog","aria-labelledby","DialogContent","p","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","isInventory","extractFunctionText","functionName","funcStart","funcEnd","extractParams","functionText","paramsStart","slice","replaceAll","trim","selectItemsFunction","selectTraitFunction","itemUseFunction","useItems","attackFuncText","attackParams","HeroSelect","isRandomTrait","isRandom","selectMultiple","target","attackModifier","attackTable","renderParagraph","DialogActions","encChoices","disableContinue","renderChoices","tooltip","whiteSpace","verticalAlign","justifyContent","marginLeft","marginRight","flexShrink","VertexMarker","onHover","onHoverEnd","vertextId","Icon","iconUrl","image","iconSize","dimensions","iconAnchor","anchor","Marker","onclick","onmouseover","onmouseout","renderTooltipIcon","Queue","_store","val","shift","exports","Leaflet_module","L","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","dragging","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","DriftMarker2","leafletElement","rest","DivIcon","el","contextValue","leaflet","popupContainer","createLeafletElement","forceUpdate","fromProps","toProps","zIndexOffset","setZIndexOffset","setOpacity","draggable","_icon","portal","createPortal","MapLayer","withLeaflet","PartyMarker","isActive","onMoveEnd","iconActive","_","TimeTracker","_dayLength","isNight","hour","isMorning","isEvening","toLogString","logString","dayMap","nightMap","eveningMap","morningMap","bottom","OverheadMap","startState","mapUrl","onNewMap","setPos","path","setPath","vertexQueue","setEncounterId","gameState","setGameState","initialNode","setInitialNode","visibleCovers","setVisibleCovers","handleMoveEnd","targetVertex","pop","thisCoverIds","splits","newState","currentEncounterId","clear","stateService","getState","setState","vertexId","npath","aStar","nextVertex","pathVertexes","moveToVertexId","mapGraph","bounds","LatLngBounds","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","round","zoomControl","ImageOverlay","covers","renderCovers","renderMarkers","Polyline","positions","dashArray","dashOffset","LoadingProgress","CircularProgress","OverheadMapLoader","setGraph","setPathColor","setMapUrl","setCoverUrls","setUseDayNight","getMap","Build","loadMap","MockDetailedEncounterService","TavernMap","HeroMarker","progress","circularProgress","percentHp","details","displayPos","colorPrimary","thickness","size","Transforms","isoX","carX","carY","isoY","cardinalToIsometric","car","cardinalToIsometric2","isometricToCardinal","iso","offset","scale","GridHelpers","tokenGrid","grid","mergeGridEntry","gridToDisplayTuple","gridScale","gridOffset","gridToDisplayCenterTuple","gridToDisplay","gridToDisplayCenter","reverseOffset","coords","reverseScale","displayToGrid","result","floor","getGridLocation","char","getInitialPositions","characters","gridPosition","CharacterEncounterData","tokenEntry","baseEntry","buildAstarGrid","isWalkable","getGridPath","start","end","isHeroMove","mergedGrid","buildMergedGrids","endEntry","isFoe","isHero","isBlocked","AStarFinder","matrix","startGridPosition","endGridPosition","findPath","reverse","getRangedGridPath","range","distanceSquared","getHeroPath","getFoePath","findNearestHero","paths","heroEntries","sortedPaths","sort","p1","p2","entry","isEncounter","canEndMove","displayGrid","displayStrings","gridEntry","selectedAttack","gridPos","isMoving","queueStrings","convertFunc","GridMarker","gridToDisplayFunc","FoeMarker","foe","meleeHover","hoverUrl","attackIcon","onMouseOver","onMouseOut","StaticMarker","CombatPath","move","fullPath","remainderPathLength","fullMoveStart","fullMoveEnd","halfMoveStart","remainderPath","fullMovePath","halfMovePath","halfMoveMarker","fullMoveMarker","CustomMarker","RL","zIndexOff","fromPosition","fromZIndexOffset","fromOpacity","fromDraggable","fromClassName","toPosition","toZIndexOffset","toOpacity","toDraggable","toClassName","difference","itemsToRemove","includes","fromClasses","toClasses","classList","remove","updateLeafletElement","LeafletProvider","explode","death","miss","DamageDisplay","damage","show","Fade","in","transitionDelay","timeout","enter","exit","CombatIndicator","isCombat","initiative","ActionBar","renderButton","renderSpells","DiceRoller","rollDie","dieType","ceil","generate","roll20","roll10","DiceSeedTracker","reduce","a","b","charCodeAt","mulberry32","imul","InitiativeTracker","initiatives","_initiatives","processDelay","delay","init","getInitiatives","getNextInitiative","displayInitiatives","gameId","foes","fromEncounterId","roller","heroInitiatives","h","next","getModifier","foeInitiatives","f","n1","n2","AttackResult","createMiss","createFumble","createHit","createCritical","createDeath","EffectTableServiceStatic","Fists","Spear","Bow","MagicMissle","table","rawRoll","matches","useRaw","resultMin","resultMax","HeroHelper","statistics","modifier","getItemTraits","itemTraits","getAllTraits","calculateAttributesWithModifiers","allTraits","strMod","dexMod","conMod","intMod","wisMod","chaMod","luckMod","j","Strength","Dexterity","Constitution","Intelligence","Wisdom","Charisma","Luck","calculateStatsWithModifiers","armorMod","moveSpeedMod","meleeAttackMod","meleeAttackSpeedMod","meleeDamageMod","rangedAttackMod","rangedAttackSpeedMod","rangedDamageMod","spellAttackMod","spellAttackSpeedMod","spellDamageMod","hpMod","spellResistMod","damageResistMod","Armor","MoveSpeed","MeleeAttack","MeleeAttackSpeed","MeleeDamage","MeleeEffect","RangedEffect","RangedAttack","RangedAttackSpeed","RangedDamage","SpellAttack","SpellAttackSpeed","SpellDamage","HitPoints","SpellResistance","DamageResistance","Status","meleeEffect","getEffect","rangedEffect","meleeEffectAttackModifier","rangedEffectAttackModifier","getStatModifier","CombatHelper","determineAttackResultShared","seedAttack","seedDamage","attacker","effectId","attackBonus","damageBonus","targetPos","attackerPos","attackerDetail","targetDetail","resultService","effect","attackRoll","attackValue","isMiss","dodgeWith","isFumble","isCritical","getResultEntry","damageDieCount","damageDie","damageModifier","determineMeleeAttackResult","determineRangedAttackResult","determineSpellAttackResult","determineMaxRange","CombatPositionHelper","updatePosition","newPosition","oldPositions","newPositions","removePosition","getPositionByEntry","clearAllQueues","CombatActionHelper","trimPathToMove","maxPath","buildAttack","movePath","isAttack","character","action","buildMove","IsoMarker","dot","dotActive","EncounterMap","heroData","setHeroData","foeData","setFoeData","damagePos","setDamagePos","setTokenGrid","selectedHero","setSelectedHero","attackTarget","setAttackTarget","setInitiatives","currentAction","setCurrentAction","setSeed","params","useParams","startNextActor","initiativeTracker","newNextToMove","gridDisplay","foeMatch","closestHeroPath","newCharacterAction","newInitiatives","numMoves","heroPos","getPosition","setCharacterPosition","executeCurrentAction","onHeroClick","encounters","handleAttack","targetMatch","attackSeed","damageSeed","results","newFoeDetails","removeCharacter","addDamagePos","showHoverPath","hoverGridPos","displayPath","onFoeHover","onFoeHoverEnd","onClickGridMarker","processMarkerAction","onFoeClick","endPos","endToken","newAction","markers","renderGridMarkers","useTokens","renderHeroes","damages","displayResults","dam","renderDamageMarkers","MockNpcService","getFoeData","clone","thugContent","ArrayHelper","array","count","clonedArray","assign","self","EncounterMapLoader","setEncounter","setFoes","encounterData","getEncounterDetail","newHeroes","foeEntries","npcs","foeIds","removeDuplicates","npcService","newFoes","getFoeDetail","foeInstances","foeDeepClone","buildInitial","loadEncounter","showGrid","MapPage","newGameState","loadGameState","MockWorldService","PartyInventoryEquip","onEquipItem","itemContainer","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","portraitItemWeapon","portraitItemShield","portraitNoItemImg","portraitItemImg","EquippedItems","headItem","bodyItem","armsItem","feetItem","weaponItem","StyledTableCell","withStyles","theme","head","common","black","white","body","TableCell","StyledTableRow","hover","TableRow","StatisticsBlock","createData","calculation","attributeTotal","attributeCalculation","showModifier","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","row","scope","maxWidth","statisticsBlock","CalculatedStatisticsBlock","setEffects","meleeEffectEntry","rangedEffectEntry","loadEffects","md","characterGrid","gridAutoRows","breakpoints","down","gridTemplateColumns","up","sectionHeading","bannerContainer","portraitImg","overflowY","gridRowEnd","HeroProfile","setHero","world","setWorld","setEquippedItems","setCurrentId","newHero","getPartyStatistics","newWorld","getWorld","loadHero","removedItemId","equipItem","EncounterPage","MockQuestService","ThereAndBackQuest","SongOfTheSeaQuest","marginTop","list","activeItem","questCard","questContent","QuestsPage","setQuests","activeQuest","setActiveQuest","questService","partyQuests","getQuests","partyQuest","getQuestDetail","loadQuests","renderQuests","detail","MainLayout","SaveGameSelector","saves","enabledSlots","currentSlot","getDateString","date","toLocaleString","getDescription","isCurrentSlot","saveButtons","chooseText","GameNewMenu","currentSave","clearCache","GameLoadMenu","calculateEnabledSlots","GameDeleteMenu","App","onContextMenu","preventDefault","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dbeefce.chunk.js","sourcesContent":["export default class ElectronHelper {\r\n    /*\r\n     * Are we running under electron?\r\n     */\r\n    public static isElectron(): boolean {\r\n        \r\n        // Renderer process\r\n        if (typeof window !== \"undefined\" && typeof window.process === \"object\" && window.process.type === \"renderer\") {\r\n            return true;\r\n        }\r\n\r\n        // Main process\r\n        if (typeof process !== \"undefined\" && typeof process.versions === \"object\" && !!process.versions.electron) {\r\n            return true;\r\n        }\r\n\r\n        // Detect the user agent when the `nodeIntegration` option is set to true\r\n        if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n//import { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: \"#ffd600\",\r\n            main: \"#ffd600\",\r\n            dark: \"#ffd600\",\r\n        },\r\n        // secondary: {\r\n        //     light: blue[100],\r\n        //     main: blue[100],\r\n        //     dark: blue[100],\r\n        // },\r\n        // action: {\r\n        //     hover: blue[800],\r\n        // },\r\n    },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\ntype LinkToProps = {\r\n    url: string;\r\n    children?: React.ReactNode;\r\n    top?: string,\r\n    left?: string;\r\n    width?: string;\r\n};\r\n\r\nconst LinkTo: React.FunctionComponent<LinkToProps> = (props: LinkToProps) => {\r\n    \r\n    const { url, children, top, left, width } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        container: {\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n        containerAbsolute: {\r\n            position: \"absolute\",\r\n            top: top ?? \"20px\",\r\n            left: left ?? \"20px\",\r\n            width: width ?? \"40px\",\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    const isPositioned = top || left || width;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => history.push(url);\r\n\r\n    return (\r\n        <div className={isPositioned ? classes.containerAbsolute : classes.container} onClick={navigateToUrl}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LinkTo;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Mousetrap from \"mousetrap\";\r\n\r\ntype KeyMapsProps = {\r\n    backUrl: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst KeyMaps: React.FunctionComponent<KeyMapsProps> = (props: KeyMapsProps) => {\r\n    const { backUrl, children } = props;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string): void => history.push(url);\r\n\r\n    Mousetrap.bind(\"1\", () => navigateToUrl(\"/profile/1\"));\r\n    Mousetrap.bind(\"2\", () => navigateToUrl(\"/profile/2\"));\r\n    Mousetrap.bind(\"3\", () => navigateToUrl(\"/profile/3\"));\r\n    Mousetrap.bind(\"4\", () => navigateToUrl(\"/profile/4\"));\r\n    Mousetrap.bind([\"q\", \"Q\"], () => navigateToUrl(\"/quests\"));\r\n    Mousetrap.bind(\"esc\", () => navigateToUrl(backUrl));\r\n\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default KeyMaps;\r\n","export default class MockSaveService {\r\n    private static _currentSave = -1;\r\n\r\n    public setCurrentSave = (slot: number) => {\r\n        MockSaveService._currentSave = slot;\r\n        localStorage.setItem(\"currentSlot\", slot.toString());\r\n    };\r\n\r\n    public getCurrentSave = (): number => {\r\n        if (MockSaveService._currentSave > 0) return MockSaveService._currentSave;\r\n        const slot = localStorage.getItem(\"currentSlot\");\r\n\r\n        const slotId = slot ? Number.parseInt(slot) : 0;\r\n\r\n        MockSaveService._currentSave = slotId;\r\n\r\n        return slotId;\r\n    };\r\n\r\n    public markSlotUpdated = () => {\r\n        localStorage.setItem(this.getCurrentSave() + \"_time\", new Date().toString());\r\n    };\r\n\r\n    public getSlotUpdateTimes = (): (Date | null)[] => {\r\n        const slot1 = localStorage.getItem(\"0_time\");\r\n        const slot2 = localStorage.getItem(\"1_time\");\r\n        const slot3 = localStorage.getItem(\"2_time\");\r\n\r\n        const items: (Date | null)[] = [slot1 ? new Date(slot1) : null, slot2 ? new Date(slot2) : null, slot3 ? new Date(slot3) : null];\r\n\r\n        return items;\r\n    }\r\n\r\n    public deleteSlot = (slot: number) => {\r\n        if (slot === this.getCurrentSave()) {\r\n            throw new Error(\"Can't delete current save\");\r\n        }\r\n\r\n        // Get a list of local keys for this save slot\r\n        const slotStart = slot.toString() + \"_\";\r\n        const saveKeys = Object.entries(localStorage)\r\n            .map((item) => item[0])\r\n            .filter((item) => item.indexOf(slotStart) === 0);\r\n\r\n        // Delete these keys\r\n        for (let i = 0; i < saveKeys.length; i++) {\r\n            localStorage.removeItem(saveKeys[i]);\r\n        }\r\n    }\r\n\r\n    public saveObject<T>(key: string, value: T) {\r\n        localStorage.setItem(this.getCurrentSave() + \"_\" + key, JSON.stringify(value));\r\n        this.markSlotUpdated();\r\n    }\r\n\r\n    public getObject<T>(key: string): T | undefined {\r\n        const json = localStorage.getItem(this.getCurrentSave() + \"_\" + key);\r\n        return json ? JSON.parse(json) : undefined;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        top: \"1vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"lightsteelblue\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n            backgroundColor: \"ghostwhite\",\r\n        },\r\n    },\r\n    cardDisabled: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkgrey\",\r\n    },\r\n    cardActive: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkseagreen\",\r\n    },\r\n});\r\n\r\nexport type MenuCard = {\r\n    title: string;\r\n    description: string;\r\n    enabled: boolean;\r\n    active?: boolean;\r\n    icon?: JSX.Element;\r\n    onSelected: () => void;\r\n};\r\n\r\ntype MenuCardsProps = {\r\n    items: MenuCard[];\r\n};\r\n\r\nconst MenuCards: React.FunctionComponent<MenuCardsProps> = (props: MenuCardsProps) => {\r\n    const classes = useStyles();\r\n\r\n    const selectClass = (i: MenuCard) => (i.active ? classes.cardActive : i.enabled ? classes.card : classes.cardDisabled);\r\n\r\n    const { items } = props;\r\n    const renderCards = () =>\r\n        items.map((i) => (\r\n            <Card className={selectClass(i)} onClick={i.onSelected}>\r\n                <CardHeader title={<Typography variant=\"h2\">{i.title}</Typography>} avatar={i.icon} />\r\n                <CardContent>{i.description}</CardContent>\r\n            </Card>\r\n        ));\r\n\r\n    return (\r\n        <Grid container className={classes.container}>\r\n            <Grid item xs={3}></Grid>\r\n            <Grid item xs={6}>\r\n                {renderCards()}\r\n            </Grid>\r\n            <Grid item xs={3}></Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MenuCards;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport SystemUpdateAltIcon from \"@material-ui/icons/SystemUpdateAlt\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\n\r\nimport LinkTo from '../components/LinkTo';\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport ElectronHelper from '../helpers/ElectronHelper';\r\nimport MockSaveService from '../services/MockSaveService';\r\nimport MenuCards, { MenuCard } from '../components/MenuCards';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"9vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n});\r\n\r\nconst MainMenu: React.FunctionComponent = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n\r\n    let history = useHistory();\r\n    const navigateToNewGame = () => history.push(\"/game/new\");\r\n    const navigateToLoadGame = () => history.push(\"/game/load\");\r\n    const navigateToDeleteGame = () => history.push(\"/game/delete\");\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    const onElectronExit = () => {\r\n        const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n        ipcRenderer.send(\"close-app\");\r\n    }\r\n\r\n    if (!saveTimes)\r\n        return null;\r\n\r\n    const slotCount = saveTimes.filter(s => s !== null).length;\r\n    const allSlotsFull = slotCount >= 3;\r\n    const oneSlotFull = slotCount === 1;\r\n\r\n    const items: MenuCard[] = [\r\n        {\r\n            title: \"New Game\",\r\n            description: \"Start a new game\" + (allSlotsFull ? \" (All slots full)\" : \"\"),\r\n            enabled: !allSlotsFull,\r\n            icon: <AddCircleOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToNewGame,\r\n        },\r\n        {\r\n            title: \"Load Game\",\r\n            description: \"Load a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <SystemUpdateAltIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToLoadGame,\r\n        },\r\n        {\r\n            title: \"Delete Game\",\r\n            description: \"Delete a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <DeleteOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToDeleteGame,\r\n        },\r\n    ];\r\n\r\n    // Add a quit option if running under Electron\r\n    if (ElectronHelper.isElectron()) {\r\n        items.push({\r\n            title: \"Quit\",\r\n            description: \"Exit the game\",\r\n            enabled: true,\r\n            icon: <ExitToAppIcon className={classes.cardIcon} />,\r\n            onSelected: onElectronExit,\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <MenuCards items={items} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\nimport CeramicHelm from \"./items/ceramic_helm.json\";\r\nimport CeramicArmor from \"./items/ceramic_armor.json\";\r\n\r\nimport Rope from \"./items/rope.json\";\r\nimport Torch from \"./items/torch.json\";\r\nimport Shovel from \"./items/shovel.json\";\r\n\r\nexport default class MockItemService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude as Item;\r\n            case \"hag_teeth\":\r\n                return HagTeeth as Item;\r\n            case \"ceramic_helm\":\r\n                return CeramicHelm as Item;\r\n            case \"ceramic_armor\":\r\n                return CeramicArmor as Item;\r\n            case \"torch\":\r\n                return Torch as Item;\r\n            case \"shovel\":\r\n                return Shovel as Item;\r\n            case \"rope\":\r\n                return Rope as Item;\r\n            case \"wolf_spear\":\r\n                return WolfSpear as Item;\r\n            default:\r\n                return WolfSpear as Item;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import Attribute from \"../models/character/Attribute\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\nimport AttributeSimple from \"../models/character/AttributesSimple\";\r\n\r\nexport default class AttributeHelper {\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static convertSimpleToComplex = (attributes: AttributeSimple): AttributeList => {\r\n        const attributesComplex = {\r\n            strength: { base: attributes.strength, bonus: 0 },\r\n            dexterity: { base: attributes.dexterity, bonus: 0 },\r\n            constitution: { base: attributes.constitution, bonus: 0 },\r\n            intelligence: { base: attributes.intelligence, bonus: 0 },\r\n            wisdom: { base: attributes.wisdom, bonus: 0 },\r\n            charisma: { base: attributes.charisma, bonus: 0 },\r\n            luck: { base: attributes.luck, bonus: 0 },\r\n        };\r\n        return attributesComplex;\r\n    };\r\n\r\n    public static getModifier(attribute: Attribute): number {\r\n        const total = attribute.base + attribute.bonus;\r\n        if (total <= 1) return -5;\r\n        if (total <= 3) return -4;\r\n        if (total <= 5) return -3;\r\n        if (total <= 7) return -2;\r\n        if (total <= 9) return -1;\r\n        if (total <= 11) return 0;\r\n        if (total <= 13) return 1;\r\n        if (total <= 15) return 2;\r\n        if (total <= 17) return 3;\r\n        if (total <= 19) return 4;\r\n        if (total <= 21) return 5;\r\n        if (total <= 23) return 6;\r\n        if (total <= 25) return 7;\r\n        if (total <= 27) return 8;\r\n        return 9;\r\n    }\r\n}\r\n","import Trait from \"../models/character/Trait\";\r\n\r\nimport CompulsionKleptomaniac from \"./traits/compulsion_kleptomaniac.json\";\r\nimport PhobiaUndead from \"./traits/phobia_undead.json\";\r\nimport ResurrectionBotched from \"./traits/resurrection_botched.json\";\r\nimport ToughSkin from \"./traits/physical_tough_skin.json\";\r\n\r\nexport default class MockTraitService {\r\n    getTraitDetail(id: string): Trait {\r\n        switch (id) {\r\n            case \"phobia_undead\":\r\n                return PhobiaUndead;\r\n            case \"physical_tough_skin\":\r\n                return ToughSkin;\r\n            case \"resurrection_botched\":\r\n                return ResurrectionBotched;\r\n            case \"compulsion_kleptomaniac\":\r\n            default:\r\n                return CompulsionKleptomaniac;\r\n        }\r\n    }\r\n\r\n    getTraits = (ids: string[]): Trait[] => ids.map((id) => this.getTraitDetail(id));\r\n}\r\n","import Hero  from \"../models/character/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\nimport MockItemService from \"./MockItemService\";\r\nimport HeroData from \"../models/character/HeroData\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport MockSaveService from \"./MockSaveService\";\r\nimport CurrentStatus from \"../models/character/CurrentStats\";\r\nimport MockTraitService from \"./MockTraitService\";\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        const hero = this.getHeroData(id);\r\n        return MockHeroService.convertToDetailed(hero);\r\n    }\r\n\r\n    private static convertToDetailed(hero: HeroData): Hero {\r\n        const saveService = new MockSaveService();\r\n        const currentStatus = saveService.getObject<CurrentStatus>(\"heroStatus_\" + hero.id) ?? {\r\n            permanentTraits: hero.baseTraits,\r\n            temporaryTraits: [],\r\n            equippedItems: hero.equippedItems,\r\n            currentHitPoints: hero.baseHitPoints,\r\n            lostSpells: [],\r\n        };\r\n\r\n        const clone = {\r\n            id: hero.id,\r\n            name: hero.name,\r\n            description: hero.description,\r\n            background: hero.background,\r\n            imageUrl: hero.imageUrl,\r\n            tokenUrl: hero.tokenUrl,\r\n            tokenOffset: hero.tokenOffset,\r\n            abilities: hero.abilities,\r\n            alignment: hero.alignment,\r\n            level: hero.level,\r\n            attributes: AttributeHelper.convertSimpleToComplex(hero.attributes),\r\n            currentStatus: currentStatus,\r\n            // TODO: Fix this calculation\r\n            stats: {\r\n                status: 0,\r\n                armour: 10,\r\n                meleeAttackBonus: 0,\r\n                meleeAttackSpeed: 5,\r\n                meleeEffectId: \"Fists\",\r\n                meleeDamageBonus: 0,\r\n                rangedAttackBonus: 0,\r\n                rangedAttackSpeed: 5,\r\n                rangedEffectId: \"Bow\",\r\n                rangedDamageBonus: 0,\r\n                spellAttackBonus: 0,\r\n                spellAttackSpeed: 5,\r\n                spellDamageBonus: 0,\r\n                spells: hero.spells,\r\n                moveSpeed: 3,\r\n                maxHitPoints: hero.baseHitPoints,\r\n                spellResistance: 3,\r\n                damageResistance: 0,\r\n            },\r\n            spells: hero.spells,\r\n            behavior: [],\r\n        } as Hero;\r\n\r\n        return clone;\r\n    }\r\n\r\n    private getHeroData(id: string): HeroData {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroes: Hero[] = [\r\n        MockHeroService.convertToDetailed(Gyvwain),\r\n        MockHeroService.convertToDetailed(Balthazar),\r\n        MockHeroService.convertToDetailed(Gossamer),\r\n        MockHeroService.convertToDetailed(Gargamela),\r\n        MockHeroService.convertToDetailed(Justin),\r\n    ];\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return MockHeroService._heroes;\r\n    }\r\n\r\n    /*\r\n     * Equip an item in one of the equip slots\r\n     * If an item needs to be removed, return the item Id\r\n     */\r\n    equipItem(heroId: string, itemId: string): string | null {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const originalItem = itemService.getItemDetail(itemId);\r\n        if (!originalItem) throw new Error(\"Can't find original item\");\r\n\r\n        // Check if the hero already has an item of this type equipped\r\n        const items = itemService.getItems(heroMatch.currentStatus.equippedItems);\r\n        const itemWithSameType = items.find((item) => item.itemType === originalItem.itemType);\r\n\r\n        // TODO: We need special logic around equipable weapons\r\n\r\n        heroMatch.currentStatus.equippedItems.push(itemId);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n\r\n        if (!itemWithSameType) return null;\r\n\r\n        return itemWithSameType.id;\r\n    }\r\n\r\n    unequipItem(heroId: string, itemId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const item = itemService.getItemDetail(itemId);\r\n        if (!item) throw new Error(\"Can't find original item\");\r\n\r\n        // Remove the item\r\n        heroMatch.currentStatus.equippedItems = heroMatch.currentStatus.equippedItems.filter((i) => i !== item.id);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n    }\r\n\r\n    /*\r\n     * Equip an item in one of the equip slots\r\n     * If an item needs to be removed, return the item Id\r\n     */\r\n    addPermanentTrait(heroId: string, traitId: string, from: string): void {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const traitService = new MockTraitService();\r\n        const newTrait = traitService.getTraitDetail(traitId);\r\n        if (!newTrait) throw new Error(\"Can't find trait\");\r\n\r\n        // TODO: Check if the hero already has this trait?\r\n        const heroTrait = {\r\n            id: newTrait.id,\r\n            name: newTrait.name,\r\n            description: newTrait.description,\r\n            behavior: newTrait.behavior,\r\n            from: from,\r\n        } as HeroTrait;\r\n\r\n        // Skip if the hero already has the trait\r\n        if (heroMatch.currentStatus.permanentTraits.findIndex(t => t.id === traitId) >= 0)\r\n            return;\r\n\r\n        heroMatch.currentStatus.permanentTraits.push(heroTrait);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n    }\r\n\r\n    removePermanentTrait(heroId: string, traitId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        // Remove the trait\r\n        heroMatch.currentStatus.permanentTraits = heroMatch.currentStatus.permanentTraits.filter((i) => i.id !== traitId);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n    }\r\n}\r\n","import Hero from \"../models/character/Hero\";\r\nimport PartyQuest from \"../models/PartyQuest\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockHeroService from \"./MockHeroService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockPartyService {\r\n    getPartyStatistics(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static defaultHeroIds = (): string[] => [\r\n        \"gyvwain_the_chivalrous\",\r\n        \"balthazar_the_unblemished\",\r\n        \"gossamer\",\r\n        \"gargomela_the_black\",\r\n    ];\r\n\r\n    private static _heroIds: string[] | undefined = undefined;\r\n\r\n    getParty(): Hero[] {\r\n        const heroService = new MockHeroService();\r\n        const party = this.getPartyIds().map((id) => heroService.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    getPartyIds(): string[] {\r\n        if (MockPartyService._heroIds) {\r\n            return MockPartyService._heroIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const heroIds = saveService.getObject<string[]>(\"heroIds\") ?? MockPartyService.defaultHeroIds();\r\n\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        return MockPartyService._heroIds;\r\n    }\r\n\r\n    setPartyIds(heroIds: string[]): void {\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroIds\", heroIds);\r\n    }\r\n\r\n    private static defaultInventoryIds = (): string[] => [\"wolf_spear\", \"ceramic_helm\", \"ceramic_armor\"];\r\n\r\n    private static defaultStashIds = (): string[] => [\"hag_teeth\", \"token_of_servitude\", \"rope\"];\r\n\r\n    private static defaultQuests = (): PartyQuest[] => [\r\n        {\r\n            id: \"song_of_the_sea\",\r\n            status: \"current\",\r\n        },\r\n        {\r\n            id: \"there_and_back\",\r\n            status: \"active\",\r\n        },\r\n    ];\r\n\r\n    private static _inventoryItemIds: string[] | undefined = undefined;\r\n    private static _stashItemIds: string[] | undefined = undefined;\r\n\r\n    getInventory(): string[] {\r\n        if (MockPartyService._inventoryItemIds) {\r\n            return MockPartyService._inventoryItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const inventoryIds = saveService.getObject<string[]>(\"inventoryItemIds\") ?? MockPartyService.defaultInventoryIds();\r\n\r\n        MockPartyService._inventoryItemIds = inventoryIds;\r\n\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"inventoryItemIds\", itemIds);\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory();\r\n        inventoryItems.push(id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory().filter((i) => i !== id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._stashItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n\r\n        const stashIds = saveService.getObject<string[]>(\"stashItemIds\") ?? MockPartyService.defaultStashIds();\r\n\r\n        MockPartyService._stashItemIds = stashIds;\r\n\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"stashItemIds\", itemIds);\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        const items = this.getStash();\r\n        items.push(id);\r\n        this.setStash(items);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        const stashItems = this.getStash().filter((i) => i !== id);\r\n        this.setStash(stashItems);\r\n    }\r\n\r\n    private static _quests: PartyQuest[] = [];\r\n\r\n    getQuests(): PartyQuest[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._quests;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const quests = saveService.getObject<PartyQuest[]>(\"quests\") ?? MockPartyService.defaultQuests();\r\n\r\n        MockPartyService._quests = quests;\r\n\r\n        return MockPartyService._quests;\r\n    }\r\n\r\n    updateQuest(quest: PartyQuest) {\r\n        const saveService = new MockSaveService();\r\n        const quests = saveService.getObject<PartyQuest[]>(\"quests\") ?? MockPartyService.defaultQuests();\r\n        const newQuests = quests.filter((q) => q.id !== quest.id);\r\n        newQuests.push(quest);\r\n        saveService.saveObject(\"quests\", newQuests);\r\n        MockPartyService._quests = newQuests;\r\n    }\r\n\r\n    public clearCache() {\r\n        MockPartyService._heroIds = undefined;\r\n        MockPartyService._inventoryItemIds = undefined;\r\n        MockPartyService._stashItemIds = undefined;\r\n    }\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"./LinkTo\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        \"-webkit-app-region\": \"drag\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"2vh\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n    headerImg: {\r\n        width: \"7vh\",\r\n        height: \"7vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        // https://stackoverflow.com/questions/23490320/gap-between-border-and-image-when-border-radius-is-added\r\n        backgroundColor: \"#282c34\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"5vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\n\r\nconst Header: React.FunctionComponent<HeaderProps> = (props: HeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = React.useState<Hero[] | null>(null); // The map graph data\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockPartyService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <LinkTo key={hero.id} url={`${process.env.PUBLIC_URL}/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </LinkTo>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                </LinkTo>\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import GameState from \"../models/GameState\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static defaultState = (): GameState => {\r\n        return {\r\n            currentMapId: \"town\",\r\n            currentVertextId: \"hut-road\", // \"scupperden-road\"\r\n            currentMapCovers: [],\r\n            currentTurn: 0,\r\n            seed: Math.random() * Number.MAX_SAFE_INTEGER\r\n        }\r\n    };\r\n\r\n    private static _state: GameState | undefined = undefined;\r\n\r\n    public getState(): GameState {\r\n        if (MockGameStateService._state != null) \r\n            return MockGameStateService._state;\r\n            \r\n        const saveService = new MockSaveService();\r\n        \r\n        const stateJson = localStorage.getItem(saveService.getCurrentSave() + \"_state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService.defaultState();\r\n\r\n        MockGameStateService._state = state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        const saveService = new MockSaveService();\r\n\r\n        MockGameStateService._state = state;\r\n        console.log(\"setState : \" + JSON.stringify(state));\r\n        localStorage.setItem(saveService.getCurrentSave() + \"_state\", JSON.stringify(state));\r\n        saveService.markSlotUpdated();\r\n    }\r\n\r\n    public clearCache() {\r\n        MockGameStateService._state = undefined;\r\n    }\r\n}\r\n","import AttributeList from \"./AttributeList\";\r\nimport CalculatedStats from \"./CalculatedStats\";\r\nimport CharacterBehavior from \"./CharacterBehavior\";\r\nimport CurrentStatus from \"./CurrentStats\";\r\n\r\nexport enum Alignment {\r\n    Lawful = 0,\r\n    Neutral = 1,\r\n    Chaotic = 2,\r\n}\r\n\r\n/**\r\n * Special ongoing status effects on a character\r\n * \r\n * Limit this list for now and add one at a time slowly\r\n * TODO: Sleeping, Petrified, Paralysed (Are these just Stunned with other modifiers?)\r\n */\r\nexport enum StatusFlags {\r\n    None = 0x00,\r\n    Stunned = 0x01,\r\n    Poisoned = 0x04,\r\n    Bleeding = 0x08,\r\n    Terrified = 0x10,\r\n    Charmed = 0x20,\r\n}\r\n\r\nexport enum AbilityFlags {\r\n    None = 0x00,\r\n    Sorcery = 0x01,\r\n    Stealth = 0x02,\r\n    Perception = 0x04,\r\n    PatronBond = 0x08,\r\n    Survival = 0x10,\r\n    Devices = 0x20,\r\n    Acrobatics = 0x40,\r\n}\r\n\r\n// TODO: Split hero into core stats & calculated (view) ?\r\nexport default interface Hero {\r\n    // ID of the hero\r\n    id: string;\r\n\r\n    // Display name of the hero\r\n    name: string;\r\n\r\n    /** Short description of the hero */\r\n    description: string;\r\n\r\n    // Origins of the hero\r\n    background: string;\r\n\r\n    /** Portrait image location */\r\n    imageUrl: string;\r\n\r\n    /** Map token image location */\r\n    tokenUrl: string;\r\n\r\n    /** Offset to display the token at */\r\n    tokenOffset: number[];\r\n\r\n    // Hero attributes\r\n    attributes: AttributeList;\r\n\r\n    // Any special states\r\n    currentStatus: CurrentStatus;\r\n\r\n    stats: CalculatedStats;\r\n\r\n    abilities: AbilityFlags;\r\n\r\n    alignment: Alignment;\r\n\r\n    behavior: CharacterBehavior[];\r\n\r\n    level: number;\r\n\r\n    spells: string[];\r\n}\r\n\r\n","\r\nexport enum TraitType {\r\n    Uncategorised = 0,\r\n    Mental = 1,\r\n    Mystical = 2,\r\n    Physical = 3,\r\n    Item = 4,\r\n    // MentalPhobia = 100,\r\n    // MysticalCurse = 200,\r\n};\r\n\r\nexport enum ModifierType {\r\n    None = 0,\r\n    Strength = 10,\r\n    Dexterity = 11,\r\n    Constitution = 12,\r\n    Intelligence = 13,\r\n    Wisdom = 14,\r\n    Charisma = 15,\r\n    Luck = 16,\r\n    HitPoints = 20,\r\n    Armor = 22,\r\n    SpellResistance = 23,\r\n    MoveSpeed = 24,\r\n    MeleeAttackSpeed = 25,\r\n    MeleeAttack = 26,\r\n    MeleeEffect = 27,\r\n    MeleeDamage = 28,\r\n    RangedAttackSpeed = 29,\r\n    RangedAttack = 30,\r\n    RangedEffect = 31,\r\n    RangedDamage = 32,\r\n    SpellAttackSpeed = 33,\r\n    SpellAttack = 34,\r\n    SpellDamage = 35,\r\n    DamageResistance = 33,\r\n    MeleeChanceForParalysis = 50,\r\n    MeleeChanceForPoisoned = 51,\r\n    MeleeChanceForBleeding = 52,\r\n    MeleeChanceForTerrified = 53,\r\n    MeleeChanceForCharmed = 54,\r\n    RangedChanceForParalysis = 60,\r\n    RangedChanceForPoisoned = 61,\r\n    RangedChanceForBleeding = 62,\r\n    RangedChanceForTerrified = 63,\r\n    RangedChanceForCharmed = 64,\r\n    AddAbility = 100,\r\n    RemoveAbility = 101, // Items can prevent abilities being used (e.g. Armor prevents Sorcery)\r\n    AbilitySorcery = 110,\r\n    AbilityStealth = 111,\r\n    AbilityPerception = 112,\r\n    AbilityPatronBond = 113,\r\n    AbilitySurvival = 114,\r\n    AbilityDevices = 115,\r\n    AbilityAcrobatics = 116,\r\n    /** Add a status effect to the character */\r\n    Status = 200,\r\n    /** Character is immune to this type of status effects */\r\n    StatusImmunity = 201,\r\n};\r\n\r\nexport interface TraitEffect {\r\n\r\n    modifierType: ModifierType;\r\n\r\n    modifierValue: string;\r\n}\r\n\r\nexport default interface Trait {\r\n    /** Unique Identifier for the trait */\r\n    id: string;\r\n\r\n    /** A name for the trait */\r\n    name: string;\r\n\r\n    /** A longer description for the trait */\r\n    description: string;\r\n\r\n    /** The type of trait */\r\n    type: TraitType;\r\n\r\n    /** What does it do */\r\n    behavior: TraitEffect[];\r\n}\r\n","import Leaflet from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            coverUrls: json.coverUrls,\r\n            useDayNight: json.useDayNight,\r\n            pathColor: json.pathColor,\r\n            vertices: json.vertices.map((v: any) => {\r\n                return {\r\n                    id: v.id,\r\n                    position: Leaflet.latLng(v.position[0], v.position[1]),\r\n                    clickRadius: v.clickRadius,\r\n                    encounterId: v.encounterId,\r\n                    marker: v.marker,\r\n                    exitId: v.exitId,\r\n                    coverIds: v.coverIds,\r\n                } as MapVertex;\r\n            }),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\nimport CustomMarker from \"./CustomMarker\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): Node<NodeData> | null => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n    marker?: CustomMarker;\r\n    /** The cover layer to obscure this vertex */\r\n    coverIds?: number[];\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n                marker: item.marker,\r\n                coverIds: item.coverIds,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","import MockPartyService from \"./MockPartyService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockVariableService {\r\n\r\n    getVariable(id: string): string | undefined {\r\n        const saveService = new MockSaveService();\r\n\r\n        if (id.startsWith(\"has_\")) {\r\n            // Special equipment check\r\n            const itemId  = id.substr(4);\r\n            const partyService = new MockPartyService();\r\n            const items = partyService.getInventory();\r\n            const hasItem = items.indexOf(itemId) >= 0;\r\n            return hasItem.toString();\r\n        }\r\n        return saveService.getObject<string>(id);\r\n    }\r\n\r\n    setVariable(id: string, value: string) {\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject<string>(id, value);\r\n    }\r\n}\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { IntValue, StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\n// Temple dark flame\r\nimport TheInterceptContent from \"./encounters/temple_dark_flame/TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/temple_dark_flame/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/temple_dark_flame/chasm.ink.json\";\r\nimport storeRoomContent from \"./encounters/temple_dark_flame/store-room.ink.json\";\r\nimport dartTrapContent from \"./encounters/temple_dark_flame/dart-trap.ink.json\";\r\n\r\n// Squall's End\r\nimport homeContent from \"./encounters/squalls_end/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/squalls_end/nine-bells.ink.json\";\r\nimport brawlContent from \"./encounters/squalls_end/brawl.ink.json\";\r\nimport squallsEndEntryContent from \"./encounters/squalls_end/squalls-end-entry.ink.json\";\r\nimport MockVariableService from \"./MockVariableService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n    private once: boolean = false;\r\n\r\n    private fetchJson(id: string): any {\r\n        let json: any = undefined;\r\n\r\n        switch (id) {\r\n            case \"hoard\":\r\n            case \"wet-room\":\r\n            case \"intercept\":\r\n                json = TheInterceptContent;\r\n                break;\r\n            case \"common-room\":\r\n                json = commonRoomContent;\r\n                break;\r\n            case \"chasm\":\r\n                json = chasmContent;\r\n                break;\r\n            case \"warrens\":\r\n                json = TheInterceptContent;\r\n                break;\r\n            case \"home\":\r\n                json = homeContent;\r\n                break;\r\n            case \"store-room\":\r\n                json = storeRoomContent;\r\n                break;\r\n            case \"nine-bells\":\r\n                json = nineBellsContent;\r\n                break;\r\n            case \"brawl\":\r\n                json = brawlContent;\r\n                break;\r\n            case \"slumberton-entry\":\r\n                json = squallsEndEntryContent;\r\n                break;\r\n            case \"dart-trap\":\r\n                json = dartTrapContent;\r\n                break;\r\n            default:\r\n                json = undefined;\r\n        }\r\n\r\n        return json;\r\n    }\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        const json = this.fetchJson(id);\r\n\r\n        this.currentStory = json ? new Story(json) : new Story(MockStoryEncounterService.createEmptyStory());\r\n        this.currentId = id;\r\n\r\n        const saveService = new MockSaveService();\r\n        const storyStateJson = saveService.getObject<string>(\"enc_\" + this.currentId);\r\n\r\n        if (storyStateJson) {\r\n            this.currentStory.state.LoadJson(storyStateJson);\r\n            this.currentStory.state.GoToStart();\r\n        }\r\n\r\n        // Extract the Title from the JSON file. It should be in the form \"# title: My Encounter\"\r\n        const tags = this.currentStory.globalTags;\r\n        const titleTag = tags ? tags.find((t) => t.startsWith(\"title:\")) : undefined;\r\n\r\n        this.currentTitle = titleTag ? titleTag.substring(6).trimStart() : \"Encounter\";\r\n        this.once = tags ? tags.findIndex((t) => t === \"once\") >= 0 : false;\r\n\r\n        // Check if there is a skip variable to skip this encounter\r\n        const variableService = new MockVariableService();\r\n        const skipVariableTag = tags ? tags.find((t) => t.startsWith(\"skip-variable:\")) : undefined;\r\n        const skipVariable = skipVariableTag ? skipVariableTag.substring(14).trimStart() : undefined;\r\n        if (skipVariable) {\r\n            const result = variableService.getVariable(skipVariable);\r\n            if (result === \"true\") {\r\n                return MockStoryEncounterService.createEmptyStory();\r\n            }\r\n        }\r\n\r\n        // Imported local variables for use in the encounter\r\n        const imports = tags ? tags.filter((t) => t.startsWith(\"import:\")).map((t) => t.substring(7).trimStart()) : [];\r\n        const importedVariables = imports.join(\",\").split(\",\");\r\n\r\n        const variableValues = importedVariables.map((v) => [v, variableService.getVariable(v)]).filter((v) => v[1] !== undefined);\r\n\r\n        // Assign quest & global variables\r\n        if (this.currentStory != null) {\r\n            variableValues.forEach((v) => (v[0] && v[1] ? this.currentStory?.variablesState.SetGlobal(v[0], new StringValue(v[1])) : null));\r\n        }\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            const coverVisible = this.currentStory.variablesState.GetVariableWithName(\"coverVisible\") as IntValue;\r\n\r\n            const storyState = this.currentStory.state.toJson(false);\r\n\r\n            const saveService = new MockSaveService();\r\n            saveService.saveObject<string>(\"enc_\" + this.currentId, storyState);\r\n\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                once: this.once,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value ?? undefined,\r\n                    detailedEncounter: detailedEncounter?.value ?? undefined,\r\n                    coverVisible: coverVisible?.value ?? undefined,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map((c: Choice) => {\r\n            return {\r\n                index: c.index,\r\n                text: c.text,\r\n            } as InkStoryChoice;\r\n        });\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            once: this.once,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            once: false,\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    party: {\r\n        padding: \"0 30px\",\r\n        //position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroListProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\n/*\r\n * The selection of heroes one the menu bar\r\n */\r\nconst HeroList: React.FunctionComponent<HeroListProps> = (props: HeroListProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    const [heroes, setHeroes] = React.useState<Hero[] | null>(null); // The map graph data\r\n    const [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        if (!onSelectionChanged)\r\n            return;\r\n\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3} style={{ textAlign: \"center\" }}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.party}>\r\n            <Grid container>{renderParty()}</Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeroList;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport HeroList from \"../HeroList\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype PartySelectProps = {\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\nconst PartySelect: React.FunctionComponent<PartySelectProps> = (props: PartySelectProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [heroIds, setHeroIds] = React.useState<string[]>([]);\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = heroIds.length === 4;\r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid) return;\r\n\r\n        const service = new MockPartyService();\r\n        service.setPartyIds(heroIds);\r\n        props.onReady();\r\n        setIsApplied(true);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <HeroList chooseAll={true} multiSelect={true} onSelectionChanged={isApplied ? undefined : selectionChanged} />\r\n            </div>\r\n            <Tooltip title={isApplied ? \"Changes applied\" : isValid ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button\r\n                        className={classes.partyButton}\r\n                        onClick={changeParty}\r\n                        disabled={!isValid || isApplied}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<DoneIcon />}\r\n                    >\r\n                        {isApplied ? \"Selected\" : \"Select\"}\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartySelect;\r\n","import React from \"react\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroList from \"../HeroList\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype HeroSelectProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\n/*\r\n* The selection of heroes one the menu bar\r\n*/\r\nconst HeroSelector: React.FunctionComponent<HeroSelectProps> = (props: HeroSelectProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [heroId, setHeroId] = React.useState<string | undefined>(undefined);\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n\r\n    const isValid = heroId !== undefined;\r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid) return;\r\n\r\n        // TODO: Save the selected hero somehow to the encounter variables?\r\n        props.onReady();\r\n        setIsApplied(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <HeroList chooseAll={props.chooseAll} multiSelect={props.multiSelect} onSelectionChanged={props.onSelectionChanged} />\r\n            </div>\r\n            <Tooltip title={isApplied ? \"Hero selected\" : isValid ? \"Hero selected\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button\r\n                        className={classes.partyButton}\r\n                        onClick={changeParty}\r\n                        disabled={!isValid || isApplied}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<DoneIcon />}\r\n                    >\r\n                        {isApplied ? \"Selected\" : \"Select\"}\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport MockHeroService from \"../../services/MockHeroService\";\r\nimport HeroList from \"../HeroList\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype HeroDismissProps = {\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\nconst HeroDismiss: React.FunctionComponent<HeroDismissProps> = (props: HeroDismissProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const [heroId, setHeroId] = React.useState(\"\");\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n        if (ids.length > 0) setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = heroId.length > 0;\r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid) return;\r\n\r\n        const service = new MockHeroService();\r\n\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n        props.onReady();\r\n        setIsApplied(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <HeroList chooseAll={true} onSelectionChanged={isApplied ? undefined : selectionChanged} />\r\n            </div>\r\n            <Tooltip title={isValid ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button\r\n                        className={classes.partyButton}\r\n                        onClick={dismissHero}\r\n                        disabled={!isValid || isApplied}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<ExitToAppIcon />}\r\n                    >\r\n                        {isApplied ? \"Dismissed\" : \"Dismiss\"}\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeroDismiss;\r\n","import { AbilityFlags, Alignment } from \"../models/character/Hero\";\r\nimport { ItemType } from \"../models/Item\";\r\nimport { ModifierType } from \"../models/character/Trait\";\r\nimport Resources from \"../resources.en.json\";\r\n\r\nexport default class StringConverters {\r\n    private static resourceMap: any = null;\r\n\r\n    static getResources(): any {\r\n        if (!StringConverters.resourceMap) {\r\n            // TODO: This is silly\r\n            StringConverters.resourceMap = JSON.parse(JSON.stringify(Resources));\r\n        }\r\n\r\n        return StringConverters.resourceMap;\r\n    }\r\n\r\n    static alignmentToString = (alignment: Alignment): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"Alignment_\" + Alignment[alignment];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static modifierToString = (modifierType: ModifierType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ModifierType_\" + ModifierType[modifierType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static itemTypeText = (itemType: ItemType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ItemType_\" + itemType;\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static abilitiesToString = (abilities: AbilityFlags): string => {\r\n        if (abilities === AbilityFlags.None) return \"None\";\r\n\r\n        const output: string[] = [];\r\n\r\n        if (abilities & AbilityFlags.Acrobatics) output.push(\"Acrobatics\");\r\n        if (abilities & AbilityFlags.Devices) output.push(\"Disable/Modify Devices\");\r\n        if (abilities & AbilityFlags.PatronBond) output.push(\"Patron Bond\");\r\n        if (abilities & AbilityFlags.Perception) output.push(\"Perception\");\r\n        if (abilities & AbilityFlags.Sorcery) output.push(\"Sorcery\");\r\n        if (abilities & AbilityFlags.Stealth) output.push(\"Stealth\");\r\n        if (abilities & AbilityFlags.Survival) output.push(\"Survival\");\r\n\r\n        return output.join(\", \");\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport Item from \"../models/Item\";\r\nimport Trait, { TraitEffect } from \"../models/character/Trait\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        padding: \"5px\",\r\n    },\r\n    description: {\r\n        padding: \"10px\",\r\n        margin: \"10px 0\",\r\n        backgroundColor: \"#999\",\r\n    },\r\n    itemType: {\r\n        padding: \"500px 10px 0 10px\",\r\n        margin: \"100px 0 0 0 \",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n    traits: {\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n});\r\n\r\ntype ItemTooltipContentProps = {\r\n    item: Item | undefined;\r\n};\r\n\r\nconst ItemTooltipContent: React.FunctionComponent<ItemTooltipContentProps> = (props: ItemTooltipContentProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { item } = props;\r\n\r\n    const renderTraits = (traits: Trait[]): JSX.Element => {\r\n        let traitJsx: JSX.Element[] = [];\r\n        for (let i = 0; i < traits.length; i++) {\r\n            const newTraits = renderBehaviors(traits[i].behavior);\r\n            traitJsx = traitJsx.concat(newTraits);\r\n        }\r\n        return <div>{traitJsx}</div>;\r\n    };\r\n\r\n    const renderBehaviors = (effects: TraitEffect[]): JSX.Element[] => {\r\n        return effects.map((e) => (\r\n            <p>\r\n                {e.modifierValue} {StringConverters.modifierToString(e.modifierType)}\r\n            </p>\r\n        ));\r\n    };\r\n\r\n    if (!item) return <p>\"None\"</p>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography className={classes.title} color=\"inherit\">\r\n                {item.name}\r\n            </Typography>\r\n            <p className={classes.description}>{item.description}</p>\r\n            <Typography className={classes.itemType}>{StringConverters.itemTypeText(item.itemType)}</Typography>\r\n            <Typography className={classes.traits} align=\"right\">\r\n                {renderTraits(item.traits)}\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemTooltipContent;\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\nimport Item from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventoryGridItemProps = {\r\n    item?: Item;\r\n    index: number;\r\n    selected: boolean;\r\n    onSelectionChanged?: (itemId: string) => void;\r\n};\r\n\r\nconst InventoryGridItem: React.FunctionComponent<InventoryGridItemProps> = (props: InventoryGridItemProps) => {\r\n    const classes = useStyles();\r\n    const { item, index, selected, onSelectionChanged } = props;\r\n\r\n    const imgClass = selected ? `${classes.itemSelected}` : `${classes.item}`;\r\n\r\n    if (item === undefined) {\r\n        return (\r\n            <Grid item xs={3} className={classes.gridItem} key={index.toString()}>\r\n                <Tooltip title={\"Nothing\"} key={index}>\r\n                    <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                </Tooltip>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={3} className={classes.gridItem} key={item.id}>\r\n            <Tooltip title={<ItemTooltipContent item={item} />} key={index} arrow>\r\n                <img\r\n                    src={item.imageUrl}\r\n                    id={index.toString()}\r\n                    onClick={() => (onSelectionChanged ? onSelectionChanged(item.id) : null)}\r\n                    className={imgClass}\r\n                    alt={item.name}\r\n                />\r\n            </Tooltip>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default InventoryGridItem;\r\n","import React from \"react\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\nimport Item from \"../models/Item\";\r\nimport InventoryGridItem from \"./InventoryGridItem\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    selected: boolean[];\r\n    onSelectionChanged?: (itemId: string) => void;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: React.FunctionComponent<InventorySelectorProps> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { selected, onSelectionChanged, items, multiSelect } = props;\r\n\r\n    console.log(selected);\r\n\r\n    const renderInventory = () => {\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const output = (\r\n                <InventoryGridItem\r\n                    item={item}\r\n                    index={index}\r\n                    selected={selected[index]}\r\n                    onSelectionChanged={(id: string) => (onSelectionChanged ? onSelectionChanged(item.id) : undefined)}\r\n                />\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map((i) => {\r\n            const output = <InventoryGridItem index={index} selected={false} />;\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InventorySelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"../InventorySelector\";\r\nimport Item from \"../../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    lootImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype ItemSelectProps = {\r\n    /** The item list */\r\n    items: Item[];\r\n\r\n    /** The inventory items */\r\n    inventory: Item[];\r\n\r\n    /** True to indicate stash in UI */\r\n    useStash: boolean;\r\n\r\n    /** Item was removed from inventory */\r\n    onPut: (itemIds: string[]) => void;\r\n\r\n    /** Item was added to party inventory */\r\n    onTake: (itemIds: string[]) => void;\r\n};\r\n\r\nconst ItemSelect: React.FunctionComponent<ItemSelectProps> = (props: ItemSelectProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, inventory, useStash } = props;\r\n\r\n    // TODO: Move to use indexes!! Otherwise we lose track of item doubles with the same ID\r\n    const [itemsSelected, setItemsSelected] = React.useState<boolean[]>([]);\r\n    const [inventorySelected, setInventorySelected] = React.useState<boolean[]>([]);\r\n\r\n    const maxItems = 8;\r\n\r\n    const itemSelectionChanged = (id: string) => {\r\n        const match = items.find(i => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = items.indexOf(match);\r\n        if (index < 0) return;\r\n\r\n        // Use a new array to leat react know that it changed\r\n        const newItemsSelected = itemsSelected.splice(0);\r\n        newItemsSelected[index] = !newItemsSelected[index];\r\n        setItemsSelected(newItemsSelected);\r\n    };\r\n\r\n    const inventorySelectionChanged = (id: string) => {\r\n        const match = inventory.find((i) => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = inventory.indexOf(match);\r\n        if (index < 0) return;\r\n\r\n        // Use a new array to leat react know that it changed\r\n        const newInventorySelected = inventorySelected.splice(0);\r\n        newInventorySelected[index] = !newInventorySelected[index];\r\n        setInventorySelected(newInventorySelected);\r\n    };\r\n\r\n    const itemsSelectedCount = itemsSelected.filter(i => i === true).length;\r\n    const inventorySelectedCount = inventorySelected.filter((i) => i === true).length;\r\n\r\n    const isItemSelected = itemsSelectedCount > 0;\r\n    const isInventorySelected = inventorySelectedCount > 0;\r\n\r\n    const willItemsBeTooBig = (): boolean => items.length + inventorySelectedCount > maxItems;\r\n    const willInventoryBeTooBig = (): boolean => inventory.length + itemsSelectedCount > maxItems;\r\n\r\n    const deselectAll = () => {\r\n        setItemsSelected([false, false, false, false, false, false, false, false]);\r\n        setInventorySelected([false, false, false, false, false, false, false, false]);\r\n    };\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isItemSelected) return;\r\n\r\n        const takeItems: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (itemsSelected[i]) {\r\n                takeItems.push(items[i].id);\r\n            }\r\n        }\r\n        props.onTake(takeItems);\r\n        deselectAll();\r\n    };\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected) return;\r\n\r\n        const putItems: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (inventorySelected[i]) {\r\n                putItems.push(inventory[i].id);\r\n            }\r\n        }\r\n        props.onPut(putItems);\r\n        deselectAll();\r\n    };\r\n\r\n    const lootSourceName = useStash ? \"stash\" : \"loot\";\r\n\r\n    const itemToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in inventory\";\r\n\r\n        return isItemSelected ? `Take item from the ${lootSourceName}` : `Please select a ${lootSourceName} item`;\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return `Too many items in ${lootSourceName}`;\r\n\r\n        return isInventorySelected ? `Put item in the ${lootSourceName}` : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src={`./images/${lootSourceName}.png`} alt={lootSourceName} className={classes.lootImg} />\r\n                <InventorySelector items={items} multiSelect={true} onSelectionChanged={itemSelectionChanged} selected={itemsSelected} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={itemToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isItemSelected}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willItemsBeTooBig() || !isInventorySelected}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector\r\n                    items={inventory}\r\n                    multiSelect={true}\r\n                    onSelectionChanged={inventorySelectionChanged}\r\n                    selected={inventorySelected}\r\n                />\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ItemSelect;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport Item from \"../../models/Item\";\r\nimport MockItemService from \"../../services/MockItemService\";\r\nimport ItemSelect from \"./ItemSelect\";\r\n\r\nconst useStyles = makeStyles({});\r\n\r\ntype StashProps = {};\r\n\r\nconst Stash: React.FunctionComponent<StashProps> = (props: StashProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [stashItems, setStashItems] = React.useState<Item[] | null>(null);\r\n    const [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    if (!stashItems || !inventoryItems) return null;\r\n\r\n    const takeItem = (ids: string[]) => {\r\n        const partyService = new MockPartyService();\r\n        let newStashItems = stashItems.splice(0);\r\n        const newInventoryItems = inventoryItems.splice(0);\r\n\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const item = newStashItems.find((item) => item.id === ids[i]);\r\n            if (!item)\r\n                throw new Error(\"Item not found\");\r\n\r\n            newInventoryItems.push(item);\r\n            newStashItems = newStashItems.filter(i => i.id !== item.id);\r\n            partyService.removeStashItem(ids[i]);\r\n            partyService.addInventoryItem(ids[i]);\r\n        }\r\n\r\n        setInventoryItems(newInventoryItems);\r\n        setStashItems(newStashItems);\r\n    };\r\n\r\n    const putItem = (ids: string[]) => {\r\n        const newStashItems = stashItems.splice(0);\r\n        let newInventoryItems = inventoryItems.splice(0);\r\n\r\n        const partyService = new MockPartyService();\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const item = newInventoryItems.find((item) => item.id === ids[i]);\r\n            if (!item)\r\n                throw new Error(\"Item not found\");\r\n\r\n            newStashItems.push(item);\r\n            newInventoryItems = newInventoryItems.filter((i) => i.id !== item.id);\r\n            partyService.removeInventoryItem(ids[i]);\r\n            partyService.addStashItem(ids[i]);\r\n        }\r\n\r\n        setInventoryItems(newInventoryItems);\r\n        setStashItems(newStashItems);\r\n    };\r\n\r\n    return <ItemSelect items={stashItems} inventory={inventoryItems} useStash={true} onPut={putItem} onTake={takeItem} />;\r\n};\r\n\r\nexport default Stash;\r\n","import React from \"react\";\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, ListItemText, Grid } from \"@material-ui/core\";\r\n\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\n\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\n\r\nconst useStyles = makeStyles({\r\n    selected: {\r\n        margin: \"5px\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"4px\",\r\n        border: \"solid steelblue 4px\",\r\n    },\r\n    notSelected: {\r\n        margin: \"5px\",\r\n        borderRadius: \"4px\",\r\n        border: \"solid white 4px\",\r\n    },\r\n});\r\n\r\ntype TraitListProps = {\r\n    traits: HeroTrait[];\r\n    onSelect?: (trait: HeroTrait) => void;\r\n};\r\n\r\nconst TraitList: React.FunctionComponent<TraitListProps> = (props: TraitListProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { traits } = props;\r\n    const [selectedTrait, setSelectedTrait] = React.useState<HeroTrait | undefined>(undefined);\r\n\r\n    const renderTraitIcon = (t: HeroTrait) => {\r\n        switch (t.type) {\r\n            case 1: // Mental\r\n                return <FaceIcon />;\r\n            case 2: // Mystical\r\n                return <FlashOnIcon />;\r\n            case 3: // Physical\r\n                return <AccessibilityNewIcon />;\r\n            case 4: // Item\r\n                return <AllInboxIcon />;\r\n            default:\r\n                return <AllInboxIcon />;\r\n        }\r\n    };\r\n\r\n    const onSelect = (trait: HeroTrait) => {\r\n        if (props.onSelect) {\r\n            console.log(\"select : \" + trait.id);\r\n            if (selectedTrait === undefined || trait.id !== selectedTrait.id) {\r\n                setSelectedTrait(trait);\r\n                props.onSelect(trait);\r\n            }\r\n        }\r\n    };\r\n\r\n    const renderTrait = (t: HeroTrait) => (\r\n        <ListItem\r\n            key={t.id}\r\n            className={selectedTrait !== undefined && t.id === selectedTrait.id ? classes.selected : classes.notSelected}\r\n            onClick={() => onSelect(t)}\r\n        >\r\n            <ListItemAvatar>\r\n                <Avatar>{renderTraitIcon(t)}</Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={t.name} secondary={t.from ?? t.description} />\r\n        </ListItem>\r\n    );\r\n\r\n    return <List dense={true}>{traits.map((t) => renderTrait(t))}</List>;\r\n};\r\n\r\nexport default TraitList;\r\n","import React from \"react\";\r\nimport { Grid, makeStyles, Tooltip, Button } from \"@material-ui/core\";\r\n\r\nimport MockTraitService from \"../../services/MockTraitService\";\r\nimport Trait from \"../../models/character/Trait\";\r\nimport TraitList from \"../TraitList\";\r\nimport HeroTrait from \"../../models/character/HeroTrait\";\r\nimport HeroList from \"../HeroList\";\r\nimport MockHeroService from \"../../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        //position: \"relative\",\r\n    },\r\n    party: {\r\n        padding: \"0 30px\",\r\n        width: \"90%\",\r\n    },\r\n    traits: {\r\n        padding: \"0 30px\",\r\n        width: \"90%\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    traitsBlock: {\r\n        padding: \"10px 0\",\r\n    },\r\n    button: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    buttonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype TraitSelectProps = {\r\n    /** The trait selection list */\r\n    traitIds: string[];\r\n\r\n    /** Where is the trait from */\r\n    from: string;\r\n\r\n    /** Use a luck roll to choose a trait */\r\n    isRandomTrait: boolean;\r\n\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\n/*\r\n * Select a trait, or just give a trait to a hero\r\n */\r\nconst TraitSelect: React.FunctionComponent<TraitSelectProps> = (props: TraitSelectProps) => {\r\n    const classes = useStyles();\r\n    const { traitIds } = props;\r\n\r\n    const [traits, setTraits] = React.useState<Trait[] | undefined>(undefined);\r\n    const [heroId, setHeroId] = React.useState<string | undefined>(undefined);\r\n    const [selectedTrait, setSelectedTrait] = React.useState<string | undefined>(undefined);\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of traits\r\n        const loadTraits = () => {\r\n            const service = new MockTraitService();\r\n            const newTraits = service.getTraits(traitIds);\r\n            if (!newTraits) {\r\n                console.error(`No trait data`);\r\n                return;\r\n            }\r\n\r\n            setTraits(newTraits);\r\n        };\r\n\r\n        if (traits == undefined) {\r\n            loadTraits();\r\n        }\r\n    });\r\n\r\n    const onHeroSelect = (ids: string[]) => {\r\n        if (ids.length > 0) {\r\n            setHeroId(ids[0]);\r\n        }\r\n    };\r\n\r\n    const onSelect = (trait: Trait) => {\r\n        // TODO: Assign the trait to the selected hero?\r\n        setSelectedTrait(trait.id);\r\n    };\r\n\r\n    const renderTraits = () => {\r\n        if (!traits) return null;\r\n\r\n        return (\r\n            <Grid container className={classes.traitsBlock}>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid item xs={10}>\r\n                    <TraitList onSelect={isApplied ? undefined : onSelect} traits={traits.map((t) => t as HeroTrait)} />\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const isValid = selectedTrait !== undefined && heroId !== undefined;\r\n\r\n    const onApply = () => {\r\n        if (heroId && selectedTrait) {\r\n            var service = new MockHeroService();\r\n            service.addPermanentTrait(heroId, selectedTrait, props.from);\r\n            props.onReady();\r\n            setIsApplied(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <HeroList onSelectionChanged={isApplied ? undefined : onHeroSelect} />\r\n            </div>\r\n            <div className={classes.traits}>\r\n                <Grid container>{renderTraits()}</Grid>\r\n            </div>\r\n            <Tooltip title={isApplied ? \"Trait has been applied\" : isValid ? \"Apply this trait to the hero\" : \"Select a trait and a hero\"}>\r\n                <div className={classes.buttonDiv}>\r\n                    <Button\r\n                        className={classes.button}\r\n                        onClick={onApply}\r\n                        disabled={!isValid || isApplied}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        {isApplied ? \"Applied\" : \"Apply\"}\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TraitSelect;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\n\r\nimport InventorySelector from \"../InventorySelector\";\r\nimport Item from \"../../models/Item\";\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport MockItemService from \"../../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventorySelectProps = {\r\n    onReady: () => void;\r\n};\r\n\r\nconst PartyInventorySelect: React.FunctionComponent<PartyInventorySelectProps> = (props: PartyInventorySelectProps) => {\r\n    \r\n    const classes = useStyles();\r\n    const [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n    const [inventorySelected, setInventorySelected] = React.useState<boolean[]>([]);\r\n\r\n    React.useEffect(() => {\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const inventorySelectionChanged = (id: string) => {\r\n        if (!inventoryItems) return; \r\n        \r\n        const match = inventoryItems.find((i) => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = inventoryItems.indexOf(match);\r\n        if (index < 0) return;\r\n\r\n        const newInventorySelected = inventorySelected.splice(0);\r\n        newInventorySelected[index] = !newInventorySelected[index];\r\n        setInventorySelected(newInventorySelected);\r\n    }\r\n\r\n    if (!inventoryItems) return null;\r\n\r\n    const inventorySelectedCount = inventorySelected.filter((i) => i === true).length;\r\n    const isInventorySelected = inventorySelectedCount > 0;\r\n\r\n    const selectedIndex = inventorySelected.indexOf(true);\r\n    const selectedItem = inventoryItems[selectedIndex];\r\n    \r\n    const isItemSelectable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    const onSelectItem = () => {\r\n        if (!isInventorySelected) return;\r\n\r\n        //if (onEquipItem) onEquipItem(inventorySelectedIds[0]);\r\n\r\n        props.onReady();\r\n        setIsApplied(true);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected) return \"Please select an inventory item\";\r\n\r\n        return isItemSelectable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector\r\n                    items={inventoryItems}\r\n                    onSelectionChanged={isApplied ? undefined : inventorySelectionChanged}\r\n                    selected={inventorySelected}\r\n                />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={onSelectItem}\r\n                            disabled={!isInventorySelected || isApplied}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<DoneIcon />}\r\n                        >\r\n                            {isApplied ? \"Selected\" : \"Select\"}\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventorySelect;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport MockItemService from \"../../services/MockItemService\";\r\nimport Item from \"../../models/Item\";\r\nimport ItemSelect from \"./ItemSelect\";\r\n\r\nconst useStyles = makeStyles({\r\n});\r\n\r\ntype ItemSelectorProps = {\r\n    /** The item selection list */\r\n    itemIds: string[];\r\n\r\n    /** Use a luck roll to choose an item */\r\n    isRandom: boolean;\r\n\r\n    /** Can select more than one item */\r\n    selectMultiple: boolean;\r\n\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\nconst ItemLoot: React.FunctionComponent<ItemSelectorProps> = (props: ItemSelectorProps): JSX.Element | null => {\r\n    const classes = useStyles();\r\n\r\n    const [lootItems, setLootItems] = React.useState<Item[] | null>(null);\r\n    const [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadLootItems = () => {\r\n            // TODO: Try / catch\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(props.itemIds);\r\n\r\n            setLootItems(newStashItems);\r\n        };\r\n\r\n        const loadInventoryItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (lootItems === null) {\r\n            loadLootItems();\r\n        }\r\n\r\n        if (inventoryItems === null) {\r\n            loadInventoryItems();\r\n        }\r\n    });\r\n\r\n    const takeItem = (itemIds: string[]) => {\r\n        if (!lootItems || !inventoryItems) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < itemIds.length; i++) {\r\n            //service.removeStashItem(itemIds[i]);\r\n            service.addInventoryItem(itemIds[i]);\r\n        }\r\n\r\n        // TODO: Doesn't work for duplicate item names\r\n        const takenItems = lootItems.filter((i) => itemIds.indexOf(i.id) >= 0);\r\n        setLootItems(lootItems.filter(i => itemIds.indexOf(i.id) < 0));\r\n        setInventoryItems(inventoryItems.concat(takenItems));\r\n    };\r\n\r\n    const putItem = (itemIds: string[]) => {\r\n        if (!lootItems || !inventoryItems) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < itemIds.length; i++) {\r\n            service.removeInventoryItem(itemIds[i]);\r\n        }\r\n\r\n        // TODO: Doesn't work for duplicate item names\r\n        const putItems = inventoryItems.filter((i) => itemIds.indexOf(i.id) >= 0);\r\n        setLootItems(lootItems.concat(putItems));\r\n        setInventoryItems(inventoryItems.filter((i) => itemIds.indexOf(i.id) < 0));\r\n    };\r\n\r\n    if (!lootItems || !inventoryItems) return null;\r\n\r\n    return <ItemSelect items={lootItems} inventory={inventoryItems} onPut={putItem} onTake={takeItem} useStash={false} />;\r\n};\r\n\r\nexport default ItemLoot;\r\n","import React from \"react\";\r\nimport { Button, Grid, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport Item from \"../../models/Item\";\r\nimport InventoryGridItem from \"../InventoryGridItem\";\r\nimport MockItemService from \"../../services/MockItemService\";\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"130px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n    },\r\n    itemsButton: {\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype ItemUseProps = {\r\n    /** The item selection list */\r\n    itemIds: string[];\r\n\r\n    onReady: () => void;\r\n};\r\n\r\nconst ItemUse: React.FunctionComponent<ItemUseProps> = (props: ItemUseProps): JSX.Element | null => {\r\n    const classes = useStyles();\r\n\r\n    const { itemIds, onReady } = props;\r\n\r\n    const [items, setItems] = React.useState<Item[] | undefined>(undefined);\r\n    const [selected, setSelected] = React.useState<boolean[]>([]);\r\n    const [used, setUsed] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const itemService = new MockItemService();\r\n            const newItems = itemService.getItems(itemIds);\r\n\r\n            setItems(newItems);\r\n        };\r\n\r\n        if (items === undefined) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    if (!items) return null;\r\n\r\n    const selectionChanged = (id: string) => {\r\n        if (used) return;\r\n        \r\n        const match = items.find((i) => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = items.indexOf(match);\r\n        if (index < 0) return;\r\n\r\n        const newSelected = selected.splice(0);\r\n        newSelected[index] = !newSelected[index];\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const selectedCount = selected.filter((i) => i === true).length;\r\n    const isSelected = selectedCount > 0;\r\n\r\n    const selectedIndex = selected.indexOf(true);\r\n    const selectedItem = items[selectedIndex];\r\n\r\n    const useItem = () => {\r\n        if (!isSelected) return;\r\n        //if (onEquipItem) onEquipItem(selectedItem.id);\r\n\r\n        const partyService = new MockPartyService();\r\n\r\n        // Remove the item!\r\n        partyService.removeInventoryItem(selectedItem.id);\r\n        onReady();\r\n        setUsed(true);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isSelected) return \"Please select an inventory item\";\r\n\r\n        return \"Use the item\";\r\n    };\r\n\r\n    let index = 0;\r\n\r\n    const itemGrids = items.map((item) => {\r\n        const output = (\r\n            <InventoryGridItem\r\n                item={item}\r\n                index={index}\r\n                selected={selected[index]}\r\n                onSelectionChanged={(id: string) => selectionChanged(item.id)}\r\n            />\r\n        );\r\n        index++;\r\n        return output;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.main}>\r\n                <div className={classes.container}>\r\n                    <div className={classes.inventory}>\r\n                        <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                            {itemGrids}\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={useItem}\r\n                            disabled={!isSelected || used}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            {used ? \"Used\" : \"Use\"}\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ItemUse;\r\n","import React from \"react\";\r\nimport { Button, Grid, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport IAttackResult from \"../../models/AttackResult\";\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport MockHeroService from \"../../services/MockHeroService\";\r\nimport Hero from \"../../models/character/Hero\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype AttackResolveProps = {\r\n    /** The target of the attack */\r\n    target: string;\r\n\r\n    /** The attack number */\r\n    attackModifier: number;\r\n\r\n    /** The attack table to use */\r\n    attackTable: string;\r\n\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\nconst AttackResolve: React.FunctionComponent<AttackResolveProps> = (props: AttackResolveProps): JSX.Element | null => {\r\n    const classes = useStyles();\r\n\r\n    const [heroes, setHeroes] = React.useState<Hero[] | null>(null); // The map graph data\r\n    const [attackResult, setAttackResult] = React.useState<IAttackResult | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of heroes\r\n        const determineAttackResult = () => {\r\n            // // TODO: Try / catch\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n\r\n            const newParty = partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n            \r\n            // const newStashItems = itemService.getItems(props.itemIds);\r\n            // setLootItems(newStashItems);\r\n        };\r\n\r\n        if (attackResult === null || heroes === null) {\r\n            determineAttackResult();\r\n        }\r\n    });\r\n\r\n    if (!attackResult) return null;\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const output = (\r\n                <Grid item xs={3} style={{ textAlign: \"center\" }}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} className={classes.hero} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            Resolve\r\n            <Grid container>{renderParty()}</Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AttackResolve;\r\n","import React from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../../models/InkStoryChoice\";\r\nimport PartySelect from \"./PartySelect\";\r\nimport HeroSelect from \"./HeroSelect\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\nimport StoryEncounterFinish from \"../../models/InkStoryFinish\";\r\nimport TraitSelect from \"./TraitSelect\";\r\nimport PartyInventorySelect from \"./PartyInventorySelect\";\r\nimport ItemLoot from \"./ItemLoot\";\r\nimport ItemUse from \"./ItemUse\";\r\nimport AttackResolve from \"./AttackResolve\";\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        overflow: \"visible\",\r\n    },\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n        userSelect: \"none\",\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n    portrait: {\r\n        borderRadius: \"50%\",\r\n        width: \"200px\",\r\n        position: \"absolute\",\r\n        top: \"-60px\",\r\n        left: \"-60px\",\r\n        backgroundColor: \"white\",\r\n        border: \"8px solid white\",\r\n    },\r\n    placeholder: {\r\n        float: \"left\",\r\n        width: \"130px\",\r\n        height: \"140px\",\r\n    },\r\n    paragraph: {\r\n        display: \"inline-block\",\r\n        width: \"100%\",\r\n    },\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveToNode?: string, startEncounterId?: string, coverVisible?: number) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nconst EncounterDialog: React.FunctionComponent<EncounterDialogProps> = (props: EncounterDialogProps) => {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = React.useState(new MockEncounterService());\r\n    const [paragraphs, setParagraphs] = React.useState<string[]>([]);\r\n    const [title, setTitle] = React.useState<string>(\"\");\r\n    const [choices, setChoices] = React.useState<InkStoryChoice[]>([]);\r\n    const [storyStarted, setStoryStarted] = React.useState<boolean>(false);\r\n    const [isReady, setIsReady] = React.useState<boolean>(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo?: string, encounterDetailId?: string, coverVisible?: number) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo, encounterDetailId, coverVisible);\r\n    };\r\n\r\n    const handleChoice = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            const encounterFinish = encounterService.continue();\r\n            processFinish(encounterFinish.finishData);\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            processFinish(encounter.finishData);\r\n        }\r\n    };\r\n\r\n    const processFinish = (finish?: StoryEncounterFinish): void => {\r\n        // Finished -> Check variables\r\n        if (!finish || (finish.moveTo === undefined && finish.detailedEncounter === undefined && finish.coverVisible === undefined)) {\r\n            handleClose();\r\n        } else {\r\n            handleCloseWithValue(finish.moveTo, finish.detailedEncounter, finish.coverVisible);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                setParagraphs([\"Error: Encounter finished\"]);\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    // Does the component disable the \"continue\" button until something chosen?\r\n    let isBlockingDialog = false;\r\n\r\n    const renderParagraph = (text: string) => {\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n            isBlockingDialog = false;\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n            isBlockingDialog = false;\r\n        }\r\n        const isInventory = text.indexOf(\"[Inventory]\") >= 0;\r\n        if (isInventory) {\r\n            paragraphText = paragraphText.replace(\"[Inventory]\", \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n\r\n        const extractFunctionText = (functionName: string, paragraph: string): string | undefined => {\r\n            // Check for trait select\r\n            const funcStart = text.indexOf(`[${functionName}(`);\r\n            if (funcStart < 0) return undefined;\r\n\r\n            const funcEnd = text.indexOf(\"]\", funcStart);\r\n            return paragraph.substr(funcStart, funcEnd - funcStart + 1);\r\n        };\r\n\r\n        const extractParams = (functionText: string): string[] => {\r\n            const paramsStart = functionText.indexOf(\"(\");\r\n            if (paramsStart < 0) return [];\r\n\r\n            const paramsRaw = functionText.slice(paramsStart + 1, functionText.length - 2);\r\n\r\n            return paramsRaw.split(\",\").map((t) => t.replaceAll('\"', \"\").trim());\r\n        };\r\n\r\n        // Check for item select\r\n        const selectItemsFunction = extractFunctionText(\"Items\", paragraphText);\r\n        let items: string[] | undefined = undefined;\r\n        if (selectItemsFunction !== undefined) {\r\n            items = extractParams(selectItemsFunction);\r\n            paragraphText = paragraphText.replace(selectItemsFunction, \"\");\r\n            // isSpecialDialog = true;\r\n        }\r\n\r\n        // Check for trait select\r\n        const selectTraitFunction = extractFunctionText(\"SelectTrait\", paragraphText);\r\n        let traits: string[] | undefined = undefined;\r\n        if (selectTraitFunction !== undefined) {\r\n            traits = extractParams(selectTraitFunction);\r\n            paragraphText = paragraphText.replace(selectTraitFunction, \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n\r\n        // Check for item use\r\n        const itemUseFunction = extractFunctionText(\"ItemUse\", paragraphText);\r\n        let useItems: string[] | undefined = undefined;\r\n        if (itemUseFunction !== undefined) {\r\n            useItems = extractParams(itemUseFunction);\r\n            paragraphText = paragraphText.replace(itemUseFunction, \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n\r\n        // Attack text\r\n        const attackFuncText = extractFunctionText(\"Attack\", paragraphText);\r\n        let attackParams: string[] | undefined = undefined;\r\n        if (attackFuncText !== undefined) {\r\n            attackParams = extractParams(attackFuncText);\r\n            paragraphText = paragraphText.replace(attackFuncText, \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.paragraph}>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelect onReady={() => setIsReady(true)} /> : null}\r\n                {isHeroSelect ? <HeroSelect onReady={() => setIsReady(true)} /> : null}\r\n                {isHeroDismiss ? <HeroDismiss onReady={() => setIsReady(true)} /> : null}\r\n                {traits && traits.length > 1 ? (\r\n                    <TraitSelect from={traits[0]} onReady={() => setIsReady(true)} traitIds={traits.slice(1)} isRandomTrait={false} />\r\n                ) : null}\r\n                {items && items.length > 1 ? (\r\n                    <ItemLoot onReady={() => setIsReady(true)} itemIds={items} isRandom={false} selectMultiple={false} />\r\n                ) : null}\r\n                {useItems && useItems.length > 0 ? <ItemUse onReady={() => setIsReady(true)} itemIds={useItems} /> : null}\r\n                {attackParams ? <AttackResolve onReady={() => setIsReady(true)} target=\"\" attackModifier={0} attackTable=\"dart\" /> : null}\r\n                {isStash ? <Stash /> : null}\r\n                {isInventory ? <PartyInventorySelect onReady={() => setIsReady(true)} /> : null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n\r\n        const disableContinue = !isReady && isBlockingDialog;\r\n\r\n        if (encChoices.length === 0) {\r\n            return (\r\n                <Button onClick={handleContinue} disabled={disableContinue}>\r\n                    Continue\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                classes={{\r\n                    paper: classes.paper,\r\n                }}\r\n                className={classes.dialog}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-dialog-title\"\r\n                open={open}\r\n            >\r\n                <DialogContent className={classes.content}>\r\n                    <img src=\"./images/knight.webp\" className={classes.portrait} alt=\"portrait\" />\r\n                    <div className={classes.placeholder}></div>\r\n                    {/* <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" /> */}\r\n                    <h1>{title}</h1>\r\n                    {paragraphs.map((p) => renderParagraph(p))}\r\n                </DialogContent>\r\n                <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterDialog;\r\n","import React from \"react\";\r\n\r\nimport Leaflet from \"leaflet\";\r\nimport { Marker, Tooltip } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\n\r\nimport { Node } from \"ngraph.graph\";\r\nimport { NodeData } from \"../../models/MapGraph\";\r\n\r\nconst useStyles = makeStyles({\r\n    tooltip: {\r\n        padding: \"3px 8px 3px 3px\",\r\n        height: \"32px\",\r\n        display: \"inline-flex\",\r\n        fontSize: \"0.8125rem\",\r\n        // //transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        alignItems: \"center\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"',\r\n        whiteSpace: \"nowrap\",\r\n        borderRadius: \"10px\",\r\n        verticalAlign: \"middle\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        color: \"#616161\",\r\n        marginLeft: \"3px\",\r\n        marginRight: \"5px\",\r\n        width: \"1em\",\r\n        height: \"1em\",\r\n        display: \"inline-block\",\r\n        fontSize: \"1.5rem\",\r\n        //transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        flexShrink: 0,\r\n        userSelect: \"none\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype VertexMarkerProps = {\r\n    vertex: Node<NodeData>;\r\n    onHover: (id: string) => void;\r\n    onHoverEnd: (id: string) => void;\r\n    onClick: (id: string) => void;\r\n};\r\n\r\nconst VertexMarker: React.FunctionComponent<VertexMarkerProps> = (props: VertexMarkerProps) => {\r\n\r\n    const { vertex, onHover, onHoverEnd, onClick } = props;\r\n    const vertextId = vertex.id.toString();\r\n\r\n    const classes = useStyles();\r\n\r\n    const iconConversionX = 1.4;\r\n    const iconConversionY = 1.5;\r\n\r\n    const renderTooltipIcon = () => {\r\n        if (vertex.data.exitId) \r\n            return <ExitToAppIcon className={classes.icon} />;\r\n\r\n        // Render icons for special encounters\r\n        switch(vertex.data.encounterId) {\r\n            case \"home\":\r\n                return <HomeIcon className={classes.icon} />;\r\n            default:\r\n                return <GpsFixedIcon className={classes.icon} />;\r\n        }\r\n    }\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: vertex.data.marker ? `/images/markers/${vertex.data.marker.image}` : \"images/blank.svg\",\r\n        iconSize: vertex.data.marker\r\n            ? [vertex.data.marker.dimensions[0] * iconConversionX, vertex.data.marker.dimensions[1] * iconConversionY]\r\n            : [50, 50],\r\n        iconAnchor: vertex.data.marker\r\n            ? [vertex.data.marker.anchor[0] * iconConversionX, vertex.data.marker.anchor[1] * iconConversionY]\r\n            : [25, 25],\r\n        className: vertex.data.marker ? \"vertex-icon\" : vertex.data.exitId ? \"exit-icon\" : \"bullseye-icon\",\r\n    });\r\n\r\n    // Note: Leaflet tooltips breaks the onclick detection on the map object\r\n    return (\r\n        <Marker\r\n            key={vertextId}\r\n            position={vertex.data.position}\r\n            icon={icon}\r\n            onclick={() => onClick(vertextId)}\r\n            onmouseover={() => onHover(vertextId)}\r\n            onmouseout={() => onHoverEnd(vertextId)}\r\n        >\r\n            <Tooltip className={classes.tooltip}>\r\n                {renderTooltipIcon()}\r\n                <span>{vertex.id.toString()}</span>\r\n            </Tooltip>\r\n        </Marker>\r\n    );\r\n};\r\n\r\nexport default VertexMarker;\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n  length = (): number => this._store.length;\r\n}\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        // ES: Ignore slides where destination is same as the source\r\n        // ES: I'm not sure why this happens when any state is set on the encounter page\r\n        // const slideTo = latLng(this._slideToLatLng)\r\n        // if (slideTo.lat === this.getLatLng().lat && slideTo.lng === this.getLatLng().lng)\r\n        //     return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import { createPortal } from \"react-dom\";\r\nimport Drift_Marker from \"./Drift_Marker\";\r\nimport { DivIcon, LatLngExpression } from \"leaflet\";\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from \"react-leaflet\";\r\n\r\ntype LeafletElement = Drift_Marker;\r\n\r\ntype DriftMarker2Props = {\r\n    draggable?: boolean;\r\n    opacity?: number;\r\n    position: LatLngExpression;\r\n    duration: number;\r\n    keepAtCenter?: boolean;\r\n    zIndexOffset?: number;\r\n    onClick?: (name: DriftMarker2) => void;\r\n    onMoveEnd?: (name: DriftMarker2) => void;\r\n    onMouseOver?: (name: DriftMarker2) => void;\r\n    onMouseOut?: (name: DriftMarker2) => void;\r\n} & MapLayerProps;\r\n\r\n/*\r\n * A marker combining the drift marker and allowing react components as children\r\n * Modified from CustomMarker & here : https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n */\r\nclass DriftMarker2 extends MapLayer<DriftMarker2Props, LeafletElement> {\r\n    // private onMoveEndCallback?: (name: DriftMarker2) => void;\r\n    // private onClickCallback?: (name: DriftMarker2) => void;\r\n    // private onHover?: (name: DriftMarker2) => void;\r\n    // private onHoverEnd?: (name: DriftMarker2) => void;\r\n\r\n    leafletElement: any;\r\n\r\n    createLeafletElement(props: DriftMarker2Props): any {\r\n        const { position, ...rest } = props;\r\n\r\n        // // when not providing className, the element's background is a white square\r\n        // // when not providing iconSize, the element will be 12x12 pixels\r\n        const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n        const el = new Drift_Marker(position, { icon: icon, ...rest }) as any;\r\n\r\n        // this.onMoveEndCallback = props.onMoveEnd;\r\n        // this.onClickCallback = props.onClick;\r\n        // el.onHover = props.onHover;\r\n        // el.onHoverEnd = props.onHoverEnd;\r\n        // el.on(\"moveend\", this.moveEnd);\r\n        // el.on(\"click\", this.clicked);\r\n        // el.on(\"moveend\", () => {\r\n        //     if (props.onMoveEnd) this.moveEnd(props.onMoveEnd);\r\n        // });\r\n        // el.on(\"click\", () => {\r\n        //     if (props.onClick) this.moveEnd(props.onClick);\r\n        // });\r\n        // el.on(\"mouseover\", () => {\r\n        //     debugger;\r\n        //     if (this.onHover) {\r\n        //         this.onHover(this);\r\n        //     }\r\n        // });\r\n        // el.on(\"mouseout\", () => {\r\n        //     if (this.onHoverEnd) {\r\n        //         this.onHoverEnd(this);\r\n        //     }\r\n        // });\r\n        this.contextValue = { ...props.leaflet, popupContainer: el };\r\n        return el;\r\n    }\r\n\r\n    // moveEnd(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onMoveEndCallback) {\r\n    //     //     this.onMoveEndCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    // clicked(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onClickCallback) {\r\n    //     //     this.onClickCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (super.componentWillMount) {\r\n            super.componentWillMount();\r\n        }\r\n        this.leafletElement = this.createLeafletElement(this.props);\r\n        this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n    }\r\n\r\n    // Turning this on stops the moveend update\r\n    // componentDidUpdate(fromProps: any) {\r\n    //     this.updateLeafletElement(fromProps, this.props);\r\n    // }\r\n\r\n    updateLeafletElement(fromProps: DriftMarker2Props, toProps: DriftMarker2Props) {\r\n        if (toProps.position !== fromProps.position && typeof toProps.duration == \"number\") {\r\n            this.leafletElement.slideTo(toProps.position, {\r\n                duration: toProps.duration,\r\n                keepAtCenter: toProps.keepAtCenter,\r\n            });\r\n        }\r\n        if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n            this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\r\n        }\r\n        if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n            this.leafletElement.setOpacity(toProps.opacity);\r\n        }\r\n        if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n            if (toProps.draggable === true) {\r\n                this.leafletElement.dragging.enable();\r\n            } else {\r\n                this.leafletElement.dragging.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const container = this.leafletElement._icon;\r\n\r\n        if (!container) {\r\n            return null;\r\n        }\r\n\r\n        const portal = createPortal(children, container);\r\n\r\n        return children == null || this.contextValue == null ? null : <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>;\r\n    }\r\n}\r\n\r\nexport default withLeaflet<DriftMarker2Props>(DriftMarker2);\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { LatLng } from \"leaflet\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\n\r\ntype PartyMarkerProps = {\r\n    name: string;\r\n    id: string;\r\n    imageUrl: string;\r\n    position: LatLng;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (id: string) => void;\r\n    onMoveEnd: (id: string) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst PartyMarker: React.FunctionComponent<PartyMarkerProps> = (props: PartyMarkerProps) => {\r\n    const { id, imageUrl, isActive, position, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={position}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(id)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(id);\r\n            }}\r\n        >\r\n            <div>\r\n                <img src={imageUrl} className={isActive ? classes.iconActive : classes.icon} alt=\"party\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default PartyMarker;\r\n","import GameState from \"../models/GameState\";\r\n\r\nexport default class TimeTracker {\r\n    private static _dayLength: number = 24;\r\n\r\n    public static isNight = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour >= 15 && hour <= 20;\r\n    };\r\n\r\n    public static isMorning = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour > 20;\r\n    };\r\n\r\n    public static isEvening = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour > 11 && hour < 15;\r\n    };\r\n\r\n    public static toLogString = (state: GameState): string => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        let logString = `Hour = ${hour} - `;\r\n        if (TimeTracker.isNight(state)) logString += \"It's night\";\r\n        else if (TimeTracker.isMorning(state)) logString += \"It's morning\";\r\n        else if (TimeTracker.isEvening(state)) logString += \"It's evening\";\r\n        else logString += \"It's day\";\r\n        return logString;\r\n    };\r\n}\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Polyline } from \"react-leaflet\";\r\nimport EncounterDialog from \"./encounter-dialog/EncounterDialog\";\r\nimport VertexMarker from \"./markers/VertexMarker\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\n\r\n// Pathfinding imports\r\nimport npath from \"ngraph.path\";\r\nimport { Node } from \"ngraph.graph\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport Queue from \"../models/Queue\";\r\nimport { MapGraph, NodeData } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport PartyMarker from \"./markers/PartyMarker\";\r\nimport LinkTo from \"./LinkTo\";\r\nimport TimeTracker from \"../services/TimeTracker\";\r\n\r\nconst useStyles = makeStyles({\r\n    dayMap: {},\r\n    nightMap: {\r\n        filter: \"brightness(0.4) grayscale(0.6)\",\r\n    },\r\n    eveningMap: {\r\n        filter: \"brightness(0.7) grayscale(0.3) saturate(1.28) hue-rotate(328deg)\",\r\n    },\r\n    morningMap: {\r\n        filter: \"brightness(0.8) grayscale(0.3) sepia(0.4) saturate(1.28)\",\r\n    },\r\n    quests: {\r\n        position: \"absolute\",\r\n        bottom: \"15px\",\r\n        right: \"15px\",\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        zIndex: 1000,\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            color: \"white\",\r\n        },\r\n    },\r\n});\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    graph: MapGraph; // The map graph data\r\n    mapUrl: string;\r\n    coverUrls: string[];\r\n    pathColor: string; // The default path colour is brown\r\n    useDayNight: boolean;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMap: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState, graph, mapUrl, pathColor, useDayNight, onNewMap } = props;\r\n\r\n    const [pos, setPos] = React.useState<LatLng | undefined>(undefined); // The current (target) position of the player marker\r\n    const [path, setPath] = React.useState<LatLng[]>([]); // The path to the hovered vertex\r\n    const [vertexQueue] = React.useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // TODO: Derived state anti-pattern\r\n    const [gameState, setGameState] = React.useState<GameState>(startState);\r\n    const [initialNode, setInitialNode] = React.useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    const [visibleCovers, setVisibleCovers] = React.useState<number[]>(startState.currentMapCovers);\r\n\r\n    const classes = useStyles();\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (name: string) => {\r\n        console.log(`Move ended : ${name} with ${vertexQueue.length()} queued`);\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update visibile covers list (that hide the map with a fog of war)\r\n            if (targetVertex.data.coverIds) {\r\n                for (let i = 0; i < targetVertex.data.coverIds.length; i++) {\r\n                    const thisCoverIds = targetVertex.data.coverIds[i];\r\n                    if (visibleCovers.indexOf(thisCoverIds) < 0) {\r\n                        visibleCovers.push(thisCoverIds);\r\n                        setVisibleCovers(visibleCovers);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update user state\r\n            gameState.currentVertextId = targetVertex.id.toString();\r\n            gameState.currentTurn++;\r\n            setGameState(gameState);\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState: GameState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                        currentEncounterId: undefined,\r\n                        currentMapCovers: [],\r\n                        currentTurn: startState.currentTurn,\r\n                        seed: startState.seed,\r\n                    };\r\n\r\n                    vertexQueue.clear();\r\n                    onNewMap(newState);\r\n                }\r\n            } else if (vertexQueue.length() <= 0) {\r\n                // Save the movement if its the last move\r\n                const stateService = new MockGameStateService();\r\n                const newState = stateService.getState();\r\n                newState.currentVertextId = targetVertex.id.toString();\r\n                newState.currentMapCovers = visibleCovers;\r\n                console.log(visibleCovers);\r\n                stateService.setState(newState);\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n    };\r\n\r\n    const onClick = (vertexId: string) => {\r\n        console.log(`Clicked on vertex ${vertexId}`);\r\n\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        if (path.length <= 1) {\r\n            console.log(`No route found to ${vertexId}`);\r\n            return;\r\n        }\r\n\r\n        path.pop(); // Remove the current/start node\r\n\r\n        vertexQueue.clear();\r\n        let nextVertex = path.pop();\r\n        while (nextVertex) {\r\n            vertexQueue.push(nextVertex);\r\n            // Stop if a vertex with an an encounter is hit\r\n            if (nextVertex.data.encounterId) {\r\n                break;\r\n            }\r\n            nextVertex = path.pop();\r\n        }\r\n\r\n        handleMoveEnd(\"party\"); // Trigger the move to the next vertex\r\n    };\r\n\r\n    // On hover, show the path to the marker\r\n    const onHover = (vertexId: string) => {\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        let pathVertexes = path.map((p) => p.data.position);\r\n        setPath(pathVertexes);\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(\"party\");\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string, coverVisible?: number) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (encounterDetailId) {\r\n            console.log(\"Start detailed encounter : \" + encounterDetailId);\r\n            const newState: GameState = {\r\n                currentMapId: startState.currentMapId,\r\n                currentVertextId: startState.currentVertextId,\r\n                currentEncounterId: encounterDetailId,\r\n                currentMapCovers: [],\r\n                currentTurn: startState.currentTurn,\r\n                seed: startState.seed,\r\n            };\r\n\r\n            vertexQueue.clear();\r\n            onNewMap(newState);\r\n        }\r\n\r\n        if (moveTo) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n\r\n        if (coverVisible !== undefined) {\r\n            visibleCovers.push(coverVisible);\r\n            setVisibleCovers(visibleCovers);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (initialNode) {\r\n            console.log(\"Initial node : \" + gameState.currentMapId + \", \" + gameState.currentVertextId);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(graph, gameState.currentVertextId);\r\n            setInitialNode(false);\r\n        }\r\n    }, [initialNode, gameState.currentMapId, gameState.currentVertextId, moveToVertexId, graph]);\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n\r\n    if (!pos) return null;\r\n\r\n    const isMarkerVisible = (node: NodeData) => {\r\n        // if (node.coverIds === undefined)\r\n        //     return true;\r\n        // const intersect = node.coverIds.filter((value) => visibleCovers.includes(value));\r\n        // return intersect.length > 0;\r\n        return true;\r\n    };\r\n\r\n    const renderMarkers = (graph: MapGraph) =>\r\n        graph\r\n            .getVertices()\r\n            .map((v) =>\r\n                isMarkerVisible(v.data) ? (\r\n                    <VertexMarker key={v.id} vertex={v} onHover={onHover} onHoverEnd={() => setPath([])} onClick={onClick} />\r\n                ) : null\r\n            );\r\n\r\n    const renderCovers = (coverUrls: string[]): JSX.Element[] => {\r\n        const covers: JSX.Element[] = [];\r\n        for (let i = 0; i < coverUrls.length; i++) {\r\n            if (visibleCovers.indexOf(i) < 0) covers.push(<ImageOverlay url={coverUrls[i]} bounds={bounds} />);\r\n        }\r\n        return covers;\r\n    };\r\n\r\n    console.log(TimeTracker.toLogString(gameState));\r\n\r\n    const getLightingClass = () =>\r\n        useDayNight === false\r\n            ? classes.dayMap\r\n            : TimeTracker.isEvening(gameState)\r\n            ? classes.eveningMap\r\n            : TimeTracker.isNight(gameState)\r\n            ? classes.nightMap\r\n            : TimeTracker.isMorning(gameState)\r\n            ? classes.morningMap\r\n            : classes.dayMap;\r\n\r\n    return (\r\n        <div>\r\n            <Map\r\n                className={getLightingClass()}\r\n                crs={CRS.Simple}\r\n                zoom={-1}\r\n                minZoom={-1}\r\n                maxZoom={-1}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={handleClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n                <ImageOverlay url={mapUrl} bounds={bounds} />\r\n                {renderCovers(props.coverUrls)}\r\n                {renderMarkers(graph)}\r\n                <Polyline positions={path} color={pathColor} dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n                <PartyMarker\r\n                    name=\"party\"\r\n                    id=\"party\"\r\n                    imageUrl=\"images/knight.webp\"\r\n                    position={pos}\r\n                    onMoveEnd={handleMoveEnd}\r\n                    isActive={true}\r\n                />\r\n            </Map>\r\n            <LinkTo key=\"quests\" url={`${process.env.PUBLIC_URL}/quests/`}>\r\n                <ExploreIcon color=\"disabled\" className={classes.quests} />\r\n            </LinkTo>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OverheadMap;\r\n","import React from \"react\";\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nconst LoadingProgress: React.FunctionComponent = () => {\r\n    const useStyles = makeStyles(() => ({\r\n        root: {\r\n            textAlign: \"center\",\r\n            padding: \"40vh 0 0 0\",\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingProgress;\r\n","import React from \"react\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport { MapGraph } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockMapService from \"../services/MockMapService\";\r\nimport GraphBuilder from \"../services/GraphBuilder\";\r\nimport OverheadMap from \"./OverheadMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMapLoader: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState } = props;\r\n\r\n    const [graph, setGraph] = React.useState<MapGraph | undefined>(undefined); // The map graph data\r\n    const [pathColor, setPathColor] = React.useState<string | undefined>(undefined);\r\n\r\n    const [mapUrl, setMapUrl] = React.useState<string | undefined>(undefined);\r\n    const [coverUrls, setCoverUrls] = React.useState<string[]>([]);\r\n    const [useDayNight, setUseDayNight] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const service = new MockMapService();\r\n\r\n            const data = service.getMap(startState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\r\n                `Loaded map : ${startState.currentMapId}, ${startState.currentVertextId}. ${data?.vertices.length} vertices. Path Color ${\r\n                    data.pathColor ?? \"None\"\r\n                }`\r\n            );\r\n\r\n            setMapUrl(data.imageUrl);\r\n            setCoverUrls(data.coverUrls);\r\n            setPathColor(data.pathColor ?? \"#5E4E00\"); // The default path colour is brown\r\n            setUseDayNight(data.useDayNight);\r\n\r\n            const mapGraph = GraphBuilder.Build(data);\r\n            setGraph(mapGraph);\r\n        };\r\n\r\n        if (!graph) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n        props.onNewMap(newState);\r\n\r\n        // Force a reload of the map\r\n        // Need to set the graph last, or the load can happen after the useEffect\r\n        setMapUrl(undefined);\r\n        setPathColor(undefined);\r\n        setGraph(undefined);\r\n        setCoverUrls([]);\r\n    };\r\n\r\n    if (!mapUrl || !graph || !pathColor) return <LoadingProgress />;\r\n\r\n    return (\r\n        <OverheadMap\r\n            startState={startState}\r\n            graph={graph}\r\n            mapUrl={mapUrl}\r\n            coverUrls={coverUrls}\r\n            pathColor={pathColor}\r\n            useDayNight={useDayNight}\r\n            onNewMap={onNewMap}\r\n        />\r\n    );\r\n};\r\n\r\nexport default OverheadMapLoader;\r\n","import EncounterDetail from \"../models/EncounterDetail\";\r\n\r\nimport TavernMap from \"./encounter-maps/tavern.json\";\r\n\r\nexport default class MockDetailedEncounterService {\r\n    public getEncounterDetail(id: string): EncounterDetail | null {\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"tavern\":\r\n            default:\r\n                json = TavernMap;\r\n                break;\r\n        }\r\n\r\n        return json\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype HeroMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst HeroMarker: React.FunctionComponent<HeroMarkerProps> = (props: HeroMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-32px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.currentStatus.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={hero.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={hero.details.name} />\r\n            </div>\r\n            <div className={classes.root}></div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default HeroMarker;\r\n","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\n\r\nexport default class Transforms {\r\n    // Conversion functions from isometric to cardinal co-ordinates\r\n    public static isoX = (carX: number, carY: number): number => carX + carY;\r\n    public static isoY = (carX: number, carY: number): number => carY - carX;\r\n\r\n    /*\r\n     * Convert cardinal co-ordinates to isometric co-ordinates\r\n     */\r\n    public static cardinalToIsometric = (car: LatLngTuple): LatLng =>\r\n        latLng(Transforms.isoY(car[0], car[1]), Transforms.isoX(car[0], car[1]));\r\n\r\n    public static cardinalToIsometric2 = (car: LatLng): LatLng =>\r\n        latLng(Transforms.isoY(car.lat, car.lng), Transforms.isoX(car.lat, car.lng));\r\n\r\n    public static carX = (isoX: number, isoY: number): number => (isoX + isoY) * 0.5;\r\n    public static carY = (isoX: number, isoY: number): number => (isoY - isoX) * 0.5;\r\n\r\n    /*\r\n     * Convert isometric co-ordinates to cardinal co-ordinates\r\n     */\r\n    public static isometricToCardinal = (iso: LatLng): LatLng =>\r\n        latLng(Transforms.carY(iso.lat, iso.lng), Transforms.carX(iso.lat, iso.lng));\r\n\r\n    public static offset = (iso: LatLng, offset: LatLngTuple): LatLng => latLng(iso.lat + offset[0], iso.lng + offset[1]);\r\n    public static scale = (iso: LatLng, scale: LatLngTuple): LatLng => latLng(iso.lat * scale[0], iso.lng * scale[1]);\r\n}","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\nimport Transforms from \"./Transforms\";\r\nimport EncounterDetail, { GridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { AStarFinder } from \"astar-typescript\";\r\nimport Hero from \"../models/character/Hero\";\r\n\r\nexport default class GridHelpers {\r\n    // Convert a grid co-ordinate to a display co-ordinate by converting to isometric, scaling & offsetting\r\n    public static gridToDisplayTuple = (car: LatLngTuple, encounter: EncounterDetail): LatLng =>\r\n        Transforms.offset(Transforms.scale(Transforms.cardinalToIsometric(car), encounter.gridScale), encounter.gridOffset);\r\n\r\n    public static gridToDisplayCenterTuple = (car: LatLngTuple, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayTuple([car[0] + 0.5, car[1] + 0.5], encounter);\r\n\r\n    public static gridToDisplay = (car: LatLng, encounter: EncounterDetail): LatLng =>\r\n        GridHelpers.gridToDisplayTuple([car.lat, car.lng], encounter);\r\n\r\n    public static gridToDisplayCenter = (car: LatLng, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayCenterTuple([car.lat, car.lng], encounter);\r\n\r\n    // And the reverse transforms\r\n    public static reverseOffset = (coords: LatLng, gridOffset: LatLngTuple) => Transforms.offset(coords, [-gridOffset[0], -gridOffset[1]]);\r\n\r\n    public static reverseScale = (coords: LatLng, gridScale: LatLngTuple) =>\r\n        Transforms.scale(coords, [1.0 / gridScale[0], 1.0 / gridScale[1]]);\r\n\r\n    public static displayToGrid = (iso: LatLng, encounter: EncounterDetail): [number, number] => {\r\n        const { gridOffset, gridScale } = encounter;\r\n\r\n        const result = Transforms.isometricToCardinal(GridHelpers.reverseScale(GridHelpers.reverseOffset(iso, gridOffset), gridScale));\r\n        return [Math.floor(result.lat), Math.floor(result.lng)];\r\n    };\r\n\r\n    /*\r\n     * Get the first found location for a grid entry (hero or encoutner ID)\r\n     */\r\n    private static getGridLocation = (grid: TokenGridEntry[][], char: GridEntry): LatLng | undefined => {\r\n        for (let x = 0; x < grid.length; x++) {\r\n            const currentRow = grid[x];\r\n            const index = currentRow.indexOf(char);\r\n            if (index >= 0) {\r\n                return latLng(x, index);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /*\r\n     * Get the initial locations for a grid entry (hero or encoutner ID)\r\n     */\r\n    public static getInitialPositions = (encounter: EncounterDetail, characters: [NpcGridEntry, Hero][]): CharacterEncounterData[] => {\r\n        return characters.map((c: [NpcGridEntry, Hero]) => {\r\n            const gridPosition = GridHelpers.getGridLocation(encounter.tokenGrid, c[0]);\r\n            return new CharacterEncounterData(\r\n                c[1],\r\n                c[0],\r\n                \"melee\",\r\n                gridPosition,\r\n                GridHelpers.gridToDisplayCenter(gridPosition ?? latLng([0, 0]), encounter)\r\n            );\r\n        });\r\n    };\r\n\r\n    public static mergeGridEntry = (tokenEntry: TokenGridEntry, baseEntry: GridEntry): GridEntry =>\r\n        tokenEntry !== \" \" ? (tokenEntry as GridEntry) : baseEntry;\r\n\r\n    private static buildMergedGrids(tokenGrid: TokenGridEntry[][], grid: GridEntry[][]): GridEntry[][] {\r\n        const output: GridEntry[][] = [];\r\n\r\n        for (let x = 0; x < grid.length; x++) {\r\n            output[x] = [];\r\n            for (let y = 0; y < grid.length; y++) {\r\n                output[x][y] = GridHelpers.mergeGridEntry(tokenGrid[x][y], grid[x][y]);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private static buildAstarGrid = (grid: GridEntry[][]): number[][] => {\r\n        return grid.map((e) => e.map((item) => (GridHelpers.isWalkable(item) ? 0 : 1)));\r\n    };\r\n\r\n    public static getGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const mergedGrid = GridHelpers.buildMergedGrids(tokenGrid, grid);\r\n        const endEntry = mergedGrid[end.lat][end.lng];\r\n\r\n        const isFoe = GridHelpers.isFoe(endEntry);\r\n        const isHero = GridHelpers.isHero(endEntry);\r\n        const isBlocked = endEntry === \"0\";\r\n\r\n        // Allow movement on start/end points\r\n        mergedGrid[start.lat][start.lng] = \"1\";\r\n        if (isHeroMove && !isBlocked && !isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n        else if (!isHeroMove && !isBlocked && isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n\r\n        // Build a new crid each time because everything heroes, foes move\r\n        const aStar = new AStarFinder({\r\n            grid: {\r\n                matrix: GridHelpers.buildAstarGrid(mergedGrid),\r\n            },\r\n        });\r\n\r\n        const startGridPosition = { x: start.lng, y: start.lat };\r\n        const endGridPosition = { x: end.lng, y: end.lat };\r\n\r\n        //console.log(`Path from : (${startGridPosition.x},${startGridPosition.y}) to (${endGridPosition.x},${endGridPosition.y})`);\r\n\r\n        const path = aStar.findPath(startGridPosition, endGridPosition);\r\n\r\n        //console.log(`Path length : ${path.length}`);\r\n        // If attacking a foe, don't move onto the foe\r\n        if (isFoe || isHero) path.pop();\r\n\r\n        return path.reverse();\r\n    };\r\n\r\n    public static getRangedGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const path = GridHelpers.getGridPath(tokenGrid, grid, start, end, isHeroMove);\r\n\r\n        if (range <= 1) return path;\r\n\r\n        const distanceSquared = (x: LatLng, y: LatLng): number => {\r\n            const latDist = x.lat - y.lat;\r\n            const lngDist = x.lng - y.lng;\r\n            // Note: Removed Math.sqrt to make slightly faster?\r\n            return latDist * latDist + lngDist * lngDist;\r\n        };\r\n\r\n        for (let i = path.length - 1; i >= 0; i--) {\r\n            const dist = distanceSquared(latLng(path[i][1], path[i][0]), end);\r\n            // console.log(`Dist from ${path[i][1]}, ${path[i][0]} to ${end.lat}, ${end.lng} = ${dist}`);\r\n            if (dist < range * range) {\r\n                return path.splice(i);\r\n            }\r\n        }\r\n\r\n        // TODO: Instead check each node on the path to check if its within range\r\n        return path.splice(range - 1);\r\n    };\r\n\r\n    public static getHeroPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number\r\n    ): number[][] =>\r\n        range > 0\r\n            ? GridHelpers.getRangedGridPath(tokenGrid, grid, start, end, range, true)\r\n            : GridHelpers.getGridPath(tokenGrid, grid, start, end, true);\r\n\r\n    public static getFoePath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number\r\n    ): number[][] =>\r\n        range > 0\r\n            ? GridHelpers.getRangedGridPath(tokenGrid, grid, start, end, range, false)\r\n            : GridHelpers.getGridPath(tokenGrid, grid, start, end, false);\r\n\r\n    public static findNearestHero = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng\r\n    ): [GridEntry, number[][]] | undefined => {\r\n        const paths: [GridEntry, number[][]][] = [];\r\n        const heroEntries: HeroGridEntry[] = [\"A\", \"B\", \"C\", \"D\"];\r\n        for (let i = 0; i < heroEntries.length; i++) {\r\n            const end = GridHelpers.getGridLocation(tokenGrid, heroEntries[i]);\r\n            if (end) {\r\n                paths.push([heroEntries[i], GridHelpers.getFoePath(tokenGrid, grid, start, end, 0)]);\r\n            }\r\n        }\r\n\r\n        const sortedPaths = paths.filter((p) => p[1].length > 0).sort((p1, p2) => p1[1].length - p2[1].length);\r\n        return sortedPaths.length > 0 ? sortedPaths[0] : undefined;\r\n    };\r\n\r\n    public static isHero = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"A\":\r\n            case \"B\":\r\n            case \"C\":\r\n            case \"D\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isEncounter = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"E\":\r\n            case \"F\":\r\n            case \"G\":\r\n            case \"H\":\r\n            case \"I\":\r\n            case \"J\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isFoe = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"K\":\r\n            case \"L\":\r\n            case \"M\":\r\n            case \"N\":\r\n            case \"O\":\r\n            case \"P\":\r\n            case \"Q\":\r\n            case \"R\":\r\n            case \"S\":\r\n            case \"T\":\r\n            case \"U\":\r\n            case \"V\":\r\n            case \"W\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isWalkable = (entry: GridEntry) => entry !== \"0\" && !GridHelpers.isFoe(entry) && !GridHelpers.isHero(entry);\r\n\r\n    public static canEndMove = (entry: GridEntry) => entry === \"1\" || entry === \"2\" || entry === \"X\" || GridHelpers.isEncounter(entry);\r\n\r\n    public static displayGrid = (tokenGrid: TokenGridEntry[][]): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < tokenGrid.length; i++) {\r\n            displayStrings.push(tokenGrid[i].join(\" - \"));\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","\r\nimport { LatLng } from \"leaflet\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport { NpcGridEntry } from \"./EncounterDetail\";\r\nimport Hero from \"./character/Hero\";\r\nimport Queue from \"./Queue\";\r\n\r\nexport default class CharacterEncounterData {\r\n    constructor(details: Hero, gridEntry: NpcGridEntry, selectedAttack: string, gridPos?: LatLng, displayPos?: LatLng, vertexQueue?: Queue<[number, number]>) {\r\n        this.gridPos = gridPos;\r\n        this.gridEntry = gridEntry;\r\n        this.displayPos = displayPos;\r\n        this.selectedAttack = selectedAttack;\r\n        this.vertexQueue = vertexQueue ?? new Queue<[number, number]>();\r\n        this.details = details;\r\n    }\r\n\r\n    public details: Hero;\r\n\r\n    public gridEntry: NpcGridEntry;\r\n\r\n    public gridPos?: LatLng;\r\n\r\n    public displayPos?: LatLng;\r\n\r\n    public vertexQueue: Queue<[number, number]>;\r\n\r\n    public selectedAttack: string;\r\n\r\n    // TODO\r\n    // public lastAttack: string;\r\n\r\n    public static buildFromGrid(gridPos: LatLng | undefined, convertFunc: (pos: LatLng) => LatLng): CharacterEncounterData {\r\n        const result = <CharacterEncounterData>{\r\n            gridPos: gridPos,\r\n            displayPos: gridPos ? convertFunc(gridPos) : undefined,\r\n            selectedAttack: \"melee\",\r\n            vertexQueue: new Queue<[number, number]>(),\r\n        };\r\n        return result;\r\n    }\r\n\r\n    // TODO: Disable path display when moving\r\n    public isMoving = (): boolean => this.vertexQueue.length() > 0;\r\n\r\n    public toString(): string {\r\n        const queueStrings = this.vertexQueue._store.map((i) => `${i[0]},${i[1]}`);\r\n\r\n        return `${this.gridPos?.lat},${this.gridPos?.lng} display ${this.displayPos?.lat},${this.displayPos?.lng} [${queueStrings.join(\r\n            \"],[\"\r\n        )}]`;\r\n    }\r\n\r\n    public isFoe = (): boolean => GridHelpers.isFoe(this.gridEntry);\r\n\r\n    public isHero = (): boolean => GridHelpers.isHero(this.gridEntry);\r\n}\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLng, LatLngTuple } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { GridEntry } from \"../../models/EncounterDetail\";\r\nimport GridHelpers from \"../../helpers/GridHelpers\";\r\n\r\ntype GridMarkerProps = {\r\n    gridPos: [number, number];\r\n    entry: GridEntry;\r\n    gridToDisplayFunc: (car: LatLngTuple) => LatLng;\r\n    onHover: (gridPos: [number, number]) => void;\r\n    onHoverEnd: (gridPos: [number, number]) => void;\r\n    onClick: (gridPos: [number, number]) => void;\r\n};\r\n\r\nconst GridMarker: React.FunctionComponent<GridMarkerProps> = (props: GridMarkerProps) => {\r\n    const { gridPos, entry, gridToDisplayFunc, onHover, onHoverEnd, onClick } = props;\r\n\r\n    const displayPos = gridToDisplayFunc([gridPos[0] + 0.5, gridPos[1] + 0.5]);\r\n\r\n    const isHero = GridHelpers.isHero(entry);\r\n    const isFoe = GridHelpers.isFoe(entry);\r\n    if (isHero || isFoe) return null; // No markers on hero or foe positions\r\n        \r\n    const canEndMove = GridHelpers.canEndMove(entry);\r\n\r\n    const iconUrl = canEndMove ? \"/images/bullseye-flat.svg\" : \"/images/times-solid.svg\";\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        // TODO: Size not scaled\r\n        iconSize: [50, 50],\r\n        iconAnchor: [25, 25],\r\n        className: \"hover-icon\",\r\n    });\r\n\r\n    return (\r\n        <Marker\r\n            key={`${gridPos[0]}.${gridPos[1]}`}\r\n            position={displayPos}\r\n            icon={icon}\r\n            onclick={() => onClick(gridPos)}\r\n            onmouseover={() => onHover(gridPos)}\r\n            onmouseout={() => onHoverEnd(gridPos)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GridMarker;\r\n","import React from \"react\";\r\n\r\nimport { makeStyles, CircularProgress } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype FoeMarkerProps = {\r\n    foe: CharacterEncounterData;\r\n    isActive: boolean;\r\n    attackIcon: string;\r\n    duration?: number;\r\n    onClick?: (foe: CharacterEncounterData) => void;\r\n    onMoveEnd: (foe: CharacterEncounterData) => void;\r\n    onHover: (hero: CharacterEncounterData) => void;\r\n    onHoverEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A map marker that represents an enemy or foe\r\n */\r\nconst FoeMarker: React.FunctionComponent<FoeMarkerProps> = (props: FoeMarkerProps) => {\r\n    const { foe, isActive, duration, onClick, onMoveEnd, onHover, onHoverEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-54px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid indianred\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            \"&:hover\": {\r\n                border: \"6px solid red\",\r\n            },\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid red\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        meleeHover: {\r\n            position: \"absolute\",\r\n            zIndex: 9,\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            opacity: 0,\r\n            \"&:hover\": {\r\n                filter: \"invert(1)\",\r\n                opacity: 1,\r\n            },\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (foe.details.currentStatus.currentHitPoints / foe.details.stats.maxHitPoints) * 100;\r\n\r\n    //const ff = foe.details;\r\n\r\n    //console.log(`# ${ff.id},${foe.gridEntry} has ${percentHp}% hp`);\r\n\r\n    if (!foe.displayPos) return null;\r\n\r\n    const hoverUrl =\r\n        props.attackIcon === \"melee\"\r\n            ? \"./images/melee.svg\"\r\n            : props.attackIcon === \"ranged\"\r\n            ? \"./images/ranged.svg\"\r\n            : \"./images/meteor-solid.svg\";\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={foe.displayPos}\r\n            keepAtCenter={false}\r\n            onMouseOver={() => onHover(foe)}\r\n            onMouseOut={() => onHoverEnd(foe)}\r\n            onMoveEnd={(_: any) => onMoveEnd(foe)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(foe);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={5}\r\n                    size={62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={foe.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={foe.details.name} />\r\n                <img src={hoverUrl} className={classes.meleeHover} alt=\"melee\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default FoeMarker;\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLngExpression } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        filter: \"invert(100%)\",\r\n    },\r\n});\r\n\r\ntype StaticMarkerProps = {\r\n    displayPos: LatLngExpression | undefined;\r\n    iconUrl: string;\r\n    width: number;\r\n    height: number;\r\n    zIndexOffset: number;\r\n};\r\n\r\nconst StaticMarker: React.FunctionComponent<StaticMarkerProps> = (props: StaticMarkerProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { displayPos, iconUrl, width, height } = props;\r\n\r\n    if (!displayPos) return null;\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        iconSize: [width, height],\r\n        iconAnchor: [width >> 1, height >> 1],\r\n        className: classes.icon,\r\n    });\r\n\r\n    return <Marker zIndexOffset={props.zIndexOffset} key={displayPos.toString()} position={displayPos} icon={icon} />;\r\n};\r\n\r\nexport default StaticMarker;\r\n","import React from \"react\";\r\nimport { LatLng } from \"leaflet\";\r\nimport { Polyline } from \"react-leaflet\";\r\nimport StaticMarker from \"./StaticMarker\";\r\n\r\ntype CombatPathProps = {\r\n    // How far the hero can move\r\n    move: number;\r\n\r\n    // The path color\r\n    pathColor: string;\r\n\r\n    // The path to display\r\n    path: LatLng[];\r\n};\r\n\r\n/*\r\n * Display a movement path during combat, split into segments showing how much movement is consumed\r\n */\r\nconst CombatPath: React.FunctionComponent<CombatPathProps> = (props: CombatPathProps): JSX.Element => {\r\n    const { move, pathColor } = props;\r\n\r\n    const fullPath = props.path;\r\n\r\n    const length = fullPath.length;\r\n    const remainderPathLength = length - move * 2;\r\n    const fullMoveStart = remainderPathLength > 0 ? remainderPathLength - 1 : 0;\r\n    const fullMoveEnd = length - move;\r\n    const halfMoveStart = fullMoveEnd > 0 ? length - move - 1 : 0;\r\n\r\n    const remainderPath = remainderPathLength > 0 ? fullPath.slice(0, remainderPathLength) : [];\r\n    const fullMovePath = fullMoveEnd > 0 ? fullPath.slice(fullMoveStart, fullMoveEnd) : [];\r\n    const halfMovePath = fullPath.slice(halfMoveStart);\r\n\r\n    // A marker for the half move path\r\n    const halfMoveMarker = halfMovePath.length > 0 ? halfMovePath[0] : undefined;\r\n\r\n    // A marker for the (!damagePos) move path\r\n    const fullMoveMarker = fullMovePath.length > 0 ? fullMovePath[0] : undefined;\r\n\r\n    const zIndexOffset = -1000;\r\n\r\n    return (\r\n        <div>\r\n            <StaticMarker zIndexOffset={zIndexOffset} displayPos={halfMoveMarker} iconUrl=\"./images/half.svg\" width={30} height={20} />\r\n            <StaticMarker zIndexOffset={zIndexOffset} displayPos={fullMoveMarker} iconUrl=\"./images/circle.svg\" width={30} height={20} />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={remainderPath}\r\n                color=\"indianred\"\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={fullMovePath}\r\n                color=\"#c6c6c6\"\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={halfMovePath}\r\n                color={pathColor}\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatPath;\r\n","import * as React from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { DivIcon, LatLngExpression, marker } from \"leaflet\";\r\nimport * as RL from \"react-leaflet\";\r\nimport { MapLayer, MapLayerProps } from \"react-leaflet\";\r\n\r\ntype CustomMarkerProps = {\r\n    position: LatLngExpression,\r\n    zIndexOff: number;\r\n} & MapLayerProps;\r\n\r\n/*\r\n* From:\r\n* https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n*/\r\nconst CustomMarker = (RL as any).withLeaflet(\r\n    class extends MapLayer<CustomMarkerProps> {\r\n        leafletElement: any;\r\n\r\n        createLeafletElement(props: CustomMarkerProps) {\r\n            const { position, ...rest } = props;\r\n\r\n            // when not providing className, the element's background is a white square\r\n            // when not providing iconSize, the element will be 12x12 pixels\r\n            const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n            const el = marker(position, { icon: icon, zIndexOffset: props.zIndexOff, ...rest });\r\n            this.contextValue = { ...props.leaflet, popupContainer: el };\r\n            return el;\r\n        }\r\n\r\n        updateLeafletElement(fromProps: any, toProps: any) {\r\n            const {\r\n                position: fromPosition,\r\n                zIndexOffset: fromZIndexOffset,\r\n                opacity: fromOpacity,\r\n                draggable: fromDraggable,\r\n                className: fromClassName,\r\n            } = fromProps;\r\n            const {\r\n                position: toPosition,\r\n                zIndexOffset: toZIndexOffset,\r\n                toOpacity,\r\n                draggable: toDraggable,\r\n                className: toClassName,\r\n            } = toProps;\r\n\r\n            function difference<T>(items: Array<T>, itemsToRemove: Array<T>): Array<T> {\r\n                return items.filter((item) => !itemsToRemove.includes(item));\r\n            }\r\n\r\n            if (toPosition !== fromPosition) {\r\n                this.leafletElement.setLatLng(toPosition);\r\n            }\r\n            if (toZIndexOffset !== fromZIndexOffset) {\r\n                this.leafletElement.setZIndexOffset(toZIndexOffset);\r\n            }\r\n            if (toOpacity !== fromOpacity) {\r\n                this.leafletElement.setOpacity(toOpacity);\r\n            }\r\n            if (toDraggable !== fromDraggable) {\r\n                if (toDraggable) {\r\n                    this.leafletElement.dragging.enable();\r\n                } else {\r\n                    this.leafletElement.dragging.disable();\r\n                }\r\n            }\r\n            if (toClassName !== fromClassName) {\r\n                const fromClasses = fromClassName.split(\" \");\r\n                const toClasses = toClassName.split(\" \");\r\n                this.leafletElement._icon.classList.remove(...difference(fromClasses, toClasses));\r\n                this.leafletElement._icon.classList.add(...difference(toClasses, fromClasses));\r\n            }\r\n        }\r\n\r\n        componentWillMount() {\r\n            if (super.componentWillMount) {\r\n                super.componentWillMount();\r\n            }\r\n            this.leafletElement = this.createLeafletElement(this.props);\r\n            this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n        }\r\n\r\n        componentDidUpdate(fromProps: any) {\r\n            this.updateLeafletElement(fromProps, this.props);\r\n        }\r\n\r\n        render() {\r\n            const { children } = this.props;\r\n            const container = this.leafletElement._icon;\r\n\r\n            if (!container) {\r\n                return null;\r\n            }\r\n\r\n            const portal = createPortal(children, container);\r\n\r\n            const LeafletProvider = (RL as any).LeafletProvider;\r\n\r\n            return children == null || portal == null || this.contextValue == null ? null : (\r\n                <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport default CustomMarker;","import React from \"react\";\r\n\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\nimport { Fade } from \"@material-ui/core\";\r\nimport CustomMarker from \"./CustomMarker\";\r\nimport { latLng, LatLng } from \"leaflet\";\r\nimport AttackResult from \"../../models/AttackResult\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"relative\",\r\n        top: \"-20px\",\r\n        left: \"-20px\",\r\n        pointerEvents: \"none\",\r\n    },\r\n    explode: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n    },\r\n    death: {\r\n        position: \"absolute\",\r\n        width: \"55px\",\r\n        height: \"55px\",\r\n        filter: \"invert(0.9)\",\r\n    },\r\n    miss: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n        filter: \"invert(0.67)\", // TODO: Use different svg\r\n    },\r\n    text: {\r\n        position: \"absolute\",\r\n        color: \"white\",\r\n        top: \"27px\",\r\n        width: \"80px\",\r\n    },\r\n});\r\n\r\ntype DamageDisplayProps = {\r\n    result: AttackResult;\r\n};\r\n\r\nconst DamageDisplay: React.FunctionComponent<DamageDisplayProps> = (props: DamageDisplayProps): JSX.Element => {\r\n    const { position, damage, result } = props.result;\r\n    const classes = useStyles();\r\n\r\n    const show = damage !== undefined;\r\n\r\n    return (\r\n        <CustomMarker position={position ?? latLng([0, 0])} zIndexOff={1000}>\r\n            <Fade in={show} style={{ transitionDelay: \"300ms\" }} timeout={{ enter: 500, exit: 500 }}>\r\n                {result === \"death\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/skull.svg\" className={classes.death} alt=\"death\" />\r\n                    </div>\r\n                ) : result === \"miss\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.miss} alt=\"miss\" />\r\n                        <Typography className={classes.text}>Miss</Typography>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.explode} alt=\"damage\" />\r\n                        <Typography className={classes.text}>{damage}</Typography>\r\n                    </div>\r\n                )}\r\n            </Fade>\r\n        </CustomMarker>\r\n    );\r\n};\r\n\r\nexport default DamageDisplay;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport SportsKabaddiIcon from \"@material-ui/icons/SportsKabaddi\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        zIndex: 501,\r\n        position: \"absolute\",\r\n        bottom: \"30px\",\r\n        right: \"30px\",\r\n    },\r\n    icon: {\r\n    },\r\n});\r\n\r\ntype CombatIndicatorProps = {\r\n    isCombat: boolean;\r\n    initiative: number;\r\n};\r\n\r\nconst CombatIndicator: React.FunctionComponent<CombatIndicatorProps> = (props: CombatIndicatorProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            {props.isCombat ? (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <Typography>{Math.round(props.initiative)}</Typography>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <SportsKabaddiIcon className={classes.icon} />\r\n                </Button>\r\n            ) : (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <VisibilityIcon className={classes.icon} />\r\n                </Button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatIndicator;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography, Fade } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"absolute\",\r\n        bottom: \"25px\",\r\n        left: \"25px\",\r\n    },\r\n    button: {\r\n        zIndex: 501,\r\n        padding: \"6px 0px\",\r\n        margin: \"5px\",\r\n        opacity: 0.8,\r\n    },\r\n    icon: {\r\n        width: \"50px\",\r\n        height: \"50px\",\r\n        borderRadius: \"5px\",\r\n    },\r\n});\r\n\r\ntype ActionBarProps = {\r\n    spells: string[];\r\n    selected: string;\r\n    onSelect: (id: string) => void;\r\n};\r\n\r\nconst ActionBar: React.FunctionComponent<ActionBarProps> = (props: ActionBarProps): JSX.Element => {\r\n    const { spells, selected, onSelect } = props;\r\n    const classes = useStyles();\r\n\r\n    const renderButton = (name: string) => (\r\n        <Button\r\n            key={name}\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            className={classes.button}\r\n            color={selected === name ? \"primary\" : \"default\"}\r\n            onClick={() => onSelect(name)}\r\n        >\r\n            <img src={`./images/skills/${name}.png`} className={classes.icon} alt={`${name}`} />\r\n        </Button>\r\n    );\r\n\r\n    const renderSpells = (spells: string[]): JSX.Element[] => spells.map((s) => renderButton(s));\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {renderButton(\"melee\")}\r\n            {renderButton(\"ranged\")}\r\n            {renderSpells(spells)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActionBar;\r\n","/*\r\n* Use the random game seed & encounter ID to determine initiative values\r\n* in a random but recreateable way\r\n*/\r\nexport default class DiceRoller {\r\n\r\n    private generate(seed: number): number {\r\n        const result = seed / 4294967296;\r\n        return result;\r\n    }\r\n\r\n    public rollDie = (seed: number, dieType: number): number => {\r\n        return Math.ceil(this.generate(seed) * dieType);\r\n    };\r\n\r\n    public roll20 = (seed: number): number => this.rollDie(seed, 20);\r\n\r\n    public roll10 = (seed: number): number => this.rollDie(seed, 10);\r\n}\r\n","import MockGameStateService from \"./MockGameStateService\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class DiceSeedTracker {\r\n    public static fromEncounterId(id: string) {\r\n        const hashCode = (s: string) =>\r\n            s.split(\"\").reduce((a, b) => {\r\n                a = (a << 5) - a + b.charCodeAt(0);\r\n                return a & a;\r\n            }, 0);\r\n\r\n        const service = new MockGameStateService();\r\n        const state = service.getState();\r\n\r\n        return hashCode(id) ^ state.seed;\r\n    }\r\n\r\n    public static next(seed: number): number {\r\n        const result = DiceSeedTracker.mulberry32(seed);\r\n        return result;\r\n    }\r\n\r\n    private static mulberry32(a: number): number {\r\n        var t = (a += 0x6d2b79f5);\r\n        t = Math.imul(t ^ (t >>> 15), t | 1);\r\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n        return ((t ^ (t >>> 14)) >>> 0);\r\n    }\r\n}\r\n","import { NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport DiceRoller from \"./DiceRoller\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport DiceSeedTracker from \"./DiceSeedTracker\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class InitiativeTracker {\r\n    private _initiatives: [string, NpcGridEntry, number][] = [];\r\n\r\n    constructor(initiatives: [string, NpcGridEntry, number][]) {\r\n        this._initiatives = initiatives;\r\n    }\r\n\r\n    public static buildInitial(\r\n        gameId: string,\r\n        heroes: [NpcGridEntry, Hero][],\r\n        foes: [NpcGridEntry, Hero][]\r\n    ): [string, NpcGridEntry, number][] {\r\n        // Generate some random initial initiatives\r\n        let seed = DiceSeedTracker.fromEncounterId(gameId);\r\n        const roller = new DiceRoller();\r\n        const heroInitiatives: [string, NpcGridEntry, number][] = heroes.map((h) => {\r\n            seed = DiceSeedTracker.next(seed);\r\n            return [h[1].id, h[0], -(roller.roll10(seed) - AttributeHelper.getModifier(h[1].attributes.dexterity))];\r\n        });\r\n        const foeInitiatives: [string, NpcGridEntry, number][] = foes.map((f) => {\r\n            seed = DiceSeedTracker.next(seed);\r\n            return [f[1].id, f[0], -(roller.roll10(seed) - AttributeHelper.getModifier(f[1].attributes.dexterity))];\r\n        });\r\n\r\n        const initiatives = heroInitiatives.concat(foeInitiatives);\r\n        return InitiativeTracker.sort(initiatives);\r\n    }\r\n\r\n    public processDelay = (name: string, delay: number): [string, NpcGridEntry, number][] => {\r\n        const match = this._initiatives.find((init) => init[0] === name);\r\n        if (!match) {\r\n            console.log(\"Initiative not found : \" + name);\r\n            return this._initiatives;\r\n        }\r\n        match[2] += delay;\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    };\r\n\r\n    public remove = (name: string): [string, NpcGridEntry, number][] => {\r\n        this._initiatives = this._initiatives.filter(i => i[0] !== name);\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    }\r\n\r\n    private static sort = (initiatives: [string, NpcGridEntry, number][]): [string, NpcGridEntry, number][] => {\r\n        const result = initiatives.sort((n1, n2) => n1[2] - n2[2]);\r\n        return result;\r\n    };\r\n\r\n    public getInitiatives = (): [string, NpcGridEntry, number][] => this._initiatives;\r\n\r\n    public getNextInitiative = () => this._initiatives[0];\r\n\r\n    public displayInitiatives = (): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < this._initiatives.length; i++) {\r\n            displayStrings.push(`${this._initiatives[i][0]} : ${this._initiatives[i][1]}`);\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","import { LatLng } from \"leaflet\";\r\n\r\nexport default class AttackResult {\r\n    public constructor(result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\", damage: number, position: LatLng) {\r\n        this.result = result;\r\n        this.damage = damage;\r\n        this.position = position;\r\n    }\r\n\r\n    public result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\";\r\n    public damage: number;\r\n    public position: LatLng;\r\n\r\n    public static createMiss = (position: LatLng): AttackResult => new AttackResult(\"miss\", 0, position);\r\n    public static createFumble = (position: LatLng): AttackResult => new AttackResult(\"fumble\", 0, position);\r\n    public static createHit = (damage: number, position: LatLng): AttackResult => new AttackResult(\"hit\", damage, position);\r\n    public static createCritical = (damage: number, position: LatLng): AttackResult => new AttackResult(\"critical\", damage, position);\r\n    public static createDeath = (damage: number, position: LatLng): AttackResult => new AttackResult(\"death\", damage, position);\r\n}\r\n","import EffectTable from \"../models/EffectTable\";\r\nimport EffectTableEntry from \"../models/EffectTableEntry\";\r\n\r\nimport Spear from \"./effects/spear.json\";\r\nimport Bow from \"./effects/bow.json\";\r\nimport Fists from \"./effects/fists.json\";\r\nimport MagicMissle from \"./effects/magic_missile.json\";\r\n\r\nexport default class EffectTableServiceStatic {\r\n    public getEffect(id: string): EffectTable | null {\r\n        switch (id) {\r\n            case \"Fists\":\r\n                return Fists as EffectTable;\r\n            case \"Spear\":\r\n                return Spear as EffectTable;\r\n            case \"Bow\":\r\n                return Bow as EffectTable;\r\n            case \"Magic Missile\":\r\n                return MagicMissle as EffectTable;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public getResultEntry(table: EffectTable | null, rawRoll: number, total: number): EffectTableEntry | null {\r\n        if (!table) return null;\r\n        \r\n        const matches = table.effects.filter(\r\n            (e) =>\r\n                (e.useRaw && rawRoll >= e.resultMin && rawRoll <= e.resultMax) ||\r\n                (!e.useRaw && total >= e.resultMin && total <= e.resultMax)\r\n        );\r\n        return matches.length > 0 ? matches[0] : null;\r\n    }\r\n}\r\n","import AttributeList from \"../models/character/AttributeList\";\r\nimport CalculatedStats from \"../models/character/CalculatedStats\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\nimport { ModifierType } from \"../models/character/Trait\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport AttributeHelper from \"./AttributeHelper\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nexport default class HeroHelper {\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getItemTraits = (hero: Hero): HeroTrait[] => {\r\n        let traits: HeroTrait[] = [];\r\n        const service = new MockItemService();\r\n\r\n        // TODO: This might be a few queries, we can consider a cache if we move to server side requests\r\n        const items = hero.currentStatus.equippedItems.map((i) => service.getItemDetail(i));\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            const itemTraits = item.traits.map((t) => {\r\n                return {\r\n                    id: t.id,\r\n                    name: t.name,\r\n                    description: t.description,\r\n                    type: t.type,\r\n                    behavior: t.behavior,\r\n                    from: item.name,\r\n                };\r\n            });\r\n            traits = traits.concat(itemTraits);\r\n        }\r\n\r\n        return traits;\r\n    };\r\n\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getAllTraits = (hero: Hero): HeroTrait[] =>\r\n        HeroHelper.getItemTraits(hero).concat(hero.currentStatus.permanentTraits).concat(hero.currentStatus.temporaryTraits);\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static calculateAttributesWithModifiers = (hero: Hero): AttributeList => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let strMod = 0,\r\n            dexMod = 0,\r\n            conMod = 0,\r\n            intMod = 0,\r\n            wisMod = 0,\r\n            chaMod = 0,\r\n            luckMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behavior.length; j++) {\r\n                const behavior = allTraits[i].behavior[j];\r\n                switch (behavior.modifierType) {\r\n                    case ModifierType.Strength:\r\n                        strMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Dexterity:\r\n                        dexMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Constitution:\r\n                        conMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Intelligence:\r\n                        intMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Wisdom:\r\n                        wisMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Charisma:\r\n                        chaMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Luck:\r\n                        luckMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attributes = hero.attributes;\r\n        const newAttributeList: AttributeList = {\r\n            strength: { base: attributes.strength.base, bonus: strMod },\r\n            dexterity: { base: attributes.dexterity.base, bonus: dexMod },\r\n            constitution: { base: attributes.constitution.base, bonus: conMod },\r\n            intelligence: { base: attributes.intelligence.base, bonus: intMod },\r\n            wisdom: { base: attributes.wisdom.base, bonus: wisMod },\r\n            charisma: { base: attributes.charisma.base, bonus: chaMod },\r\n            luck: { base: attributes.luck.base, bonus: luckMod },\r\n        };\r\n\r\n        return newAttributeList;\r\n    };\r\n\r\n    public static calculateStatsWithModifiers = (hero: Hero): CalculatedStats => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let armorMod = 0,\r\n            moveSpeedMod = 0,\r\n            meleeAttackMod = 0,\r\n            meleeAttackSpeedMod = 0,\r\n            meleeDamageMod = 0,\r\n            rangedAttackMod = 0,\r\n            rangedAttackSpeedMod = 0,\r\n            rangedDamageMod = 0,\r\n            spellAttackMod = 0,\r\n            spellAttackSpeedMod = 0,\r\n            spellDamageMod = 0,\r\n            hpMod = 0,\r\n            spellResistMod = 0,\r\n            damageResistMod = 0;\r\n        let status = 0;\r\n        let meleeEffectId = hero.stats.meleeEffectId;\r\n        let rangedEffectId = hero.stats.rangedEffectId;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behavior.length; j++) {\r\n                const behavior = allTraits[i].behavior[j];\r\n                switch (behavior.modifierType) {\r\n                    case ModifierType.Armor:\r\n                        armorMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MoveSpeed:\r\n                        moveSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeAttack:\r\n                        meleeAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeAttackSpeed:\r\n                        meleeAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeDamage:\r\n                        meleeDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeEffect:\r\n                        meleeEffectId = behavior.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedEffect:\r\n                        rangedEffectId = behavior.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttack:\r\n                        rangedAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.RangedAttackSpeed:\r\n                        rangedAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.RangedDamage:\r\n                        rangedDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellAttack:\r\n                        spellAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellAttackSpeed:\r\n                        spellAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellDamage:\r\n                        spellDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.HitPoints:\r\n                        hpMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellResistance:\r\n                        spellResistMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.DamageResistance:\r\n                        damageResistMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Status:\r\n                        status |= parseInt(behavior.modifierValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const stats = hero.stats;\r\n        const service = new EffectTableServiceStatic();\r\n        const meleeEffect = service.getEffect(stats.meleeEffectId);\r\n        const rangedEffect = service.getEffect(stats.rangedEffectId);\r\n        const meleeEffectAttackModifier = HeroHelper.getModifier(hero, meleeEffect?.attackModifier);\r\n        const rangedEffectAttackModifier = HeroHelper.getModifier(hero, rangedEffect?.attackModifier);\r\n\r\n        const newStats: CalculatedStats = {\r\n            // TODO\r\n            status: status,\r\n\r\n            armour: stats.armour + armorMod,\r\n\r\n            meleeAttackBonus: stats.meleeAttackBonus + meleeEffectAttackModifier + meleeAttackMod,\r\n            meleeAttackSpeed: stats.meleeAttackSpeed + meleeAttackSpeedMod,\r\n            meleeDamageBonus: stats.meleeAttackBonus + meleeDamageMod,\r\n            meleeEffectId: meleeEffectId,\r\n\r\n            rangedAttackBonus: stats.rangedAttackBonus + rangedEffectAttackModifier + rangedAttackMod,\r\n            rangedAttackSpeed: stats.rangedAttackSpeed + rangedAttackSpeedMod,\r\n            rangedDamageBonus: stats.rangedAttackBonus + rangedDamageMod,\r\n            rangedEffectId: stats.rangedEffectId,\r\n\r\n            spellAttackBonus: stats.spellAttackBonus + spellAttackMod,\r\n            spellAttackSpeed: stats.spellAttackSpeed + spellAttackSpeedMod,\r\n            spellDamageBonus: stats.spellDamageBonus + spellDamageMod,\r\n\r\n            spells: hero.spells.filter(s => hero.currentStatus.lostSpells.indexOf(s) < 0),\r\n            moveSpeed: stats.moveSpeed + moveSpeedMod,\r\n            maxHitPoints: stats.maxHitPoints + hpMod,\r\n            spellResistance: stats.spellResistance + spellResistMod,\r\n            damageResistance: stats.damageResistance + damageResistMod,\r\n        };\r\n\r\n        // TODO: Are there class & level bonuses, or we represent these as traits?\r\n\r\n        return newStats;\r\n    };\r\n\r\n    public static getModifier = (\r\n        hero: Hero,\r\n        modifier: \"str\" | \"dex\" | \"con\" | \"wis\" | \"int\" | \"cha\" | \"luck\" | \"magic\" | \"melee\" | \"ranged\" | \"armor\" | \"level\" | undefined\r\n    ): number => HeroHelper.getStatModifier(hero.stats, hero.attributes, modifier);\r\n\r\n    public static getStatModifier(\r\n        statistics: CalculatedStats,\r\n        attributes: AttributeList,\r\n        modifier: \"str\" | \"dex\" | \"con\" | \"wis\" | \"int\" | \"cha\" | \"luck\" | \"magic\" | \"melee\" | \"ranged\" | \"armor\" | \"level\" | undefined\r\n    ): number {\r\n        switch (modifier) {\r\n            case undefined:\r\n                return 0;\r\n            case \"str\":\r\n                return AttributeHelper.getModifier(attributes.strength);\r\n            case \"dex\":\r\n                return AttributeHelper.getModifier(attributes.dexterity);\r\n            case \"con\":\r\n                return AttributeHelper.getModifier(attributes.constitution);\r\n            case \"wis\":\r\n                return AttributeHelper.getModifier(attributes.wisdom);\r\n            case \"int\":\r\n                return AttributeHelper.getModifier(attributes.intelligence);\r\n            case \"cha\":\r\n                return AttributeHelper.getModifier(attributes.charisma);\r\n            case \"luck\":\r\n                return AttributeHelper.getModifier(attributes.luck);\r\n            case \"magic\":\r\n                return statistics.spellAttackBonus;\r\n            case \"melee\":\r\n                return statistics.meleeAttackBonus;\r\n            case \"ranged\":\r\n                return statistics.rangedAttackBonus;\r\n            case \"armor\":\r\n                return statistics.armour;\r\n            case \"level\":\r\n                throw new Error(\"Not implemented\");\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n}\r\n","import AttackResult from \"../models/AttackResult\";\r\nimport IAttackResult from \"../models/AttackResult\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport DiceRoller from \"../services/DiceRoller\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport HeroHelper from \"./HeroHelper\";\r\n\r\n/** Combat results helper functions */\r\nexport default class CombatHelper {\r\n    private static determineAttackResultShared = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData,\r\n        effectId: string,\r\n        attackBonus: number,\r\n        damageBonus: number\r\n    ): IAttackResult => {\r\n        const targetPos = target.gridPos;\r\n        const attackerPos = attacker.gridPos;\r\n\r\n        if (!attackerPos) throw new Error(\"Attacker missing position\");\r\n        if (!targetPos) throw new Error(\"Target missing position\");\r\n\r\n        const roller = new DiceRoller();\r\n        const attackerDetail = attacker.details;\r\n        const targetDetail = target.details;\r\n\r\n        const resultService = new EffectTableServiceStatic();\r\n        const effect = resultService.getEffect(effectId);\r\n        if (effect === null) {\r\n            throw new Error(\"Can't find effect: \" + effectId);\r\n        }\r\n\r\n        const attackRoll = roller.roll20(seedAttack);\r\n        const attackModifier = HeroHelper.getModifier(attackerDetail, effect.attackModifier);\r\n        const attackValue = attackBonus + attackModifier + attackRoll;\r\n\r\n        console.log(`Attack : ${attackBonus} + ${attackModifier} + ${attackRoll}`);\r\n\r\n        const targetNumber = HeroHelper.getModifier(targetDetail, effect.dodgeWith);\r\n        const isMiss = attackValue < targetNumber;\r\n        const isFumble = attackRoll <= 1;\r\n        const isCritical = attackRoll >= 20;\r\n\r\n        const entry = resultService.getResultEntry(effect, attackRoll, attackValue);\r\n        if (entry === null) {\r\n            throw new Error(\"Can't find effect entry: \" + effectId);\r\n        }\r\n\r\n        // TODO: Use table instead\r\n        if (isFumble) {\r\n            console.log(`${attackerDetail.id} : Fumbles`);\r\n            // TODO: Add a fumble table?\r\n            return AttackResult.createFumble(attackerPos);\r\n        }\r\n\r\n        if (isMiss) {\r\n            // Miss\r\n            console.log(\r\n                `${attackerDetail.id} : Miss ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry})`\r\n            );\r\n            return AttackResult.createMiss(targetPos);\r\n        }\r\n\r\n        //console.log(`Effect table : ${effectId} = d${entry.damageDie} x ${entry.damageDieCount} + ${entry.damageModifier}`);\r\n\r\n        // Hit, calculate damage\r\n        let damage = 0;\r\n        for (let i = 0; i < entry.damageDieCount; i++) {\r\n            damage += roller.rollDie(seedDamage, entry.damageDie);\r\n            damage += damageBonus;\r\n            if (entry.damageModifier) {\r\n                damage += HeroHelper.getModifier(attackerDetail, entry.damageModifier);\r\n            }\r\n            //console.log(`Damage total : ${damage}`);\r\n        }\r\n\r\n        console.log(\r\n            `${attackerDetail.id} hits ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry}) for ${damage}`\r\n        );\r\n\r\n        return isCritical ? AttackResult.createCritical(damage, targetPos) : AttackResult.createHit(damage, targetPos);\r\n    };\r\n\r\n    public static determineAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        if (attacker.selectedAttack === \"melee\") \r\n            return CombatHelper.determineMeleeAttackResult(seedAttack, seedDamage, attacker, target);\r\n\r\n        if (attacker.selectedAttack === \"ranged\") \r\n            return CombatHelper.determineRangedAttackResult(seedAttack, seedDamage, attacker, target);\r\n\r\n        return CombatHelper.determineSpellAttackResult(seedAttack, seedDamage, attacker, target, attacker.selectedAttack);\r\n    };\r\n\r\n    public static determineSpellAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData,\r\n        effectId: string\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            effectId,\r\n            attacker.details.stats.spellAttackBonus,\r\n            attacker.details.stats.spellDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineMeleeAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            attacker.details.stats.meleeEffectId,\r\n            attacker.details.stats.meleeAttackBonus,\r\n            attacker.details.stats.meleeDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineRangedAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            attacker.details.stats.rangedEffectId,\r\n            attacker.details.stats.rangedAttackBonus,\r\n            attacker.details.stats.rangedDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineMaxRange = (attacker: CharacterEncounterData): number => {\r\n        var effectId;\r\n        switch (attacker.selectedAttack) {\r\n            case \"melee\":\r\n                effectId = attacker.details.stats.meleeEffectId;\r\n                break;\r\n            case \"ranged\":\r\n                effectId = attacker.details.stats.rangedEffectId;\r\n                break;\r\n            default:\r\n                effectId = attacker.selectedAttack;\r\n                break;\r\n        }\r\n        const resultService = new EffectTableServiceStatic();\r\n        const effect = resultService.getEffect(effectId);\r\n        if (effect === null) {\r\n            throw new Error(\"Can't find effect: \" + effectId);\r\n        }\r\n        const baseRange = effect.range;\r\n\r\n        // TODO: We might allow traits to increase or decrease range?\r\n        return baseRange;\r\n    };\r\n}\r\n","import CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { NpcGridEntry } from \"../models/EncounterDetail\";\r\n\r\nexport default class CombatPositionHelper {\r\n    /** Update the hero or foe position */\r\n    public static updatePosition = (\r\n        newPosition: CharacterEncounterData,\r\n        oldPositions: CharacterEncounterData[]\r\n    ): CharacterEncounterData[] => {\r\n        // We need a new array here, or the update is not detected\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            newPositions.push(oldPositions[i].gridEntry === newPosition.gridEntry ? newPosition : oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Remove the position of the foe or hero (death of fled) */\r\n    public static removePosition = (entry: NpcGridEntry, oldPositions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            if (oldPositions[i].gridEntry !== entry) newPositions.push(oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Get the position of a hero or foe by the grid entry */\r\n    public static getPositionByEntry = (entry: NpcGridEntry, positions: CharacterEncounterData[]): CharacterEncounterData | undefined => {\r\n        const index = positions.findIndex((h) => h.gridEntry === entry);\r\n        if (index < 0 || index >= positions.length) {\r\n            console.error(\"Can't find character : \" + entry);\r\n            return undefined;\r\n        }\r\n        return positions[index];\r\n    };\r\n\r\n    /** Clear all hero/foe movement queues */\r\n    public static clearAllQueues = (positions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < positions.length; i++) {\r\n            newPositions.push(positions[i]); // TODO: Should we deep clone here?\r\n            newPositions[i].vertexQueue.clear();\r\n        }\r\n        return newPositions;\r\n    };\r\n}\r\n","import CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { TokenGridEntry } from \"../models/EncounterDetail\";\r\n\r\n/** Trim the move path to just the max move allowed */\r\nexport default class CombatActionHelper {\r\n    public static trimPathToMove = (path: number[][], maxPath: number): number[][] => {\r\n        let remainderPathLength = path.length - maxPath * 2 - 1;\r\n        if (remainderPathLength <= 0) remainderPathLength = 0; // Always remove the start grid item\r\n\r\n        return path.slice(remainderPathLength);\r\n    };\r\n\r\n    /**\r\n     * Build an action to attack foe, or move toward them if too far away\r\n     */\r\n    public static buildAttack = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        // TODO: Trim path to max ranged distance. Maybe simple trim by length to begin with\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n        const isAttack = path.length === movePath.length;\r\n\r\n        if (isAttack) {\r\n            console.log(`${attacker.gridEntry} ${attacker.selectedAttack} attack ${target} (${path.length})`);\r\n        } else {\r\n            console.log(`${attacker.gridEntry} move towards ${target} (${path.length})`);\r\n        }\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: isAttack ? attacker.selectedAttack : \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n\r\n    /**\r\n     * Build an action to melee attack foe, or move toward them if too far away\r\n     */\r\n    public static buildMove = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n\r\n        console.log(`${attacker.gridEntry} melee attack ${target} (${path.length})`);\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype IsoMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst IsoMarker: React.FunctionComponent<IsoMarkerProps> = (props: IsoMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            position: \"absolute\",\r\n        },\r\n        icon: {\r\n            position: \"relative\",\r\n        },\r\n        dot: {\r\n            height: \"35px\",\r\n            width: \"65px\",\r\n            backgroundColor: \"#bbb\",\r\n            borderRadius: \"50%\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            bottom: \"18px\",\r\n            left: \"14px\",\r\n            zIndex: -1,\r\n        },\r\n        dotActive: {\r\n            height: \"35px\",\r\n            width: \"65px\",\r\n            backgroundColor: \"#d4af37\",\r\n            borderRadius: \"50%\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            bottom: \"18px\",\r\n            left: \"14px\",\r\n            zIndex: -1,\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.currentStatus.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root} style={{ top: hero.details.tokenOffset[1], left: hero.details.tokenOffset[0] }}>\r\n                {/* <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                /> */}\r\n                <img src={hero.details.tokenUrl} className={classes.icon} alt={hero.details.name} />\r\n                <span className={isActive ? classes.dotActive : classes.dot} />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default IsoMarker;\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds, LatLngTuple } from \"leaflet\";\r\nimport { Map, ImageOverlay } from \"react-leaflet\";\r\nimport EncounterDialog from \"./encounter-dialog/EncounterDialog\";\r\n\r\n// Models\r\nimport EncounterDetail, { EncounterGridEntry, FoeGridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport HeroMarker from \"./markers/HeroMarker\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\n\r\n// Markers\r\nimport GridMarker from \"./markers/GridMarker\";\r\nimport FoeMarker from \"./markers/FoeMarker\";\r\nimport CombatPath from \"./encounter-map/CombatPath\";\r\nimport DamageDisplay from \"./markers/DamageDisplay\";\r\nimport CombatIndicator from \"./CombatIndicator\";\r\nimport ActionBar from \"./ActionBar\";\r\n\r\n// Helpers\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport CombatHelper from \"../helpers/CombatHelper\";\r\nimport CombatPositionHelper from \"../helpers/CombatPositionHelper\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport CombatActionHelper from \"../helpers/CombatActionHelper\";\r\nimport AttackResult from \"../models/AttackResult\";\r\nimport IsoMarker from \"./markers/IsoMarker\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport DiceSeedTracker from \"../services/DiceSeedTracker\";\r\n\r\ntype EncounterMapProps = {\r\n    /** The encounter data */\r\n    encounter: EncounterDetail;\r\n\r\n    /** The heroes detailed information, referenced by grid-entry */\r\n    heroes: [HeroGridEntry, Hero][];\r\n\r\n    /** The foes detailed information, referenced by grid-entry */\r\n    foes: [FoeGridEntry, Hero][];\r\n\r\n    /** If true, show a helper grid */\r\n    showGrid: boolean;\r\n\r\n    /** The inititive scores for heroes & foes */\r\n    initiatives: [string, NpcGridEntry, number][];\r\n};\r\n\r\ntype EncounterParams = {\r\n    useTokens?: string;\r\n};\r\n\r\nconst EncounterMap: React.FunctionComponent<EncounterMapProps> = (props: EncounterMapProps): JSX.Element => {\r\n    const { encounter } = props;\r\n\r\n    const pathColor = props.encounter.pathColor ?? \"white\";\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n    const {\r\n        gridToDisplayTuple,\r\n        gridToDisplayCenterTuple,\r\n        gridToDisplayCenter,\r\n        displayToGrid,\r\n        getInitialPositions,\r\n        mergeGridEntry,\r\n    } = GridHelpers;\r\n\r\n    // The current (grid) position of the hero markers\r\n    const [heroData, setHeroData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.heroes));\r\n    const [foeData, setFoeData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.foes));\r\n\r\n    // The positions to display damage markers\r\n    const [damagePos, setDamagePos] = React.useState<AttackResult[]>([]);\r\n\r\n    // The path to the hovered vertex (display when hovering over the grid)\r\n    const [path, setPath] = React.useState<LatLng[]>([]);\r\n\r\n    // The current grid state\r\n    const [tokenGrid, setTokenGrid] = React.useState<TokenGridEntry[][]>(encounter.tokenGrid);\r\n    // TODO: We could go further and custom create a network of these grid points and use the other pathfindind algorithm?\r\n\r\n    // The current ink encouter begind displayed\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // The ID of the currently selected hero. Inital hero is selected on initiative score\r\n    const [selectedHero, setSelectedHero] = React.useState<NpcGridEntry | undefined>(undefined);\r\n\r\n    // Is the current move an attack?\r\n    const [attackTarget, setAttackTarget] = React.useState<TokenGridEntry | undefined>(undefined);\r\n\r\n    // TODO: Is this a state - This a state anti-pattern\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][]>(props.initiatives);\r\n\r\n    const [currentAction, setCurrentAction] = React.useState<CharacterAction | undefined>(undefined);\r\n\r\n    const [seed, setSeed] = React.useState<number>(DiceSeedTracker.fromEncounterId(encounter.id));\r\n\r\n    // Is the encounter is combat mode?\r\n    const isCombat = (): boolean => foeData.length > 0;\r\n\r\n    // The max length of a path\r\n    const maxPath = isCombat() ? 3 : 20;\r\n\r\n    const params = useParams<EncounterParams>();\r\n\r\n    // This effect tracks when the end of the current character's turn happens\r\n    React.useEffect(() => {\r\n        // Start the next character's turn\r\n        const startNextActor = () => {\r\n            const initiativeTracker = new InitiativeTracker(initiatives);\r\n            const newNextToMove = initiativeTracker.getNextInitiative();\r\n            const name = newNextToMove[0];\r\n            const entry = newNextToMove[1];\r\n\r\n            console.log(`** Next to move ${name} (${entry})`);\r\n\r\n            // console.log(\" - \" + initiativeTracker.displayInitiatives().join(\"\\n- \"));\r\n\r\n            const gridDisplay = GridHelpers.displayGrid(tokenGrid);\r\n            console.log(gridDisplay.join(\"\\n\"));\r\n\r\n            setSelectedHero(entry);\r\n\r\n            if (!GridHelpers.isHero(entry)) {\r\n                // TODO: Foe has their action\r\n                const foeMatch = foeData.find((f) => f.gridEntry === entry);\r\n                if (foeMatch && foeMatch.gridPos) {\r\n                    const closestHeroPath = GridHelpers.findNearestHero(tokenGrid, encounter.grid, foeMatch.gridPos);\r\n                    if (closestHeroPath !== undefined) {\r\n                        const newCharacterAction = CombatActionHelper.buildAttack(\r\n                            foeMatch,\r\n                            closestHeroPath[0],\r\n                            closestHeroPath[1],\r\n                            maxPath\r\n                        );\r\n                        if (newCharacterAction.action === \"melee\") {\r\n                            setAttackTarget(newCharacterAction.target);\r\n                        }\r\n                        setCurrentAction(newCharacterAction);\r\n                    } else {\r\n                        console.error(`Foe : ${foeMatch.gridEntry} has no hero accessible`);\r\n                        const newInitiatives = initiativeTracker.processDelay(name, foeMatch.details.stats.moveSpeed);\r\n                        setInitiatives(newInitiatives);\r\n                        startNextActor(); // Trigger next to move\r\n                    }\r\n                } else {\r\n                    console.error(\"Can't find matching foe : \" + name);\r\n                    const newInitiatives = initiativeTracker.remove(name);\r\n                    setInitiatives(newInitiatives);\r\n                    startNextActor(); // Trigger next to move\r\n                }\r\n                //startNextActor(); // Trigger next to move\r\n            }\r\n        };\r\n\r\n        const executeCurrentAction = (currentAction: CharacterAction) => {\r\n            try {\r\n                const { id, path, action } = currentAction;\r\n\r\n                const numMoves = Math.ceil((path.length - 1) / maxPath);\r\n                console.log(`Moving ${id} (${currentAction.character}) distance ${path.length - 1} with ${numMoves} moves`);\r\n\r\n                const heroPos = getPosition(currentAction.character);\r\n                if (heroPos === undefined) {\r\n                    console.error(\"Can't find hero for action : \" + id);\r\n                    return;\r\n                }\r\n\r\n                // TODO: Chech nodes for encounters\r\n                let nextVertex = path.pop();\r\n                while (nextVertex) {\r\n                    //console.log(`Queue vertex ${nextVertex[0]}, ${nextVertex[1]}`);\r\n                    heroPos.vertexQueue.push([nextVertex[0], nextVertex[1]]);\r\n                    nextVertex = path.pop();\r\n                }\r\n\r\n                const newPosition = new CharacterEncounterData(\r\n                    heroPos.details,\r\n                    heroPos.gridEntry,\r\n                    heroPos.selectedAttack,\r\n                    heroPos.gridPos,\r\n                    heroPos.displayPos,\r\n                    heroPos.vertexQueue\r\n                );\r\n                setCharacterPosition(newPosition);\r\n\r\n                // Calculates new initiatives after move\r\n                const initiativeTracker = new InitiativeTracker(initiatives);\r\n                let delay = numMoves * heroPos.details.stats.moveSpeed;\r\n                // TODO: Make based on spell or attack table?\r\n                if (action === \"melee\") delay += heroPos.details.stats.meleeAttackSpeed;\r\n                else if (action === \"ranged\") delay += heroPos.details.stats.rangedAttackSpeed;\r\n                else delay += heroPos.details.stats.spellAttackSpeed;\r\n                const newInitiatives = initiativeTracker.processDelay(id, delay);\r\n                setInitiatives(newInitiatives);\r\n\r\n                // Trigger the move to the next vertex\r\n                handleMoveEnd(newPosition);\r\n            } finally {\r\n                // Clear the current action so that we don't run again\r\n                setCurrentAction(undefined);\r\n            }\r\n        };\r\n\r\n        // console.log(\"useEffect end of turn\");\r\n        if (!selectedHero) {\r\n            startNextActor();\r\n        }\r\n        if (currentAction) {\r\n            executeCurrentAction(currentAction);\r\n        }\r\n    }, [selectedHero, currentAction]);\r\n\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    /** Clicked on a hero to move if in combat mode */\r\n    const onHeroClick = (hero: CharacterEncounterData) => {\r\n        console.log(\"Select hero : \" + hero.details.id);\r\n        setSelectedHero(hero.gridEntry);\r\n    };\r\n\r\n    /** Get the position of a hero or foe */\r\n    const getPosition = (entry?: NpcGridEntry): CharacterEncounterData | undefined =>\r\n        entry\r\n            ? GridHelpers.isHero(entry)\r\n                ? CombatPositionHelper.getPositionByEntry(entry, heroData)\r\n                : CombatPositionHelper.getPositionByEntry(entry, foeData)\r\n            : undefined;\r\n\r\n    /** Clear hero & foe movement queues */\r\n    const clearAllQueues = () => {\r\n        setHeroData(CombatPositionHelper.clearAllQueues(heroData));\r\n        setFoeData(CombatPositionHelper.clearAllQueues(foeData));\r\n    };\r\n\r\n    /** Update the hero or foe position */\r\n    const setCharacterPosition = (position: CharacterEncounterData) => {\r\n        // console.log(`setCharacterPosition : ${position.details.id}`);\r\n        if (position.isHero()) {\r\n            setHeroData(CombatPositionHelper.updatePosition(position, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.updatePosition(position, foeData));\r\n        }\r\n    };\r\n\r\n    /** Remove the hero or foe position due to death or fleeing */\r\n    const removeCharacter = (character: CharacterEncounterData) => {\r\n        const initiativeTracker = new InitiativeTracker(initiatives);\r\n        const newInitiatives = initiativeTracker.remove(character.details.id);\r\n        setInitiatives(newInitiatives);\r\n        if (GridHelpers.isHero(character.gridEntry)) {\r\n            setHeroData(CombatPositionHelper.removePosition(character.gridEntry, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.removePosition(character.gridEntry, foeData));\r\n        }\r\n    };\r\n\r\n    /** Clicked on the map (not on grid) */\r\n    const onMapClick = (e: any) => console.log(`Clicked at: ${e.latlng}, grid ${displayToGrid(e.latlng, encounter)}`);\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (character: CharacterEncounterData) => {\r\n        setPath([]);\r\n\r\n        //console.log(`handleMoveEnd : ${character.details.id}`);\r\n\r\n        const targetVertex = character.vertexQueue.pop();\r\n        if (targetVertex !== undefined) {\r\n            const gridPos = latLng(targetVertex[1], targetVertex[0]);\r\n            const displayPos = gridToDisplayCenter(gridPos, encounter);\r\n\r\n            // Update the token grid\r\n            if (character.gridPos) {\r\n                // const oldEntry = tokenGrid[prevPos.gridPos.lat][prevPos.gridPos.lng];\r\n                tokenGrid[character.gridPos.lat][character.gridPos.lng] = \" \";\r\n                tokenGrid[gridPos.lat][gridPos.lng] = character.gridEntry;\r\n\r\n                console.log(\r\n                    `Move end: ${character.details.id} (${character.vertexQueue.length()} queued) next, ${targetVertex[0]},${\r\n                        targetVertex[1]\r\n                    }, previous position : ${character.gridPos.lng},${character.gridPos.lat}`\r\n                );\r\n            } else {\r\n                console.error(`Can't find current grid pos ${targetVertex[0]},${targetVertex[1]}`);\r\n                return;\r\n            }\r\n\r\n            const newPosition = new CharacterEncounterData(\r\n                character.details,\r\n                character.gridEntry,\r\n                character.selectedAttack,\r\n                gridPos,\r\n                displayPos,\r\n                character.vertexQueue\r\n            );\r\n            setCharacterPosition(newPosition);\r\n\r\n            // Stop if a vertex with an an encounter is hit\r\n            const entry = encounter.grid[gridPos.lat][gridPos.lng];\r\n            if (GridHelpers.isEncounter(entry)) {\r\n                const encounterId = encounter.encounters[entry as EncounterGridEntry];\r\n                if (encounterId) {\r\n                    console.log(`Encounter : ${encounterId}`);\r\n                    clearAllQueues();\r\n                    setEncounterId(encounterId);\r\n                }\r\n            }\r\n\r\n            // Check if the current hero has finished their move\r\n            if (character.vertexQueue.length() > 0) {\r\n                //console.log(\"Continuing move\");\r\n                return;\r\n            }\r\n        } else {\r\n            handleAttack(character);\r\n\r\n            // Trigger the end of turn effect for this hero\r\n            setSelectedHero(undefined);\r\n            setTokenGrid(tokenGrid);\r\n        }\r\n    };\r\n\r\n    const handleAttack = (character: CharacterEncounterData) => {\r\n        if (attackTarget) {\r\n            // Get the attacker & target\r\n            console.log(`Finished move : ${character.details.id} with attack`);\r\n            const targetMatch = getPosition(attackTarget as NpcGridEntry);\r\n            if (targetMatch && targetMatch.displayPos) {\r\n                // Calculate the attack roll seeds\r\n                const attackSeed = DiceSeedTracker.next(seed);\r\n                const damageSeed = DiceSeedTracker.next(seed);\r\n                // Set the seed for the next rolls\r\n                setSeed(damageSeed);\r\n\r\n                let results = CombatHelper.determineAttackResult(attackSeed, damageSeed, character, targetMatch);\r\n                if (results.result !== \"fumble\" && results.result !== \"miss\") {\r\n                    const newFoeDetails = { ...targetMatch };\r\n\r\n                    // Reduce hit points & check for death\r\n                    newFoeDetails.details.currentStatus.currentHitPoints -= results.damage;\r\n                    const isDeath = newFoeDetails.details.currentStatus.currentHitPoints <= 0;\r\n\r\n                    if (isDeath) {\r\n                        console.log(`DEAD : ${newFoeDetails.details.id}`);\r\n                        if (newFoeDetails.gridPos) results = AttackResult.createDeath(results.damage, newFoeDetails.gridPos);\r\n                        removeCharacter(targetMatch);\r\n                        if (targetMatch.gridPos) tokenGrid[targetMatch.gridPos.lat][targetMatch.gridPos.lng] = \" \";\r\n                    } else {\r\n                        setCharacterPosition(newFoeDetails);\r\n                    }\r\n                }\r\n                addDamagePos(results);\r\n            } else console.error(`Can't find foe at : ${attackTarget}`);\r\n\r\n            setAttackTarget(undefined);\r\n        } else {\r\n            console.log(`Finished move : ${character.details.id} no attack`);\r\n        }\r\n    };\r\n\r\n    const addDamagePos = (result: AttackResult) => {\r\n        setDamagePos((state) => state.concat(result));\r\n    };\r\n\r\n    const showHoverPath = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n        if (heroPos.isMoving()) return;\r\n\r\n        const range = isFoe ? CombatHelper.determineMaxRange(heroPos) : 0;\r\n\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, latLng(hoverGridPos), range);\r\n        const displayPath = fullPath.map((item) => gridToDisplayCenterTuple([item[1], item[0]], encounter));\r\n        setPath(displayPath);\r\n    };\r\n\r\n    const onHover = (hoverGridPos: [number, number]) => showHoverPath(hoverGridPos, false);\r\n\r\n    const onHoverEnd = (hoverGridPos: [number, number]) => setPath([]);\r\n\r\n    const onFoeHover = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            showHoverPath([foe.gridPos.lat, foe.gridPos.lng], true);\r\n        }\r\n    };\r\n\r\n    const onFoeHoverEnd = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            onHoverEnd([foe.gridPos.lat, foe.gridPos.lng]);\r\n        }\r\n    };\r\n\r\n    const onClickGridMarker = (gridPos: [number, number]) => processMarkerAction(gridPos, false);\r\n\r\n    /** Clicked on a foe to attack */\r\n    const onFoeClick = (position: CharacterEncounterData) => {\r\n        if (position.gridPos) processMarkerAction([position.gridPos.lat, position.gridPos.lng], true);\r\n    };\r\n\r\n    const processMarkerAction = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n\r\n        clearAllQueues();\r\n        setDamagePos([]);\r\n\r\n        const range = CombatHelper.determineMaxRange(heroPos);\r\n\r\n        const endPos = latLng(hoverGridPos);\r\n        const endToken = tokenGrid[endPos.lat][endPos.lng];\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, endPos, range);\r\n\r\n        const newAction = !isFoe\r\n            ? CombatActionHelper.buildMove(heroPos, endToken, fullPath, maxPath)\r\n            : CombatActionHelper.buildAttack(heroPos, endToken, fullPath, maxPath);\r\n\r\n        if (newAction.action !== \"move\") {\r\n            setAttackTarget(endToken);\r\n        }\r\n\r\n        setCurrentAction(newAction);\r\n\r\n        console.log(`Set current action : ${newAction.id} ${newAction.action}`);\r\n    };\r\n\r\n    const selectedAttackChanged = (id: string) => {\r\n        const position = getPosition(selectedHero);\r\n        if (!position) return;\r\n\r\n        position.selectedAttack = id;\r\n        setCharacterPosition(position);\r\n    };\r\n\r\n    const renderHeroes = () => {\r\n        return params.useTokens ?? false\r\n            ? heroData.map((hero) => (\r\n                  <IsoMarker\r\n                      hero={hero}\r\n                      isActive={selectedHero === hero.gridEntry}\r\n                      duration={300}\r\n                      onMoveEnd={handleMoveEnd}\r\n                      onClick={onHeroClick}\r\n                  />\r\n              ))\r\n            : heroData.map((hero) => (\r\n                  <HeroMarker\r\n                      hero={hero}\r\n                      isActive={selectedHero === hero.gridEntry}\r\n                      duration={300}\r\n                      onMoveEnd={handleMoveEnd}\r\n                      onClick={onHeroClick}\r\n                  />\r\n              ));\r\n    };\r\n\r\n    const renderFoes = () => {\r\n        return foeData.map((foe) => (\r\n            <FoeMarker\r\n                foe={foe}\r\n                attackIcon={getPosition(selectedHero)?.selectedAttack ?? \"melee\"}\r\n                isActive={selectedHero === foe.gridEntry}\r\n                duration={300}\r\n                onMoveEnd={handleMoveEnd}\r\n                onClick={onFoeClick}\r\n                onHover={onFoeHover}\r\n                onHoverEnd={onFoeHoverEnd}\r\n            />\r\n        ));\r\n    };\r\n\r\n    const renderGridMarkers = (encounter: EncounterDetail): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        for (let x = 0; x < encounter.grid.length; x++) {\r\n            for (let y = 0; y < encounter.grid.length; y++) {\r\n                markers.push(\r\n                    <GridMarker\r\n                        gridPos={[x, y]}\r\n                        entry={mergeGridEntry(encounter.tokenGrid[x][y], encounter.grid[x][y])}\r\n                        gridToDisplayFunc={(pos: LatLngTuple) => gridToDisplayTuple(pos, encounter)}\r\n                        onHover={onHover}\r\n                        onHoverEnd={onHoverEnd}\r\n                        onClick={onClickGridMarker}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    const renderDamageMarkers = (damages: AttackResult[]): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        // Map damage markers to dsipaly positions\r\n        const displayResults = damages.map((dam) => new AttackResult(dam.result, dam.damage, gridToDisplayCenter(dam.position, encounter)));\r\n        for (let i = 0; i < displayResults.length; i++) {\r\n            markers.push(<DamageDisplay result={displayResults[i]} />);\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    // Note: Order of markers matters for z-index\r\n    return (\r\n        <div>\r\n            <CombatIndicator isCombat={isCombat()} initiative={initiatives[0][2]} />\r\n            <ActionBar\r\n                spells={getPosition(selectedHero)?.details.stats.spells ?? []}\r\n                selected={getPosition(selectedHero)?.selectedAttack ?? \"melee\"}\r\n                onSelect={selectedAttackChanged}\r\n            />\r\n            <Map\r\n                crs={CRS.Simple}\r\n                zoom={0}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={onMapClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                <ImageOverlay url={encounter.imageUrl} bounds={bounds} />\r\n                <CombatPath path={path} pathColor={pathColor} move={maxPath} />\r\n                {renderGridMarkers(encounter)}\r\n                {renderHeroes()}\r\n                {renderFoes()}\r\n                {renderDamageMarkers(damagePos)}\r\n            </Map>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterMap;\r\n","import AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport FoeData from \"../models/character/FoeData\";\r\nimport Hero, { AbilityFlags } from \"../models/character/Hero\";\r\nimport thugContent from \"./npcs/thug.json\";\r\n\r\nexport default class MockNpcService {\r\n    \r\n    getFoeDetail(id: string): Hero {\r\n        const foe = this.getFoeData(id);\r\n\r\n        const clone = (({ attributes, ...o }) => o)(foe) as Hero;\r\n        clone.attributes = AttributeHelper.convertSimpleToComplex(foe.attributes);\r\n        clone.currentStatus = {\r\n            lostSpells: [],\r\n            temporaryTraits: [],\r\n            permanentTraits: [],\r\n            currentHitPoints: foe.stats.maxHitPoints,\r\n            equippedItems: [],\r\n        };\r\n        clone.abilities = AbilityFlags.None;\r\n        clone.description = \"\";\r\n        clone.background = \"\";  \r\n        return clone;\r\n    }\r\n\r\n    private getFoeData(id: string): FoeData {\r\n        switch (id) {\r\n            case \"thug\":\r\n            default:\r\n                return thugContent as FoeData;\r\n        }\r\n    }\r\n}\r\n","export default class ArrayHelper {\r\n    /*\r\n     * Take the first N items from an array\r\n     */\r\n    public static take<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        if (count > array.length) return clonedArray;\r\n        clonedArray.splice(count);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Take the last N items from an array\r\n     */\r\n    public static takeLast<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        const offset = clonedArray.length - count - 1;\r\n        if (offset > array.length) return clonedArray;\r\n        clonedArray.splice(0, offset);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Remove duplicates from an array\r\n     */\r\n    public static removeDuplicates<T>(array: T[]): Array<T> {\r\n        function onlyUnique(value: T, index: number, self: Array<T>) {\r\n            return self.indexOf(value) === index;\r\n        }\r\n\r\n        return array.filter(onlyUnique);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport EncounterDetail, { FoeGridEntry, HeroGridEntry, NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport EncounterMap from \"./EncounterMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockNpcService from \"../services/MockNpcService\";\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport GameState from \"../models/GameState\";\r\n\r\ntype EncounterMapLoaderProps = {\r\n    encounterId: string;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst EncounterMapLoader: React.FunctionComponent<EncounterMapLoaderProps> = (props: EncounterMapLoaderProps): JSX.Element => {\r\n    const [encounter, setEncounter] = React.useState<EncounterDetail | undefined>(undefined);\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][] | undefined>(undefined);\r\n\r\n    // The heroe detailed information\r\n    const [heroes, setHeroes] = React.useState<[HeroGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    // The foe detailed information, referenced my token entries so that we can keep track of each foe instamce\r\n    const [foes, setFoes] = React.useState<[FoeGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEncounter = () => {\r\n            const service = new MockDetailedEncounterService();\r\n            const encounterData = service.getEncounterDetail(props.encounterId);\r\n            if (!encounterData) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n            setEncounter(encounterData);\r\n\r\n            // Load heroes\r\n            const partyService = new MockPartyService();\r\n            const newHeroes = partyService.getParty();\r\n            if (!newHeroes) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n\r\n            const heroEntries: [HeroGridEntry, Hero][] = [\r\n                [\"A\", newHeroes[0]],\r\n                [\"B\", newHeroes[1]],\r\n                [\"C\", newHeroes[2]],\r\n                [\"D\", newHeroes[3]],\r\n            ];\r\n\r\n            setHeroes(heroEntries);\r\n\r\n            // Load foes\r\n            const foeEntries = Object.entries(encounterData.npcs);\r\n            const foeIds = ArrayHelper.removeDuplicates(foeEntries.map((f) => f[1]));\r\n            const npcService = new MockNpcService();\r\n\r\n            const newFoes = foeIds.map((id) => npcService.getFoeDetail(id));\r\n            const foeInstances: [FoeGridEntry, Hero][] = [];\r\n            for (let i = 0; i < foeEntries.length; i++) {\r\n                const foeData = foeEntries[i];\r\n                const foe = newFoes.find((f) => f.id === foeData[1]);\r\n                if (foe) {\r\n                    // Add a clone of the foe data referenced by grid location so that we can track for instance stats separately\r\n                    const foeDeepClone: Hero = JSON.parse(JSON.stringify(foe)); // Was { ...foe }\r\n                    foeInstances.push([foeData[0] as FoeGridEntry, foeDeepClone]);\r\n                }\r\n            }\r\n            setFoes(foeInstances);\r\n\r\n            // Generate some random initial initiatives\r\n            const initiatives: [string, NpcGridEntry, number][] = InitiativeTracker.buildInitial(\r\n                encounterData.id,\r\n                heroEntries,\r\n                foeInstances\r\n            );\r\n            console.log(\" - \" + new InitiativeTracker(initiatives).displayInitiatives().join(\"\\n- \"));\r\n            setInitiatives(initiatives);\r\n        };\r\n\r\n        if (encounter == null) {\r\n            loadEncounter();\r\n        }\r\n    });\r\n\r\n    if (!encounter || !initiatives || !heroes || !foes) return <LoadingProgress />;\r\n\r\n    return <EncounterMap encounter={encounter} heroes={heroes} foes={foes} showGrid={true} initiatives={initiatives} />;\r\n};\r\n\r\nexport default EncounterMapLoader;\r\n","import React from \"react\";\r\n\r\n// Pathfinding imports\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport GameState from \"../models/GameState\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport OverheadMapLoader from \"../components/OverheadMapLoader\";\r\nimport EncounterMapLoader from \"../components/EncounterMapLoader\";\r\n\r\nconst MapPage: React.FunctionComponent = () => {\r\n    let [gameState, setGameState] = React.useState<GameState | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of game state data\r\n        const loadGameState = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newGameState = stateService.getState();\r\n            if (!newGameState) {\r\n                console.error(`No game state data`);\r\n                return;\r\n            }\r\n\r\n            setGameState(newGameState);\r\n        };\r\n\r\n        if (gameState == null) {\r\n            loadGameState();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n        console.log(`New map : ${newState.currentMapId}, ${newState.currentVertextId}, ${newState.currentEncounterId}`);\r\n\r\n        // Save the new map state\r\n        const stateService = new MockGameStateService();\r\n        stateService.setState(newState);\r\n        setGameState(newState);\r\n    };\r\n\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    if (!gameState) return null;\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            {gameState.currentEncounterId ? (\r\n                <EncounterMapLoader encounterId={gameState.currentEncounterId} onNewMap={onNewMap} />\r\n            ) : (\r\n                <OverheadMapLoader startState={gameState} onNewMap={onNewMap} />\r\n            )}\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default MapPage;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventoryProps = {\r\n    items: Item[];\r\n    onEquipItem: (itemId: string) => void;\r\n};\r\n\r\nconst PartyInventoryEquip: React.FunctionComponent<PartyInventoryProps> = (props: PartyInventoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, onEquipItem } = props;\r\n    \r\n    const [inventorySelected, setInventorySelected] = React.useState<boolean[]>([]);\r\n\r\n    const inventorySelectionChanged = (id: string) => {\r\n        const match = items.find((i) => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = items.indexOf(match);\r\n        if (index < 0) return;\r\n        \r\n        const newInventorySelected = inventorySelected.splice(0);\r\n        newInventorySelected[index] = !newInventorySelected[index];\r\n        setInventorySelected(newInventorySelected);\r\n    };\r\n\r\n    const inventorySelectedCount = inventorySelected.filter((i) => i === true).length;\r\n    const isInventorySelected = inventorySelectedCount > 0;\r\n\r\n    const selectedIndex = inventorySelected.indexOf(true);\r\n    const selectedItem = items[selectedIndex];\r\n\r\n    const isItemEquipable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n        return selectedItem.itemType !== \"Quest\" && selectedItem.itemType !== \"Usable\";\r\n    };\r\n\r\n    const equipItem = () => {\r\n        if (!isInventorySelected) return;\r\n        if (onEquipItem) onEquipItem(selectedItem.id);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected) return \"Please select an inventory item\";\r\n\r\n        return isItemEquipable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={items} onSelectionChanged={inventorySelectionChanged} selected={inventorySelected} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventoryEquip;\r\n","import React from \"react\";\r\nimport { makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport Item, { ItemType } from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        backgroundColor: \"lightslategrey\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"7vw\",\r\n        top: \"-1vh\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"7vw\",\r\n        top: \"6.5vh\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"7vw\",\r\n        top: \"14vh\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"7vw\",\r\n        top: \"21.5vh\",\r\n    },\r\n    portraitItemWeapon: {\r\n        left: \"3.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitItemShield: {\r\n        left: \"10.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitNoItemImg: {\r\n        filter: \"brightness(35%)\",\r\n    },\r\n    portraitItemImg: {\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"50%\",\r\n    },\r\n});\r\n\r\ntype EquippedItemsProps = {\r\n    equippedItems: Item[];\r\n};\r\n\r\n/*\r\n* Hero Profile Screen : Display the items that the hero has equipped\r\n*/\r\nconst EquippedItems: React.FunctionComponent<EquippedItemsProps> = (props: EquippedItemsProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const { equippedItems } = props;\r\n\r\n    const headItem = equippedItems.find((item) => item.itemType === \"WearableHead\");\r\n    const bodyItem = equippedItems.find((item) => item.itemType === \"WearableBody\");\r\n    const armsItem = equippedItems.find((item) => item.itemType === \"WearableArms\");\r\n    const feetItem = equippedItems.find((item) => item.itemType === \"WearableFeet\");\r\n    const weaponItem = equippedItems.find((item) => item.itemType === \"WeaponMelee1h\");\r\n\r\n    return (\r\n        <div className={classes.itemContainer}>\r\n            <Tooltip title={<ItemTooltipContent item={headItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemHelm}`}>\r\n                    {headItem ? (\r\n                        <img src={headItem.imageUrl} className={classes.portraitItemImg} alt=\"helm\" />\r\n                    ) : (\r\n                        <img src=\"images/helm.svg\" className={classes.portraitNoItemImg} alt=\"helm\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={bodyItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}>\r\n                    {bodyItem ? (\r\n                        <img src={bodyItem.imageUrl} className={classes.portraitItemImg} alt=\"breastplate\" />\r\n                    ) : (\r\n                        <img src=\"images/breastplate.svg\" className={classes.portraitNoItemImg} alt=\"breastplate\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={feetItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemLegs}`}>\r\n                    {feetItem ? (\r\n                        <img src={feetItem.imageUrl} className={classes.portraitItemImg} alt=\"legs\" />\r\n                    ) : (\r\n                        <img src=\"images/leg.svg\" className={classes.portraitNoItemImg} alt=\"legs\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={armsItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemGloves}`}>\r\n                    {armsItem ? (\r\n                        <img src={armsItem.imageUrl} className={classes.portraitItemImg} alt=\"gloves\" />\r\n                    ) : (\r\n                        <img src=\"images/glove.svg\" className={classes.portraitNoItemImg} alt=\"gloves\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={weaponItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemWeapon}`}>\r\n                    {weaponItem ? (\r\n                        <img src={weaponItem.imageUrl} className={classes.portraitItemImg} alt=\"weapon\" />\r\n                    ) : (\r\n                        <img src=\"images/sword.svg\" className={classes.portraitNoItemImg} alt=\"weapon\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemShield}`}>\r\n                    <img src=\"images/shield.svg\" className={classes.portraitNoItemImg} alt=\"shield\" />\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EquippedItems;\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\nimport Attribute from \"../models/character/Attribute\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nconst StatisticsBlock: React.FunctionComponent<StatisticsBlockProps> = (props: StatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    const createData = (name: string, calculation: string, modifier: string) => {\r\n        return { name, calculation, modifier };\r\n    };\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.bonus;\r\n    const attributeCalculation = (attribute: Attribute) =>\r\n        attributeTotal(attribute) === attribute.base ? attribute.base.toString() : `${attribute.base} (${attributeTotal(attribute)})`;\r\n    const displayWithPlusMinus = (val: number) => val > 0 ? `+${val}` : val.toString();\r\n    const showModifier = (attribute: Attribute) => displayWithPlusMinus(AttributeHelper.getModifier(attribute));\r\n\r\n    const rows = [\r\n        createData(\"Strength\", attributeCalculation(statistics.strength), showModifier(statistics.strength)),\r\n        createData(\"Dexterity\", attributeCalculation(statistics.dexterity), showModifier(statistics.dexterity)),\r\n        createData(\"Consitution\", attributeCalculation(statistics.constitution), showModifier(statistics.constitution)),\r\n        createData(\"Intelligence\", attributeCalculation(statistics.intelligence), showModifier(statistics.intelligence)),\r\n        createData(\"Wisdom\", attributeCalculation(statistics.wisdom), showModifier(statistics.wisdom)),\r\n        createData(\"Charisma\", attributeCalculation(statistics.charisma), showModifier(statistics.charisma)),\r\n        createData(\"Luck\", attributeCalculation(statistics.strength), showModifier(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Value</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.calculation}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default StatisticsBlock;","import React from \"react\";\r\nimport { Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport LocationSearchingIcon from \"@material-ui/icons/LocationSearching\";\r\n\r\nimport CalculatedStats from \"../models/character/CalculatedStats\";\r\nimport EffectTable from \"../models/EffectTable\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport EffectTableEntry from \"../models/EffectTableEntry\";\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        //backgroundColor: theme.palette.background.paper,\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype CalculatedStatisticsBlockProps = {\r\n    statistics: CalculatedStats;\r\n    attributes: AttributeList;\r\n    level: number;\r\n    currentHitPoints: number;\r\n};\r\n\r\ntype EffectResults = {\r\n    meleeEffect: EffectTable;\r\n    meleeEffectEntry: EffectTableEntry;\r\n    rangedEffect: EffectTable;\r\n    rangedEffectEntry: EffectTableEntry;\r\n};\r\n\r\nconst CalculatedStatisticsBlock: React.FunctionComponent<CalculatedStatisticsBlockProps> = (props: CalculatedStatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics, attributes } = props;\r\n\r\n    const [effects, setEffects] = React.useState<EffectResults | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEffects = () => {\r\n            const service = new EffectTableServiceStatic();\r\n            const meleeEffect = service.getEffect(statistics.meleeEffectId);\r\n            const rangedEffect = service.getEffect(statistics.rangedEffectId);\r\n            const meleeEffectEntry = service.getResultEntry(meleeEffect, 15, 15);\r\n            const rangedEffectEntry = service.getResultEntry(rangedEffect, 15, 15);\r\n\r\n            if (meleeEffect && rangedEffect && meleeEffectEntry && rangedEffectEntry)\r\n                setEffects({\r\n                    meleeEffect: meleeEffect,\r\n                    meleeEffectEntry: meleeEffectEntry,\r\n                    rangedEffect: rangedEffect,\r\n                    rangedEffectEntry: rangedEffectEntry,\r\n                });\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (!effects) {\r\n            loadEffects();\r\n        }\r\n    }, [effects]);\r\n\r\n    if (!effects) return null;\r\n\r\n    return (\r\n        <div className={classes.statisticsBlock}>\r\n            <Grid container>\r\n                <Grid item xs={1} md={1}></Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FavoriteIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Hit Points ${props.currentHitPoints} / ${statistics.maxHitPoints}`}\r\n                                secondary={`Level ${props.level}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <SecurityIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Armor Class ${statistics.armour}`}\r\n                                secondary={`Spell Resistance ${statistics.spellResistance}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FastForwardIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack Speed ${statistics.meleeAttackSpeed}`}\r\n                                secondary={`Move Speed ${statistics.moveSpeed}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <LocationSearchingIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack +${statistics.meleeAttackBonus} (${statistics.meleeEffectId} Table)`}\r\n                                secondary={`Damage D${effects.meleeEffectEntry.damageDie} + ${\r\n                                    statistics.meleeDamageBonus +\r\n                                    HeroHelper.getStatModifier(statistics, attributes, effects.meleeEffectEntry.damageModifier)\r\n                                }`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={1} md={1}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CalculatedStatisticsBlock;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport Item from \"../models/Item\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\nimport MockItemService from \"../services/MockItemService\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nimport PartyInventoryEquip from \"../components/PartyInventoryEquip\";\r\nimport EquippedItems from \"../components/EquippedItems\";\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport CalculatedStatisticsBlock from \"../components/CalculatedStatisticsBlock\";\r\nimport TraitList from \"../components/TraitList\";\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"91.5vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"56vh\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        //left: \"20%\",\r\n        width: \"18vw\",\r\n        height: \"18vw\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        backgroundColor: \"lightslategrey\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"28px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"34vh\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    right: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n    traitsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n}));\r\n\r\ntype HeroProfileProps = {\r\n    id: string;\r\n};\r\n\r\nconst HeroProfile: React.FunctionComponent<HeroProfileProps> = (props: HeroProfileProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { id } = props;\r\n\r\n    let [hero, setHero] = React.useState<Hero | null>(null);\r\n    let [party, setParty] = React.useState<PartyStatistics | null>(null);\r\n    let [world, setWorld] = React.useState<WorldStatistics | null>(null);\r\n    let [equippedItems, setEquippedItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n    let [currentId, setCurrentId] = React.useState(\"\");\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const partyService = new MockPartyService();\r\n\r\n            // Process special keypress IDs, and re-direct to the correct hero\r\n            switch (id) {\r\n                case \"1\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[0]);\r\n                    return;\r\n                case \"2\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[1]);\r\n                    return;\r\n                case \"3\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[2]);\r\n                    return;\r\n                case \"4\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[3]);\r\n                    return;\r\n            }\r\n\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const newParty = partyService.getPartyStatistics();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            const itemsService = new MockItemService();\r\n            const newItems = itemsService.getItems(newHero.currentStatus.equippedItems);\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n            if (!newItems) {\r\n                console.error(`No items data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n            setEquippedItems(newItems);\r\n        };\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world || !equippedItems || !inventoryItems) return null;\r\n\r\n    const onEquipItem = (itemId: string) => {\r\n        // console.log(`hero '${id}' equips ${itemId}`);\r\n\r\n        // Equip the item\r\n        const heroService = new MockHeroService();\r\n        const removedItemId = heroService.equipItem(id, itemId);\r\n\r\n        // Remove the item from party inventory\r\n        const partyService = new MockPartyService();\r\n        partyService.removeInventoryItem(itemId);\r\n        if (removedItemId) {\r\n            partyService.addInventoryItem(removedItemId);\r\n        }\r\n\r\n        // Force a refresh\r\n        setCurrentId(\"\");\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.characterGrid}>\r\n                <div className={classes.left}>\r\n                    <div className={classes.portrait}>\r\n                        <br />\r\n                        <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                            <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                        </LinkTo>\r\n                        <div className={classes.bannerContainer}>\r\n                            <h1 className=\"banner\">{hero.name}</h1>\r\n                        </div>\r\n                        <div className={classes.itemContainer}>\r\n                            <p>\r\n                                {hero.description} - {StringConverters.alignmentToString(hero.alignment)}\r\n                            </p>\r\n                            <Grid container>\r\n                                <Grid item xs={3}>\r\n                                    <EquippedItems equippedItems={equippedItems} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                                </Grid>\r\n                                <Grid item xs={3}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.inventory}>\r\n                        <br />\r\n                        <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                        <PartyInventoryEquip items={inventoryItems} onEquipItem={onEquipItem} />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.right}>\r\n                    <br />\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{hero.background}</p>\r\n                    </div>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <StatisticsBlock statistics={HeroHelper.calculateAttributesWithModifiers(hero)} />\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Other</h1>\r\n                    <CalculatedStatisticsBlock\r\n                        statistics={HeroHelper.calculateStatsWithModifiers(hero)}\r\n                        attributes={hero.attributes}\r\n                        level={hero.level}\r\n                        currentHitPoints={hero.currentStatus.currentHitPoints}\r\n                    />\r\n                    <h1 className={classes.sectionHeading}>Abilities</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{StringConverters.abilitiesToString(hero.abilities)}</p>\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Traits</h1>\r\n                    <Grid container className={classes.traitsBlock}>\r\n                        <Grid item xs={2}></Grid>\r\n                        <Grid item xs={8}>\r\n                            <TraitList traits={HeroHelper.getAllTraits(hero)} />\r\n                        </Grid>\r\n                        <Grid item xs={2}></Grid>\r\n                    </Grid>\r\n                    <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>Reputation {party.reputation}</p>\r\n                        {party.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        {world.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default HeroProfile;\r\n","import React from 'react';\r\n\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport EncounterMapLoader from '../components/EncounterMapLoader';\r\nimport GameState from '../models/GameState';\r\n\r\n/*\r\n* Page for testing encounters\r\n* Actual encounters will be loaded through the main map page tracking the GameState.\r\n*/\r\nconst EncounterPage: React.FunctionComponent = (): JSX.Element => {\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n\r\n        console.log(\"New map : \" + newState.currentMapId + \", \" + newState.currentVertextId);\r\n    };\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <EncounterMapLoader encounterId=\"tavern\" onNewMap={onNewMap} />\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default EncounterPage;\r\n","import Quest from \"../models/Quest\";\r\n\r\nimport SongOfTheSeaQuest from \"./quests/song_of_the_sea.json\";\r\nimport ThereAndBackQuest from \"./quests/there_and_back.json\";\r\n\r\nexport default class MockQuestService {\r\n    getQuestDetail(id: string): Quest {\r\n        switch (id) {\r\n            case \"there_and_back\":\r\n                return ThereAndBackQuest;\r\n            case \"song_of_the_sea\":\r\n            default:\r\n                return SongOfTheSeaQuest;\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Avatar, Card, CardContent, CardHeader, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Quest from \"../models/Quest\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\n\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockQuestService from \"../services/MockQuestService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"../components/LinkTo\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: \"beige\",\r\n    },\r\n    grid: {\r\n        marginTop: \"120px\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"76vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    right: {\r\n        //overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n        margin: \"30px\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    list: {\r\n        padding: \"20px\",\r\n    },\r\n    item: {\r\n        backgroundColor: \"#fafaf0\",\r\n        margin: \"10px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    activeItem: {\r\n        backgroundColor: \"#ffffff\",\r\n        margin: \"10px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    questCard: {\r\n        margin: \"60px 20px\",\r\n        padding: \"30px\",\r\n    },\r\n    questContent: {\r\n        fontFamily: \"Martel\",\r\n    },\r\n}));\r\n\r\ntype QuestsPageProps = {};\r\n\r\nconst QuestsPage: React.FunctionComponent<QuestsPageProps> = (props: QuestsPageProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [quests, setQuests] = React.useState<Quest[] | undefined>(undefined);\r\n    const [activeQuest, setActiveQuest] = React.useState<Quest | undefined>(undefined);\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadQuests = () => {\r\n            const questService = new MockQuestService();\r\n            const partyService = new MockPartyService();\r\n\r\n            const partyQuests = partyService.getQuests();\r\n            const quests: Quest[] = [];\r\n            partyQuests.forEach((partyQuest) => {\r\n                const quest = questService.getQuestDetail(partyQuest.id);\r\n                quests.push(quest);\r\n                if (partyQuest.status === \"current\") {\r\n                    setActiveQuest(quest);\r\n                }\r\n            });\r\n            setQuests(quests);\r\n        };\r\n\r\n        if (!quests) {\r\n            loadQuests();\r\n        }\r\n    });\r\n\r\n    if (quests === undefined) return null;\r\n\r\n    const onSelectQuest = (selectedQuest: Quest) => setActiveQuest(selectedQuest);\r\n\r\n    const renderQuests = (renderQuests: Quest[]): JSX.Element[] =>\r\n        renderQuests.map((q) => (\r\n            <ListItem className={activeQuest?.id === q.id ? classes.activeItem : classes.item} onClick={() => onSelectQuest(q)}>\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                        <ExploreIcon />\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={q.name} secondary={q.description} />\r\n            </ListItem>\r\n        ));\r\n\r\n    const renderActiveQuest = (): JSX.Element | null => {\r\n        if (!activeQuest) return null;\r\n\r\n        return (\r\n            <Card className={classes.questCard}>\r\n                <CardHeader title={activeQuest.name} />\r\n                <CardContent className={classes.questContent}>{activeQuest.detail}</CardContent>\r\n            </Card>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <br />\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.bannerContainer}>\r\n                    <h1 className=\"banner\">Quests</h1>\r\n                </div>\r\n                <br />\r\n                <div className={classes.grid}>\r\n                    <div className={classes.left}>\r\n                        <br />\r\n                        <List className={classes.list}>{renderQuests(quests)}</List>\r\n                    </div>\r\n                    <div className={classes.right}>{renderActiveQuest()}</div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default QuestsPage;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\n\r\n// Pages\r\nimport MapPage from \"./pages/MapPage\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterPage from \"./pages/EncounterPage\";\r\nimport KeyMaps from \"./components/KeyMaps\";\r\nimport QuestsPage from \"./pages/QuestsPage\";\r\n\r\nconst MainLayout: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <KeyMaps backUrl=\"/menu\">\r\n                <Header />\r\n            </KeyMaps>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path={`${process.env.PUBLIC_URL}/profile/:id`}\r\n                        component={(props: any) => <HeroProfile id={props.match.params.id} />}\r\n                    />\r\n                    <Route path={`${process.env.PUBLIC_URL}/quests/`} component={QuestsPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/encounter/:useTokens/`} component={EncounterPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/`} component={MapPage} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport MenuCards, { MenuCard } from \"./MenuCards\";\r\n\r\nconst useStyles = makeStyles({\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n});\r\n\r\ntype SaveGameSelectorProps = {\r\n    enabledSlots: boolean[];\r\n    saves: (Date | null)[];\r\n    currentSlot: number;\r\n    onSelected: (slot: number) => void;\r\n};\r\n\r\nconst SaveGameSelector: React.FunctionComponent<SaveGameSelectorProps> = (props: SaveGameSelectorProps) => {\r\n    const classes = useStyles();\r\n    \r\n    const { saves, enabledSlots, currentSlot, onSelected } = props;\r\n\r\n    const getDateString = (date: Date | null) => (date ? `${date.toLocaleString()}` : \"Empty\");\r\n    const getDescription = (date: Date | null, isCurrentSlot: boolean) => {\r\n        return isCurrentSlot ? `Current Save (${getDateString(date)})` : getDateString(date);\r\n    };\r\n\r\n    const saveButtons: MenuCard[] = [\r\n        {\r\n            title: \"Slot A\",\r\n            description: getDescription(saves[0], currentSlot === 0),\r\n            enabled: enabledSlots[0],\r\n            active: currentSlot === 0,\r\n            onSelected: () => onSelected(0),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot B\",\r\n            description: getDescription(saves[1], currentSlot === 1),\r\n            enabled: enabledSlots[1],\r\n            active: currentSlot === 1,\r\n            onSelected: () => onSelected(1),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot C\",\r\n            description: getDescription(saves[2], currentSlot === 2),\r\n            enabled: enabledSlots[2],\r\n            active: currentSlot === 2,\r\n            onSelected: () => onSelected(2),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n    ];\r\n\r\n    return <MenuCards items={saveButtons} />;\r\n};\r\n\r\nexport default SaveGameSelector;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameNewMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHome = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"New game in slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHome();\r\n    };\r\n\r\n    // Can choose any empty slots\r\n    const enabledSlots = (): boolean[] => saveTimes.map((s) => s === null);\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose an empty save slot\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameNewMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameLoadMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHomeMap = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Loaing slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHomeMap();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const calculateEnabledSlots = (saves: (Date | null)[]): boolean[] => {\r\n        const enabledSlots = saves.map((s) => s !== null);\r\n        console.log(\"Games : \" + JSON.stringify(enabledSlots));\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to load\r\n                </Typography>\r\n                <SaveGameSelector\r\n                    enabledSlots={calculateEnabledSlots(saveTimes)}\r\n                    currentSlot={currentSave}\r\n                    saves={saveTimes}\r\n                    onSelected={saveSelected}\r\n                />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameLoadMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameDeleteMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToMenu = () => history.push(\"/menu\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Deleting slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.deleteSlot(slot);\r\n\r\n        navigateToMenu();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const enabledSlots = (): boolean[] => {\r\n        const enabledSlots = saveTimes.map((s) => s !== null);\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to delete\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameDeleteMenu;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport PitTheme from \"./PitTheme\";\r\n\r\n// Pages\r\nimport MainMenu from \"./pages/MainMenu\";\r\nimport MainLayout from \"./MainLayout\";\r\nimport GameNewMenu from \"./pages/GameNewMenu\";\r\nimport GameLoadMenu from \"./pages/GameLoadMenu\";\r\nimport GameDeleteMenu from \"./pages/GameDeleteMenu\";\r\n\r\nconst App : React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <div\r\n            className=\"app\"\r\n            onContextMenu={(e) => {\r\n                // Disable right-lick menu\r\n                e.preventDefault();\r\n                return false;\r\n            }}\r\n        >\r\n            <ThemeProvider theme={PitTheme}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path={`${process.env.PUBLIC_URL}/menu`} component={MainMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/new`} component={GameNewMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/load`} component={GameLoadMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/delete`} component={GameDeleteMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/`} component={MainLayout} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}