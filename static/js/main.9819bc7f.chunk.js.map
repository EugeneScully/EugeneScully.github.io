{"version":3,"sources":["helpers/ElectronHelper.ts","PitTheme.tsx","components/LinkTo.tsx","components/KeyMaps.tsx","services/MockSaveService.ts","components/MenuCards.tsx","pages/MainMenu.tsx","services/MockItemService.ts","helpers/AttributeHelper.ts","services/MockTraitService.ts","services/MockHeroService.ts","services/MockPartyService.ts","components/Header.tsx","services/MockGameStateService.ts","models/character/Hero.ts","models/Item.ts","models/character/Trait.ts","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","services/MockVariableService.ts","services/MockStoryEncounterService.ts","components/HeroList.tsx","components/encounter-dialog/PartySelect.tsx","components/encounter-dialog/HeroSelect.tsx","components/encounter-dialog/HeroDismiss.tsx","services/StringConverters.ts","components/ItemTooltipContent.tsx","components/InventorySelector.tsx","components/encounter-dialog/ItemSelect.tsx","components/encounter-dialog/Stash.tsx","components/TraitList.tsx","components/encounter-dialog/TraitSelect.tsx","components/encounter-dialog/PartyInventorySelect.tsx","components/encounter-dialog/ItemLoot.tsx","components/encounter-dialog/EncounterDialog.tsx","components/markers/VertexMarker.tsx","models/Queue.ts","components/markers/Drift_Marker.tsx","components/markers/DriftMarker2.tsx","components/markers/PartyMarker.tsx","services/TimeTracker.ts","components/OverheadMap.tsx","components/LoadingProgress.tsx","components/OverheadMapLoader.tsx","services/MockDetailedEncounterService.ts","components/markers/HeroMarker.tsx","helpers/Transforms.ts","helpers/GridHelpers.ts","models/CharacterEncounterData.ts","components/markers/GridMarker.tsx","components/markers/FoeMarker.tsx","components/encounter-map/StaticMarker.tsx","components/encounter-map/CombatPath.tsx","components/markers/CustomMarker.tsx","components/markers/DamageDisplay.tsx","components/CombatIndicator.tsx","components/ActionBar.tsx","services/DiceRoller.ts","services/DiceSeedTracker.ts","services/InitiativeTracker.ts","models/AttackResult.ts","services/EffectTableServiceStatic.ts","helpers/HeroHelper.ts","helpers/CombatHelper.ts","helpers/CombatPositionHelper.ts","helpers/CombatActionHelper.ts","components/markers/IsoMarker.tsx","components/EncounterMap.tsx","services/MockNpcService.ts","helpers/ArrayHelper.ts","components/EncounterMapLoader.tsx","pages/MapPage.tsx","services/MockWorldService.ts","components/PartyInventoryEquip.tsx","components/EquippedItems.tsx","components/StatisticsBlock.tsx","components/CalculatedStatisticsBlock.tsx","pages/HeroProfile.tsx","pages/EncounterPage.tsx","services/MockQuestService.ts","pages/QuestsPage.tsx","MainLayout.tsx","components/SaveGameSelector.tsx","pages/GameNewMenu.tsx","pages/GameLoadMenu.tsx","pages/GameDeleteMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ElectronHelper","window","process","type","versions","electron","navigator","userAgent","indexOf","PitTheme","createMuiTheme","palette","primary","light","main","dark","LinkTo","props","url","children","top","left","width","classes","makeStyles","container","zIndex","display","cursor","containerAbsolute","position","useStyles","isPositioned","history","useHistory","className","onClick","event","push","KeyMaps","backUrl","navigateToUrl","Mousetrap","bind","MockSaveService","setCurrentSave","slot","_currentSave","localStorage","setItem","toString","getCurrentSave","getItem","slotId","Number","parseInt","markSlotUpdated","Date","getSlotUpdateTimes","slot1","slot2","slot3","deleteSlot","Error","removeItem","key","value","this","JSON","stringify","json","parse","undefined","card","margin","backgroundColor","right","boxShadow","cardDisabled","cardActive","MenuCards","selectClass","i","active","enabled","items","Grid","item","xs","map","Card","onSelected","CardHeader","title","Typography","variant","avatar","icon","CardContent","description","root","height","close","filter","cardIcon","fontSize","titleContainer","padding","appLogo","pointerEvents","MainMenu","React","useState","saveTimes","setSaveTimes","useEffect","saveService","loadSaves","slotCount","s","length","allSlotsFull","oneSlotFull","isElectron","require","ipcRenderer","send","src","alt","MockItemService","getItems","ids","id","getItemDetail","TokenOfServitude","HagTeeth","CeramicHelm","CeramicArmor","WolfSpear","AttributeHelper","attribute","total","base","bonus","convertSimpleToComplex","attributes","strength","dexterity","constitution","intelligence","wisdom","charisma","luck","MockTraitService","getTraits","getTraitDetail","PhobiaUndead","ToughSkin","ResurrectionBotched","CompulsionKleptomaniac","MockHeroService","hero","getHeroData","convertToDetailed","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroes","heroId","itemId","heroMatch","find","itemService","originalItem","itemWithSameType","currentStatus","equippedItems","itemType","saveObject","traitId","from","newTrait","heroTrait","name","behavior","permanentTraits","findIndex","t","getObject","baseTraits","temporaryTraits","currentHitPoints","baseHitPoints","lostSpells","background","imageUrl","tokenUrl","tokenOffset","abilities","alignment","level","stats","status","armour","meleeAttackBonus","meleeAttackSpeed","meleeEffectId","meleeDamageBonus","rangedAttackBonus","rangedAttackSpeed","rangedEffectId","rangedDamageBonus","spellAttackBonus","spellAttackSpeed","spellDamageBonus","spells","moveSpeed","maxHitPoints","spellResistance","damageResistance","MockPartyService","reputation","traits","heroService","getPartyIds","getHeroDetail","_heroIds","heroIds","defaultHeroIds","_inventoryItemIds","inventoryIds","defaultInventoryIds","itemIds","inventoryItems","getInventory","setInventory","_stashItemIds","stashIds","defaultStashIds","getStash","setStash","stashItems","_quests","quests","defaultQuests","quest","newQuests","q","appHeader","headerSpan","headerParty","headerImg","border","borderRadius","borderWidth","borderColor","Header","party","setParty","newParty","getParty","console","error","loadParty","MockGameStateService","_state","stateJson","state","defaultState","log","currentMapId","currentVertextId","currentMapCovers","currentTurn","seed","Math","random","MAX_SAFE_INTEGER","Alignment","StatusFlags","AbilityFlags","ItemType","TraitType","ModifierType","MockMapService","BlackTempleMap","TownMap","coverUrls","useDayNight","pathColor","vertices","v","Leaflet","latLng","clickRadius","encounterId","marker","exitId","coverIds","edges","distance","x","y","latDist","lat","lngDist","lng","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","weight","MockVariableService","MockStoryEncounterService","currentStory","currentId","currentTitle","TheInterceptContent","commonRoomContent","chasmContent","homeContent","storeRoomContent","nineBellsContent","brawlContent","squallsEndEntryContent","dartTrapContent","Story","createEmptyStory","storyStateJson","LoadJson","GoToStart","tags","globalTags","titleTag","startsWith","substring","trimStart","variableService","skipVariableTag","skipVariable","getVariable","variableValues","join","split","forEach","variablesState","SetGlobal","StringValue","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","GetVariableWithName","detailedEncounter","coverVisible","storyState","toJson","paragraphText","choices","isFinished","finishData","Continue","encounterChoices","currentChoices","c","index","text","heroSelected","HeroList","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","partyService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","currentTarget","newSelected","selectedHeroIds","imgClass","output","style","textAlign","Tooltip","renderParty","partyButton","partyButtonDiv","PartySelect","setHeroIds","isApplied","setIsApplied","isValid","Button","setPartyIds","onReady","disabled","color","startIcon","HeroSelector","HeroDismiss","setHeroId","StringConverters","resourceMap","Resources","alignmentToString","resources","getResources","modifierToString","modifierType","itemTypeText","abilitiesToString","None","Acrobatics","Devices","PatronBond","Perception","Sorcery","Stealth","Survival","ItemTooltipContent","renderBehaviors","effects","e","modifierValue","Fragment","align","traitJsx","newTraits","concat","renderTraits","gridItem","inventory","itemSelected","InventorySelector","spacing","alignItems","justify","itemGrids","arrow","emptyItems","emptyGrids","renderInventory","lootImg","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","ItemSelect","useStash","itemsSelected","setItemsSelected","inventorySelected","setInventorySelected","itemsSelectedCount","inventorySelectedCount","isItemSelected","isInventorySelected","willInventoryBeTooBig","deselectAll","lootSourceName","match","newItemsSelected","splice","takeItems","onTake","putItems","onPut","newInventorySelected","Stash","setStashItems","setInventoryItems","stashItemIds","inventoryItemIds","newStashItems","newInventoryItems","loadItems","removeInventoryItem","addStashItem","removeStashItem","addInventoryItem","notSelected","TraitList","selectedTrait","setSelectedTrait","renderTraitIcon","renderTrait","ListItem","trait","ListItemAvatar","Avatar","ListItemText","secondary","List","dense","traitsBlock","button","buttonDiv","TraitSelect","traitIds","setTraits","loadTraits","addPermanentTrait","PartyInventorySelect","selectedIndex","ItemLoot","lootItems","setLootItems","loadLootItems","loadInventoryItems","service","takenItems","paper","overflow","dialog","userSelect","opacity","content","minWidth","minHeight","fontFamily","actions","portrait","placeholder","float","paragraph","EncounterDialog","onClose","MockEncounterService","encounterService","paragraphs","setParagraphs","setTitle","setChoices","storyStarted","setStoryStarted","isReady","setIsReady","open","handleClose","handleChoice","encounter","chooseChoice","encounterFinish","processFinish","handleContinue","finish","encounterDetailId","startEncounter","isBlockingDialog","Dialog","aria-labelledby","DialogContent","p","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","isInventory","selectItemsStart","selectItemsEnd","itemsStart","substr","replaceAll","trim","selectTraitStart","selectTraitEnd","traitsStart","HeroSelect","slice","isRandomTrait","isRandom","selectMultiple","renderParagraph","DialogActions","encChoices","disableContinue","renderChoices","tooltip","whiteSpace","verticalAlign","justifyContent","marginLeft","marginRight","flexShrink","VertexMarker","onHover","onHoverEnd","vertextId","Icon","iconUrl","image","iconSize","dimensions","iconAnchor","anchor","Marker","onclick","onmouseover","onmouseout","renderTooltipIcon","Queue","_store","val","shift","exports","Leaflet_module","L","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","dragging","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","DriftMarker2","leafletElement","rest","DivIcon","el","contextValue","leaflet","popupContainer","createLeafletElement","forceUpdate","fromProps","toProps","zIndexOffset","setZIndexOffset","setOpacity","draggable","_icon","portal","createPortal","MapLayer","withLeaflet","PartyMarker","isActive","onMoveEnd","iconActive","_","TimeTracker","_dayLength","isNight","hour","isMorning","isEvening","toLogString","logString","dayMap","nightMap","eveningMap","morningMap","bottom","OverheadMap","startState","mapUrl","onNewMap","setPos","path","setPath","vertexQueue","setEncounterId","gameState","setGameState","initialNode","setInitialNode","visibleCovers","setVisibleCovers","handleMoveEnd","targetVertex","pop","thisCoverIds","splits","newState","currentEncounterId","clear","stateService","getState","setState","vertexId","npath","aStar","nextVertex","pathVertexes","moveToVertexId","mapGraph","bounds","LatLngBounds","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","round","zoomControl","ImageOverlay","covers","renderCovers","renderMarkers","Polyline","positions","dashArray","dashOffset","LoadingProgress","CircularProgress","OverheadMapLoader","setGraph","setPathColor","setMapUrl","setCoverUrls","setUseDayNight","getMap","Build","loadMap","MockDetailedEncounterService","TavernMap","HeroMarker","progress","circularProgress","percentHp","details","displayPos","colorPrimary","thickness","size","Transforms","isoX","carX","carY","isoY","cardinalToIsometric","car","cardinalToIsometric2","isometricToCardinal","iso","offset","scale","GridHelpers","tokenGrid","grid","mergeGridEntry","gridToDisplayTuple","gridScale","gridOffset","gridToDisplayCenterTuple","gridToDisplay","gridToDisplayCenter","reverseOffset","coords","reverseScale","displayToGrid","result","floor","getGridLocation","char","getInitialPositions","characters","gridPosition","CharacterEncounterData","tokenEntry","baseEntry","buildAstarGrid","isWalkable","getGridPath","start","end","isHeroMove","mergedGrid","buildMergedGrids","endEntry","isFoe","isHero","isBlocked","AStarFinder","matrix","startGridPosition","endGridPosition","findPath","reverse","getRangedGridPath","range","distanceSquared","getHeroPath","getFoePath","findNearestHero","paths","heroEntries","sortedPaths","sort","p1","p2","entry","isEncounter","canEndMove","displayGrid","displayStrings","gridEntry","selectedAttack","gridPos","isMoving","queueStrings","convertFunc","GridMarker","gridToDisplayFunc","FoeMarker","foe","meleeHover","hoverUrl","attackIcon","onMouseOver","onMouseOut","StaticMarker","CombatPath","move","fullPath","remainderPathLength","fullMoveStart","fullMoveEnd","halfMoveStart","remainderPath","fullMovePath","halfMovePath","halfMoveMarker","fullMoveMarker","CustomMarker","RL","zIndexOff","fromPosition","fromZIndexOffset","fromOpacity","fromDraggable","fromClassName","toPosition","toZIndexOffset","toOpacity","toDraggable","toClassName","difference","itemsToRemove","includes","fromClasses","toClasses","classList","remove","updateLeafletElement","LeafletProvider","explode","death","miss","DamageDisplay","damage","show","Fade","in","transitionDelay","timeout","enter","exit","CombatIndicator","isCombat","initiative","ActionBar","renderButton","renderSpells","DiceRoller","rollDie","dieType","ceil","generate","roll20","roll10","DiceSeedTracker","reduce","a","b","charCodeAt","mulberry32","imul","InitiativeTracker","initiatives","_initiatives","processDelay","delay","init","getInitiatives","getNextInitiative","displayInitiatives","gameId","foes","fromEncounterId","roller","heroInitiatives","h","next","getModifier","foeInitiatives","f","n1","n2","AttackResult","createMiss","createFumble","createHit","createCritical","createDeath","EffectTableServiceStatic","Fists","Spear","Bow","MagicMissle","table","rawRoll","matches","useRaw","resultMin","resultMax","HeroHelper","statistics","modifier","getItemTraits","itemTraits","getAllTraits","calculateAttributesWithModifiers","allTraits","strMod","dexMod","conMod","intMod","wisMod","chaMod","luckMod","j","Strength","Dexterity","Constitution","Intelligence","Wisdom","Charisma","Luck","calculateStatsWithModifiers","armorMod","moveSpeedMod","meleeAttackMod","meleeAttackSpeedMod","meleeDamageMod","rangedAttackMod","rangedAttackSpeedMod","rangedDamageMod","spellAttackMod","spellAttackSpeedMod","spellDamageMod","hpMod","spellResistMod","damageResistMod","Armor","MoveSpeed","MeleeAttack","MeleeAttackSpeed","MeleeDamage","MeleeEffect","RangedEffect","RangedAttack","RangedAttackSpeed","RangedDamage","SpellAttack","SpellAttackSpeed","SpellDamage","HitPoints","SpellResistance","DamageResistance","Status","meleeEffect","getEffect","rangedEffect","meleeEffectAttackModifier","attackModifier","rangedEffectAttackModifier","getStatModifier","CombatHelper","determineAttackResultShared","seedAttack","seedDamage","attacker","target","effectId","attackBonus","damageBonus","targetPos","attackerPos","attackerDetail","targetDetail","resultService","effect","attackRoll","attackValue","isMiss","dodgeWith","isFumble","isCritical","getResultEntry","damageDieCount","damageDie","damageModifier","determineAttackResult","determineMeleeAttackResult","determineRangedAttackResult","determineSpellAttackResult","determineMaxRange","CombatPositionHelper","updatePosition","newPosition","oldPositions","newPositions","removePosition","getPositionByEntry","clearAllQueues","CombatActionHelper","trimPathToMove","maxPath","buildAttack","movePath","isAttack","character","action","buildMove","IsoMarker","dot","dotActive","EncounterMap","heroData","setHeroData","foeData","setFoeData","damagePos","setDamagePos","setTokenGrid","selectedHero","setSelectedHero","attackTarget","setAttackTarget","setInitiatives","currentAction","setCurrentAction","setSeed","params","useParams","startNextActor","initiativeTracker","newNextToMove","gridDisplay","foeMatch","closestHeroPath","newCharacterAction","newInitiatives","numMoves","heroPos","getPosition","setCharacterPosition","executeCurrentAction","onHeroClick","encounters","handleAttack","targetMatch","attackSeed","damageSeed","results","newFoeDetails","removeCharacter","addDamagePos","showHoverPath","hoverGridPos","displayPath","onFoeHover","onFoeHoverEnd","onClickGridMarker","processMarkerAction","onFoeClick","endPos","endToken","newAction","markers","renderGridMarkers","useTokens","renderHeroes","damages","displayResults","dam","renderDamageMarkers","MockNpcService","getFoeData","clone","thugContent","ArrayHelper","array","count","clonedArray","Object","assign","self","EncounterMapLoader","setEncounter","setFoes","encounterData","getEncounterDetail","newHeroes","foeEntries","entries","npcs","foeIds","removeDuplicates","npcService","newFoes","getFoeDetail","foeInstances","foeDeepClone","buildInitial","loadEncounter","showGrid","MapPage","newGameState","loadGameState","MockWorldService","PartyInventoryEquip","onEquipItem","selectedItem","itemContainer","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","portraitItemWeapon","portraitItemShield","portraitNoItemImg","portraitItemImg","EquippedItems","headItem","WearableHead","bodyItem","WearableBody","armsItem","WearableArms","feetItem","WearableFeet","weaponItem","WeaponMelee1h","StyledTableCell","withStyles","theme","head","common","black","white","body","TableCell","StyledTableRow","hover","TableRow","StatisticsBlock","createData","calculation","attributeTotal","attributeCalculation","showModifier","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","row","scope","maxWidth","statisticsBlock","CalculatedStatisticsBlock","setEffects","meleeEffectEntry","rangedEffectEntry","loadEffects","md","characterGrid","gridAutoRows","breakpoints","down","gridTemplateColumns","up","sectionHeading","bannerContainer","portraitImg","overflowY","gridRowEnd","HeroProfile","setHero","world","setWorld","setEquippedItems","setCurrentId","newHero","getPartyStatistics","newWorld","getWorld","newItems","loadHero","removedItemId","equipItem","EncounterPage","MockQuestService","ThereAndBackQuest","SongOfTheSeaQuest","marginTop","list","activeItem","questCard","questContent","QuestsPage","setQuests","activeQuest","setActiveQuest","questService","partyQuests","getQuests","partyQuest","getQuestDetail","loadQuests","renderQuests","detail","MainLayout","SaveGameSelector","saves","enabledSlots","currentSlot","getDateString","date","toLocaleString","getDescription","isCurrentSlot","saveButtons","chooseText","GameNewMenu","currentSave","clearCache","GameLoadMenu","calculateEnabledSlots","GameDeleteMenu","App","onContextMenu","preventDefault","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9819bc7f.chunk.js","sourcesContent":["export default class ElectronHelper {\r\n    /*\r\n     * Are we running under electron?\r\n     */\r\n    public static isElectron(): boolean {\r\n        \r\n        // Renderer process\r\n        if (typeof window !== \"undefined\" && typeof window.process === \"object\" && window.process.type === \"renderer\") {\r\n            return true;\r\n        }\r\n\r\n        // Main process\r\n        if (typeof process !== \"undefined\" && typeof process.versions === \"object\" && !!process.versions.electron) {\r\n            return true;\r\n        }\r\n\r\n        // Detect the user agent when the `nodeIntegration` option is set to true\r\n        if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n//import { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: \"#ffd600\",\r\n            main: \"#ffd600\",\r\n            dark: \"#ffd600\",\r\n        },\r\n        // secondary: {\r\n        //     light: blue[100],\r\n        //     main: blue[100],\r\n        //     dark: blue[100],\r\n        // },\r\n        // action: {\r\n        //     hover: blue[800],\r\n        // },\r\n    },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\ntype LinkToProps = {\r\n    url: string;\r\n    children?: React.ReactNode;\r\n    top?: string,\r\n    left?: string;\r\n    width?: string;\r\n};\r\n\r\nconst LinkTo: React.FunctionComponent<LinkToProps> = (props: LinkToProps) => {\r\n    \r\n    const { url, children, top, left, width } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        container: {\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n        containerAbsolute: {\r\n            position: \"absolute\",\r\n            top: top ?? \"20px\",\r\n            left: left ?? \"20px\",\r\n            width: width ?? \"40px\",\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    const isPositioned = top || left || width;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => history.push(url);\r\n\r\n    return (\r\n        <div className={isPositioned ? classes.containerAbsolute : classes.container} onClick={navigateToUrl}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LinkTo;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Mousetrap from \"mousetrap\";\r\n\r\ntype KeyMapsProps = {\r\n    backUrl: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst KeyMaps: React.FunctionComponent<KeyMapsProps> = (props: KeyMapsProps) => {\r\n    const { backUrl, children } = props;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string): void => history.push(url);\r\n\r\n    Mousetrap.bind(\"1\", () => navigateToUrl(\"/profile/1\"));\r\n    Mousetrap.bind(\"2\", () => navigateToUrl(\"/profile/2\"));\r\n    Mousetrap.bind(\"3\", () => navigateToUrl(\"/profile/3\"));\r\n    Mousetrap.bind(\"4\", () => navigateToUrl(\"/profile/4\"));\r\n    Mousetrap.bind([\"q\", \"Q\"], () => navigateToUrl(\"/quests\"));\r\n    Mousetrap.bind(\"esc\", () => navigateToUrl(backUrl));\r\n\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default KeyMaps;\r\n","export default class MockSaveService {\r\n    private static _currentSave = -1;\r\n\r\n    public setCurrentSave = (slot: number) => {\r\n        MockSaveService._currentSave = slot;\r\n        localStorage.setItem(\"currentSlot\", slot.toString());\r\n    };\r\n\r\n    public getCurrentSave = (): number => {\r\n        if (MockSaveService._currentSave > 0) return MockSaveService._currentSave;\r\n        const slot = localStorage.getItem(\"currentSlot\");\r\n\r\n        const slotId = slot ? Number.parseInt(slot) : 0;\r\n\r\n        MockSaveService._currentSave = slotId;\r\n\r\n        return slotId;\r\n    };\r\n\r\n    public markSlotUpdated = () => {\r\n        localStorage.setItem(this.getCurrentSave() + \"_time\", new Date().toString());\r\n    };\r\n\r\n    public getSlotUpdateTimes = (): (Date | null)[] => {\r\n        const slot1 = localStorage.getItem(\"0_time\");\r\n        const slot2 = localStorage.getItem(\"1_time\");\r\n        const slot3 = localStorage.getItem(\"2_time\");\r\n\r\n        const items: (Date | null)[] = [slot1 ? new Date(slot1) : null, slot2 ? new Date(slot2) : null, slot3 ? new Date(slot3) : null];\r\n\r\n        return items;\r\n    }\r\n\r\n    public deleteSlot = (slot: number) => {\r\n\r\n        if (slot === this.getCurrentSave()) {\r\n            throw new Error(\"Can't delete current save\");\r\n        }\r\n\r\n        localStorage.removeItem(slot + \"_time\");\r\n        localStorage.removeItem(slot + \"_state\");\r\n    }\r\n\r\n    public saveObject<T>(key: string, value: T) {\r\n        localStorage.setItem(this.getCurrentSave() + \"_\" + key, JSON.stringify(value));\r\n        this.markSlotUpdated();\r\n    }\r\n\r\n    public getObject<T>(key: string): T | undefined {\r\n        const json = localStorage.getItem(this.getCurrentSave() + \"_\" + key);\r\n        return json ? JSON.parse(json) : undefined;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        top: \"1vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"lightsteelblue\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n            backgroundColor: \"ghostwhite\",\r\n        },\r\n    },\r\n    cardDisabled: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkgrey\",\r\n    },\r\n    cardActive: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkseagreen\",\r\n    },\r\n});\r\n\r\nexport type MenuCard = {\r\n    title: string;\r\n    description: string;\r\n    enabled: boolean;\r\n    active?: boolean;\r\n    icon?: JSX.Element;\r\n    onSelected: () => void;\r\n};\r\n\r\ntype MenuCardsProps = {\r\n    items: MenuCard[];\r\n};\r\n\r\nconst MenuCards: React.FunctionComponent<MenuCardsProps> = (props: MenuCardsProps) => {\r\n    const classes = useStyles();\r\n\r\n    const selectClass = (i: MenuCard) => (i.active ? classes.cardActive : i.enabled ? classes.card : classes.cardDisabled);\r\n\r\n    const { items } = props;\r\n    const renderCards = () =>\r\n        items.map((i) => (\r\n            <Card className={selectClass(i)} onClick={i.onSelected}>\r\n                <CardHeader title={<Typography variant=\"h2\">{i.title}</Typography>} avatar={i.icon} />\r\n                <CardContent>{i.description}</CardContent>\r\n            </Card>\r\n        ));\r\n\r\n    return (\r\n        <Grid container className={classes.container}>\r\n            <Grid item xs={3}></Grid>\r\n            <Grid item xs={6}>\r\n                {renderCards()}\r\n            </Grid>\r\n            <Grid item xs={3}></Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MenuCards;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport SystemUpdateAltIcon from \"@material-ui/icons/SystemUpdateAlt\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\n\r\nimport LinkTo from '../components/LinkTo';\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport ElectronHelper from '../helpers/ElectronHelper';\r\nimport MockSaveService from '../services/MockSaveService';\r\nimport MenuCards, { MenuCard } from '../components/MenuCards';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"9vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n});\r\n\r\nconst MainMenu: React.FunctionComponent = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n\r\n    let history = useHistory();\r\n    const navigateToNewGame = () => history.push(\"/game/new\");\r\n    const navigateToLoadGame = () => history.push(\"/game/load\");\r\n    const navigateToDeleteGame = () => history.push(\"/game/delete\");\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    const onElectronExit = () => {\r\n        const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n        ipcRenderer.send(\"close-app\");\r\n    }\r\n\r\n    if (!saveTimes)\r\n        return null;\r\n\r\n    const slotCount = saveTimes.filter(s => s !== null).length;\r\n    const allSlotsFull = slotCount >= 3;\r\n    const oneSlotFull = slotCount === 1;\r\n\r\n    const items: MenuCard[] = [\r\n        {\r\n            title: \"New Game\",\r\n            description: \"Start a new game\" + (allSlotsFull ? \" (All slots full)\" : \"\"),\r\n            enabled: !allSlotsFull,\r\n            icon: <AddCircleOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToNewGame,\r\n        },\r\n        {\r\n            title: \"Load Game\",\r\n            description: \"Load a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <SystemUpdateAltIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToLoadGame,\r\n        },\r\n        {\r\n            title: \"Delete Game\",\r\n            description: \"Delete a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <DeleteOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToDeleteGame,\r\n        },\r\n    ];\r\n\r\n    // Add a quit option if running under Electron\r\n    if (ElectronHelper.isElectron()) {\r\n        items.push({\r\n            title: \"Quit\",\r\n            description: \"Exit the game\",\r\n            enabled: true,\r\n            icon: <ExitToAppIcon className={classes.cardIcon} />,\r\n            onSelected: onElectronExit,\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <MenuCards items={items} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\nimport CeramicHelm from \"./items/ceramic_helm.json\";\r\nimport CeramicArmor from \"./items/ceramic_armor.json\";\r\n\r\nexport default class MockItemService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude;\r\n            case \"hag_teeth\":\r\n                return HagTeeth;\r\n            case \"ceramic_helm\":\r\n                return CeramicHelm;\r\n            case \"ceramic_armor\":\r\n                return CeramicArmor;\r\n            case \"wolf_spear\":\r\n            default:\r\n                return WolfSpear;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import Attribute from \"../models/character/Attribute\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\nimport AttributeSimple from \"../models/character/AttributesSimple\";\r\n\r\nexport default class AttributeHelper {\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static convertSimpleToComplex = (attributes: AttributeSimple): AttributeList => {\r\n        const attributesComplex = {\r\n            strength: { base: attributes.strength, bonus: 0 },\r\n            dexterity: { base: attributes.dexterity, bonus: 0 },\r\n            constitution: { base: attributes.constitution, bonus: 0 },\r\n            intelligence: { base: attributes.intelligence, bonus: 0 },\r\n            wisdom: { base: attributes.wisdom, bonus: 0 },\r\n            charisma: { base: attributes.charisma, bonus: 0 },\r\n            luck: { base: attributes.luck, bonus: 0 },\r\n        };\r\n        return attributesComplex;\r\n    };\r\n\r\n    public static getModifier(attribute: Attribute): number {\r\n        const total = attribute.base + attribute.bonus;\r\n        if (total <= 1) return -5;\r\n        if (total <= 3) return -4;\r\n        if (total <= 5) return -3;\r\n        if (total <= 7) return -2;\r\n        if (total <= 9) return -1;\r\n        if (total <= 11) return 0;\r\n        if (total <= 13) return 1;\r\n        if (total <= 15) return 2;\r\n        if (total <= 17) return 3;\r\n        if (total <= 19) return 4;\r\n        if (total <= 21) return 5;\r\n        if (total <= 23) return 6;\r\n        if (total <= 25) return 7;\r\n        if (total <= 27) return 8;\r\n        return 9;\r\n    }\r\n}\r\n","import Trait from \"../models/character/Trait\";\r\n\r\nimport CompulsionKleptomaniac from \"./traits/compulsion_kleptomaniac.json\";\r\nimport PhobiaUndead from \"./traits/phobia_undead.json\";\r\nimport ResurrectionBotched from \"./traits/resurrection_botched.json\";\r\nimport ToughSkin from \"./traits/physical_tough_skin.json\";\r\n\r\nexport default class MockTraitService {\r\n    getTraitDetail(id: string): Trait {\r\n        switch (id) {\r\n            case \"phobia_undead\":\r\n                return PhobiaUndead;\r\n            case \"physical_tough_skin\":\r\n                return ToughSkin;\r\n            case \"resurrection_botched\":\r\n                return ResurrectionBotched;\r\n            case \"compulsion_kleptomaniac\":\r\n            default:\r\n                return CompulsionKleptomaniac;\r\n        }\r\n    }\r\n\r\n    getTraits = (ids: string[]): Trait[] => ids.map((id) => this.getTraitDetail(id));\r\n}\r\n","import Hero  from \"../models/character/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\nimport MockItemService from \"./MockItemService\";\r\nimport HeroData from \"../models/character/HeroData\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport MockSaveService from \"./MockSaveService\";\r\nimport CurrentStatus from \"../models/character/CurrentStats\";\r\nimport MockTraitService from \"./MockTraitService\";\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        const hero = this.getHeroData(id);\r\n        return MockHeroService.convertToDetailed(hero);\r\n    }\r\n\r\n    private static convertToDetailed(hero: HeroData): Hero {\r\n        const saveService = new MockSaveService();\r\n        const currentStatus = saveService.getObject<CurrentStatus>(\"heroStatus_\" + hero.id) ?? {\r\n            permanentTraits: hero.baseTraits,\r\n            temporaryTraits: [],\r\n            equippedItems: hero.equippedItems,\r\n            currentHitPoints: hero.baseHitPoints,\r\n            lostSpells: [],\r\n        };\r\n\r\n        const clone = {\r\n            id: hero.id,\r\n            name: hero.name,\r\n            description: hero.description,\r\n            background: hero.background,\r\n            imageUrl: hero.imageUrl,\r\n            tokenUrl: hero.tokenUrl,\r\n            tokenOffset: hero.tokenOffset,\r\n            abilities: hero.abilities,\r\n            alignment: hero.alignment,\r\n            level: hero.level,\r\n            attributes: AttributeHelper.convertSimpleToComplex(hero.attributes),\r\n            currentStatus: currentStatus,\r\n            // TODO: Fix this calculation\r\n            stats: {\r\n                status: 0,\r\n                armour: 10,\r\n                meleeAttackBonus: 0,\r\n                meleeAttackSpeed: 5,\r\n                meleeEffectId: \"Fists\",\r\n                meleeDamageBonus: 0,\r\n                rangedAttackBonus: 0,\r\n                rangedAttackSpeed: 5,\r\n                rangedEffectId: \"Bow\",\r\n                rangedDamageBonus: 0,\r\n                spellAttackBonus: 0,\r\n                spellAttackSpeed: 5,\r\n                spellDamageBonus: 0,\r\n                spells: hero.spells,\r\n                moveSpeed: 3,\r\n                maxHitPoints: hero.baseHitPoints,\r\n                spellResistance: 3,\r\n                damageResistance: 0,\r\n            },\r\n            spells: hero.spells,\r\n            behavior: [],\r\n        } as Hero;\r\n\r\n        return clone;\r\n    }\r\n\r\n    private getHeroData(id: string): HeroData {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroes: Hero[] = [\r\n        MockHeroService.convertToDetailed(Gyvwain),\r\n        MockHeroService.convertToDetailed(Balthazar),\r\n        MockHeroService.convertToDetailed(Gossamer),\r\n        MockHeroService.convertToDetailed(Gargamela),\r\n        MockHeroService.convertToDetailed(Justin),\r\n    ];\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return MockHeroService._heroes;\r\n    }\r\n\r\n    /*\r\n     * Equip an item in one of the equip slots\r\n     * If an item needs to be removed, return the item Id\r\n     */\r\n    equipItem(heroId: string, itemId: string): string | null {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const originalItem = itemService.getItemDetail(itemId);\r\n        if (!originalItem) throw new Error(\"Can't find original item\");\r\n\r\n        // Check if the hero already has an item of this type equipped\r\n        const items = itemService.getItems(heroMatch.currentStatus.equippedItems);\r\n        const itemWithSameType = items.find((item) => item.itemType === originalItem.itemType);\r\n\r\n        // TODO: We need special logic around equipable weapons\r\n\r\n        heroMatch.currentStatus.equippedItems.push(itemId);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n\r\n        if (!itemWithSameType) return null;\r\n\r\n        return itemWithSameType.id;\r\n    }\r\n\r\n    unequipItem(heroId: string, itemId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const item = itemService.getItemDetail(itemId);\r\n        if (!item) throw new Error(\"Can't find original item\");\r\n\r\n        // Remove the item\r\n        heroMatch.currentStatus.equippedItems = heroMatch.currentStatus.equippedItems.filter((i) => i !== item.id);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n    }\r\n\r\n    /*\r\n     * Equip an item in one of the equip slots\r\n     * If an item needs to be removed, return the item Id\r\n     */\r\n    addPermanentTrait(heroId: string, traitId: string, from: string): void {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const traitService = new MockTraitService();\r\n        const newTrait = traitService.getTraitDetail(traitId);\r\n        if (!newTrait) throw new Error(\"Can't find trait\");\r\n\r\n        // TODO: Check if the hero already has this trait?\r\n        const heroTrait = {\r\n            id: newTrait.id,\r\n            name: newTrait.name,\r\n            description: newTrait.description,\r\n            behavior: newTrait.behavior,\r\n            from: from,\r\n        } as HeroTrait;\r\n\r\n        // Skip if the hero already has the trait\r\n        if (heroMatch.currentStatus.permanentTraits.findIndex(t => t.id === traitId) >= 0)\r\n            return;\r\n\r\n        heroMatch.currentStatus.permanentTraits.push(heroTrait);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n    }\r\n\r\n    removePermanentTrait(heroId: string, traitId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        // Remove the trait\r\n        heroMatch.currentStatus.permanentTraits = heroMatch.currentStatus.permanentTraits.filter((i) => i.id !== traitId);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n    }\r\n}\r\n","import Hero from \"../models/character/Hero\";\r\nimport PartyQuest from \"../models/PartyQuest\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockHeroService from \"./MockHeroService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockPartyService {\r\n    getPartyStatistics(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static defaultHeroIds = (): string[] => [\r\n        \"gyvwain_the_chivalrous\",\r\n        \"balthazar_the_unblemished\",\r\n        \"gossamer\",\r\n        \"gargomela_the_black\",\r\n    ];\r\n\r\n    private static _heroIds: string[] | undefined = undefined;\r\n\r\n    getParty(): Hero[] {\r\n        const heroService = new MockHeroService();\r\n        const party = this.getPartyIds().map((id) => heroService.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    getPartyIds(): string[] {\r\n        if (MockPartyService._heroIds) {\r\n            return MockPartyService._heroIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const heroIds = saveService.getObject<string[]>(\"heroIds\") ?? MockPartyService.defaultHeroIds();\r\n\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        return MockPartyService._heroIds;\r\n    }\r\n\r\n    setPartyIds(heroIds: string[]): void {\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroIds\", heroIds);\r\n    }\r\n\r\n    private static defaultInventoryIds = (): string[] => [\"wolf_spear\", \"ceramic_helm\", \"ceramic_armor\"];\r\n\r\n    private static defaultStashIds = (): string[] => [\"hag_teeth\", \"token_of_servitude\"];\r\n\r\n    private static defaultQuests = (): PartyQuest[] => [\r\n        {\r\n            id: \"song_of_the_sea\",\r\n            status: \"current\",\r\n        },\r\n        {\r\n            id: \"there_and_back\",\r\n            status: \"active\",\r\n        },\r\n    ];\r\n\r\n    private static _inventoryItemIds: string[] | undefined = undefined;\r\n    private static _stashItemIds: string[] | undefined = undefined;\r\n\r\n    getInventory(): string[] {\r\n        if (MockPartyService._inventoryItemIds) {\r\n            return MockPartyService._inventoryItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const inventoryIds = saveService.getObject<string[]>(\"inventoryItemIds\") ?? MockPartyService.defaultInventoryIds();\r\n\r\n        MockPartyService._inventoryItemIds = inventoryIds;\r\n\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"inventoryItemIds\", itemIds);\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory();\r\n        inventoryItems.push(id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory().filter((i) => i !== id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._stashItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n\r\n        const stashIds = saveService.getObject<string[]>(\"stashItemIds\") ?? MockPartyService.defaultStashIds();\r\n\r\n        MockPartyService._stashItemIds = stashIds;\r\n\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"stashItemIds\", itemIds);\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        const items = this.getStash();\r\n        items.push(id);\r\n        this.setStash(items);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        const stashItems = this.getStash().filter((i) => i !== id);\r\n        this.setStash(stashItems);\r\n    }\r\n\r\n    private static _quests: PartyQuest[] = [];\r\n\r\n    getQuests(): PartyQuest[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._quests;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const quests = saveService.getObject<PartyQuest[]>(\"quests\") ?? MockPartyService.defaultQuests();\r\n\r\n        MockPartyService._quests = quests;\r\n\r\n        return MockPartyService._quests;\r\n    }\r\n\r\n    updateQuest(quest: PartyQuest) {\r\n        const saveService = new MockSaveService();\r\n        const quests = saveService.getObject<PartyQuest[]>(\"quests\") ?? MockPartyService.defaultQuests();\r\n        const newQuests = quests.filter((q) => q.id !== quest.id);\r\n        newQuests.push(quest);\r\n        saveService.saveObject(\"quests\", newQuests);\r\n        MockPartyService._quests = newQuests;\r\n    }\r\n\r\n    public clearCache() {\r\n        MockPartyService._heroIds = undefined;\r\n        MockPartyService._inventoryItemIds = undefined;\r\n        MockPartyService._stashItemIds = undefined;\r\n    }\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"./LinkTo\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        \"-webkit-app-region\": \"drag\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"2vh\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n    headerImg: {\r\n        width: \"7vh\",\r\n        height: \"7vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"5vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\n\r\nconst Header: React.FunctionComponent<HeaderProps> = (props: HeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = React.useState<Hero[] | null>(null); // The map graph data\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockPartyService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <LinkTo key={hero.id} url={`${process.env.PUBLIC_URL}/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </LinkTo>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                </LinkTo>\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import GameState from \"../models/GameState\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static defaultState = (): GameState => {\r\n        return {\r\n            currentMapId: \"town\",\r\n            currentVertextId: \"hut-road\", // \"scupperden-road\"\r\n            currentMapCovers: [],\r\n            currentTurn: 0,\r\n            seed: Math.random() * Number.MAX_SAFE_INTEGER\r\n        }\r\n    };\r\n\r\n    private static _state: GameState | undefined = undefined;\r\n\r\n    public getState(): GameState {\r\n        if (MockGameStateService._state != null) \r\n            return MockGameStateService._state;\r\n            \r\n        const saveService = new MockSaveService();\r\n        \r\n        const stateJson = localStorage.getItem(saveService.getCurrentSave() + \"_state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService.defaultState();\r\n\r\n        MockGameStateService._state = state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        const saveService = new MockSaveService();\r\n\r\n        MockGameStateService._state = state;\r\n        console.log(\"setState : \" + JSON.stringify(state));\r\n        localStorage.setItem(saveService.getCurrentSave() + \"_state\", JSON.stringify(state));\r\n        saveService.markSlotUpdated();\r\n    }\r\n\r\n    public clearCache() {\r\n        MockGameStateService._state = undefined;\r\n    }\r\n}\r\n","import AttributeList from \"./AttributeList\";\r\nimport CalculatedStats from \"./CalculatedStats\";\r\nimport CharacterBehavior from \"./CharacterBehavior\";\r\nimport CurrentStatus from \"./CurrentStats\";\r\n\r\nexport enum Alignment {\r\n    Lawful = 0,\r\n    Neutral = 1,\r\n    Chaotic = 2,\r\n}\r\n\r\n/**\r\n * Special ongoing status effects on a character\r\n * \r\n * Limit this list for now and add one at a time slowly\r\n * TODO: Sleeping, Petrified, Paralysed (Are these just Stunned with other modifiers?)\r\n */\r\nexport enum StatusFlags {\r\n    None = 0x00,\r\n    Stunned = 0x01,\r\n    Poisoned = 0x04,\r\n    Bleeding = 0x08,\r\n    Terrified = 0x10,\r\n    Charmed = 0x20,\r\n}\r\n\r\nexport enum AbilityFlags {\r\n    None = 0x00,\r\n    Sorcery = 0x01,\r\n    Stealth = 0x02,\r\n    Perception = 0x04,\r\n    PatronBond = 0x08,\r\n    Survival = 0x10,\r\n    Devices = 0x20,\r\n    Acrobatics = 0x40,\r\n}\r\n\r\n// TODO: Split hero into core stats & calculated (view) ?\r\nexport default interface Hero {\r\n    // ID of the hero\r\n    id: string;\r\n\r\n    // Display name of the hero\r\n    name: string;\r\n\r\n    /** Short description of the hero */\r\n    description: string;\r\n\r\n    // Origins of the hero\r\n    background: string;\r\n\r\n    /** Portrait image location */\r\n    imageUrl: string;\r\n\r\n    /** Map token image location */\r\n    tokenUrl: string;\r\n\r\n    /** Offset to display the token at */\r\n    tokenOffset: number[];\r\n\r\n    // Hero attributes\r\n    attributes: AttributeList;\r\n\r\n    // Any special states\r\n    currentStatus: CurrentStatus;\r\n\r\n    stats: CalculatedStats;\r\n\r\n    abilities: AbilityFlags;\r\n\r\n    alignment: Alignment;\r\n\r\n    behavior: CharacterBehavior[];\r\n\r\n    level: number;\r\n\r\n    spells: string[];\r\n}\r\n\r\n","import Trait from \"./character/Trait\";\r\n\r\nexport enum ItemType {\r\n    Usable = 1,\r\n    Quest = 2,\r\n    WearableHead = 10,\r\n    WearableBody = 11,\r\n    WearableArms = 12,\r\n    WearableFeet = 13,\r\n    WeaponMelee1h = 20,\r\n    WeaponMelee2h = 21,\r\n    WeaponRanged1h = 22,\r\n    WeaponRanged2h = 23,\r\n    Shield = 24,\r\n}\r\n\r\nexport default interface Item {\r\n    /** ID of the item */\r\n    id: string;\r\n\r\n    /** Name of the item */\r\n    name: string;\r\n\r\n    /** Text description for the item */\r\n    description: string;\r\n\r\n    /** URL of the image to display for the item */\r\n    imageUrl: string;\r\n\r\n    /** The type of item */\r\n    itemType: ItemType;\r\n\r\n    /** For weapons, the attack effect table to use */\r\n    effectTable?: string;\r\n\r\n    /** Item traits */\r\n    traits: Trait[];\r\n}","\r\nexport enum TraitType {\r\n    Uncategorised = 0,\r\n    Mental = 1,\r\n    Mystical = 2,\r\n    Physical = 3,\r\n    Item = 4,\r\n    // MentalPhobia = 100,\r\n    // MysticalCurse = 200,\r\n};\r\n\r\nexport enum ModifierType {\r\n    None = 0,\r\n    Strength = 10,\r\n    Dexterity = 11,\r\n    Constitution = 12,\r\n    Intelligence = 13,\r\n    Wisdom = 14,\r\n    Charisma = 15,\r\n    Luck = 16,\r\n    HitPoints = 20,\r\n    Armor = 22,\r\n    SpellResistance = 23,\r\n    MoveSpeed = 24,\r\n    MeleeAttackSpeed = 25,\r\n    MeleeAttack = 26,\r\n    MeleeEffect = 27,\r\n    MeleeDamage = 28,\r\n    RangedAttackSpeed = 29,\r\n    RangedAttack = 30,\r\n    RangedEffect = 31,\r\n    RangedDamage = 32,\r\n    SpellAttackSpeed = 33,\r\n    SpellAttack = 34,\r\n    SpellDamage = 35,\r\n    DamageResistance = 33,\r\n    MeleeChanceForParalysis = 50,\r\n    MeleeChanceForPoisoned = 51,\r\n    MeleeChanceForBleeding = 52,\r\n    MeleeChanceForTerrified = 53,\r\n    MeleeChanceForCharmed = 54,\r\n    RangedChanceForParalysis = 60,\r\n    RangedChanceForPoisoned = 61,\r\n    RangedChanceForBleeding = 62,\r\n    RangedChanceForTerrified = 63,\r\n    RangedChanceForCharmed = 64,\r\n    AddAbility = 100,\r\n    RemoveAbility = 101, // Items can prevent abilities being used (e.g. Armor prevents Sorcery)\r\n    AbilitySorcery = 110,\r\n    AbilityStealth = 111,\r\n    AbilityPerception = 112,\r\n    AbilityPatronBond = 113,\r\n    AbilitySurvival = 114,\r\n    AbilityDevices = 115,\r\n    AbilityAcrobatics = 116,\r\n    /** Add a status effect to the character */\r\n    Status = 200,\r\n    /** Character is immune to this type of status effects */\r\n    StatusImmunity = 201,\r\n};\r\n\r\nexport interface TraitEffect {\r\n\r\n    modifierType: ModifierType;\r\n\r\n    modifierValue: string;\r\n}\r\n\r\nexport default interface Trait {\r\n    /** Unique Identifier for the trait */\r\n    id: string;\r\n\r\n    /** A name for the trait */\r\n    name: string;\r\n\r\n    /** A longer description for the trait */\r\n    description: string;\r\n\r\n    /** The type of trait */\r\n    type: TraitType;\r\n\r\n    /** What does it do */\r\n    behavior: TraitEffect[];\r\n}\r\n","import Leaflet from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            coverUrls: json.coverUrls,\r\n            useDayNight: json.useDayNight,\r\n            pathColor: json.pathColor,\r\n            vertices: json.vertices.map((v: any) => {\r\n                return {\r\n                    id: v.id,\r\n                    position: Leaflet.latLng(v.position[0], v.position[1]),\r\n                    clickRadius: v.clickRadius,\r\n                    encounterId: v.encounterId,\r\n                    marker: v.marker,\r\n                    exitId: v.exitId,\r\n                    coverIds: v.coverIds,\r\n                } as MapVertex;\r\n            }),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\nimport CustomMarker from \"./CustomMarker\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): Node<NodeData> | null => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n    marker?: CustomMarker;\r\n    /** The cover layer to obscure this vertex */\r\n    coverIds?: number[];\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n                marker: item.marker,\r\n                coverIds: item.coverIds,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","import MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockVariableService {\r\n    getVariable(id: string): string | undefined {\r\n        const saveService = new MockSaveService();\r\n        return saveService.getObject<string>(id);\r\n    }\r\n\r\n    setVariable(id: string, value: string) {\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject<string>(id, value);\r\n    }\r\n}\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { IntValue, StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\n// Temple dark flame\r\nimport TheInterceptContent from \"./encounters/temple_dark_flame/TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/temple_dark_flame/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/temple_dark_flame/chasm.ink.json\";\r\nimport storeRoomContent from \"./encounters/temple_dark_flame/store-room.ink.json\";\r\nimport dartTrapContent from \"./encounters/temple_dark_flame/dart-trap.ink.json\";\r\n\r\n// Squall's End\r\nimport homeContent from \"./encounters/squalls_end/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/squalls_end/nine-bells.ink.json\";\r\nimport brawlContent from \"./encounters/squalls_end/brawl.ink.json\";\r\nimport squallsEndEntryContent from \"./encounters/squalls_end/squalls-end-entry.ink.json\";\r\nimport MockVariableService from \"./MockVariableService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        let json: any = undefined;\r\n\r\n        switch (id) {\r\n            case \"hoard\":\r\n            case \"wet-room\":\r\n            case \"intercept\":\r\n                json = TheInterceptContent;\r\n                break;\r\n            case \"common-room\":\r\n                json = commonRoomContent;\r\n                break;\r\n            case \"chasm\":\r\n                json = chasmContent;\r\n                break;\r\n            case \"warrens\":\r\n                json = TheInterceptContent;\r\n                break;\r\n            case \"home\":\r\n                json = homeContent;\r\n                break;\r\n            case \"store-room\":\r\n                json = storeRoomContent;\r\n                break;\r\n            case \"nine-bells\":\r\n                json = nineBellsContent;\r\n                break;\r\n            case \"brawl\":\r\n                json = brawlContent;\r\n                break;\r\n            case \"slumberton-entry\":\r\n                json = squallsEndEntryContent;\r\n                break;\r\n            case \"dart-trap\":\r\n                json = dartTrapContent;\r\n                break;\r\n            default:\r\n                json = undefined;\r\n        }\r\n\r\n        this.currentStory = json ? new Story(json) : new Story(MockStoryEncounterService.createEmptyStory());\r\n        this.currentId = id;\r\n\r\n        const saveService = new MockSaveService();\r\n        const storyStateJson = saveService.getObject<string>(\"enc_\" + this.currentId);\r\n\r\n        if (storyStateJson) {\r\n            this.currentStory.state.LoadJson(storyStateJson);\r\n            this.currentStory.state.GoToStart();\r\n        }\r\n\r\n        // Extract the Title from the JSON file. It should be in the form \"# title: My Encounter\"\r\n        const tags = this.currentStory.globalTags;\r\n        const titleTag = tags ? tags.find((t) => t.startsWith(\"title:\")) : undefined;\r\n\r\n        this.currentTitle = titleTag ? titleTag.substring(6).trimStart() : \"Encounter\";\r\n\r\n        // Check if there is a skip variable to skip this encounter\r\n        const variableService = new MockVariableService();\r\n        const skipVariableTag = tags ? tags.find((t) => t.startsWith(\"skip-variable:\")) : undefined;\r\n        const skipVariable = skipVariableTag ? skipVariableTag.substring(14).trimStart() : undefined;\r\n        if (skipVariable) {\r\n            const result = variableService.getVariable(skipVariable);\r\n            if (result === \"true\") {\r\n                 return MockStoryEncounterService.createEmptyStory();\r\n            }\r\n        }\r\n\r\n        // Imported local variarbles for use in the encounter\r\n        const imports = tags ? tags.filter((t) => t.startsWith(\"import:\")).map((t) => t.substring(6).trimStart()) : [];\r\n        const importedVariables = imports.join(\",\").split(\",\");\r\n\r\n        const variableValues = importedVariables.map((v) => [v, variableService.getVariable(v)]).filter((v) => v[1] !== undefined);\r\n\r\n        // Assign quest & global variables\r\n        if (this.currentStory != null) {\r\n            variableValues.forEach((v) => (v[0] && v[1] ? this.currentStory?.variablesState.SetGlobal(v[0], new StringValue(v[1])) : null));\r\n        }\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            const coverVisible = this.currentStory.variablesState.GetVariableWithName(\"coverVisible\") as IntValue;\r\n            \r\n            const storyState = this.currentStory.state.toJson(false);\r\n\r\n            const saveService = new MockSaveService();\r\n            saveService.saveObject<string>(\"enc_\" + this.currentId, storyState);\r\n\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value ?? undefined,\r\n                    detailedEncounter: detailedEncounter?.value ?? undefined,\r\n                    coverVisible: coverVisible?.value ?? undefined,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map((c: Choice) => {\r\n            return {\r\n                index: c.index,\r\n                text: c.text,\r\n            } as InkStoryChoice;\r\n        });\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    party: {\r\n        padding: \"0 30px\",\r\n        //position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroListProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\n/*\r\n * The selection of heroes one the menu bar\r\n */\r\nconst HeroList: React.FunctionComponent<HeroListProps> = (props: HeroListProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    let [heroes, setHeroes] = React.useState<Hero[] | null>(null); // The map graph data\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        if (!onSelectionChanged)\r\n            return;\r\n\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3} style={{ textAlign: \"center\" }}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.party}>\r\n            <Grid container>{renderParty()}</Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeroList;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport HeroList from \"../HeroList\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype PartySelectProps = {\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\nconst PartySelect: React.FunctionComponent<PartySelectProps> = (props: PartySelectProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [heroIds, setHeroIds] = React.useState<string[]>([]);\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = heroIds.length === 4;\r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid) return;\r\n\r\n        const service = new MockPartyService();\r\n        service.setPartyIds(heroIds);\r\n        props.onReady();\r\n        setIsApplied(true);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <HeroList chooseAll={true} multiSelect={true} onSelectionChanged={isApplied ? undefined : selectionChanged} />\r\n            </div>\r\n            <Tooltip title={isApplied ? \"Changes applied\" : isValid ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button\r\n                        className={classes.partyButton}\r\n                        onClick={changeParty}\r\n                        disabled={!isValid || isApplied}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<DoneIcon />}\r\n                    >\r\n                        {isApplied ? \"Selected\" : \"Select\"}\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartySelect;\r\n","import React from \"react\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroList from \"../HeroList\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype HeroSelectProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\n/*\r\n* The selection of heroes one the menu bar\r\n*/\r\nconst HeroSelector: React.FunctionComponent<HeroSelectProps> = (props: HeroSelectProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [heroId, setHeroId] = React.useState<string | undefined>(undefined);\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n\r\n    const isValid = heroId !== undefined;\r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid) return;\r\n\r\n        // TODO: Save the selected hero somehow to the encounter variables?\r\n        props.onReady();\r\n        setIsApplied(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <HeroList chooseAll={props.chooseAll} multiSelect={props.multiSelect} onSelectionChanged={props.onSelectionChanged} />\r\n            </div>\r\n            <Tooltip title={isApplied ? \"Hero selected\" : isValid ? \"Hero selected\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button\r\n                        className={classes.partyButton}\r\n                        onClick={changeParty}\r\n                        disabled={!isValid || isApplied}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<DoneIcon />}\r\n                    >\r\n                        {isApplied ? \"Selected\" : \"Select\"}\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport MockHeroService from \"../../services/MockHeroService\";\r\nimport HeroList from \"../HeroList\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype HeroDismissProps = {\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\nconst HeroDismiss: React.FunctionComponent<HeroDismissProps> = (props: HeroDismissProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const [heroId, setHeroId] = React.useState(\"\");\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n        if (ids.length > 0) setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = heroId.length > 0;\r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid) return;\r\n\r\n        const service = new MockHeroService();\r\n\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n        props.onReady();\r\n        setIsApplied(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <HeroList chooseAll={true} onSelectionChanged={isApplied ? undefined : selectionChanged} />\r\n            </div>\r\n            <Tooltip title={isValid ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button\r\n                        className={classes.partyButton}\r\n                        onClick={dismissHero}\r\n                        disabled={!isValid || isApplied}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<ExitToAppIcon />}\r\n                    >\r\n                        {isApplied ? \"Dismissed\" : \"Dismiss\"}\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeroDismiss;\r\n","import { AbilityFlags, Alignment } from \"../models/character/Hero\";\r\nimport { ItemType } from \"../models/Item\";\r\nimport { ModifierType } from \"../models/character/Trait\";\r\nimport Resources from \"../resources.en.json\";\r\n\r\nexport default class StringConverters {\r\n    private static resourceMap: any = null;\r\n\r\n    static getResources(): any {\r\n        if (!StringConverters.resourceMap) {\r\n            // TODO: This is silly\r\n            StringConverters.resourceMap = JSON.parse(JSON.stringify(Resources));\r\n        }\r\n\r\n        return StringConverters.resourceMap;\r\n    }\r\n\r\n    static alignmentToString = (alignment: Alignment): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"Alignment_\" + Alignment[alignment];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static modifierToString = (modifierType: ModifierType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ModifierType_\" + ModifierType[modifierType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static itemTypeText = (itemType: ItemType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ItemType_\" + ItemType[itemType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static abilitiesToString = (abilities: AbilityFlags): string => {\r\n        if (abilities === AbilityFlags.None) return \"None\";\r\n\r\n        const output: string[] = [];\r\n\r\n        if (abilities & AbilityFlags.Acrobatics) output.push(\"Acrobatics\");\r\n        if (abilities & AbilityFlags.Devices) output.push(\"Disable/Modify Devices\");\r\n        if (abilities & AbilityFlags.PatronBond) output.push(\"Patron Bond\");\r\n        if (abilities & AbilityFlags.Perception) output.push(\"Perception\");\r\n        if (abilities & AbilityFlags.Sorcery) output.push(\"Sorcery\");\r\n        if (abilities & AbilityFlags.Stealth) output.push(\"Stealth\");\r\n        if (abilities & AbilityFlags.Survival) output.push(\"Survival\");\r\n\r\n        return output.join(\", \");\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport Item from \"../models/Item\";\r\nimport Trait, { TraitEffect } from \"../models/character/Trait\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        padding: \"5px\",\r\n    },\r\n    description: {\r\n        padding: \"10px\",\r\n        margin: \"10px 0\",\r\n        backgroundColor: \"#999\",\r\n    },\r\n    itemType: {\r\n        padding: \"500px 10px 0 10px\",\r\n        margin: \"100px 0 0 0 \",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n    traits: {\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n});\r\n\r\ntype ItemTooltipContentProps = {\r\n    item: Item | undefined;\r\n};\r\n\r\nconst ItemTooltipContent: React.FunctionComponent<ItemTooltipContentProps> = (props: ItemTooltipContentProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { item } = props;\r\n\r\n    const renderTraits = (traits: Trait[]): JSX.Element => {\r\n        let traitJsx: JSX.Element[] = [];\r\n        for (let i = 0; i < traits.length; i++) {\r\n            const newTraits = renderBehaviors(traits[i].behavior);\r\n            traitJsx = traitJsx.concat(newTraits);\r\n        }\r\n        return <div>{traitJsx}</div>;\r\n    };\r\n\r\n    const renderBehaviors = (effects: TraitEffect[]): JSX.Element[] => {\r\n        return effects.map((e) => (\r\n            <p>\r\n                {e.modifierValue} {StringConverters.modifierToString(e.modifierType)}\r\n            </p>\r\n        ));\r\n    };\r\n\r\n    if (!item) return <p>\"None\"</p>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography className={classes.title} color=\"inherit\">\r\n                {item.name}\r\n            </Typography>\r\n            <p className={classes.description}>{item.description}</p>\r\n            <Typography className={classes.itemType}>{StringConverters.itemTypeText(item.itemType)}</Typography>\r\n            <Typography className={classes.traits} align=\"right\">\r\n                {renderTraits(item.traits)}\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemTooltipContent;\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\nimport Item from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    selected: boolean[],\r\n    onSelectionChanged?: (itemId: string) => void;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: React.FunctionComponent<InventorySelectorProps> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { selected, onSelectionChanged, items, multiSelect } = props;\r\n\r\n    console.log(selected);\r\n\r\n    const renderInventory = () => {\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={item.id}>\r\n                    <Tooltip title={<ItemTooltipContent item={item} />} key={index} arrow>\r\n                        <img\r\n                            src={item.imageUrl}\r\n                            id={index.toString()}\r\n                            onClick={() => onSelectionChanged ? onSelectionChanged(item.id) : null}\r\n                            className={imgClass}\r\n                            alt={item.name}\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map((i) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={index.toString()}>\r\n                    <Tooltip title={\"Nothing\"} key={index}>\r\n                        <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InventorySelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"../InventorySelector\";\r\nimport Item from \"../../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    lootImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype ItemSelectProps = {\r\n    /** The item list */\r\n    items: Item[];\r\n\r\n    /** The inventory items */\r\n    inventory: Item[];\r\n\r\n    /** True to indicate stash in UI */\r\n    useStash: boolean;\r\n\r\n    /** Item was removed from inventory */\r\n    onPut: (itemIds: string[]) => void;\r\n\r\n    /** Item was added to party inventory */\r\n    onTake: (itemIds: string[]) => void;\r\n};\r\n\r\nconst ItemSelect: React.FunctionComponent<ItemSelectProps> = (props: ItemSelectProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, inventory, useStash } = props;\r\n\r\n    // TODO: Move to use indexes!! Otherwise we lose track of item doubles with the same ID\r\n    const [itemsSelected, setItemsSelected] = React.useState<boolean[]>([]);\r\n    const [inventorySelected, setInventorySelected] = React.useState<boolean[]>([]);\r\n\r\n    const maxItems = 8;\r\n\r\n    const itemSelectionChanged = (id: string) => {\r\n        const match = items.find(i => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = items.indexOf(match);\r\n        if (index < 0) return;\r\n\r\n        // Use a new array to leat react know that it changed\r\n        const newItemsSelected = itemsSelected.splice(0);\r\n        newItemsSelected[index] = !newItemsSelected[index];\r\n        setItemsSelected(newItemsSelected);\r\n    };\r\n\r\n    const inventorySelectionChanged = (id: string) => {\r\n        const match = inventory.find((i) => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = inventory.indexOf(match);\r\n        if (index < 0) return;\r\n\r\n        // Use a new array to leat react know that it changed\r\n        const newInventorySelected = inventorySelected.splice(0);\r\n        newInventorySelected[index] = !newInventorySelected[index];\r\n        setInventorySelected(newInventorySelected);\r\n    };\r\n\r\n    const itemsSelectedCount = itemsSelected.filter(i => i === true).length;\r\n    const inventorySelectedCount = inventorySelected.filter((i) => i === true).length;\r\n\r\n    const isItemSelected = itemsSelectedCount > 0;\r\n    const isInventorySelected = inventorySelectedCount > 0;\r\n\r\n    const willItemsBeTooBig = (): boolean => items.length + inventorySelectedCount > maxItems;\r\n    const willInventoryBeTooBig = (): boolean => inventory.length + itemsSelectedCount > maxItems;\r\n\r\n    const deselectAll = () => {\r\n        setItemsSelected([false, false, false, false, false, false, false, false]);\r\n        setInventorySelected([false, false, false, false, false, false, false, false]);\r\n    };\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isItemSelected) return;\r\n\r\n        const takeItems: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (itemsSelected[i]) {\r\n                takeItems.push(items[i].id);\r\n            }\r\n        }\r\n        props.onTake(takeItems);\r\n        deselectAll();\r\n    };\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected) return;\r\n\r\n        const putItems: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (inventorySelected[i]) {\r\n                putItems.push(inventory[i].id);\r\n            }\r\n        }\r\n        props.onPut(putItems);\r\n        deselectAll();\r\n    };\r\n\r\n    const lootSourceName = useStash ? \"stash\" : \"loot\";\r\n\r\n    const itemToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in inventory\";\r\n\r\n        return isItemSelected ? `Take item from the ${lootSourceName}` : `Please select a ${lootSourceName} item`;\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return `Too many items in ${lootSourceName}`;\r\n\r\n        return isInventorySelected ? `Put item in the ${lootSourceName}` : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src={`./images/${lootSourceName}.png`} alt={lootSourceName} className={classes.lootImg} />\r\n                <InventorySelector items={items} multiSelect={true} onSelectionChanged={itemSelectionChanged} selected={itemsSelected} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={itemToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isItemSelected}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willItemsBeTooBig() || !isInventorySelected}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector\r\n                    items={inventory}\r\n                    multiSelect={true}\r\n                    onSelectionChanged={inventorySelectionChanged}\r\n                    selected={inventorySelected}\r\n                />\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ItemSelect;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport Item from \"../../models/Item\";\r\nimport MockItemService from \"../../services/MockItemService\";\r\nimport ItemSelect from \"./ItemSelect\";\r\n\r\nconst useStyles = makeStyles({});\r\n\r\ntype StashProps = {};\r\n\r\nconst Stash: React.FunctionComponent<StashProps> = (props: StashProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [stashItems, setStashItems] = React.useState<Item[] | null>(null);\r\n    const [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    if (!stashItems || !inventoryItems) return null;\r\n\r\n    const takeItem = (ids: string[]) => {\r\n        const partyService = new MockPartyService();\r\n        let newStashItems = stashItems.splice(0);\r\n        const newInventoryItems = inventoryItems.splice(0);\r\n\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const item = newStashItems.find((item) => item.id === ids[i]);\r\n            if (!item)\r\n                throw new Error(\"Item not found\");\r\n\r\n            newInventoryItems.push(item);\r\n            newStashItems = newStashItems.filter(i => i.id !== item.id);\r\n            partyService.removeStashItem(ids[i]);\r\n            partyService.addInventoryItem(ids[i]);\r\n        }\r\n\r\n        setInventoryItems(newInventoryItems);\r\n        setStashItems(newStashItems);\r\n    };\r\n\r\n    const putItem = (ids: string[]) => {\r\n        const newStashItems = stashItems.splice(0);\r\n        let newInventoryItems = inventoryItems.splice(0);\r\n\r\n        const partyService = new MockPartyService();\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const item = newInventoryItems.find((item) => item.id === ids[i]);\r\n            if (!item)\r\n                throw new Error(\"Item not found\");\r\n\r\n            newStashItems.push(item);\r\n            newInventoryItems = newInventoryItems.filter((i) => i.id !== item.id);\r\n            partyService.removeInventoryItem(ids[i]);\r\n            partyService.addStashItem(ids[i]);\r\n        }\r\n\r\n        setInventoryItems(newInventoryItems);\r\n        setStashItems(newStashItems);\r\n    };\r\n\r\n    return <ItemSelect items={stashItems} inventory={inventoryItems} useStash={true} onPut={putItem} onTake={takeItem} />;\r\n};\r\n\r\nexport default Stash;\r\n","import React from \"react\";\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, ListItemText, Grid } from \"@material-ui/core\";\r\n\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\n\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\n\r\nconst useStyles = makeStyles({\r\n    selected: {\r\n        margin: \"5px\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"4px\",\r\n        border: \"solid steelblue 4px\",\r\n    },\r\n    notSelected: {\r\n        margin: \"5px\",\r\n        borderRadius: \"4px\",\r\n        border: \"solid white 4px\",\r\n    },\r\n});\r\n\r\ntype TraitListProps = {\r\n    traits: HeroTrait[];\r\n    onSelect?: (trait: HeroTrait) => void;\r\n};\r\n\r\nconst TraitList: React.FunctionComponent<TraitListProps> = (props: TraitListProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { traits } = props;\r\n    const [selectedTrait, setSelectedTrait] = React.useState<HeroTrait | undefined>(undefined);\r\n\r\n    const renderTraitIcon = (t: HeroTrait) => {\r\n        switch (t.type) {\r\n            case 1: // Mental\r\n                return <FaceIcon />;\r\n            case 2: // Mystical\r\n                return <FlashOnIcon />;\r\n            case 3: // Physical\r\n                return <AccessibilityNewIcon />;\r\n            case 4: // Item\r\n                return <AllInboxIcon />;\r\n            default:\r\n                return <AllInboxIcon />;\r\n        }\r\n    };\r\n\r\n    const onSelect = (trait: HeroTrait) => {\r\n        if (props.onSelect) {\r\n            console.log(\"select : \" + trait.id);\r\n            if (selectedTrait === undefined || trait.id !== selectedTrait.id) {\r\n                setSelectedTrait(trait);\r\n                props.onSelect(trait);\r\n            }\r\n        }\r\n    };\r\n\r\n    const renderTrait = (t: HeroTrait) => (\r\n        <ListItem\r\n            key={t.id}\r\n            className={selectedTrait !== undefined && t.id === selectedTrait.id ? classes.selected : classes.notSelected}\r\n            onClick={() => onSelect(t)}\r\n        >\r\n            <ListItemAvatar>\r\n                <Avatar>{renderTraitIcon(t)}</Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={t.name} secondary={t.from ?? t.description} />\r\n        </ListItem>\r\n    );\r\n\r\n    return <List dense={true}>{traits.map((t) => renderTrait(t))}</List>;\r\n};\r\n\r\nexport default TraitList;\r\n","import React from \"react\";\r\nimport { Grid, makeStyles, Tooltip, Button } from \"@material-ui/core\";\r\n\r\nimport MockTraitService from \"../../services/MockTraitService\";\r\nimport Trait from \"../../models/character/Trait\";\r\nimport TraitList from \"../TraitList\";\r\nimport HeroTrait from \"../../models/character/HeroTrait\";\r\nimport HeroList from \"../HeroList\";\r\nimport MockHeroService from \"../../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        //position: \"relative\",\r\n    },\r\n    party: {\r\n        padding: \"0 30px\",\r\n        width: \"90%\",\r\n    },\r\n    traits: {\r\n        padding: \"0 30px\",\r\n        width: \"90%\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    traitsBlock: {\r\n        padding: \"10px 0\",\r\n    },\r\n    button: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    buttonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype TraitSelectProps = {\r\n    /** The trait selection list */\r\n    traitIds: string[];\r\n\r\n    /** Where is the trait from */\r\n    from: string;\r\n\r\n    /** Use a luck roll to choose a trait */\r\n    isRandomTrait: boolean;\r\n\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\n/*\r\n * Select a trait, or just give a trait to a hero\r\n */\r\nconst TraitSelect: React.FunctionComponent<TraitSelectProps> = (props: TraitSelectProps) => {\r\n    const classes = useStyles();\r\n    const { traitIds } = props;\r\n\r\n    const [traits, setTraits] = React.useState<Trait[] | undefined>(undefined);\r\n    const [heroId, setHeroId] = React.useState<string | undefined>(undefined);\r\n    const [selectedTrait, setSelectedTrait] = React.useState<string | undefined>(undefined);\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of traits\r\n        const loadTraits = () => {\r\n            const service = new MockTraitService();\r\n            const newTraits = service.getTraits(traitIds);\r\n            if (!newTraits) {\r\n                console.error(`No trait data`);\r\n                return;\r\n            }\r\n\r\n            setTraits(newTraits);\r\n        };\r\n\r\n        if (traits == undefined) {\r\n            loadTraits();\r\n        }\r\n    });\r\n\r\n    const onHeroSelect = (ids: string[]) => {\r\n        if (ids.length > 0) {\r\n            setHeroId(ids[0]);\r\n        }\r\n    };\r\n\r\n    const onSelect = (trait: Trait) => {\r\n        // TODO: Assign the trait to the selected hero?\r\n        setSelectedTrait(trait.id);\r\n    };\r\n\r\n    const renderTraits = () => {\r\n        if (!traits) return null;\r\n\r\n        return (\r\n            <Grid container className={classes.traitsBlock}>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid item xs={10}>\r\n                    <TraitList onSelect={isApplied ? undefined : onSelect} traits={traits.map((t) => t as HeroTrait)} />\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const isValid = selectedTrait !== undefined && heroId !== undefined;\r\n\r\n    const onApply = () => {\r\n        if (heroId && selectedTrait) {\r\n            var service = new MockHeroService();\r\n            service.addPermanentTrait(heroId, selectedTrait, props.from);\r\n            props.onReady();\r\n            setIsApplied(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <HeroList onSelectionChanged={isApplied ? undefined : onHeroSelect} />\r\n            </div>\r\n            <div className={classes.traits}>\r\n                <Grid container>{renderTraits()}</Grid>\r\n            </div>\r\n            <Tooltip title={isApplied ? \"Trait has been applied\" : isValid ? \"Apply this trait to the hero\" : \"Select a trait and a hero\"}>\r\n                <div className={classes.buttonDiv}>\r\n                    <Button\r\n                        className={classes.button}\r\n                        onClick={onApply}\r\n                        disabled={!isValid || isApplied}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        {isApplied ? \"Applied\" : \"Apply\"}\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TraitSelect;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\n\r\nimport InventorySelector from \"../InventorySelector\";\r\nimport Item from \"../../models/Item\";\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport MockItemService from \"../../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventorySelectProps = {\r\n    onReady: () => void;\r\n};\r\n\r\nconst PartyInventorySelect: React.FunctionComponent<PartyInventorySelectProps> = (props: PartyInventorySelectProps) => {\r\n    \r\n    const classes = useStyles();\r\n    const [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n    const [isApplied, setIsApplied] = React.useState<boolean>(false);\r\n    const [inventorySelected, setInventorySelected] = React.useState<boolean[]>([]);\r\n\r\n    React.useEffect(() => {\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const inventorySelectionChanged = (id: string) => {\r\n        if (!inventoryItems) return; \r\n        \r\n        const match = inventoryItems.find((i) => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = inventoryItems.indexOf(match);\r\n        if (index < 0) return;\r\n\r\n        const newInventorySelected = inventorySelected.splice(0);\r\n        newInventorySelected[index] = !newInventorySelected[index];\r\n        setInventorySelected(newInventorySelected);\r\n    }\r\n\r\n    if (!inventoryItems) return null;\r\n\r\n    const inventorySelectedCount = inventorySelected.filter((i) => i === true).length;\r\n    const isInventorySelected = inventorySelectedCount > 0;\r\n\r\n    const selectedIndex = inventorySelected.indexOf(true);\r\n    const selectedItem = inventoryItems[selectedIndex];\r\n    \r\n    const isItemSelectable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    const onSelectItem = () => {\r\n        if (!isInventorySelected) return;\r\n\r\n        //if (onEquipItem) onEquipItem(inventorySelectedIds[0]);\r\n\r\n        props.onReady();\r\n        setIsApplied(true);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected) return \"Please select an inventory item\";\r\n\r\n        return isItemSelectable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector\r\n                    items={inventoryItems}\r\n                    onSelectionChanged={isApplied ? undefined : inventorySelectionChanged}\r\n                    selected={inventorySelected}\r\n                />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={onSelectItem}\r\n                            disabled={!isInventorySelected || isApplied}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<DoneIcon />}\r\n                        >\r\n                            {isApplied ? \"Selected\" : \"Select\"}\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventorySelect;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockPartyService from \"../../services/MockPartyService\";\r\nimport MockItemService from \"../../services/MockItemService\";\r\nimport Item from \"../../models/Item\";\r\nimport ItemSelect from \"./ItemSelect\";\r\n\r\nconst useStyles = makeStyles({\r\n});\r\n\r\ntype ItemSelectorProps = {\r\n    /** The trait selection list */\r\n    itemIds: string[];\r\n\r\n    /** Use a luck roll to choose an item */\r\n    isRandom: boolean;\r\n\r\n    /** Can select more than one item */\r\n    selectMultiple: boolean;\r\n\r\n    /** A valid selection has been made */\r\n    onReady: () => void;\r\n};\r\n\r\nconst ItemLoot: React.FunctionComponent<ItemSelectorProps> = (props: ItemSelectorProps): JSX.Element | null => {\r\n    const classes = useStyles();\r\n\r\n    const [lootItems, setLootItems] = React.useState<Item[] | null>(null);\r\n    const [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadLootItems = () => {\r\n            // TODO: Try / catch\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(props.itemIds);\r\n\r\n            setLootItems(newStashItems);\r\n        };\r\n\r\n        const loadInventoryItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (lootItems === null) {\r\n            loadLootItems();\r\n        }\r\n\r\n        if (inventoryItems === null) {\r\n            loadInventoryItems();\r\n        }\r\n    });\r\n\r\n    const takeItem = (itemIds: string[]) => {\r\n        if (!lootItems || !inventoryItems) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < itemIds.length; i++) {\r\n            //service.removeStashItem(itemIds[i]);\r\n            service.addInventoryItem(itemIds[i]);\r\n        }\r\n\r\n        // TODO: Doesn't work for duplicate item names\r\n        const takenItems = lootItems.filter((i) => itemIds.indexOf(i.id) >= 0);\r\n        setLootItems(lootItems.filter(i => itemIds.indexOf(i.id) < 0));\r\n        setInventoryItems(inventoryItems.concat(takenItems));\r\n    };\r\n\r\n    const putItem = (itemIds: string[]) => {\r\n        if (!lootItems || !inventoryItems) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < itemIds.length; i++) {\r\n            service.removeInventoryItem(itemIds[i]);\r\n        }\r\n\r\n        // TODO: Doesn't work for duplicate item names\r\n        const putItems = inventoryItems.filter((i) => itemIds.indexOf(i.id) >= 0);\r\n        setLootItems(lootItems.concat(putItems));\r\n        setInventoryItems(inventoryItems.filter((i) => itemIds.indexOf(i.id) < 0));\r\n    };\r\n\r\n    if (!lootItems || !inventoryItems) return null;\r\n\r\n    return <ItemSelect items={lootItems} inventory={inventoryItems} onPut={putItem} onTake={takeItem} useStash={false} />;\r\n};\r\n\r\nexport default ItemLoot;\r\n","import React from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../../models/InkStoryChoice\";\r\nimport PartySelect from \"./PartySelect\";\r\nimport HeroSelect from \"./HeroSelect\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\nimport StoryEncounterFinish from \"../../models/InkStoryFinish\";\r\nimport TraitSelect from \"./TraitSelect\";\r\nimport PartyInventorySelect from \"./PartyInventorySelect\";\r\nimport ItemLoot from \"./ItemLoot\";\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        overflow: \"visible\",\r\n    },\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n        userSelect: \"none\",\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n    portrait: {\r\n        borderRadius: \"50%\",\r\n        width: \"200px\",\r\n        position: \"absolute\",\r\n        top: \"-60px\",\r\n        left: \"-60px\",\r\n        border: \"8px solid white\",\r\n    },\r\n    placeholder: {\r\n        float: \"left\",\r\n        width: \"130px\",\r\n        height: \"140px\",\r\n    },\r\n    paragraph: {\r\n        display: \"inline-block\",\r\n        width: \"100%\",\r\n    },\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveToNode?: string, startEncounterId?: string, coverVisible?: number) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nconst EncounterDialog: React.FunctionComponent<EncounterDialogProps> = (props: EncounterDialogProps) => {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = React.useState(new MockEncounterService());\r\n    const [paragraphs, setParagraphs] = React.useState<string[]>([]);\r\n    const [title, setTitle] = React.useState<string>(\"\");\r\n    const [choices, setChoices] = React.useState<InkStoryChoice[]>([]);\r\n    const [storyStarted, setStoryStarted] = React.useState<boolean>(false);\r\n    const [isReady, setIsReady] = React.useState<boolean>(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo?: string, encounterDetailId?: string, coverVisible?: number) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo, encounterDetailId, coverVisible);\r\n    };\r\n\r\n    const handleChoice = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            const encounterFinish = encounterService.continue();\r\n            processFinish(encounterFinish.finishData);\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            processFinish(encounter.finishData);\r\n        }\r\n    };\r\n\r\n    const processFinish = (finish?: StoryEncounterFinish): void => {\r\n        // Finished -> Check variables\r\n        if (!finish || (finish.moveTo === undefined && finish.detailedEncounter === undefined && finish.coverVisible === undefined)) {\r\n            handleClose();\r\n        } else {\r\n            handleCloseWithValue(finish.moveTo, finish.detailedEncounter, finish.coverVisible);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                setParagraphs([\"Error: Encounter finished\"]);\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    // Does the component disable the \"continue\" button until something chosen?\r\n    let isBlockingDialog = false;\r\n\r\n    const renderParagraph = (text: string) => {\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n            isBlockingDialog = false;\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n            isBlockingDialog = false;\r\n        }\r\n        const isInventory = text.indexOf(\"[Inventory]\") >= 0;\r\n        if (isInventory) {\r\n            paragraphText = paragraphText.replace(\"[Inventory]\", \"\");\r\n            isBlockingDialog = true;\r\n        }\r\n\r\n        // Check for item select\r\n        const selectItemsStart = text.indexOf(\"[Items(\");\r\n        const isSelectItems = selectItemsStart >= 0;\r\n\r\n        let items: string[] | undefined = undefined;\r\n        if (isSelectItems) {\r\n            const selectItemsEnd = text.indexOf(\"]\", selectItemsStart);\r\n            const itemsStart = selectItemsStart + 7;\r\n            const itemsRaw = paragraphText.substr(itemsStart, selectItemsEnd - itemsStart - 1);\r\n            items = itemsRaw.split(\",\").map((t) => t.replaceAll('\"', \"\").trim());\r\n            paragraphText = paragraphText.substr(0, selectItemsStart).concat(paragraphText.substr(selectItemsEnd + 1));\r\n            // isSpecialDialog = true;\r\n        }\r\n\r\n        // Check for trait select\r\n        const selectTraitStart = text.indexOf(\"[SelectTrait(\");\r\n        const isSelectTrait = selectTraitStart >= 0;\r\n\r\n        let traits: string[] | undefined = undefined;\r\n        if (isSelectTrait) {\r\n            const selectTraitEnd = text.indexOf(\"]\", selectTraitStart);\r\n            const traitsStart = selectTraitStart + 13;\r\n            const traitsRaw = paragraphText.substr(traitsStart, selectTraitEnd - traitsStart - 1);\r\n            traits = traitsRaw.split(\",\").map((t) => t.replaceAll('\"', \"\").trim());\r\n            paragraphText = paragraphText.substr(0, selectTraitStart).concat(paragraphText.substr(selectTraitEnd + 1));\r\n            isBlockingDialog = true;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.paragraph}>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelect onReady={() => setIsReady(true)} /> : null}\r\n                {isHeroSelect ? <HeroSelect onReady={() => setIsReady(true)} /> : null}\r\n                {isHeroDismiss ? <HeroDismiss onReady={() => setIsReady(true)} /> : null}\r\n                {traits && traits.length > 1 ? (\r\n                    <TraitSelect from={traits[0]} onReady={() => setIsReady(true)} traitIds={traits.slice(1)} isRandomTrait={false} />\r\n                ) : null}\r\n                {items && items.length > 1 ? (\r\n                    <ItemLoot onReady={() => setIsReady(true)} itemIds={items} isRandom={false} selectMultiple={false} />\r\n                ) : null}\r\n                {isStash ? <Stash /> : null}\r\n                {isInventory ? <PartyInventorySelect onReady={() => setIsReady(true)} /> : null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n\r\n        const disableContinue = !isReady && isBlockingDialog;\r\n\r\n        if (encChoices.length === 0) {\r\n            return (\r\n                <Button onClick={handleContinue} disabled={disableContinue}>\r\n                    Continue\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                classes={{\r\n                    paper: classes.paper,\r\n                }}\r\n                className={classes.dialog}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-dialog-title\"\r\n                open={open}\r\n            >\r\n                <DialogContent className={classes.content}>\r\n                    <img src=\"./images/knight.jpg\" className={classes.portrait} alt=\"portrait\" />\r\n                    <div className={classes.placeholder}></div>\r\n                    {/* <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" /> */}\r\n                    <h1>{title}</h1>\r\n                    {paragraphs.map((p) => renderParagraph(p))}\r\n                </DialogContent>\r\n                <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterDialog;\r\n","import React from \"react\";\r\n\r\nimport Leaflet from \"leaflet\";\r\nimport { Marker, Tooltip } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\n\r\nimport { Node } from \"ngraph.graph\";\r\nimport { NodeData } from \"../../models/MapGraph\";\r\n\r\nconst useStyles = makeStyles({\r\n    tooltip: {\r\n        padding: \"3px 8px 3px 3px\",\r\n        height: \"32px\",\r\n        display: \"inline-flex\",\r\n        fontSize: \"0.8125rem\",\r\n        // //transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        alignItems: \"center\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"',\r\n        whiteSpace: \"nowrap\",\r\n        borderRadius: \"10px\",\r\n        verticalAlign: \"middle\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        color: \"#616161\",\r\n        marginLeft: \"3px\",\r\n        marginRight: \"5px\",\r\n        width: \"1em\",\r\n        height: \"1em\",\r\n        display: \"inline-block\",\r\n        fontSize: \"1.5rem\",\r\n        //transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        flexShrink: 0,\r\n        userSelect: \"none\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype VertexMarkerProps = {\r\n    vertex: Node<NodeData>;\r\n    onHover: (id: string) => void;\r\n    onHoverEnd: (id: string) => void;\r\n    onClick: (id: string) => void;\r\n};\r\n\r\nconst VertexMarker: React.FunctionComponent<VertexMarkerProps> = (props: VertexMarkerProps) => {\r\n\r\n    const { vertex, onHover, onHoverEnd, onClick } = props;\r\n    const vertextId = vertex.id.toString();\r\n\r\n    const classes = useStyles();\r\n\r\n    const iconConversionX = 1.4;\r\n    const iconConversionY = 1.5;\r\n\r\n    const renderTooltipIcon = () => {\r\n        if (vertex.data.exitId) \r\n            return <ExitToAppIcon className={classes.icon} />;\r\n\r\n        // Render icons for special encounters\r\n        switch(vertex.data.encounterId) {\r\n            case \"home\":\r\n                return <HomeIcon className={classes.icon} />;\r\n            default:\r\n                return <GpsFixedIcon className={classes.icon} />;\r\n        }\r\n    }\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: vertex.data.marker ? `/images/markers/${vertex.data.marker.image}.png` : \"images/blank.svg\",\r\n        iconSize: vertex.data.marker\r\n            ? [vertex.data.marker.dimensions[0] * iconConversionX, vertex.data.marker.dimensions[1] * iconConversionY]\r\n            : [50, 50],\r\n        iconAnchor: vertex.data.marker\r\n            ? [vertex.data.marker.anchor[0] * iconConversionX, vertex.data.marker.anchor[1] * iconConversionY]\r\n            : [25, 25],\r\n        className: vertex.data.marker ? \"vertex-icon\" : vertex.data.exitId ? \"exit-icon\" : \"bullseye-icon\",\r\n    });\r\n\r\n    // Note: Leaflet tooltips breaks the onclick detection on the map object\r\n    return (\r\n        <Marker\r\n            key={vertextId}\r\n            position={vertex.data.position}\r\n            icon={icon}\r\n            onclick={() => onClick(vertextId)}\r\n            onmouseover={() => onHover(vertextId)}\r\n            onmouseout={() => onHoverEnd(vertextId)}\r\n        >\r\n            <Tooltip className={classes.tooltip}>\r\n                {renderTooltipIcon()}\r\n                <span>{vertex.id.toString()}</span>\r\n            </Tooltip>\r\n        </Marker>\r\n    );\r\n};\r\n\r\nexport default VertexMarker;\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n  length = (): number => this._store.length;\r\n}\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        // ES: Ignore slides where destination is same as the source\r\n        // ES: I'm not sure why this happens when any state is set on the encounter page\r\n        // const slideTo = latLng(this._slideToLatLng)\r\n        // if (slideTo.lat === this.getLatLng().lat && slideTo.lng === this.getLatLng().lng)\r\n        //     return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import { createPortal } from \"react-dom\";\r\nimport Drift_Marker from \"./Drift_Marker\";\r\nimport { DivIcon, LatLngExpression } from \"leaflet\";\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from \"react-leaflet\";\r\n\r\ntype LeafletElement = Drift_Marker;\r\n\r\ntype DriftMarker2Props = {\r\n    draggable?: boolean;\r\n    opacity?: number;\r\n    position: LatLngExpression;\r\n    duration: number;\r\n    keepAtCenter?: boolean;\r\n    zIndexOffset?: number;\r\n    onClick?: (name: DriftMarker2) => void;\r\n    onMoveEnd?: (name: DriftMarker2) => void;\r\n    onMouseOver?: (name: DriftMarker2) => void;\r\n    onMouseOut?: (name: DriftMarker2) => void;\r\n} & MapLayerProps;\r\n\r\n/*\r\n * A marker combining the drift marker and allowing react components as children\r\n * Modified from CustomMarker & here : https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n */\r\nclass DriftMarker2 extends MapLayer<DriftMarker2Props, LeafletElement> {\r\n    // private onMoveEndCallback?: (name: DriftMarker2) => void;\r\n    // private onClickCallback?: (name: DriftMarker2) => void;\r\n    // private onHover?: (name: DriftMarker2) => void;\r\n    // private onHoverEnd?: (name: DriftMarker2) => void;\r\n\r\n    leafletElement: any;\r\n\r\n    createLeafletElement(props: DriftMarker2Props): any {\r\n        const { position, ...rest } = props;\r\n\r\n        // // when not providing className, the element's background is a white square\r\n        // // when not providing iconSize, the element will be 12x12 pixels\r\n        const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n        const el = new Drift_Marker(position, { icon: icon, ...rest }) as any;\r\n\r\n        // this.onMoveEndCallback = props.onMoveEnd;\r\n        // this.onClickCallback = props.onClick;\r\n        // el.onHover = props.onHover;\r\n        // el.onHoverEnd = props.onHoverEnd;\r\n        // el.on(\"moveend\", this.moveEnd);\r\n        // el.on(\"click\", this.clicked);\r\n        // el.on(\"moveend\", () => {\r\n        //     if (props.onMoveEnd) this.moveEnd(props.onMoveEnd);\r\n        // });\r\n        // el.on(\"click\", () => {\r\n        //     if (props.onClick) this.moveEnd(props.onClick);\r\n        // });\r\n        // el.on(\"mouseover\", () => {\r\n        //     debugger;\r\n        //     if (this.onHover) {\r\n        //         this.onHover(this);\r\n        //     }\r\n        // });\r\n        // el.on(\"mouseout\", () => {\r\n        //     if (this.onHoverEnd) {\r\n        //         this.onHoverEnd(this);\r\n        //     }\r\n        // });\r\n        this.contextValue = { ...props.leaflet, popupContainer: el };\r\n        return el;\r\n    }\r\n\r\n    // moveEnd(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onMoveEndCallback) {\r\n    //     //     this.onMoveEndCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    // clicked(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onClickCallback) {\r\n    //     //     this.onClickCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (super.componentWillMount) {\r\n            super.componentWillMount();\r\n        }\r\n        this.leafletElement = this.createLeafletElement(this.props);\r\n        this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n    }\r\n\r\n    // Turning this on stops the moveend update\r\n    // componentDidUpdate(fromProps: any) {\r\n    //     this.updateLeafletElement(fromProps, this.props);\r\n    // }\r\n\r\n    updateLeafletElement(fromProps: DriftMarker2Props, toProps: DriftMarker2Props) {\r\n        if (toProps.position !== fromProps.position && typeof toProps.duration == \"number\") {\r\n            this.leafletElement.slideTo(toProps.position, {\r\n                duration: toProps.duration,\r\n                keepAtCenter: toProps.keepAtCenter,\r\n            });\r\n        }\r\n        if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n            this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\r\n        }\r\n        if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n            this.leafletElement.setOpacity(toProps.opacity);\r\n        }\r\n        if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n            if (toProps.draggable === true) {\r\n                this.leafletElement.dragging.enable();\r\n            } else {\r\n                this.leafletElement.dragging.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const container = this.leafletElement._icon;\r\n\r\n        if (!container) {\r\n            return null;\r\n        }\r\n\r\n        const portal = createPortal(children, container);\r\n\r\n        return children == null || this.contextValue == null ? null : <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>;\r\n    }\r\n}\r\n\r\nexport default withLeaflet<DriftMarker2Props>(DriftMarker2);\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { LatLng } from \"leaflet\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\n\r\ntype PartyMarkerProps = {\r\n    name: string;\r\n    id: string;\r\n    imageUrl: string;\r\n    position: LatLng;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (id: string) => void;\r\n    onMoveEnd: (id: string) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst PartyMarker: React.FunctionComponent<PartyMarkerProps> = (props: PartyMarkerProps) => {\r\n    const { id, imageUrl, isActive, position, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={position}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(id)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(id);\r\n            }}\r\n        >\r\n            <div>\r\n                <img src={imageUrl} className={isActive ? classes.iconActive : classes.icon} alt=\"party\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default PartyMarker;\r\n","import GameState from \"../models/GameState\";\r\n\r\nexport default class TimeTracker {\r\n    private static _dayLength: number = 24;\r\n\r\n    public static isNight = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour >= 15 && hour <= 20;\r\n    };\r\n\r\n    public static isMorning = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour > 20;\r\n    };\r\n\r\n    public static isEvening = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour > 11 && hour < 15;\r\n    };\r\n\r\n    public static toLogString = (state: GameState): string => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        let logString = `Hour = ${hour} - `;\r\n        if (TimeTracker.isNight(state)) logString += \"It's night\";\r\n        else if (TimeTracker.isMorning(state)) logString += \"It's morning\";\r\n        else if (TimeTracker.isEvening(state)) logString += \"It's evening\";\r\n        else logString += \"It's day\";\r\n        return logString;\r\n    };\r\n}\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Polyline } from \"react-leaflet\";\r\nimport EncounterDialog from \"./encounter-dialog/EncounterDialog\";\r\nimport VertexMarker from \"./markers/VertexMarker\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\n\r\n// Pathfinding imports\r\nimport npath from \"ngraph.path\";\r\nimport { Node } from \"ngraph.graph\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport Queue from \"../models/Queue\";\r\nimport { MapGraph, NodeData } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport PartyMarker from \"./markers/PartyMarker\";\r\nimport LinkTo from \"./LinkTo\";\r\nimport TimeTracker from \"../services/TimeTracker\";\r\n\r\nconst useStyles = makeStyles({\r\n    dayMap: {},\r\n    nightMap: {\r\n        filter: \"brightness(0.4) grayscale(0.6)\",\r\n    },\r\n    eveningMap: {\r\n        filter: \"brightness(0.7) grayscale(0.3) saturate(1.28) hue-rotate(328deg)\",\r\n    },\r\n    morningMap: {\r\n        filter: \"brightness(0.8) grayscale(0.3) sepia(0.4) saturate(1.28)\",\r\n    },\r\n    quests: {\r\n        position: \"absolute\",\r\n        bottom: \"15px\",\r\n        right: \"15px\",\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        zIndex: 1000,\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            color: \"white\",\r\n        },\r\n    },\r\n});\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    graph: MapGraph; // The map graph data\r\n    mapUrl: string;\r\n    coverUrls: string[];\r\n    pathColor: string; // The default path colour is brown\r\n    useDayNight: boolean;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMap: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState, graph, mapUrl, pathColor, useDayNight, onNewMap } = props;\r\n\r\n    const [pos, setPos] = React.useState<LatLng | undefined>(undefined); // The current (target) position of the player marker\r\n    const [path, setPath] = React.useState<LatLng[]>([]); // The path to the hovered vertex\r\n    const [vertexQueue] = React.useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // TODO: Derived state anti-pattern\r\n    const [gameState, setGameState] = React.useState<GameState>(startState);\r\n    const [initialNode, setInitialNode] = React.useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    const [visibleCovers, setVisibleCovers] = React.useState<number[]>(startState.currentMapCovers);\r\n\r\n    const classes = useStyles();\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (name: string) => {\r\n        console.log(`Move ended : ${name} with ${vertexQueue.length()} queued`);\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update visibile covers list (that hide the map with a fog of war)\r\n            if (targetVertex.data.coverIds) {\r\n                for (let i = 0; i < targetVertex.data.coverIds.length; i++) {\r\n                    const thisCoverIds = targetVertex.data.coverIds[i];\r\n                    if (visibleCovers.indexOf(thisCoverIds) < 0) {\r\n                        visibleCovers.push(thisCoverIds);\r\n                        setVisibleCovers(visibleCovers);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update user state\r\n            gameState.currentVertextId = targetVertex.id.toString();\r\n            gameState.currentTurn++;\r\n            setGameState(gameState);\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState: GameState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                        currentEncounterId: undefined,\r\n                        currentMapCovers: [],\r\n                        currentTurn: startState.currentTurn,\r\n                        seed: startState.seed,\r\n                    };\r\n\r\n                    vertexQueue.clear();\r\n                    onNewMap(newState);\r\n                }\r\n            } else if (vertexQueue.length() <= 0) {\r\n                // Save the movement if its the last move\r\n                const stateService = new MockGameStateService();\r\n                const newState = stateService.getState();\r\n                newState.currentVertextId = targetVertex.id.toString();\r\n                newState.currentMapCovers = visibleCovers;\r\n                console.log(visibleCovers);\r\n                stateService.setState(newState);\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n    };\r\n\r\n    const onClick = (vertexId: string) => {\r\n        console.log(`Clicked on vertex ${vertexId}`);\r\n\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        if (path.length <= 1) {\r\n            console.log(`No route found to ${vertexId}`);\r\n            return;\r\n        }\r\n\r\n        path.pop(); // Remove the current/start node\r\n\r\n        vertexQueue.clear();\r\n        let nextVertex = path.pop();\r\n        while (nextVertex) {\r\n            vertexQueue.push(nextVertex);\r\n            // Stop if a vertex with an an encounter is hit\r\n            if (nextVertex.data.encounterId) {\r\n                break;\r\n            }\r\n            nextVertex = path.pop();\r\n        }\r\n\r\n        handleMoveEnd(\"party\"); // Trigger the move to the next vertex\r\n    };\r\n\r\n    // On hover, show the path to the marker\r\n    const onHover = (vertexId: string) => {\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        let pathVertexes = path.map((p) => p.data.position);\r\n        setPath(pathVertexes);\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(\"party\");\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string, coverVisible?: number) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (encounterDetailId) {\r\n            console.log(\"Start detailed encounter : \" + encounterDetailId);\r\n            const newState: GameState = {\r\n                currentMapId: startState.currentMapId,\r\n                currentVertextId: startState.currentVertextId,\r\n                currentEncounterId: encounterDetailId,\r\n                currentMapCovers: [],\r\n                currentTurn: startState.currentTurn,\r\n                seed: startState.seed,\r\n            };\r\n\r\n            vertexQueue.clear();\r\n            onNewMap(newState);\r\n        }\r\n\r\n        if (moveTo) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n\r\n        if (coverVisible !== undefined) {\r\n            visibleCovers.push(coverVisible);\r\n            setVisibleCovers(visibleCovers);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (initialNode) {\r\n            console.log(\"Initial node : \" + gameState.currentMapId + \", \" + gameState.currentVertextId);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(graph, gameState.currentVertextId);\r\n            setInitialNode(false);\r\n        }\r\n    }, [initialNode, gameState.currentMapId, gameState.currentVertextId, moveToVertexId, graph]);\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n\r\n    if (!pos) return null;\r\n\r\n    const isMarkerVisible = (node: NodeData) => {\r\n        // if (node.coverIds === undefined)\r\n        //     return true;\r\n        // const intersect = node.coverIds.filter((value) => visibleCovers.includes(value));\r\n        // return intersect.length > 0;\r\n        return true;\r\n    };\r\n\r\n    const renderMarkers = (graph: MapGraph) =>\r\n        graph\r\n            .getVertices()\r\n            .map((v) =>\r\n                isMarkerVisible(v.data) ? (\r\n                    <VertexMarker key={v.id} vertex={v} onHover={onHover} onHoverEnd={() => setPath([])} onClick={onClick} />\r\n                ) : null\r\n            );\r\n\r\n    const renderCovers = (coverUrls: string[]): JSX.Element[] => {\r\n        const covers: JSX.Element[] = [];\r\n        for (let i = 0; i < coverUrls.length; i++) {\r\n            if (visibleCovers.indexOf(i) < 0) covers.push(<ImageOverlay url={coverUrls[i]} bounds={bounds} />);\r\n        }\r\n        return covers;\r\n    };\r\n\r\n    console.log(TimeTracker.toLogString(gameState));\r\n\r\n    const getLightingClass = () =>\r\n        useDayNight === false\r\n            ? classes.dayMap\r\n            : TimeTracker.isEvening(gameState)\r\n            ? classes.eveningMap\r\n            : TimeTracker.isNight(gameState)\r\n            ? classes.nightMap\r\n            : TimeTracker.isMorning(gameState)\r\n            ? classes.morningMap\r\n            : classes.dayMap;\r\n\r\n    return (\r\n        <div>\r\n            <Map\r\n                className={\r\n                    TimeTracker.isEvening(gameState)\r\n                        ? classes.eveningMap\r\n                        : TimeTracker.isNight(gameState)\r\n                        ? classes.nightMap\r\n                        : TimeTracker.isMorning(gameState)\r\n                        ? classes.morningMap\r\n                        : classes.dayMap\r\n                }\r\n                crs={CRS.Simple}\r\n                zoom={-1}\r\n                minZoom={-1}\r\n                maxZoom={-1}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={handleClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n                <ImageOverlay url={mapUrl} bounds={bounds} />\r\n                {renderCovers(props.coverUrls)}\r\n                {renderMarkers(graph)}\r\n                <Polyline positions={path} color={pathColor} dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n                <PartyMarker\r\n                    name=\"party\"\r\n                    id=\"party\"\r\n                    imageUrl=\"images/knight.jpg\"\r\n                    position={pos}\r\n                    onMoveEnd={handleMoveEnd}\r\n                    isActive={true}\r\n                />\r\n            </Map>\r\n            <LinkTo key=\"quests\" url={`${process.env.PUBLIC_URL}/quests/`}>\r\n                <ExploreIcon color=\"disabled\" className={classes.quests} />\r\n            </LinkTo>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OverheadMap;\r\n","import React from \"react\";\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nconst LoadingProgress: React.FunctionComponent = () => {\r\n    const useStyles = makeStyles(() => ({\r\n        root: {\r\n            textAlign: \"center\",\r\n            padding: \"40vh 0 0 0\",\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingProgress;\r\n","import React from \"react\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport { MapGraph } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockMapService from \"../services/MockMapService\";\r\nimport GraphBuilder from \"../services/GraphBuilder\";\r\nimport OverheadMap from \"./OverheadMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMapLoader: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState } = props;\r\n\r\n    const [graph, setGraph] = React.useState<MapGraph | undefined>(undefined); // The map graph data\r\n    const [pathColor, setPathColor] = React.useState<string | undefined>(undefined);\r\n\r\n    const [mapUrl, setMapUrl] = React.useState<string | undefined>(undefined);\r\n    const [coverUrls, setCoverUrls] = React.useState<string[]>([]);\r\n    const [useDayNight, setUseDayNight] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const service = new MockMapService();\r\n\r\n            const data = service.getMap(startState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\r\n                `Loaded map : ${startState.currentMapId}, ${startState.currentVertextId}. ${data?.vertices.length} vertices. Path Color ${\r\n                    data.pathColor ?? \"None\"\r\n                }`\r\n            );\r\n\r\n            setMapUrl(data.imageUrl);\r\n            setCoverUrls(data.coverUrls);\r\n            setPathColor(data.pathColor ?? \"#5E4E00\"); // The default path colour is brown\r\n            setUseDayNight(data.useDayNight);\r\n\r\n            const mapGraph = GraphBuilder.Build(data);\r\n            setGraph(mapGraph);\r\n        };\r\n\r\n        if (!graph) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n        props.onNewMap(newState);\r\n\r\n        // Force a reload of the map\r\n        // Need to set the graph last, or the load can happen after the useEffect\r\n        setMapUrl(undefined);\r\n        setPathColor(undefined);\r\n        setGraph(undefined);\r\n        setCoverUrls([]);\r\n    };\r\n\r\n    if (!mapUrl || !graph || !pathColor) return <LoadingProgress />;\r\n\r\n    return (\r\n        <OverheadMap\r\n            startState={startState}\r\n            graph={graph}\r\n            mapUrl={mapUrl}\r\n            coverUrls={coverUrls}\r\n            pathColor={pathColor}\r\n            useDayNight={useDayNight}\r\n            onNewMap={onNewMap}\r\n        />\r\n    );\r\n};\r\n\r\nexport default OverheadMapLoader;\r\n","import EncounterDetail from \"../models/EncounterDetail\";\r\n\r\nimport TavernMap from \"./encounter-maps/tavern.json\";\r\n\r\nexport default class MockDetailedEncounterService {\r\n    public getEncounterDetail(id: string): EncounterDetail | null {\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"tavern\":\r\n            default:\r\n                json = TavernMap;\r\n                break;\r\n        }\r\n\r\n        return json\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype HeroMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst HeroMarker: React.FunctionComponent<HeroMarkerProps> = (props: HeroMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-32px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.currentStatus.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={hero.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={hero.details.name} />\r\n            </div>\r\n            <div className={classes.root}></div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default HeroMarker;\r\n","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\n\r\nexport default class Transforms {\r\n    // Conversion functions from isometric to cardinal co-ordinates\r\n    public static isoX = (carX: number, carY: number): number => carX + carY;\r\n    public static isoY = (carX: number, carY: number): number => carY - carX;\r\n\r\n    /*\r\n     * Convert cardinal co-ordinates to isometric co-ordinates\r\n     */\r\n    public static cardinalToIsometric = (car: LatLngTuple): LatLng =>\r\n        latLng(Transforms.isoY(car[0], car[1]), Transforms.isoX(car[0], car[1]));\r\n\r\n    public static cardinalToIsometric2 = (car: LatLng): LatLng =>\r\n        latLng(Transforms.isoY(car.lat, car.lng), Transforms.isoX(car.lat, car.lng));\r\n\r\n    public static carX = (isoX: number, isoY: number): number => (isoX + isoY) * 0.5;\r\n    public static carY = (isoX: number, isoY: number): number => (isoY - isoX) * 0.5;\r\n\r\n    /*\r\n     * Convert isometric co-ordinates to cardinal co-ordinates\r\n     */\r\n    public static isometricToCardinal = (iso: LatLng): LatLng =>\r\n        latLng(Transforms.carY(iso.lat, iso.lng), Transforms.carX(iso.lat, iso.lng));\r\n\r\n    public static offset = (iso: LatLng, offset: LatLngTuple): LatLng => latLng(iso.lat + offset[0], iso.lng + offset[1]);\r\n    public static scale = (iso: LatLng, scale: LatLngTuple): LatLng => latLng(iso.lat * scale[0], iso.lng * scale[1]);\r\n}","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\nimport Transforms from \"./Transforms\";\r\nimport EncounterDetail, { GridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { AStarFinder } from \"astar-typescript\";\r\nimport Hero from \"../models/character/Hero\";\r\n\r\nexport default class GridHelpers {\r\n    // Convert a grid co-ordinate to a display co-ordinate by converting to isometric, scaling & offsetting\r\n    public static gridToDisplayTuple = (car: LatLngTuple, encounter: EncounterDetail): LatLng =>\r\n        Transforms.offset(Transforms.scale(Transforms.cardinalToIsometric(car), encounter.gridScale), encounter.gridOffset);\r\n\r\n    public static gridToDisplayCenterTuple = (car: LatLngTuple, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayTuple([car[0] + 0.5, car[1] + 0.5], encounter);\r\n\r\n    public static gridToDisplay = (car: LatLng, encounter: EncounterDetail): LatLng =>\r\n        GridHelpers.gridToDisplayTuple([car.lat, car.lng], encounter);\r\n\r\n    public static gridToDisplayCenter = (car: LatLng, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayCenterTuple([car.lat, car.lng], encounter);\r\n\r\n    // And the reverse transforms\r\n    public static reverseOffset = (coords: LatLng, gridOffset: LatLngTuple) => Transforms.offset(coords, [-gridOffset[0], -gridOffset[1]]);\r\n\r\n    public static reverseScale = (coords: LatLng, gridScale: LatLngTuple) =>\r\n        Transforms.scale(coords, [1.0 / gridScale[0], 1.0 / gridScale[1]]);\r\n\r\n    public static displayToGrid = (iso: LatLng, encounter: EncounterDetail): [number, number] => {\r\n        const { gridOffset, gridScale } = encounter;\r\n\r\n        const result = Transforms.isometricToCardinal(GridHelpers.reverseScale(GridHelpers.reverseOffset(iso, gridOffset), gridScale));\r\n        return [Math.floor(result.lat), Math.floor(result.lng)];\r\n    };\r\n\r\n    /*\r\n     * Get the first found location for a grid entry (hero or encoutner ID)\r\n     */\r\n    private static getGridLocation = (grid: TokenGridEntry[][], char: GridEntry): LatLng | undefined => {\r\n        for (let x = 0; x < grid.length; x++) {\r\n            const currentRow = grid[x];\r\n            const index = currentRow.indexOf(char);\r\n            if (index >= 0) {\r\n                return latLng(x, index);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /*\r\n     * Get the initial locations for a grid entry (hero or encoutner ID)\r\n     */\r\n    public static getInitialPositions = (encounter: EncounterDetail, characters: [NpcGridEntry, Hero][]): CharacterEncounterData[] => {\r\n        return characters.map((c: [NpcGridEntry, Hero]) => {\r\n            const gridPosition = GridHelpers.getGridLocation(encounter.tokenGrid, c[0]);\r\n            return new CharacterEncounterData(\r\n                c[1],\r\n                c[0],\r\n                \"melee\",\r\n                gridPosition,\r\n                GridHelpers.gridToDisplayCenter(gridPosition ?? latLng([0, 0]), encounter)\r\n            );\r\n        });\r\n    };\r\n\r\n    public static mergeGridEntry = (tokenEntry: TokenGridEntry, baseEntry: GridEntry): GridEntry =>\r\n        tokenEntry !== \" \" ? (tokenEntry as GridEntry) : baseEntry;\r\n\r\n    private static buildMergedGrids(tokenGrid: TokenGridEntry[][], grid: GridEntry[][]): GridEntry[][] {\r\n        const output: GridEntry[][] = [];\r\n\r\n        for (let x = 0; x < grid.length; x++) {\r\n            output[x] = [];\r\n            for (let y = 0; y < grid.length; y++) {\r\n                output[x][y] = GridHelpers.mergeGridEntry(tokenGrid[x][y], grid[x][y]);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private static buildAstarGrid = (grid: GridEntry[][]): number[][] => {\r\n        return grid.map((e) => e.map((item) => (GridHelpers.isWalkable(item) ? 0 : 1)));\r\n    };\r\n\r\n    public static getGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const mergedGrid = GridHelpers.buildMergedGrids(tokenGrid, grid);\r\n        const endEntry = mergedGrid[end.lat][end.lng];\r\n\r\n        const isFoe = GridHelpers.isFoe(endEntry);\r\n        const isHero = GridHelpers.isHero(endEntry);\r\n        const isBlocked = endEntry === \"0\";\r\n\r\n        // Allow movement on start/end points\r\n        mergedGrid[start.lat][start.lng] = \"1\";\r\n        if (isHeroMove && !isBlocked && !isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n        else if (!isHeroMove && !isBlocked && isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n\r\n        // Build a new crid each time because everything heroes, foes move\r\n        const aStar = new AStarFinder({\r\n            grid: {\r\n                matrix: GridHelpers.buildAstarGrid(mergedGrid),\r\n            },\r\n        });\r\n\r\n        const startGridPosition = { x: start.lng, y: start.lat };\r\n        const endGridPosition = { x: end.lng, y: end.lat };\r\n\r\n        //console.log(`Path from : (${startGridPosition.x},${startGridPosition.y}) to (${endGridPosition.x},${endGridPosition.y})`);\r\n\r\n        const path = aStar.findPath(startGridPosition, endGridPosition);\r\n\r\n        //console.log(`Path length : ${path.length}`);\r\n        // If attacking a foe, don't move onto the foe\r\n        if (isFoe || isHero) path.pop();\r\n\r\n        return path.reverse();\r\n    };\r\n\r\n    public static getRangedGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const path = GridHelpers.getGridPath(tokenGrid, grid, start, end, isHeroMove);\r\n\r\n        if (range <= 1) return path;\r\n\r\n        const distanceSquared = (x: LatLng, y: LatLng): number => {\r\n            const latDist = x.lat - y.lat;\r\n            const lngDist = x.lng - y.lng;\r\n            // Note: Removed Math.sqrt to make slightly faster?\r\n            return latDist * latDist + lngDist * lngDist;\r\n        };\r\n\r\n        for (let i = path.length - 1; i >= 0; i--) {\r\n            const dist = distanceSquared(latLng(path[i][1], path[i][0]), end);\r\n            // console.log(`Dist from ${path[i][1]}, ${path[i][0]} to ${end.lat}, ${end.lng} = ${dist}`);\r\n            if (dist < range * range) {\r\n                return path.splice(i);\r\n            }\r\n        }\r\n\r\n        // TODO: Instead check each node on the path to check if its within range\r\n        return path.splice(range - 1);\r\n    };\r\n\r\n    public static getHeroPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number\r\n    ): number[][] =>\r\n        range > 0\r\n            ? GridHelpers.getRangedGridPath(tokenGrid, grid, start, end, range, true)\r\n            : GridHelpers.getGridPath(tokenGrid, grid, start, end, true);\r\n\r\n    public static getFoePath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number\r\n    ): number[][] =>\r\n        range > 0\r\n            ? GridHelpers.getRangedGridPath(tokenGrid, grid, start, end, range, false)\r\n            : GridHelpers.getGridPath(tokenGrid, grid, start, end, false);\r\n\r\n    public static findNearestHero = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng\r\n    ): [GridEntry, number[][]] | undefined => {\r\n        const paths: [GridEntry, number[][]][] = [];\r\n        const heroEntries: HeroGridEntry[] = [\"A\", \"B\", \"C\", \"D\"];\r\n        for (let i = 0; i < heroEntries.length; i++) {\r\n            const end = GridHelpers.getGridLocation(tokenGrid, heroEntries[i]);\r\n            if (end) {\r\n                paths.push([heroEntries[i], GridHelpers.getFoePath(tokenGrid, grid, start, end, 0)]);\r\n            }\r\n        }\r\n\r\n        const sortedPaths = paths.filter((p) => p[1].length > 0).sort((p1, p2) => p1[1].length - p2[1].length);\r\n        return sortedPaths.length > 0 ? sortedPaths[0] : undefined;\r\n    };\r\n\r\n    public static isHero = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"A\":\r\n            case \"B\":\r\n            case \"C\":\r\n            case \"D\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isEncounter = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"E\":\r\n            case \"F\":\r\n            case \"G\":\r\n            case \"H\":\r\n            case \"I\":\r\n            case \"J\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isFoe = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"K\":\r\n            case \"L\":\r\n            case \"M\":\r\n            case \"N\":\r\n            case \"O\":\r\n            case \"P\":\r\n            case \"Q\":\r\n            case \"R\":\r\n            case \"S\":\r\n            case \"T\":\r\n            case \"U\":\r\n            case \"V\":\r\n            case \"W\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isWalkable = (entry: GridEntry) => entry !== \"0\" && !GridHelpers.isFoe(entry) && !GridHelpers.isHero(entry);\r\n\r\n    public static canEndMove = (entry: GridEntry) => entry === \"1\" || entry === \"2\" || entry === \"X\" || GridHelpers.isEncounter(entry);\r\n\r\n    public static displayGrid = (tokenGrid: TokenGridEntry[][]): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < tokenGrid.length; i++) {\r\n            displayStrings.push(tokenGrid[i].join(\" - \"));\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","\r\nimport { LatLng } from \"leaflet\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport { NpcGridEntry } from \"./EncounterDetail\";\r\nimport Hero from \"./character/Hero\";\r\nimport Queue from \"./Queue\";\r\n\r\nexport default class CharacterEncounterData {\r\n    constructor(details: Hero, gridEntry: NpcGridEntry, selectedAttack: string, gridPos?: LatLng, displayPos?: LatLng, vertexQueue?: Queue<[number, number]>) {\r\n        this.gridPos = gridPos;\r\n        this.gridEntry = gridEntry;\r\n        this.displayPos = displayPos;\r\n        this.selectedAttack = selectedAttack;\r\n        this.vertexQueue = vertexQueue ?? new Queue<[number, number]>();\r\n        this.details = details;\r\n    }\r\n\r\n    public details: Hero;\r\n\r\n    public gridEntry: NpcGridEntry;\r\n\r\n    public gridPos?: LatLng;\r\n\r\n    public displayPos?: LatLng;\r\n\r\n    public vertexQueue: Queue<[number, number]>;\r\n\r\n    public selectedAttack: string;\r\n\r\n    // TODO\r\n    // public lastAttack: string;\r\n\r\n    public static buildFromGrid(gridPos: LatLng | undefined, convertFunc: (pos: LatLng) => LatLng): CharacterEncounterData {\r\n        const result = <CharacterEncounterData>{\r\n            gridPos: gridPos,\r\n            displayPos: gridPos ? convertFunc(gridPos) : undefined,\r\n            selectedAttack: \"melee\",\r\n            vertexQueue: new Queue<[number, number]>(),\r\n        };\r\n        return result;\r\n    }\r\n\r\n    // TODO: Disable path display when moving\r\n    public isMoving = (): boolean => this.vertexQueue.length() > 0;\r\n\r\n    public toString(): string {\r\n        const queueStrings = this.vertexQueue._store.map((i) => `${i[0]},${i[1]}`);\r\n\r\n        return `${this.gridPos?.lat},${this.gridPos?.lng} display ${this.displayPos?.lat},${this.displayPos?.lng} [${queueStrings.join(\r\n            \"],[\"\r\n        )}]`;\r\n    }\r\n\r\n    public isFoe = (): boolean => GridHelpers.isFoe(this.gridEntry);\r\n\r\n    public isHero = (): boolean => GridHelpers.isHero(this.gridEntry);\r\n}\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLng, LatLngTuple } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { GridEntry } from \"../../models/EncounterDetail\";\r\nimport GridHelpers from \"../../helpers/GridHelpers\";\r\n\r\ntype GridMarkerProps = {\r\n    gridPos: [number, number];\r\n    entry: GridEntry;\r\n    gridToDisplayFunc: (car: LatLngTuple) => LatLng;\r\n    onHover: (gridPos: [number, number]) => void;\r\n    onHoverEnd: (gridPos: [number, number]) => void;\r\n    onClick: (gridPos: [number, number]) => void;\r\n};\r\n\r\nconst GridMarker: React.FunctionComponent<GridMarkerProps> = (props: GridMarkerProps) => {\r\n    const { gridPos, entry, gridToDisplayFunc, onHover, onHoverEnd, onClick } = props;\r\n\r\n    const displayPos = gridToDisplayFunc([gridPos[0] + 0.5, gridPos[1] + 0.5]);\r\n\r\n    const isHero = GridHelpers.isHero(entry);\r\n    const isFoe = GridHelpers.isFoe(entry);\r\n    if (isHero || isFoe) return null; // No markers on hero or foe positions\r\n        \r\n    const canEndMove = GridHelpers.canEndMove(entry);\r\n\r\n    const iconUrl = canEndMove ? \"/images/bullseye-flat.svg\" : \"/images/times-solid.svg\";\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        // TODO: Size not scaled\r\n        iconSize: [50, 50],\r\n        iconAnchor: [25, 25],\r\n        className: \"hover-icon\",\r\n    });\r\n\r\n    return (\r\n        <Marker\r\n            key={`${gridPos[0]}.${gridPos[1]}`}\r\n            position={displayPos}\r\n            icon={icon}\r\n            onclick={() => onClick(gridPos)}\r\n            onmouseover={() => onHover(gridPos)}\r\n            onmouseout={() => onHoverEnd(gridPos)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GridMarker;\r\n","import React from \"react\";\r\n\r\nimport { makeStyles, CircularProgress } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype FoeMarkerProps = {\r\n    foe: CharacterEncounterData;\r\n    isActive: boolean;\r\n    attackIcon: string;\r\n    duration?: number;\r\n    onClick?: (foe: CharacterEncounterData) => void;\r\n    onMoveEnd: (foe: CharacterEncounterData) => void;\r\n    onHover: (hero: CharacterEncounterData) => void;\r\n    onHoverEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A map marker that represents an enemy or foe\r\n */\r\nconst FoeMarker: React.FunctionComponent<FoeMarkerProps> = (props: FoeMarkerProps) => {\r\n    const { foe, isActive, duration, onClick, onMoveEnd, onHover, onHoverEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-54px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid indianred\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            \"&:hover\": {\r\n                border: \"6px solid red\",\r\n            },\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid red\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        meleeHover: {\r\n            position: \"absolute\",\r\n            zIndex: 9,\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            opacity: 0,\r\n            \"&:hover\": {\r\n                filter: \"invert(1)\",\r\n                opacity: 1,\r\n            },\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (foe.details.currentStatus.currentHitPoints / foe.details.stats.maxHitPoints) * 100;\r\n\r\n    //const ff = foe.details;\r\n\r\n    //console.log(`# ${ff.id},${foe.gridEntry} has ${percentHp}% hp`);\r\n\r\n    if (!foe.displayPos) return null;\r\n\r\n    const hoverUrl =\r\n        props.attackIcon === \"melee\"\r\n            ? \"./images/melee.svg\"\r\n            : props.attackIcon === \"ranged\"\r\n            ? \"./images/ranged.svg\"\r\n            : \"./images/meteor-solid.svg\";\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={foe.displayPos}\r\n            keepAtCenter={false}\r\n            onMouseOver={() => onHover(foe)}\r\n            onMouseOut={() => onHoverEnd(foe)}\r\n            onMoveEnd={(_: any) => onMoveEnd(foe)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(foe);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={5}\r\n                    size={62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={foe.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={foe.details.name} />\r\n                <img src={hoverUrl} className={classes.meleeHover} alt=\"melee\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default FoeMarker;\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLngExpression } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        filter: \"invert(100%)\",\r\n    },\r\n});\r\n\r\ntype StaticMarkerProps = {\r\n    displayPos: LatLngExpression | undefined;\r\n    iconUrl: string;\r\n    width: number;\r\n    height: number;\r\n    zIndexOffset: number;\r\n};\r\n\r\nconst StaticMarker: React.FunctionComponent<StaticMarkerProps> = (props: StaticMarkerProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { displayPos, iconUrl, width, height } = props;\r\n\r\n    if (!displayPos) return null;\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        iconSize: [width, height],\r\n        iconAnchor: [width >> 1, height >> 1],\r\n        className: classes.icon,\r\n    });\r\n\r\n    return <Marker zIndexOffset={props.zIndexOffset} key={displayPos.toString()} position={displayPos} icon={icon} />;\r\n};\r\n\r\nexport default StaticMarker;\r\n","import React from \"react\";\r\nimport { LatLng } from \"leaflet\";\r\nimport { Polyline } from \"react-leaflet\";\r\nimport StaticMarker from \"./StaticMarker\";\r\n\r\ntype CombatPathProps = {\r\n    // How far the hero can move\r\n    move: number;\r\n\r\n    // The path color\r\n    pathColor: string;\r\n\r\n    // The path to display\r\n    path: LatLng[];\r\n};\r\n\r\n/*\r\n * Display a movement path during combat, split into segments showing how much movement is consumed\r\n */\r\nconst CombatPath: React.FunctionComponent<CombatPathProps> = (props: CombatPathProps): JSX.Element => {\r\n    const { move, pathColor } = props;\r\n\r\n    const fullPath = props.path;\r\n\r\n    const length = fullPath.length;\r\n    const remainderPathLength = length - move * 2;\r\n    const fullMoveStart = remainderPathLength > 0 ? remainderPathLength - 1 : 0;\r\n    const fullMoveEnd = length - move;\r\n    const halfMoveStart = fullMoveEnd > 0 ? length - move - 1 : 0;\r\n\r\n    const remainderPath = remainderPathLength > 0 ? fullPath.slice(0, remainderPathLength) : [];\r\n    const fullMovePath = fullMoveEnd > 0 ? fullPath.slice(fullMoveStart, fullMoveEnd) : [];\r\n    const halfMovePath = fullPath.slice(halfMoveStart);\r\n\r\n    // A marker for the half move path\r\n    const halfMoveMarker = halfMovePath.length > 0 ? halfMovePath[0] : undefined;\r\n\r\n    // A marker for the (!damagePos) move path\r\n    const fullMoveMarker = fullMovePath.length > 0 ? fullMovePath[0] : undefined;\r\n\r\n    const zIndexOffset = -1000;\r\n\r\n    return (\r\n        <div>\r\n            <StaticMarker zIndexOffset={zIndexOffset} displayPos={halfMoveMarker} iconUrl=\"./images/half.svg\" width={30} height={20} />\r\n            <StaticMarker zIndexOffset={zIndexOffset} displayPos={fullMoveMarker} iconUrl=\"./images/circle.svg\" width={30} height={20} />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={remainderPath}\r\n                color=\"indianred\"\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={fullMovePath}\r\n                color=\"#c6c6c6\"\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={halfMovePath}\r\n                color={pathColor}\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatPath;\r\n","import * as React from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { DivIcon, LatLngExpression, marker } from \"leaflet\";\r\nimport * as RL from \"react-leaflet\";\r\nimport { MapLayer, MapLayerProps } from \"react-leaflet\";\r\n\r\ntype CustomMarkerProps = {\r\n    position: LatLngExpression,\r\n    zIndexOff: number;\r\n} & MapLayerProps;\r\n\r\n/*\r\n* From:\r\n* https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n*/\r\nconst CustomMarker = (RL as any).withLeaflet(\r\n    class extends MapLayer<CustomMarkerProps> {\r\n        leafletElement: any;\r\n\r\n        createLeafletElement(props: CustomMarkerProps) {\r\n            const { position, ...rest } = props;\r\n\r\n            // when not providing className, the element's background is a white square\r\n            // when not providing iconSize, the element will be 12x12 pixels\r\n            const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n            const el = marker(position, { icon: icon, zIndexOffset: props.zIndexOff, ...rest });\r\n            this.contextValue = { ...props.leaflet, popupContainer: el };\r\n            return el;\r\n        }\r\n\r\n        updateLeafletElement(fromProps: any, toProps: any) {\r\n            const {\r\n                position: fromPosition,\r\n                zIndexOffset: fromZIndexOffset,\r\n                opacity: fromOpacity,\r\n                draggable: fromDraggable,\r\n                className: fromClassName,\r\n            } = fromProps;\r\n            const {\r\n                position: toPosition,\r\n                zIndexOffset: toZIndexOffset,\r\n                toOpacity,\r\n                draggable: toDraggable,\r\n                className: toClassName,\r\n            } = toProps;\r\n\r\n            function difference<T>(items: Array<T>, itemsToRemove: Array<T>): Array<T> {\r\n                return items.filter((item) => !itemsToRemove.includes(item));\r\n            }\r\n\r\n            if (toPosition !== fromPosition) {\r\n                this.leafletElement.setLatLng(toPosition);\r\n            }\r\n            if (toZIndexOffset !== fromZIndexOffset) {\r\n                this.leafletElement.setZIndexOffset(toZIndexOffset);\r\n            }\r\n            if (toOpacity !== fromOpacity) {\r\n                this.leafletElement.setOpacity(toOpacity);\r\n            }\r\n            if (toDraggable !== fromDraggable) {\r\n                if (toDraggable) {\r\n                    this.leafletElement.dragging.enable();\r\n                } else {\r\n                    this.leafletElement.dragging.disable();\r\n                }\r\n            }\r\n            if (toClassName !== fromClassName) {\r\n                const fromClasses = fromClassName.split(\" \");\r\n                const toClasses = toClassName.split(\" \");\r\n                this.leafletElement._icon.classList.remove(...difference(fromClasses, toClasses));\r\n                this.leafletElement._icon.classList.add(...difference(toClasses, fromClasses));\r\n            }\r\n        }\r\n\r\n        componentWillMount() {\r\n            if (super.componentWillMount) {\r\n                super.componentWillMount();\r\n            }\r\n            this.leafletElement = this.createLeafletElement(this.props);\r\n            this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n        }\r\n\r\n        componentDidUpdate(fromProps: any) {\r\n            this.updateLeafletElement(fromProps, this.props);\r\n        }\r\n\r\n        render() {\r\n            const { children } = this.props;\r\n            const container = this.leafletElement._icon;\r\n\r\n            if (!container) {\r\n                return null;\r\n            }\r\n\r\n            const portal = createPortal(children, container);\r\n\r\n            const LeafletProvider = (RL as any).LeafletProvider;\r\n\r\n            return children == null || portal == null || this.contextValue == null ? null : (\r\n                <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport default CustomMarker;","import React from \"react\";\r\n\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\nimport { Fade } from \"@material-ui/core\";\r\nimport CustomMarker from \"./CustomMarker\";\r\nimport { latLng, LatLng } from \"leaflet\";\r\nimport AttackResult from \"../../models/AttackResult\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"relative\",\r\n        top: \"-20px\",\r\n        left: \"-20px\",\r\n        pointerEvents: \"none\",\r\n    },\r\n    explode: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n    },\r\n    death: {\r\n        position: \"absolute\",\r\n        width: \"55px\",\r\n        height: \"55px\",\r\n        filter: \"invert(0.9)\",\r\n    },\r\n    miss: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n        filter: \"invert(0.67)\", // TODO: Use different svg\r\n    },\r\n    text: {\r\n        position: \"absolute\",\r\n        color: \"white\",\r\n        top: \"27px\",\r\n        width: \"80px\",\r\n    },\r\n});\r\n\r\ntype DamageDisplayProps = {\r\n    result: AttackResult;\r\n};\r\n\r\nconst DamageDisplay: React.FunctionComponent<DamageDisplayProps> = (props: DamageDisplayProps): JSX.Element => {\r\n    const { position, damage, result } = props.result;\r\n    const classes = useStyles();\r\n\r\n    const show = damage !== undefined;\r\n\r\n    return (\r\n        <CustomMarker position={position ?? latLng([0, 0])} zIndexOff={1000}>\r\n            <Fade in={show} style={{ transitionDelay: \"300ms\" }} timeout={{ enter: 500, exit: 500 }}>\r\n                {result === \"death\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/skull.svg\" className={classes.death} alt=\"death\" />\r\n                    </div>\r\n                ) : result === \"miss\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.miss} alt=\"miss\" />\r\n                        <Typography className={classes.text}>Miss</Typography>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.explode} alt=\"damage\" />\r\n                        <Typography className={classes.text}>{damage}</Typography>\r\n                    </div>\r\n                )}\r\n            </Fade>\r\n        </CustomMarker>\r\n    );\r\n};\r\n\r\nexport default DamageDisplay;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport SportsKabaddiIcon from \"@material-ui/icons/SportsKabaddi\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        zIndex: 501,\r\n        position: \"absolute\",\r\n        bottom: \"30px\",\r\n        right: \"30px\",\r\n    },\r\n    icon: {\r\n    },\r\n});\r\n\r\ntype CombatIndicatorProps = {\r\n    isCombat: boolean;\r\n    initiative: number;\r\n};\r\n\r\nconst CombatIndicator: React.FunctionComponent<CombatIndicatorProps> = (props: CombatIndicatorProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            {props.isCombat ? (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <Typography>{Math.round(props.initiative)}</Typography>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <SportsKabaddiIcon className={classes.icon} />\r\n                </Button>\r\n            ) : (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <VisibilityIcon className={classes.icon} />\r\n                </Button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatIndicator;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography, Fade } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"absolute\",\r\n        bottom: \"25px\",\r\n        left: \"25px\",\r\n    },\r\n    button: {\r\n        zIndex: 501,\r\n        padding: \"6px 0px\",\r\n        margin: \"5px\",\r\n        opacity: 0.8,\r\n    },\r\n    icon: {\r\n        width: \"50px\",\r\n        height: \"50px\",\r\n        borderRadius: \"5px\",\r\n    },\r\n});\r\n\r\ntype ActionBarProps = {\r\n    spells: string[];\r\n    selected: string;\r\n    onSelect: (id: string) => void;\r\n};\r\n\r\nconst ActionBar: React.FunctionComponent<ActionBarProps> = (props: ActionBarProps): JSX.Element => {\r\n    const { spells, selected, onSelect } = props;\r\n    const classes = useStyles();\r\n\r\n    const renderButton = (name: string) => (\r\n        <Button\r\n            key={name}\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            className={classes.button}\r\n            color={selected === name ? \"primary\" : \"default\"}\r\n            onClick={() => onSelect(name)}\r\n        >\r\n            <img src={`./images/skills/${name}.png`} className={classes.icon} alt={`${name}`} />\r\n        </Button>\r\n    );\r\n\r\n    const renderSpells = (spells: string[]): JSX.Element[] => spells.map((s) => renderButton(s));\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {renderButton(\"melee\")}\r\n            {renderButton(\"ranged\")}\r\n            {renderSpells(spells)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActionBar;\r\n","/*\r\n* Use the random game seed & encounter ID to determine initiative values\r\n* in a random but recreateable way\r\n*/\r\nexport default class DiceRoller {\r\n\r\n    private generate(seed: number): number {\r\n        const result = seed / 4294967296;\r\n        return result;\r\n    }\r\n\r\n    public rollDie = (seed: number, dieType: number): number => {\r\n        return Math.ceil(this.generate(seed) * dieType);\r\n    };\r\n\r\n    public roll20 = (seed: number): number => this.rollDie(seed, 20);\r\n\r\n    public roll10 = (seed: number): number => this.rollDie(seed, 10);\r\n}\r\n","import MockGameStateService from \"./MockGameStateService\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class DiceSeedTracker {\r\n    public static fromEncounterId(id: string) {\r\n        const hashCode = (s: string) =>\r\n            s.split(\"\").reduce((a, b) => {\r\n                a = (a << 5) - a + b.charCodeAt(0);\r\n                return a & a;\r\n            }, 0);\r\n\r\n        const service = new MockGameStateService();\r\n        const state = service.getState();\r\n\r\n        return hashCode(id) ^ state.seed;\r\n    }\r\n\r\n    public static next(seed: number): number {\r\n        const result = DiceSeedTracker.mulberry32(seed);\r\n        return result;\r\n    }\r\n\r\n    private static mulberry32(a: number): number {\r\n        var t = (a += 0x6d2b79f5);\r\n        t = Math.imul(t ^ (t >>> 15), t | 1);\r\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n        return ((t ^ (t >>> 14)) >>> 0);\r\n    }\r\n}\r\n","import { NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport DiceRoller from \"./DiceRoller\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport DiceSeedTracker from \"./DiceSeedTracker\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class InitiativeTracker {\r\n    private _initiatives: [string, NpcGridEntry, number][] = [];\r\n\r\n    constructor(initiatives: [string, NpcGridEntry, number][]) {\r\n        this._initiatives = initiatives;\r\n    }\r\n\r\n    public static buildInitial(\r\n        gameId: string,\r\n        heroes: [NpcGridEntry, Hero][],\r\n        foes: [NpcGridEntry, Hero][]\r\n    ): [string, NpcGridEntry, number][] {\r\n        // Generate some random initial initiatives\r\n        let seed = DiceSeedTracker.fromEncounterId(gameId);\r\n        const roller = new DiceRoller();\r\n        const heroInitiatives: [string, NpcGridEntry, number][] = heroes.map((h) => {\r\n            seed = DiceSeedTracker.next(seed);\r\n            return [h[1].id, h[0], -(roller.roll10(seed) - AttributeHelper.getModifier(h[1].attributes.dexterity))];\r\n        });\r\n        const foeInitiatives: [string, NpcGridEntry, number][] = foes.map((f) => {\r\n            seed = DiceSeedTracker.next(seed);\r\n            return [f[1].id, f[0], -(roller.roll10(seed) - AttributeHelper.getModifier(f[1].attributes.dexterity))];\r\n        });\r\n\r\n        const initiatives = heroInitiatives.concat(foeInitiatives);\r\n        return InitiativeTracker.sort(initiatives);\r\n    }\r\n\r\n    public processDelay = (name: string, delay: number): [string, NpcGridEntry, number][] => {\r\n        const match = this._initiatives.find((init) => init[0] === name);\r\n        if (!match) {\r\n            console.log(\"Initiative not found : \" + name);\r\n            return this._initiatives;\r\n        }\r\n        match[2] += delay;\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    };\r\n\r\n    public remove = (name: string): [string, NpcGridEntry, number][] => {\r\n        this._initiatives = this._initiatives.filter(i => i[0] !== name);\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    }\r\n\r\n    private static sort = (initiatives: [string, NpcGridEntry, number][]): [string, NpcGridEntry, number][] => {\r\n        const result = initiatives.sort((n1, n2) => n1[2] - n2[2]);\r\n        return result;\r\n    };\r\n\r\n    public getInitiatives = (): [string, NpcGridEntry, number][] => this._initiatives;\r\n\r\n    public getNextInitiative = () => this._initiatives[0];\r\n\r\n    public displayInitiatives = (): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < this._initiatives.length; i++) {\r\n            displayStrings.push(`${this._initiatives[i][0]} : ${this._initiatives[i][1]}`);\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","import { LatLng } from \"leaflet\";\r\n\r\nexport default class AttackResult {\r\n    public constructor(result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\", damage: number, position: LatLng) {\r\n        this.result = result;\r\n        this.damage = damage;\r\n        this.position = position;\r\n    }\r\n\r\n    public result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\";\r\n    public damage: number;\r\n    public position: LatLng;\r\n\r\n    public static createMiss = (position: LatLng): AttackResult => new AttackResult(\"miss\", 0, position);\r\n    public static createFumble = (position: LatLng): AttackResult => new AttackResult(\"fumble\", 0, position);\r\n    public static createHit = (damage: number, position: LatLng): AttackResult => new AttackResult(\"hit\", damage, position);\r\n    public static createCritical = (damage: number, position: LatLng): AttackResult => new AttackResult(\"critical\", damage, position);\r\n    public static createDeath = (damage: number, position: LatLng): AttackResult => new AttackResult(\"death\", damage, position);\r\n}\r\n","import EffectTable from \"../models/EffectTable\";\r\nimport EffectTableEntry from \"../models/EffectTableEntry\";\r\n\r\nimport Spear from \"./effects/spear.json\";\r\nimport Bow from \"./effects/bow.json\";\r\nimport Fists from \"./effects/fists.json\";\r\nimport MagicMissle from \"./effects/magic_missile.json\";\r\n\r\nexport default class EffectTableServiceStatic {\r\n    public getEffect(id: string): EffectTable | null {\r\n        switch (id) {\r\n            case \"Fists\":\r\n                return Fists as EffectTable;\r\n            case \"Spear\":\r\n                return Spear as EffectTable;\r\n            case \"Bow\":\r\n                return Bow as EffectTable;\r\n            case \"Magic Missile\":\r\n                return MagicMissle as EffectTable;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public getResultEntry(table: EffectTable | null, rawRoll: number, total: number): EffectTableEntry | null {\r\n        if (!table) return null;\r\n        \r\n        const matches = table.effects.filter(\r\n            (e) =>\r\n                (e.useRaw && rawRoll >= e.resultMin && rawRoll <= e.resultMax) ||\r\n                (!e.useRaw && total >= e.resultMin && total <= e.resultMax)\r\n        );\r\n        return matches.length > 0 ? matches[0] : null;\r\n    }\r\n}\r\n","import AttributeList from \"../models/character/AttributeList\";\r\nimport CalculatedStats from \"../models/character/CalculatedStats\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\nimport { ModifierType } from \"../models/character/Trait\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport AttributeHelper from \"./AttributeHelper\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nexport default class HeroHelper {\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getItemTraits = (hero: Hero): HeroTrait[] => {\r\n        let traits: HeroTrait[] = [];\r\n        const service = new MockItemService();\r\n\r\n        // TODO: This might be a few queries, we can consider a cache if we move to server side requests\r\n        const items = hero.currentStatus.equippedItems.map((i) => service.getItemDetail(i));\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            const itemTraits = item.traits.map((t) => {\r\n                return {\r\n                    id: t.id,\r\n                    name: t.name,\r\n                    description: t.description,\r\n                    type: t.type,\r\n                    behavior: t.behavior,\r\n                    from: item.name,\r\n                };\r\n            });\r\n            traits = traits.concat(itemTraits);\r\n        }\r\n\r\n        return traits;\r\n    };\r\n\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getAllTraits = (hero: Hero): HeroTrait[] =>\r\n        HeroHelper.getItemTraits(hero).concat(hero.currentStatus.permanentTraits).concat(hero.currentStatus.temporaryTraits);\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static calculateAttributesWithModifiers = (hero: Hero): AttributeList => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let strMod = 0,\r\n            dexMod = 0,\r\n            conMod = 0,\r\n            intMod = 0,\r\n            wisMod = 0,\r\n            chaMod = 0,\r\n            luckMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behavior.length; j++) {\r\n                const behavior = allTraits[i].behavior[j];\r\n                switch (behavior.modifierType) {\r\n                    case ModifierType.Strength:\r\n                        strMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Dexterity:\r\n                        dexMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Constitution:\r\n                        conMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Intelligence:\r\n                        intMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Wisdom:\r\n                        wisMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Charisma:\r\n                        chaMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Luck:\r\n                        luckMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attributes = hero.attributes;\r\n        const newAttributeList: AttributeList = {\r\n            strength: { base: attributes.strength.base, bonus: strMod },\r\n            dexterity: { base: attributes.dexterity.base, bonus: dexMod },\r\n            constitution: { base: attributes.constitution.base, bonus: conMod },\r\n            intelligence: { base: attributes.intelligence.base, bonus: intMod },\r\n            wisdom: { base: attributes.wisdom.base, bonus: wisMod },\r\n            charisma: { base: attributes.charisma.base, bonus: chaMod },\r\n            luck: { base: attributes.luck.base, bonus: luckMod },\r\n        };\r\n\r\n        return newAttributeList;\r\n    };\r\n\r\n    public static calculateStatsWithModifiers = (hero: Hero): CalculatedStats => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let armorMod = 0,\r\n            moveSpeedMod = 0,\r\n            meleeAttackMod = 0,\r\n            meleeAttackSpeedMod = 0,\r\n            meleeDamageMod = 0,\r\n            rangedAttackMod = 0,\r\n            rangedAttackSpeedMod = 0,\r\n            rangedDamageMod = 0,\r\n            spellAttackMod = 0,\r\n            spellAttackSpeedMod = 0,\r\n            spellDamageMod = 0,\r\n            hpMod = 0,\r\n            spellResistMod = 0,\r\n            damageResistMod = 0;\r\n        let status = 0;\r\n        let meleeEffectId = hero.stats.meleeEffectId;\r\n        let rangedEffectId = hero.stats.rangedEffectId;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behavior.length; j++) {\r\n                const behavior = allTraits[i].behavior[j];\r\n                switch (behavior.modifierType) {\r\n                    case ModifierType.Armor:\r\n                        armorMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MoveSpeed:\r\n                        moveSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeAttack:\r\n                        meleeAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeAttackSpeed:\r\n                        meleeAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeDamage:\r\n                        meleeDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeEffect:\r\n                        meleeEffectId = behavior.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedEffect:\r\n                        rangedEffectId = behavior.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttack:\r\n                        rangedAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.RangedAttackSpeed:\r\n                        rangedAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.RangedDamage:\r\n                        rangedDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellAttack:\r\n                        spellAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellAttackSpeed:\r\n                        spellAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellDamage:\r\n                        spellDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.HitPoints:\r\n                        hpMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellResistance:\r\n                        spellResistMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.DamageResistance:\r\n                        damageResistMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Status:\r\n                        status |= parseInt(behavior.modifierValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const stats = hero.stats;\r\n        const service = new EffectTableServiceStatic();\r\n        const meleeEffect = service.getEffect(stats.meleeEffectId);\r\n        const rangedEffect = service.getEffect(stats.rangedEffectId);\r\n        const meleeEffectAttackModifier = HeroHelper.getModifier(hero, meleeEffect?.attackModifier);\r\n        const rangedEffectAttackModifier = HeroHelper.getModifier(hero, rangedEffect?.attackModifier);\r\n\r\n        const newStats: CalculatedStats = {\r\n            // TODO\r\n            status: status,\r\n\r\n            armour: stats.armour + armorMod,\r\n\r\n            meleeAttackBonus: stats.meleeAttackBonus + meleeEffectAttackModifier + meleeAttackMod,\r\n            meleeAttackSpeed: stats.meleeAttackSpeed + meleeAttackSpeedMod,\r\n            meleeDamageBonus: stats.meleeAttackBonus + meleeDamageMod,\r\n            meleeEffectId: meleeEffectId,\r\n\r\n            rangedAttackBonus: stats.rangedAttackBonus + rangedEffectAttackModifier + rangedAttackMod,\r\n            rangedAttackSpeed: stats.rangedAttackSpeed + rangedAttackSpeedMod,\r\n            rangedDamageBonus: stats.rangedAttackBonus + rangedDamageMod,\r\n            rangedEffectId: stats.rangedEffectId,\r\n\r\n            spellAttackBonus: stats.spellAttackBonus + spellAttackMod,\r\n            spellAttackSpeed: stats.spellAttackSpeed + spellAttackSpeedMod,\r\n            spellDamageBonus: stats.spellDamageBonus + spellDamageMod,\r\n\r\n            spells: hero.spells.filter(s => hero.currentStatus.lostSpells.indexOf(s) < 0),\r\n            moveSpeed: stats.moveSpeed + moveSpeedMod,\r\n            maxHitPoints: stats.maxHitPoints + hpMod,\r\n            spellResistance: stats.spellResistance + spellResistMod,\r\n            damageResistance: stats.damageResistance + damageResistMod,\r\n        };\r\n\r\n        // TODO: Are there class & level bonuses, or we represent these as traits?\r\n\r\n        return newStats;\r\n    };\r\n\r\n    public static getModifier = (\r\n        hero: Hero,\r\n        modifier: \"str\" | \"dex\" | \"con\" | \"wis\" | \"int\" | \"cha\" | \"luck\" | \"magic\" | \"melee\" | \"ranged\" | \"armor\" | \"level\" | undefined\r\n    ): number => HeroHelper.getStatModifier(hero.stats, hero.attributes, modifier);\r\n\r\n    public static getStatModifier(\r\n        statistics: CalculatedStats,\r\n        attributes: AttributeList,\r\n        modifier: \"str\" | \"dex\" | \"con\" | \"wis\" | \"int\" | \"cha\" | \"luck\" | \"magic\" | \"melee\" | \"ranged\" | \"armor\" | \"level\" | undefined\r\n    ): number {\r\n        switch (modifier) {\r\n            case undefined:\r\n                return 0;\r\n            case \"str\":\r\n                return AttributeHelper.getModifier(attributes.strength);\r\n            case \"dex\":\r\n                return AttributeHelper.getModifier(attributes.dexterity);\r\n            case \"con\":\r\n                return AttributeHelper.getModifier(attributes.constitution);\r\n            case \"wis\":\r\n                return AttributeHelper.getModifier(attributes.wisdom);\r\n            case \"int\":\r\n                return AttributeHelper.getModifier(attributes.intelligence);\r\n            case \"cha\":\r\n                return AttributeHelper.getModifier(attributes.charisma);\r\n            case \"luck\":\r\n                return AttributeHelper.getModifier(attributes.luck);\r\n            case \"magic\":\r\n                return statistics.spellAttackBonus;\r\n            case \"melee\":\r\n                return statistics.meleeAttackBonus;\r\n            case \"ranged\":\r\n                return statistics.rangedAttackBonus;\r\n            case \"armor\":\r\n                return statistics.armour;\r\n            case \"level\":\r\n                throw new Error(\"Not implemented\");\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n}\r\n","import AttackResult from \"../models/AttackResult\";\r\nimport IAttackResult from \"../models/AttackResult\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport DiceRoller from \"../services/DiceRoller\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport HeroHelper from \"./HeroHelper\";\r\n\r\n/** Combat results helper functions */\r\nexport default class CombatHelper {\r\n    private static determineAttackResultShared = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData,\r\n        effectId: string,\r\n        attackBonus: number,\r\n        damageBonus: number\r\n    ): IAttackResult => {\r\n        const targetPos = target.gridPos;\r\n        const attackerPos = attacker.gridPos;\r\n\r\n        if (!attackerPos) throw new Error(\"Attacker missing position\");\r\n        if (!targetPos) throw new Error(\"Target missing position\");\r\n\r\n        const roller = new DiceRoller();\r\n        const attackerDetail = attacker.details;\r\n        const targetDetail = target.details;\r\n\r\n        const resultService = new EffectTableServiceStatic();\r\n        const effect = resultService.getEffect(effectId);\r\n        if (effect === null) {\r\n            throw new Error(\"Can't find effect: \" + effectId);\r\n        }\r\n\r\n        const attackRoll = roller.roll20(seedAttack);\r\n        const attackModifier = HeroHelper.getModifier(attackerDetail, effect.attackModifier);\r\n        const attackValue = attackBonus + attackModifier + attackRoll;\r\n\r\n        console.log(`Attack : ${attackBonus} + ${attackModifier} + ${attackRoll}`);\r\n\r\n        const targetNumber = HeroHelper.getModifier(targetDetail, effect.dodgeWith);\r\n        const isMiss = attackValue < targetNumber;\r\n        const isFumble = attackRoll <= 1;\r\n        const isCritical = attackRoll >= 20;\r\n\r\n        const entry = resultService.getResultEntry(effect, attackRoll, attackValue);\r\n        if (entry === null) {\r\n            throw new Error(\"Can't find effect entry: \" + effectId);\r\n        }\r\n\r\n        // TODO: Use table instead\r\n        if (isFumble) {\r\n            console.log(`${attackerDetail.id} : Funbles`);\r\n            // TODO: Add a fumble table?\r\n            return AttackResult.createFumble(attackerPos);\r\n        }\r\n\r\n        if (isMiss) {\r\n            // Miss\r\n            console.log(\r\n                `${attackerDetail.id} : Miss ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry})`\r\n            );\r\n            return AttackResult.createMiss(targetPos);\r\n        }\r\n\r\n        //console.log(`Effect table : ${effectId} = d${entry.damageDie} x ${entry.damageDieCount} + ${entry.damageModifier}`);\r\n\r\n        // Hit, calculate damage\r\n        let damage = 0;\r\n        for (let i = 0; i < entry.damageDieCount; i++) {\r\n            damage += roller.rollDie(seedDamage, entry.damageDie);\r\n            damage += damageBonus;\r\n            if (entry.damageModifier) {\r\n                damage += HeroHelper.getModifier(attackerDetail, entry.damageModifier);\r\n            }\r\n            //console.log(`Damage total : ${damage}`);\r\n        }\r\n\r\n        console.log(\r\n            `${attackerDetail.id} hits ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry}) for ${damage}`\r\n        );\r\n\r\n        return isCritical ? AttackResult.createCritical(damage, targetPos) : AttackResult.createHit(damage, targetPos);\r\n    };\r\n\r\n    public static determineAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        if (attacker.selectedAttack === \"melee\") \r\n            return CombatHelper.determineMeleeAttackResult(seedAttack, seedDamage, attacker, target);\r\n\r\n        if (attacker.selectedAttack === \"ranged\") \r\n            return CombatHelper.determineRangedAttackResult(seedAttack, seedDamage, attacker, target);\r\n\r\n        return CombatHelper.determineSpellAttackResult(seedAttack, seedDamage, attacker, target, attacker.selectedAttack);\r\n    };\r\n\r\n    public static determineSpellAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData,\r\n        effectId: string\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            effectId,\r\n            attacker.details.stats.spellAttackBonus,\r\n            attacker.details.stats.spellDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineMeleeAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            attacker.details.stats.meleeEffectId,\r\n            attacker.details.stats.meleeAttackBonus,\r\n            attacker.details.stats.meleeDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineRangedAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            attacker.details.stats.rangedEffectId,\r\n            attacker.details.stats.rangedAttackBonus,\r\n            attacker.details.stats.rangedDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineMaxRange = (attacker: CharacterEncounterData): number => {\r\n        var effectId;\r\n        switch (attacker.selectedAttack) {\r\n            case \"melee\":\r\n                effectId = attacker.details.stats.meleeEffectId;\r\n                break;\r\n            case \"ranged\":\r\n                effectId = attacker.details.stats.rangedEffectId;\r\n                break;\r\n            default:\r\n                effectId = attacker.selectedAttack;\r\n                break;\r\n        }\r\n        const resultService = new EffectTableServiceStatic();\r\n        const effect = resultService.getEffect(effectId);\r\n        if (effect === null) {\r\n            throw new Error(\"Can't find effect: \" + effectId);\r\n        }\r\n        const baseRange = effect.range;\r\n\r\n        // TODO: We might allow traits to increase or decrease range?\r\n        return baseRange;\r\n    };\r\n}\r\n","import CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { NpcGridEntry } from \"../models/EncounterDetail\";\r\n\r\nexport default class CombatPositionHelper {\r\n    /** Update the hero or foe position */\r\n    public static updatePosition = (\r\n        newPosition: CharacterEncounterData,\r\n        oldPositions: CharacterEncounterData[]\r\n    ): CharacterEncounterData[] => {\r\n        // We need a new array here, or the update is not detected\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            newPositions.push(oldPositions[i].gridEntry === newPosition.gridEntry ? newPosition : oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Remove the position of the foe or hero (death of fled) */\r\n    public static removePosition = (entry: NpcGridEntry, oldPositions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            if (oldPositions[i].gridEntry !== entry) newPositions.push(oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Get the position of a hero or foe by the grid entry */\r\n    public static getPositionByEntry = (entry: NpcGridEntry, positions: CharacterEncounterData[]): CharacterEncounterData | undefined => {\r\n        const index = positions.findIndex((h) => h.gridEntry === entry);\r\n        if (index < 0 || index >= positions.length) {\r\n            console.error(\"Can't find character : \" + entry);\r\n            return undefined;\r\n        }\r\n        return positions[index];\r\n    };\r\n\r\n    /** Clear all hero/foe movement queues */\r\n    public static clearAllQueues = (positions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < positions.length; i++) {\r\n            newPositions.push(positions[i]); // TODO: Should we deep clone here?\r\n            newPositions[i].vertexQueue.clear();\r\n        }\r\n        return newPositions;\r\n    };\r\n}\r\n","import CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { TokenGridEntry } from \"../models/EncounterDetail\";\r\n\r\n/** Trim the move path to just the max move allowed */\r\nexport default class CombatActionHelper {\r\n    public static trimPathToMove = (path: number[][], maxPath: number): number[][] => {\r\n        let remainderPathLength = path.length - maxPath * 2 - 1;\r\n        if (remainderPathLength <= 0) remainderPathLength = 0; // Always remove the start grid item\r\n\r\n        return path.slice(remainderPathLength);\r\n    };\r\n\r\n    /**\r\n     * Build an action to attack foe, or move toward them if too far away\r\n     */\r\n    public static buildAttack = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        // TODO: Trim path to max ranged distance. Maybe simple trim by length to begin with\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n        const isAttack = path.length === movePath.length;\r\n\r\n        if (isAttack) {\r\n            console.log(`${attacker.gridEntry} ${attacker.selectedAttack} attack ${target} (${path.length})`);\r\n        } else {\r\n            console.log(`${attacker.gridEntry} move towards ${target} (${path.length})`);\r\n        }\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: isAttack ? attacker.selectedAttack : \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n\r\n    /**\r\n     * Build an action to melee attack foe, or move toward them if too far away\r\n     */\r\n    public static buildMove = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n\r\n        console.log(`${attacker.gridEntry} melee attack ${target} (${path.length})`);\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype IsoMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst IsoMarker: React.FunctionComponent<IsoMarkerProps> = (props: IsoMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            position: \"absolute\",\r\n        },\r\n        icon: {\r\n            position: \"relative\",\r\n        },\r\n        dot: {\r\n            height: \"35px\",\r\n            width: \"65px\",\r\n            backgroundColor: \"#bbb\",\r\n            borderRadius: \"50%\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            bottom: \"18px\",\r\n            left: \"14px\",\r\n            zIndex: -1,\r\n        },\r\n        dotActive: {\r\n            height: \"35px\",\r\n            width: \"65px\",\r\n            backgroundColor: \"#d4af37\",\r\n            borderRadius: \"50%\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            bottom: \"18px\",\r\n            left: \"14px\",\r\n            zIndex: -1,\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.currentStatus.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root} style={{ top: hero.details.tokenOffset[1], left: hero.details.tokenOffset[0] }}>\r\n                {/* <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                /> */}\r\n                <img src={hero.details.tokenUrl} className={classes.icon} alt={hero.details.name} />\r\n                <span className={isActive ? classes.dotActive : classes.dot} />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default IsoMarker;\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds, LatLngTuple } from \"leaflet\";\r\nimport { Map, ImageOverlay } from \"react-leaflet\";\r\nimport EncounterDialog from \"./encounter-dialog/EncounterDialog\";\r\n\r\n// Models\r\nimport EncounterDetail, { EncounterGridEntry, FoeGridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport HeroMarker from \"./markers/HeroMarker\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\n\r\n// Markers\r\nimport GridMarker from \"./markers/GridMarker\";\r\nimport FoeMarker from \"./markers/FoeMarker\";\r\nimport CombatPath from \"./encounter-map/CombatPath\";\r\nimport DamageDisplay from \"./markers/DamageDisplay\";\r\nimport CombatIndicator from \"./CombatIndicator\";\r\nimport ActionBar from \"./ActionBar\";\r\n\r\n// Helpers\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport CombatHelper from \"../helpers/CombatHelper\";\r\nimport CombatPositionHelper from \"../helpers/CombatPositionHelper\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport CombatActionHelper from \"../helpers/CombatActionHelper\";\r\nimport AttackResult from \"../models/AttackResult\";\r\nimport IsoMarker from \"./markers/IsoMarker\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport DiceSeedTracker from \"../services/DiceSeedTracker\";\r\n\r\ntype EncounterMapProps = {\r\n    /** The encounter data */\r\n    encounter: EncounterDetail;\r\n\r\n    /** The heroes detailed information, referenced by grid-entry */\r\n    heroes: [HeroGridEntry, Hero][];\r\n\r\n    /** The foes detailed information, referenced by grid-entry */\r\n    foes: [FoeGridEntry, Hero][];\r\n\r\n    /** If true, show a helper grid */\r\n    showGrid: boolean;\r\n\r\n    /** The inititive scores for heroes & foes */\r\n    initiatives: [string, NpcGridEntry, number][];\r\n};\r\n\r\ntype EncounterParams = {\r\n    useTokens?: string;\r\n};\r\n\r\nconst EncounterMap: React.FunctionComponent<EncounterMapProps> = (props: EncounterMapProps): JSX.Element => {\r\n    const { encounter } = props;\r\n\r\n    const pathColor = props.encounter.pathColor ?? \"white\";\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n    const {\r\n        gridToDisplayTuple,\r\n        gridToDisplayCenterTuple,\r\n        gridToDisplayCenter,\r\n        displayToGrid,\r\n        getInitialPositions,\r\n        mergeGridEntry,\r\n    } = GridHelpers;\r\n\r\n    // The current (grid) position of the hero markers\r\n    const [heroData, setHeroData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.heroes));\r\n    const [foeData, setFoeData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.foes));\r\n\r\n    // The positions to display damage markers\r\n    const [damagePos, setDamagePos] = React.useState<AttackResult[]>([]);\r\n\r\n    // The path to the hovered vertex (display when hovering over the grid)\r\n    const [path, setPath] = React.useState<LatLng[]>([]);\r\n\r\n    // The current grid state\r\n    const [tokenGrid, setTokenGrid] = React.useState<TokenGridEntry[][]>(encounter.tokenGrid);\r\n    // TODO: We could go further and custom create a network of these grid points and use the other pathfindind algorithm?\r\n\r\n    // The current ink encouter begind displayed\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // The ID of the currently selected hero. Inital hero is selected on initiative score\r\n    const [selectedHero, setSelectedHero] = React.useState<NpcGridEntry | undefined>(undefined);\r\n\r\n    // Is the current move an attack?\r\n    const [attackTarget, setAttackTarget] = React.useState<TokenGridEntry | undefined>(undefined);\r\n\r\n    // TODO: Is this a state - This a state anti-pattern\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][]>(props.initiatives);\r\n\r\n    const [currentAction, setCurrentAction] = React.useState<CharacterAction | undefined>(undefined);\r\n\r\n    const [seed, setSeed] = React.useState<number>(DiceSeedTracker.fromEncounterId(encounter.id));\r\n\r\n    // Is the encounter is combat mode?\r\n    const isCombat = (): boolean => foeData.length > 0;\r\n\r\n    // The max length of a path\r\n    const maxPath = isCombat() ? 3 : 20;\r\n\r\n    const params = useParams<EncounterParams>();\r\n\r\n    // This effect tracks when the end of the current character's turn happens\r\n    React.useEffect(() => {\r\n        // Start the next character's turn\r\n        const startNextActor = () => {\r\n            const initiativeTracker = new InitiativeTracker(initiatives);\r\n            const newNextToMove = initiativeTracker.getNextInitiative();\r\n            const name = newNextToMove[0];\r\n            const entry = newNextToMove[1];\r\n\r\n            console.log(`** Next to move ${name} (${entry})`);\r\n\r\n            // console.log(\" - \" + initiativeTracker.displayInitiatives().join(\"\\n- \"));\r\n\r\n            const gridDisplay = GridHelpers.displayGrid(tokenGrid);\r\n            console.log(gridDisplay.join(\"\\n\"));\r\n\r\n            setSelectedHero(entry);\r\n\r\n            if (!GridHelpers.isHero(entry)) {\r\n                // TODO: Foe has their action\r\n                const foeMatch = foeData.find((f) => f.gridEntry === entry);\r\n                if (foeMatch && foeMatch.gridPos) {\r\n                    const closestHeroPath = GridHelpers.findNearestHero(tokenGrid, encounter.grid, foeMatch.gridPos);\r\n                    if (closestHeroPath !== undefined) {\r\n                        const newCharacterAction = CombatActionHelper.buildAttack(\r\n                            foeMatch,\r\n                            closestHeroPath[0],\r\n                            closestHeroPath[1],\r\n                            maxPath\r\n                        );\r\n                        if (newCharacterAction.action === \"melee\") {\r\n                            setAttackTarget(newCharacterAction.target);\r\n                        }\r\n                        setCurrentAction(newCharacterAction);\r\n                    } else {\r\n                        console.error(`Foe : ${foeMatch.gridEntry} has no hero accessible`);\r\n                        const newInitiatives = initiativeTracker.processDelay(name, foeMatch.details.stats.moveSpeed);\r\n                        setInitiatives(newInitiatives);\r\n                        startNextActor(); // Trigger next to move\r\n                    }\r\n                } else {\r\n                    console.error(\"Can't find matching foe : \" + name);\r\n                    const newInitiatives = initiativeTracker.remove(name);\r\n                    setInitiatives(newInitiatives);\r\n                    startNextActor(); // Trigger next to move\r\n                }\r\n                //startNextActor(); // Trigger next to move\r\n            }\r\n        };\r\n\r\n        const executeCurrentAction = (currentAction: CharacterAction) => {\r\n            try {\r\n                const { id, path, action } = currentAction;\r\n\r\n                const numMoves = Math.ceil((path.length - 1) / maxPath);\r\n                console.log(`Moving ${id} (${currentAction.character}) distance ${path.length - 1} with ${numMoves} moves`);\r\n\r\n                const heroPos = getPosition(currentAction.character);\r\n                if (heroPos === undefined) {\r\n                    console.error(\"Can't find hero for action : \" + id);\r\n                    return;\r\n                }\r\n\r\n                // TODO: Chech nodes for encounters\r\n                let nextVertex = path.pop();\r\n                while (nextVertex) {\r\n                    //console.log(`Queue vertex ${nextVertex[0]}, ${nextVertex[1]}`);\r\n                    heroPos.vertexQueue.push([nextVertex[0], nextVertex[1]]);\r\n                    nextVertex = path.pop();\r\n                }\r\n\r\n                const newPosition = new CharacterEncounterData(\r\n                    heroPos.details,\r\n                    heroPos.gridEntry,\r\n                    heroPos.selectedAttack,\r\n                    heroPos.gridPos,\r\n                    heroPos.displayPos,\r\n                    heroPos.vertexQueue\r\n                );\r\n                setCharacterPosition(newPosition);\r\n\r\n                // Calculates new initiatives after move\r\n                const initiativeTracker = new InitiativeTracker(initiatives);\r\n                let delay = numMoves * heroPos.details.stats.moveSpeed;\r\n                // TODO: Make based on spell or attack table?\r\n                if (action === \"melee\") delay += heroPos.details.stats.meleeAttackSpeed;\r\n                else if (action === \"ranged\") delay += heroPos.details.stats.rangedAttackSpeed;\r\n                else delay += heroPos.details.stats.spellAttackSpeed;\r\n                const newInitiatives = initiativeTracker.processDelay(id, delay);\r\n                setInitiatives(newInitiatives);\r\n\r\n                // Trigger the move to the next vertex\r\n                handleMoveEnd(newPosition);\r\n            } finally {\r\n                // Clear the current action so that we don't run again\r\n                setCurrentAction(undefined);\r\n            }\r\n        };\r\n\r\n        // console.log(\"useEffect end of turn\");\r\n        if (!selectedHero) {\r\n            startNextActor();\r\n        }\r\n        if (currentAction) {\r\n            executeCurrentAction(currentAction);\r\n        }\r\n    }, [selectedHero, currentAction]);\r\n\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    /** Clicked on a hero to move if in combat mode */\r\n    const onHeroClick = (hero: CharacterEncounterData) => {\r\n        console.log(\"Select hero : \" + hero.details.id);\r\n        setSelectedHero(hero.gridEntry);\r\n    };\r\n\r\n    /** Get the position of a hero or foe */\r\n    const getPosition = (entry?: NpcGridEntry): CharacterEncounterData | undefined =>\r\n        entry\r\n            ? GridHelpers.isHero(entry)\r\n                ? CombatPositionHelper.getPositionByEntry(entry, heroData)\r\n                : CombatPositionHelper.getPositionByEntry(entry, foeData)\r\n            : undefined;\r\n\r\n    /** Clear hero & foe movement queues */\r\n    const clearAllQueues = () => {\r\n        setHeroData(CombatPositionHelper.clearAllQueues(heroData));\r\n        setFoeData(CombatPositionHelper.clearAllQueues(foeData));\r\n    };\r\n\r\n    /** Update the hero or foe position */\r\n    const setCharacterPosition = (position: CharacterEncounterData) => {\r\n        // console.log(`setCharacterPosition : ${position.details.id}`);\r\n        if (position.isHero()) {\r\n            setHeroData(CombatPositionHelper.updatePosition(position, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.updatePosition(position, foeData));\r\n        }\r\n    };\r\n\r\n    /** Remove the hero or foe position due to death or fleeing */\r\n    const removeCharacter = (character: CharacterEncounterData) => {\r\n        const initiativeTracker = new InitiativeTracker(initiatives);\r\n        const newInitiatives = initiativeTracker.remove(character.details.id);\r\n        setInitiatives(newInitiatives);\r\n        if (GridHelpers.isHero(character.gridEntry)) {\r\n            setHeroData(CombatPositionHelper.removePosition(character.gridEntry, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.removePosition(character.gridEntry, foeData));\r\n        }\r\n    };\r\n\r\n    /** Clicked on the map (not on grid) */\r\n    const onMapClick = (e: any) => console.log(`Clicked at: ${e.latlng}, grid ${displayToGrid(e.latlng, encounter)}`);\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (character: CharacterEncounterData) => {\r\n        setPath([]);\r\n\r\n        //console.log(`handleMoveEnd : ${character.details.id}`);\r\n\r\n        const targetVertex = character.vertexQueue.pop();\r\n        if (targetVertex !== undefined) {\r\n            const gridPos = latLng(targetVertex[1], targetVertex[0]);\r\n            const displayPos = gridToDisplayCenter(gridPos, encounter);\r\n\r\n            // Update the token grid\r\n            if (character.gridPos) {\r\n                // const oldEntry = tokenGrid[prevPos.gridPos.lat][prevPos.gridPos.lng];\r\n                tokenGrid[character.gridPos.lat][character.gridPos.lng] = \" \";\r\n                tokenGrid[gridPos.lat][gridPos.lng] = character.gridEntry;\r\n\r\n                console.log(\r\n                    `Move end: ${character.details.id} (${character.vertexQueue.length()} queued) next, ${targetVertex[0]},${\r\n                        targetVertex[1]\r\n                    }, previous position : ${character.gridPos.lng},${character.gridPos.lat}`\r\n                );\r\n            } else {\r\n                console.error(`Can't find current grid pos ${targetVertex[0]},${targetVertex[1]}`);\r\n                return;\r\n            }\r\n\r\n            const newPosition = new CharacterEncounterData(\r\n                character.details,\r\n                character.gridEntry,\r\n                character.selectedAttack,\r\n                gridPos,\r\n                displayPos,\r\n                character.vertexQueue\r\n            );\r\n            setCharacterPosition(newPosition);\r\n\r\n            // Stop if a vertex with an an encounter is hit\r\n            const entry = encounter.grid[gridPos.lat][gridPos.lng];\r\n            if (GridHelpers.isEncounter(entry)) {\r\n                const encounterId = encounter.encounters[entry as EncounterGridEntry];\r\n                if (encounterId) {\r\n                    console.log(`Encounter : ${encounterId}`);\r\n                    clearAllQueues();\r\n                    setEncounterId(encounterId);\r\n                }\r\n            }\r\n\r\n            // Check if the current hero has finished their move\r\n            if (character.vertexQueue.length() > 0) {\r\n                //console.log(\"Continuing move\");\r\n                return;\r\n            }\r\n        } else {\r\n            handleAttack(character);\r\n\r\n            // Trigger the end of turn effect for this hero\r\n            setSelectedHero(undefined);\r\n            setTokenGrid(tokenGrid);\r\n        }\r\n    };\r\n\r\n    const handleAttack = (character: CharacterEncounterData) => {\r\n        if (attackTarget) {\r\n            // Get the attacker & target\r\n            console.log(`Finished move : ${character.details.id} with attack`);\r\n            const targetMatch = getPosition(attackTarget as NpcGridEntry);\r\n            if (targetMatch && targetMatch.displayPos) {\r\n                // Calculate the attack roll seeds\r\n                const attackSeed = DiceSeedTracker.next(seed);\r\n                const damageSeed = DiceSeedTracker.next(seed);\r\n                // Set the seed for the next rolls\r\n                setSeed(damageSeed);\r\n\r\n                let results = CombatHelper.determineAttackResult(attackSeed, damageSeed, character, targetMatch);\r\n                if (results.result !== \"fumble\" && results.result !== \"miss\") {\r\n                    const newFoeDetails = { ...targetMatch };\r\n\r\n                    // Reduce hit points & check for death\r\n                    newFoeDetails.details.currentStatus.currentHitPoints -= results.damage;\r\n                    const isDeath = newFoeDetails.details.currentStatus.currentHitPoints <= 0;\r\n\r\n                    if (isDeath) {\r\n                        console.log(`DEAD : ${newFoeDetails.details.id}`);\r\n                        if (newFoeDetails.gridPos) results = AttackResult.createDeath(results.damage, newFoeDetails.gridPos);\r\n                        removeCharacter(targetMatch);\r\n                        if (targetMatch.gridPos) tokenGrid[targetMatch.gridPos.lat][targetMatch.gridPos.lng] = \" \";\r\n                    } else {\r\n                        setCharacterPosition(newFoeDetails);\r\n                    }\r\n                }\r\n                addDamagePos(results);\r\n            } else console.error(`Can't find foe at : ${attackTarget}`);\r\n\r\n            setAttackTarget(undefined);\r\n        } else {\r\n            console.log(`Finished move : ${character.details.id} no attack`);\r\n        }\r\n    };\r\n\r\n    const addDamagePos = (result: AttackResult) => {\r\n        setDamagePos((state) => state.concat(result));\r\n    };\r\n\r\n    const showHoverPath = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n        if (heroPos.isMoving()) return;\r\n\r\n        const range = isFoe ? CombatHelper.determineMaxRange(heroPos) : 0;\r\n\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, latLng(hoverGridPos), range);\r\n        const displayPath = fullPath.map((item) => gridToDisplayCenterTuple([item[1], item[0]], encounter));\r\n        setPath(displayPath);\r\n    };\r\n\r\n    const onHover = (hoverGridPos: [number, number]) => showHoverPath(hoverGridPos, false);\r\n\r\n    const onHoverEnd = (hoverGridPos: [number, number]) => setPath([]);\r\n\r\n    const onFoeHover = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            showHoverPath([foe.gridPos.lat, foe.gridPos.lng], true);\r\n        }\r\n    };\r\n\r\n    const onFoeHoverEnd = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            onHoverEnd([foe.gridPos.lat, foe.gridPos.lng]);\r\n        }\r\n    };\r\n\r\n    const onClickGridMarker = (gridPos: [number, number]) => processMarkerAction(gridPos, false);\r\n\r\n    /** Clicked on a foe to attack */\r\n    const onFoeClick = (position: CharacterEncounterData) => {\r\n        if (position.gridPos) processMarkerAction([position.gridPos.lat, position.gridPos.lng], true);\r\n    };\r\n\r\n    const processMarkerAction = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n\r\n        clearAllQueues();\r\n        setDamagePos([]);\r\n\r\n        const range = CombatHelper.determineMaxRange(heroPos);\r\n\r\n        const endPos = latLng(hoverGridPos);\r\n        const endToken = tokenGrid[endPos.lat][endPos.lng];\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, endPos, range);\r\n\r\n        const newAction = !isFoe\r\n            ? CombatActionHelper.buildMove(heroPos, endToken, fullPath, maxPath)\r\n            : CombatActionHelper.buildAttack(heroPos, endToken, fullPath, maxPath);\r\n\r\n        if (newAction.action !== \"move\") {\r\n            setAttackTarget(endToken);\r\n        }\r\n\r\n        setCurrentAction(newAction);\r\n\r\n        console.log(`Set current action : ${newAction.id} ${newAction.action}`);\r\n    };\r\n\r\n    const selectedAttackChanged = (id: string) => {\r\n        const position = getPosition(selectedHero);\r\n        if (!position) return;\r\n\r\n        position.selectedAttack = id;\r\n        setCharacterPosition(position);\r\n    };\r\n\r\n    const renderHeroes = () => {\r\n        return params.useTokens ?? false\r\n            ? heroData.map((hero) => (\r\n                  <IsoMarker\r\n                      hero={hero}\r\n                      isActive={selectedHero === hero.gridEntry}\r\n                      duration={300}\r\n                      onMoveEnd={handleMoveEnd}\r\n                      onClick={onHeroClick}\r\n                  />\r\n              ))\r\n            : heroData.map((hero) => (\r\n                  <HeroMarker\r\n                      hero={hero}\r\n                      isActive={selectedHero === hero.gridEntry}\r\n                      duration={300}\r\n                      onMoveEnd={handleMoveEnd}\r\n                      onClick={onHeroClick}\r\n                  />\r\n              ));\r\n    };\r\n\r\n    const renderFoes = () => {\r\n        return foeData.map((foe) => (\r\n            <FoeMarker\r\n                foe={foe}\r\n                attackIcon={getPosition(selectedHero)?.selectedAttack ?? \"melee\"}\r\n                isActive={selectedHero === foe.gridEntry}\r\n                duration={300}\r\n                onMoveEnd={handleMoveEnd}\r\n                onClick={onFoeClick}\r\n                onHover={onFoeHover}\r\n                onHoverEnd={onFoeHoverEnd}\r\n            />\r\n        ));\r\n    };\r\n\r\n    const renderGridMarkers = (encounter: EncounterDetail): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        for (let x = 0; x < encounter.grid.length; x++) {\r\n            for (let y = 0; y < encounter.grid.length; y++) {\r\n                markers.push(\r\n                    <GridMarker\r\n                        gridPos={[x, y]}\r\n                        entry={mergeGridEntry(encounter.tokenGrid[x][y], encounter.grid[x][y])}\r\n                        gridToDisplayFunc={(pos: LatLngTuple) => gridToDisplayTuple(pos, encounter)}\r\n                        onHover={onHover}\r\n                        onHoverEnd={onHoverEnd}\r\n                        onClick={onClickGridMarker}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    const renderDamageMarkers = (damages: AttackResult[]): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        // Map damage markers to dsipaly positions\r\n        const displayResults = damages.map((dam) => new AttackResult(dam.result, dam.damage, gridToDisplayCenter(dam.position, encounter)));\r\n        for (let i = 0; i < displayResults.length; i++) {\r\n            markers.push(<DamageDisplay result={displayResults[i]} />);\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    // Note: Order of markers matters for z-index\r\n    return (\r\n        <div>\r\n            <CombatIndicator isCombat={isCombat()} initiative={initiatives[0][2]} />\r\n            <ActionBar\r\n                spells={getPosition(selectedHero)?.details.stats.spells ?? []}\r\n                selected={getPosition(selectedHero)?.selectedAttack ?? \"melee\"}\r\n                onSelect={selectedAttackChanged}\r\n            />\r\n            <Map\r\n                crs={CRS.Simple}\r\n                zoom={0}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={onMapClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                <ImageOverlay url={encounter.imageUrl} bounds={bounds} />\r\n                <CombatPath path={path} pathColor={pathColor} move={maxPath} />\r\n                {renderGridMarkers(encounter)}\r\n                {renderHeroes()}\r\n                {renderFoes()}\r\n                {renderDamageMarkers(damagePos)}\r\n            </Map>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterMap;\r\n","import AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport FoeData from \"../models/character/FoeData\";\r\nimport Hero, { AbilityFlags } from \"../models/character/Hero\";\r\nimport thugContent from \"./npcs/thug.json\";\r\n\r\nexport default class MockNpcService {\r\n    \r\n    getFoeDetail(id: string): Hero {\r\n        const foe = this.getFoeData(id);\r\n\r\n        const clone = (({ attributes, ...o }) => o)(foe) as Hero;\r\n        clone.attributes = AttributeHelper.convertSimpleToComplex(foe.attributes);\r\n        clone.currentStatus = {\r\n            lostSpells: [],\r\n            temporaryTraits: [],\r\n            permanentTraits: [],\r\n            currentHitPoints: foe.stats.maxHitPoints,\r\n            equippedItems: [],\r\n        };\r\n        clone.abilities = AbilityFlags.None;\r\n        clone.description = \"\";\r\n        clone.background = \"\";  \r\n        return clone;\r\n    }\r\n\r\n    private getFoeData(id: string): FoeData {\r\n        switch (id) {\r\n            case \"thug\":\r\n            default:\r\n                return thugContent as FoeData;\r\n        }\r\n    }\r\n}\r\n","export default class ArrayHelper {\r\n    /*\r\n     * Take the first N items from an array\r\n     */\r\n    public static take<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        if (count > array.length) return clonedArray;\r\n        clonedArray.splice(count);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Take the last N items from an array\r\n     */\r\n    public static takeLast<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        const offset = clonedArray.length - count - 1;\r\n        if (offset > array.length) return clonedArray;\r\n        clonedArray.splice(0, offset);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Remove duplicates from an array\r\n     */\r\n    public static removeDuplicates<T>(array: T[]): Array<T> {\r\n        function onlyUnique(value: T, index: number, self: Array<T>) {\r\n            return self.indexOf(value) === index;\r\n        }\r\n\r\n        return array.filter(onlyUnique);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport EncounterDetail, { FoeGridEntry, HeroGridEntry, NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport EncounterMap from \"./EncounterMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockNpcService from \"../services/MockNpcService\";\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport GameState from \"../models/GameState\";\r\n\r\ntype EncounterMapLoaderProps = {\r\n    encounterId: string;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst EncounterMapLoader: React.FunctionComponent<EncounterMapLoaderProps> = (props: EncounterMapLoaderProps): JSX.Element => {\r\n    const [encounter, setEncounter] = React.useState<EncounterDetail | undefined>(undefined);\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][] | undefined>(undefined);\r\n\r\n    // The heroe detailed information\r\n    const [heroes, setHeroes] = React.useState<[HeroGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    // The foe detailed information, referenced my token entries so that we can keep track of each foe instamce\r\n    const [foes, setFoes] = React.useState<[FoeGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEncounter = () => {\r\n            const service = new MockDetailedEncounterService();\r\n            const encounterData = service.getEncounterDetail(props.encounterId);\r\n            if (!encounterData) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n            setEncounter(encounterData);\r\n\r\n            // Load heroes\r\n            const partyService = new MockPartyService();\r\n            const newHeroes = partyService.getParty();\r\n            if (!newHeroes) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n\r\n            const heroEntries: [HeroGridEntry, Hero][] = [\r\n                [\"A\", newHeroes[0]],\r\n                [\"B\", newHeroes[1]],\r\n                [\"C\", newHeroes[2]],\r\n                [\"D\", newHeroes[3]],\r\n            ];\r\n\r\n            setHeroes(heroEntries);\r\n\r\n            // Load foes\r\n            const foeEntries = Object.entries(encounterData.npcs);\r\n            const foeIds = ArrayHelper.removeDuplicates(foeEntries.map((f) => f[1]));\r\n            const npcService = new MockNpcService();\r\n\r\n            const newFoes = foeIds.map((id) => npcService.getFoeDetail(id));\r\n            const foeInstances: [FoeGridEntry, Hero][] = [];\r\n            for (let i = 0; i < foeEntries.length; i++) {\r\n                const foeData = foeEntries[i];\r\n                const foe = newFoes.find((f) => f.id === foeData[1]);\r\n                if (foe) {\r\n                    // Add a clone of the foe data referenced by grid location so that we can track for instance stats separately\r\n                    const foeDeepClone: Hero = JSON.parse(JSON.stringify(foe)); // Was { ...foe }\r\n                    foeInstances.push([foeData[0] as FoeGridEntry, foeDeepClone]);\r\n                }\r\n            }\r\n            setFoes(foeInstances);\r\n\r\n            // Generate some random initial initiatives\r\n            const initiatives: [string, NpcGridEntry, number][] = InitiativeTracker.buildInitial(\r\n                encounterData.id,\r\n                heroEntries,\r\n                foeInstances\r\n            );\r\n            console.log(\" - \" + new InitiativeTracker(initiatives).displayInitiatives().join(\"\\n- \"));\r\n            setInitiatives(initiatives);\r\n        };\r\n\r\n        if (encounter == null) {\r\n            loadEncounter();\r\n        }\r\n    });\r\n\r\n    if (!encounter || !initiatives || !heroes || !foes) return <LoadingProgress />;\r\n\r\n    return <EncounterMap encounter={encounter} heroes={heroes} foes={foes} showGrid={true} initiatives={initiatives} />;\r\n};\r\n\r\nexport default EncounterMapLoader;\r\n","import React from \"react\";\r\n\r\n// Pathfinding imports\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport GameState from \"../models/GameState\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport OverheadMapLoader from \"../components/OverheadMapLoader\";\r\nimport EncounterMapLoader from \"../components/EncounterMapLoader\";\r\n\r\nconst MapPage: React.FunctionComponent = () => {\r\n    let [gameState, setGameState] = React.useState<GameState | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of game state data\r\n        const loadGameState = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newGameState = stateService.getState();\r\n            if (!newGameState) {\r\n                console.error(`No game state data`);\r\n                return;\r\n            }\r\n\r\n            setGameState(newGameState);\r\n        };\r\n\r\n        if (gameState == null) {\r\n            loadGameState();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n        console.log(`New map : ${newState.currentMapId}, ${newState.currentVertextId}, ${newState.currentEncounterId}`);\r\n\r\n        // Save the new map state\r\n        const stateService = new MockGameStateService();\r\n        stateService.setState(newState);\r\n        setGameState(newState);\r\n    };\r\n\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    if (!gameState) return null;\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            {gameState.currentEncounterId ? (\r\n                <EncounterMapLoader encounterId={gameState.currentEncounterId} onNewMap={onNewMap} />\r\n            ) : (\r\n                <OverheadMapLoader startState={gameState} onNewMap={onNewMap} />\r\n            )}\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default MapPage;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventoryProps = {\r\n    items: Item[];\r\n    onEquipItem: (itemId: string) => void;\r\n};\r\n\r\nconst PartyInventoryEquip: React.FunctionComponent<PartyInventoryProps> = (props: PartyInventoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, onEquipItem } = props;\r\n    \r\n    const [inventorySelected, setInventorySelected] = React.useState<boolean[]>([]);\r\n\r\n    const inventorySelectionChanged = (id: string) => {\r\n        const match = items.find((i) => i.id === id);\r\n        if (match === undefined) return;\r\n        const index = items.indexOf(match);\r\n        if (index < 0) return;\r\n        \r\n        const newInventorySelected = inventorySelected.splice(0);\r\n        newInventorySelected[index] = !newInventorySelected[index];\r\n        setInventorySelected(newInventorySelected);\r\n    };\r\n\r\n    const inventorySelectedCount = inventorySelected.filter((i) => i === true).length;\r\n    const isInventorySelected = inventorySelectedCount > 0;\r\n\r\n    const selectedIndex = inventorySelected.indexOf(true);\r\n    const selectedItem = items[selectedIndex];\r\n\r\n    const isItemEquipable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n        return selectedItem.itemType >= 10;\r\n    };\r\n\r\n    const equipItem = () => {\r\n        if (!isInventorySelected) return;\r\n        if (onEquipItem) onEquipItem(selectedItem.id);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected) return \"Please select an inventory item\";\r\n\r\n        return isItemEquipable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={items} onSelectionChanged={inventorySelectionChanged} selected={inventorySelected} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventoryEquip;\r\n","import React from \"react\";\r\nimport { makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport Item, { ItemType } from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"7vw\",\r\n        top: \"-1vh\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"7vw\",\r\n        top: \"6.5vh\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"7vw\",\r\n        top: \"14vh\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"7vw\",\r\n        top: \"21.5vh\",\r\n    },\r\n    portraitItemWeapon: {\r\n        left: \"3.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitItemShield: {\r\n        left: \"10.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitNoItemImg: {\r\n        filter: \"brightness(35%)\",\r\n    },\r\n    portraitItemImg: {\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"50%\",\r\n    },\r\n});\r\n\r\ntype EquippedItemsProps = {\r\n    equippedItems: Item[];\r\n};\r\n\r\n/*\r\n* Hero Profile Screen : Display the items that the hero has equipped\r\n*/\r\nconst EquippedItems: React.FunctionComponent<EquippedItemsProps> = (props: EquippedItemsProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const { equippedItems } = props;\r\n\r\n    const headItem = equippedItems.find((item) => item.itemType === ItemType.WearableHead);\r\n    const bodyItem = equippedItems.find((item) => item.itemType === ItemType.WearableBody);\r\n    const armsItem = equippedItems.find((item) => item.itemType === ItemType.WearableArms);\r\n    const feetItem = equippedItems.find((item) => item.itemType === ItemType.WearableFeet);\r\n    const weaponItem = equippedItems.find((item) => item.itemType === ItemType.WeaponMelee1h);\r\n\r\n    return (\r\n        <div className={classes.itemContainer}>\r\n            <Tooltip title={<ItemTooltipContent item={headItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemHelm}`}>\r\n                    {headItem ? (\r\n                        <img src={headItem.imageUrl} className={classes.portraitItemImg} alt=\"helm\" />\r\n                    ) : (\r\n                        <img src=\"images/helm.svg\" className={classes.portraitNoItemImg} alt=\"helm\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={bodyItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}>\r\n                    {bodyItem ? (\r\n                        <img src={bodyItem.imageUrl} className={classes.portraitItemImg} alt=\"breastplate\" />\r\n                    ) : (\r\n                        <img src=\"images/breastplate.svg\" className={classes.portraitNoItemImg} alt=\"breastplate\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={feetItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemLegs}`}>\r\n                    {feetItem ? (\r\n                        <img src={feetItem.imageUrl} className={classes.portraitItemImg} alt=\"legs\" />\r\n                    ) : (\r\n                        <img src=\"images/leg.svg\" className={classes.portraitNoItemImg} alt=\"legs\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={armsItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemGloves}`}>\r\n                    {armsItem ? (\r\n                        <img src={armsItem.imageUrl} className={classes.portraitItemImg} alt=\"gloves\" />\r\n                    ) : (\r\n                        <img src=\"images/glove.svg\" className={classes.portraitNoItemImg} alt=\"gloves\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={weaponItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemWeapon}`}>\r\n                    {weaponItem ? (\r\n                        <img src={weaponItem.imageUrl} className={classes.portraitItemImg} alt=\"weapon\" />\r\n                    ) : (\r\n                        <img src=\"images/sword.svg\" className={classes.portraitNoItemImg} alt=\"weapon\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemShield}`}>\r\n                    <img src=\"images/shield.svg\" className={classes.portraitNoItemImg} alt=\"shield\" />\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EquippedItems;\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\nimport Attribute from \"../models/character/Attribute\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nconst StatisticsBlock: React.FunctionComponent<StatisticsBlockProps> = (props: StatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    const createData = (name: string, calculation: string, modifier: string) => {\r\n        return { name, calculation, modifier };\r\n    };\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.bonus;\r\n    const attributeCalculation = (attribute: Attribute) =>\r\n        attributeTotal(attribute) === attribute.base ? attribute.base.toString() : `${attribute.base} (${attributeTotal(attribute)})`;\r\n    const displayWithPlusMinus = (val: number) => val > 0 ? `+${val}` : val.toString();\r\n    const showModifier = (attribute: Attribute) => displayWithPlusMinus(AttributeHelper.getModifier(attribute));\r\n\r\n    const rows = [\r\n        createData(\"Strength\", attributeCalculation(statistics.strength), showModifier(statistics.strength)),\r\n        createData(\"Dexterity\", attributeCalculation(statistics.dexterity), showModifier(statistics.dexterity)),\r\n        createData(\"Consitution\", attributeCalculation(statistics.constitution), showModifier(statistics.constitution)),\r\n        createData(\"Intelligence\", attributeCalculation(statistics.intelligence), showModifier(statistics.intelligence)),\r\n        createData(\"Wisdom\", attributeCalculation(statistics.wisdom), showModifier(statistics.wisdom)),\r\n        createData(\"Charisma\", attributeCalculation(statistics.charisma), showModifier(statistics.charisma)),\r\n        createData(\"Luck\", attributeCalculation(statistics.strength), showModifier(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Value</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.calculation}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default StatisticsBlock;","import React from \"react\";\r\nimport { Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport LocationSearchingIcon from \"@material-ui/icons/LocationSearching\";\r\n\r\nimport CalculatedStats from \"../models/character/CalculatedStats\";\r\nimport EffectTable from \"../models/EffectTable\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport EffectTableEntry from \"../models/EffectTableEntry\";\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        //backgroundColor: theme.palette.background.paper,\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype CalculatedStatisticsBlockProps = {\r\n    statistics: CalculatedStats;\r\n    attributes: AttributeList;\r\n    level: number;\r\n    currentHitPoints: number;\r\n};\r\n\r\ntype EffectResults = {\r\n    meleeEffect: EffectTable;\r\n    meleeEffectEntry: EffectTableEntry;\r\n    rangedEffect: EffectTable;\r\n    rangedEffectEntry: EffectTableEntry;\r\n};\r\n\r\nconst CalculatedStatisticsBlock: React.FunctionComponent<CalculatedStatisticsBlockProps> = (props: CalculatedStatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics, attributes } = props;\r\n\r\n    const [effects, setEffects] = React.useState<EffectResults | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEffects = () => {\r\n            const service = new EffectTableServiceStatic();\r\n            const meleeEffect = service.getEffect(statistics.meleeEffectId);\r\n            const rangedEffect = service.getEffect(statistics.rangedEffectId);\r\n            const meleeEffectEntry = service.getResultEntry(meleeEffect, 15, 15);\r\n            const rangedEffectEntry = service.getResultEntry(rangedEffect, 15, 15);\r\n\r\n            if (meleeEffect && rangedEffect && meleeEffectEntry && rangedEffectEntry)\r\n                setEffects({\r\n                    meleeEffect: meleeEffect,\r\n                    meleeEffectEntry: meleeEffectEntry,\r\n                    rangedEffect: rangedEffect,\r\n                    rangedEffectEntry: rangedEffectEntry,\r\n                });\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (!effects) {\r\n            loadEffects();\r\n        }\r\n    }, [effects]);\r\n\r\n    if (!effects) return null;\r\n\r\n    return (\r\n        <div className={classes.statisticsBlock}>\r\n            <Grid container>\r\n                <Grid item xs={1} md={1}></Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FavoriteIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Hit Points ${props.currentHitPoints} / ${statistics.maxHitPoints}`}\r\n                                secondary={`Level ${props.level}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <SecurityIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Armor Class ${statistics.armour}`}\r\n                                secondary={`Spell Resistance ${statistics.spellResistance}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FastForwardIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack Speed ${statistics.meleeAttackSpeed}`}\r\n                                secondary={`Move Speed ${statistics.moveSpeed}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <LocationSearchingIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack +${statistics.meleeAttackBonus} (${statistics.meleeEffectId} Table)`}\r\n                                secondary={`Damage D${effects.meleeEffectEntry.damageDie} + ${\r\n                                    statistics.meleeDamageBonus +\r\n                                    HeroHelper.getStatModifier(statistics, attributes, effects.meleeEffectEntry.damageModifier)\r\n                                }`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={1} md={1}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CalculatedStatisticsBlock;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport Item from \"../models/Item\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\nimport MockItemService from \"../services/MockItemService\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nimport PartyInventoryEquip from \"../components/PartyInventoryEquip\";\r\nimport EquippedItems from \"../components/EquippedItems\";\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport CalculatedStatisticsBlock from \"../components/CalculatedStatisticsBlock\";\r\nimport TraitList from \"../components/TraitList\";\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"91.5vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"56vh\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        //left: \"20%\",\r\n        width: \"18vw\",\r\n        height: \"18vw\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"28px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"34vh\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    right: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n    traitsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n}));\r\n\r\ntype HeroProfileProps = {\r\n    id: string;\r\n};\r\n\r\nconst HeroProfile: React.FunctionComponent<HeroProfileProps> = (props: HeroProfileProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { id } = props;\r\n\r\n    let [hero, setHero] = React.useState<Hero | null>(null);\r\n    let [party, setParty] = React.useState<PartyStatistics | null>(null);\r\n    let [world, setWorld] = React.useState<WorldStatistics | null>(null);\r\n    let [equippedItems, setEquippedItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n    let [currentId, setCurrentId] = React.useState(\"\");\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const partyService = new MockPartyService();\r\n\r\n            // Process special keypress IDs, and re-direct to the correct hero\r\n            switch (id) {\r\n                case \"1\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[0]);\r\n                    return;\r\n                case \"2\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[1]);\r\n                    return;\r\n                case \"3\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[2]);\r\n                    return;\r\n                case \"4\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[3]);\r\n                    return;\r\n            }\r\n\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const newParty = partyService.getPartyStatistics();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            const itemsService = new MockItemService();\r\n            const newItems = itemsService.getItems(newHero.currentStatus.equippedItems);\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n            if (!newItems) {\r\n                console.error(`No items data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n            setEquippedItems(newItems);\r\n        };\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world || !equippedItems || !inventoryItems) return null;\r\n\r\n    const onEquipItem = (itemId: string) => {\r\n        // console.log(`hero '${id}' equips ${itemId}`);\r\n\r\n        // Equip the item\r\n        const heroService = new MockHeroService();\r\n        const removedItemId = heroService.equipItem(id, itemId);\r\n\r\n        // Remove the item from party inventory\r\n        const partyService = new MockPartyService();\r\n        partyService.removeInventoryItem(itemId);\r\n        if (removedItemId) {\r\n            partyService.addInventoryItem(removedItemId);\r\n        }\r\n\r\n        // Force a refresh\r\n        setCurrentId(\"\");\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.characterGrid}>\r\n                <div className={classes.left}>\r\n                    <div className={classes.portrait}>\r\n                        <br />\r\n                        <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                            <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                        </LinkTo>\r\n                        <div className={classes.bannerContainer}>\r\n                            <h1 className=\"banner\">{hero.name}</h1>\r\n                        </div>\r\n                        <div className={classes.itemContainer}>\r\n                            <p>\r\n                                {hero.description} - {StringConverters.alignmentToString(hero.alignment)}\r\n                            </p>\r\n                            <Grid container>\r\n                                <Grid item xs={3}>\r\n                                    <EquippedItems equippedItems={equippedItems} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                                </Grid>\r\n                                <Grid item xs={3}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.inventory}>\r\n                        <br />\r\n                        <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                        <PartyInventoryEquip items={inventoryItems} onEquipItem={onEquipItem} />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.right}>\r\n                    <br />\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{hero.background}</p>\r\n                    </div>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <StatisticsBlock statistics={HeroHelper.calculateAttributesWithModifiers(hero)} />\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Other</h1>\r\n                    <CalculatedStatisticsBlock\r\n                        statistics={HeroHelper.calculateStatsWithModifiers(hero)}\r\n                        attributes={hero.attributes}\r\n                        level={hero.level}\r\n                        currentHitPoints={hero.currentStatus.currentHitPoints}\r\n                    />\r\n                    <h1 className={classes.sectionHeading}>Abilities</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{StringConverters.abilitiesToString(hero.abilities)}</p>\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Traits</h1>\r\n                    <Grid container className={classes.traitsBlock}>\r\n                        <Grid item xs={2}></Grid>\r\n                        <Grid item xs={8}>\r\n                            <TraitList traits={HeroHelper.getAllTraits(hero)} />\r\n                        </Grid>\r\n                        <Grid item xs={2}></Grid>\r\n                    </Grid>\r\n                    <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>Reputation {party.reputation}</p>\r\n                        {party.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        {world.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default HeroProfile;\r\n","import React from 'react';\r\n\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport EncounterMapLoader from '../components/EncounterMapLoader';\r\nimport GameState from '../models/GameState';\r\n\r\n/*\r\n* Page for testing encounters\r\n* Actual encounters will be loaded through the main map page tracking the GameState.\r\n*/\r\nconst EncounterPage: React.FunctionComponent = (): JSX.Element => {\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n\r\n        console.log(\"New map : \" + newState.currentMapId + \", \" + newState.currentVertextId);\r\n    };\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <EncounterMapLoader encounterId=\"tavern\" onNewMap={onNewMap} />\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default EncounterPage;\r\n","import Quest from \"../models/Quest\";\r\n\r\nimport SongOfTheSeaQuest from \"./quests/song_of_the_sea.json\";\r\nimport ThereAndBackQuest from \"./quests/there_and_back.json\";\r\n\r\nexport default class MockQuestService {\r\n    getQuestDetail(id: string): Quest {\r\n        switch (id) {\r\n            case \"there_and_back\":\r\n                return ThereAndBackQuest;\r\n            case \"song_of_the_sea\":\r\n            default:\r\n                return SongOfTheSeaQuest;\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Avatar, Card, CardContent, CardHeader, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Quest from \"../models/Quest\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\n\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockQuestService from \"../services/MockQuestService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"../components/LinkTo\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: \"beige\",\r\n    },\r\n    grid: {\r\n        marginTop: \"120px\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"76vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    right: {\r\n        //overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n        margin: \"30px\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    list: {\r\n        padding: \"20px\",\r\n    },\r\n    item: {\r\n        backgroundColor: \"#fafaf0\",\r\n        margin: \"10px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    activeItem: {\r\n        backgroundColor: \"#ffffff\",\r\n        margin: \"10px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    questCard: {\r\n        margin: \"60px 20px\",\r\n        padding: \"30px\",\r\n    },\r\n    questContent: {\r\n        fontFamily: \"Martel\",\r\n    },\r\n}));\r\n\r\ntype QuestsPageProps = {};\r\n\r\nconst QuestsPage: React.FunctionComponent<QuestsPageProps> = (props: QuestsPageProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [quests, setQuests] = React.useState<Quest[] | undefined>(undefined);\r\n    const [activeQuest, setActiveQuest] = React.useState<Quest | undefined>(undefined);\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadQuests = () => {\r\n            const questService = new MockQuestService();\r\n            const partyService = new MockPartyService();\r\n\r\n            const partyQuests = partyService.getQuests();\r\n            const quests: Quest[] = [];\r\n            partyQuests.forEach((partyQuest) => {\r\n                const quest = questService.getQuestDetail(partyQuest.id);\r\n                quests.push(quest);\r\n                if (partyQuest.status === \"current\") {\r\n                    setActiveQuest(quest);\r\n                }\r\n            });\r\n            setQuests(quests);\r\n        };\r\n\r\n        if (!quests) {\r\n            loadQuests();\r\n        }\r\n    });\r\n\r\n    if (quests === undefined) return null;\r\n\r\n    const onSelectQuest = (selectedQuest: Quest) => setActiveQuest(selectedQuest);\r\n\r\n    const renderQuests = (renderQuests: Quest[]): JSX.Element[] =>\r\n        renderQuests.map((q) => (\r\n            <ListItem className={activeQuest?.id === q.id ? classes.activeItem : classes.item} onClick={() => onSelectQuest(q)}>\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                        <ExploreIcon />\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={q.name} secondary={q.description} />\r\n            </ListItem>\r\n        ));\r\n\r\n    const renderActiveQuest = (): JSX.Element | null => {\r\n        if (!activeQuest) return null;\r\n\r\n        return (\r\n            <Card className={classes.questCard}>\r\n                <CardHeader title={activeQuest.name} />\r\n                <CardContent className={classes.questContent}>{activeQuest.detail}</CardContent>\r\n            </Card>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <br />\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.bannerContainer}>\r\n                    <h1 className=\"banner\">Quests</h1>\r\n                </div>\r\n                <br />\r\n                <div className={classes.grid}>\r\n                    <div className={classes.left}>\r\n                        <br />\r\n                        <List className={classes.list}>{renderQuests(quests)}</List>\r\n                    </div>\r\n                    <div className={classes.right}>{renderActiveQuest()}</div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default QuestsPage;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\n\r\n// Pages\r\nimport MapPage from \"./pages/MapPage\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterPage from \"./pages/EncounterPage\";\r\nimport KeyMaps from \"./components/KeyMaps\";\r\nimport QuestsPage from \"./pages/QuestsPage\";\r\n\r\nconst MainLayout: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <KeyMaps backUrl=\"/menu\">\r\n                <Header />\r\n            </KeyMaps>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path={`${process.env.PUBLIC_URL}/profile/:id`}\r\n                        component={(props: any) => <HeroProfile id={props.match.params.id} />}\r\n                    />\r\n                    <Route path={`${process.env.PUBLIC_URL}/quests/`} component={QuestsPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/encounter/:useTokens/`} component={EncounterPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/`} component={MapPage} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport MenuCards, { MenuCard } from \"./MenuCards\";\r\n\r\nconst useStyles = makeStyles({\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n});\r\n\r\ntype SaveGameSelectorProps = {\r\n    enabledSlots: boolean[];\r\n    saves: (Date | null)[];\r\n    currentSlot: number;\r\n    onSelected: (slot: number) => void;\r\n};\r\n\r\nconst SaveGameSelector: React.FunctionComponent<SaveGameSelectorProps> = (props: SaveGameSelectorProps) => {\r\n    const classes = useStyles();\r\n    \r\n    const { saves, enabledSlots, currentSlot, onSelected } = props;\r\n\r\n    const getDateString = (date: Date | null) => (date ? `${date.toLocaleString()}` : \"Empty\");\r\n    const getDescription = (date: Date | null, isCurrentSlot: boolean) => {\r\n        return isCurrentSlot ? `Current Save (${getDateString(date)})` : getDateString(date);\r\n    };\r\n\r\n    const saveButtons: MenuCard[] = [\r\n        {\r\n            title: \"Slot A\",\r\n            description: getDescription(saves[0], currentSlot === 0),\r\n            enabled: enabledSlots[0],\r\n            active: currentSlot === 0,\r\n            onSelected: () => onSelected(0),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot B\",\r\n            description: getDescription(saves[1], currentSlot === 1),\r\n            enabled: enabledSlots[1],\r\n            active: currentSlot === 1,\r\n            onSelected: () => onSelected(1),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot C\",\r\n            description: getDescription(saves[2], currentSlot === 2),\r\n            enabled: enabledSlots[2],\r\n            active: currentSlot === 2,\r\n            onSelected: () => onSelected(2),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n    ];\r\n\r\n    return <MenuCards items={saveButtons} />;\r\n};\r\n\r\nexport default SaveGameSelector;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameNewMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHome = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"New game in slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHome();\r\n    };\r\n\r\n    // Can choose any empty slots\r\n    const enabledSlots = (): boolean[] => saveTimes.map((s) => s === null);\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose an empty save slot\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameNewMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameLoadMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHomeMap = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Loaing slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHomeMap();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const calculateEnabledSlots = (saves: (Date | null)[]): boolean[] => {\r\n        const enabledSlots = saves.map((s) => s !== null);\r\n        console.log(\"Games : \" + JSON.stringify(enabledSlots));\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to load\r\n                </Typography>\r\n                <SaveGameSelector\r\n                    enabledSlots={calculateEnabledSlots(saveTimes)}\r\n                    currentSlot={currentSave}\r\n                    saves={saveTimes}\r\n                    onSelected={saveSelected}\r\n                />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameLoadMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameDeleteMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToMenu = () => history.push(\"/menu\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Deleting slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.deleteSlot(slot);\r\n\r\n        navigateToMenu();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const enabledSlots = (): boolean[] => {\r\n        const enabledSlots = saveTimes.map((s) => s !== null);\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to delete\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameDeleteMenu;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport PitTheme from \"./PitTheme\";\r\n\r\n// Pages\r\nimport MainMenu from \"./pages/MainMenu\";\r\nimport MainLayout from \"./MainLayout\";\r\nimport GameNewMenu from \"./pages/GameNewMenu\";\r\nimport GameLoadMenu from \"./pages/GameLoadMenu\";\r\nimport GameDeleteMenu from \"./pages/GameDeleteMenu\";\r\n\r\nconst App : React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <div\r\n            className=\"app\"\r\n            onContextMenu={(e) => {\r\n                // Disable right-lick menu\r\n                e.preventDefault();\r\n                return false;\r\n            }}\r\n        >\r\n            <ThemeProvider theme={PitTheme}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path={`${process.env.PUBLIC_URL}/menu`} component={MainMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/new`} component={GameNewMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/load`} component={GameLoadMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/delete`} component={GameDeleteMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/`} component={MainLayout} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}