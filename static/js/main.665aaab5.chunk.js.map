{"version":3,"sources":["services/MockHeroService.ts","components/Header.tsx","components/Drift_Marker.tsx","components/DriftMarker.tsx","services/MockStoryEncounterService.ts","components/HeroSelector.tsx","components/PartySelection.tsx","components/HeroDismiss.tsx","components/InventorySelector.tsx","helpers/ArrayHelper.ts","services/MockPartyService.ts","services/MockItemService.ts","components/Stash.tsx","components/EncounterDialog.tsx","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","models/Queue.ts","services/MockGameStateService.ts","pages/OverheadMap.tsx","services/MockWorldService.ts","components/StatisticsBlock.tsx","components/PartyInventory.tsx","pages/HeroProfile.tsx","pages/EncounterMap.tsx","PitTheme.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MockHeroService","id","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroIds","map","getHeroDetail","heroIds","useStyles","makeStyles","appHeader","backgroundColor","minHeight","display","flexDirection","alignItems","justifyContent","fontSize","color","headerSpan","width","headerParty","position","zIndex","right","top","headerImg","height","border","borderRadius","borderWidth","borderColor","margin","appLogo","pointerEvents","padding","Header","props","classes","useState","party","setParty","useEffect","newParty","getParty","console","error","loadParty","className","src","alt","hero","href","imageUrl","window","exports","Leaflet_module","L","require","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","undefined","dragging","enabled","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","this","Marker","DriftMarker","onMoveEndCallback","el","getOptions","onMoveEnd","moveEnd","contextValue","leaflet","popupContainer","fromProps","toProps","leafletElement","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","draggable","children","value","MapLayer","withLeaflet","MockStoryEncounterService","currentStory","currentId","currentTitle","Story","TheInterceptContent","commonRoomContent","chasmContent","homeContent","nineBellsContent","createEmptyStory","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","variablesState","GetVariableWithName","detailedEncounter","title","paragraphText","choices","isFinished","finishData","Continue","encounterChoices","currentChoices","c","index","text","container","cursor","heroSelected","HeroSelector","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","heroService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","Number","parseInt","currentTarget","newSelected","t","selectedHeroIds","i","push","Grid","imgClass","output","item","xs","Tooltip","name","toString","onClick","renderParty","partyButton","partyButtonDiv","textAlign","PartySelection","setHeroIds","isValid","length","ids","Button","disabled","variant","HeroDismiss","heroId","setHeroId","main","gridItem","inventory","itemSelected","InventorySelector","items","selectedIds","spacing","justify","itemGrids","emptyItems","emptyGrids","concat","renderInventory","ArrayHelper","array","indexOf","splice","MockPartyService","reputation","traits","_inventoryItemIds","itemIds","remove","_stashItemIds","getItems","getItemDetail","TokenOfServitude","HagTeeth","WolfSpear","stashImg","left","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","Stash","stashSelectedIds","setStashSelectedIds","inventorySelectedIds","setInventorySelectedIds","stashItems","setStashItems","inventoryItems","setInventoryItems","partyService","stashItemIds","getStash","inventoryItemIds","getInventory","itemService","MockItemService","newStashItems","newInventoryItems","loadItems","isStashSelected","isInventorySelected","willInventoryBeTooBig","service","removeStashItem","addInventoryItem","startIcon","removeInventoryItem","addStashItem","dialog","background","content","minWidth","fontFamily","actions","EncounterDialog","encChoices","onClose","encounterId","MockEncounterService","encounterService","paragraph","setParagraph","setTitle","setChoices","storyStarted","setStoryStarted","open","handleClose","handleChoice","encounter","chooseChoice","log","handleContinue","startEncounter","Dialog","aria-labelledby","DialogContent","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","renderParagraph","DialogActions","MockMapService","json","BlackTempleMap","TownMap","vertices","v","latLng","clickRadius","exitId","edges","distance","x","y","latDist","lat","lngDist","lng","Math","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","from","weight","Queue","_store","val","shift","MockGameStateService","_state","state","currentMapId","currentVertextId","OverheadMap","useParams","setGraph","setPos","vertexQueue","setEncounterId","mapUrl","setMapUrl","userState","setUserState","initialNode","setInitialNode","handleMoveEnd","marker","vertexId","targetVertex","pop","splits","split","newState","stateService","setState","moveToVertexId","mapGraph","match","newUserState","getState","getMap","Build","initialVertex","loadMap","bounds","LatLngBounds","markerIcon","Icon","iconUrl","iconSize","iconAnchor","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","e","round","path","npath","aStar","find","clear","nextVertex","zoomControl","ImageOverlay","url","MockWorldService","StyledTableCell","withStyles","theme","head","palette","common","black","white","body","TableCell","StyledTableRow","root","action","hover","TableRow","table","StatisticsBlock","statistics","createData","base","modifier","total","attributeTotal","attribute","rows","strength","dexterity","constitution","intelligence","wisdom","charisma","TableContainer","component","Paper","Table","aria-label","TableHead","align","TableBody","row","scope","PartyInventory","characterGrid","gridTemplateColumns","gridAutoRows","sectionHeading","bannerContainer","itemContainer","close","filter","portrait","portraitImg","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","overflowY","gridRowEnd","statisticsBlock","HeroProfile","setHero","world","setWorld","setCurrentId","newHero","newWorld","getWorld","loadHero","attributes","behaviour","renderTrait","EncounterMap","initialPos","PitTheme","createMuiTheme","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6/RAQqBA,E,sGACHC,GACV,OAAQA,GACJ,IAAK,yBACL,IAAK,yBACD,OAAOC,EACX,IAAK,4BACL,IAAK,4BACD,OAAOC,EACX,IAAK,WACL,IAAK,WACD,OAAOC,EACX,IAAK,sBACL,IAAK,sBACD,OAAOC,EACX,IAAK,sBACL,QACI,OAAOC,K,iCAMC,IAAD,OAEf,OADcN,EAAgBO,SAASC,KAAI,SAACP,GAAD,OAAQ,EAAKQ,cAAcR,Q,+BAIjES,GACLV,EAAgBO,SAAWG,I,wCAI3B,MAAO,CAACR,EAASC,EAAWC,EAAUE,EAAWD,O,KAjCpCL,EAqBFO,SAAqB,CAAC,yBAA0B,4BAA6B,WAAY,uBCxB5G,IAAMI,EAAYC,YAAW,CACzBC,UAAW,CACPC,gBAAiB,UACjBC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,SAAU,qBACVC,MAAO,SAEXC,WAAY,CACRC,MAAO,OACPP,QAAS,QAEbQ,YAAa,CACTC,SAAU,WACVC,OAAQ,IACRC,MAAO,OACPC,IAAK,QAETC,UAAW,CACPN,MAAO,OACPO,OAAQ,OACRC,OAAQ,QACRC,aAAc,MACdC,YAAa,OACbC,YAAa,UACbC,OAAQ,OAEZC,QAAS,CACLN,OAAQ,OACRO,cAAe,OACfC,QAAS,UAoDFC,MA9Cf,SAAgBC,GACZ,IAAMC,EAAU9B,IADgB,EAGR+B,mBAAS,MAHD,mBAG3BC,EAH2B,KAGpBC,EAHoB,KAmChC,OA9BAC,qBAAU,WAaO,MAATF,GAXc,WACd,IACMG,GADc,IAAI9C,GACK+C,WACxBD,EAKLF,EAASE,GAJLE,QAAQC,MAAR,iBAQJC,MAiBJ,wBAAQC,UAAWV,EAAQ5B,UAA3B,SACI,uBAAMsC,UAAWV,EAAQnB,WAAzB,UACI,qBAAK8B,IAAI,gBAAgBD,UAAWV,EAAQL,QAASiB,IAAI,SACzD,qBAAKF,UAAU,eAAeE,IAAI,qBAAqBD,IAAI,cAC3D,sBAAMD,UAAWV,EAAQjB,YAAzB,SAhBHmB,EAEEA,EAAMnC,KAAI,SAAC8C,GACd,OACI,mBAAiBC,KAAI,qBAAgBD,EAAKrD,IAA1C,SACI,qBAAKmD,IAAKE,EAAKE,SAAUL,UAAWV,EAAQZ,UAAWwB,IAAI,aADvDC,EAAKrD,OAJF,a,mEClEE,iBAAlBwD,OAAOC,UAEdD,OAAOC,QAAU,IAkBrB,IAAIC,EAAiBF,OAAOG,EAAIH,OAAOG,EAAIC,EAAQ,IAO7CC,E,4MAEMC,cAAgB,E,EAChBC,iBAAmB,I,EACnBC,eAAmC,CAAC,EAAG,G,EACvCC,iBAAqC,CAAC,EAAG,G,EACzCC,oBAAqB,E,EACrBC,0BAA2B,E,EAC3BC,YAAc,E,EAEtBC,YAAc,WACV,EAAKC,GAAG,OAAQ,EAAKC,YAArB,iB,EAMJC,QAAU,SAACC,EAA0BC,GACjC,GAAK,EAAKC,KAsBV,OApBA,EAAKZ,iBAAmBW,EAAQE,SAChC,EAAKd,cAAgBe,YAAYC,MAAQJ,EAAQE,SACjD,EAAKX,iBAAmB,EAAKc,YAC7B,EAAKf,eAAiBS,EACtB,EAAKP,qBAAuBQ,EAAQM,aACpC,EAAKb,8BACiCc,IAAlC,EAAKd,yBACD,EAAKA,yBACL,EAAKQ,KAAKO,SAASC,UAEvB,EAAKjB,qBACL,EAAKS,KAAKO,SAASE,UACnB,EAAKT,KAAKU,gBAAgBD,UAC1B,EAAKT,KAAKD,QAAQY,UAAY,SAC9B,EAAKX,KAAKD,QAAQa,gBAAkB,UAGxC,EAAKC,KAAK,aACV,EAAKC,WAEE,gB,EASHA,SAAW,WACf,GAAK,EAAKd,KAAV,CAEA,IAAIe,EAAY,EAAK5B,cAAgBe,YAAYC,MAEjD,GAAIY,EAAY,EAUZ,OATA,EAAKC,UAAU,EAAK3B,gBACpB,EAAKwB,KAAK,WACN,EAAKrB,2BACL,EAAKQ,KAAKO,SAASU,SACnB,EAAKjB,KAAKU,gBAAgBO,SAC1B,EAAKjB,KAAKD,QAAQY,WAAY,EAC9B,EAAKX,KAAKD,QAAQa,iBAAkB,GAExC,EAAKpB,0BAA2B,EACzB,eAGX,IAAI0B,EAAa,EAAKlB,KAAKmB,uBAAuB,EAAK7B,kBACnD8B,EAAW,EAAKpB,KAAKmB,uBAAuB,EAAK9B,gBACjDgC,GAAe,EAAKjC,iBAAmB2B,GAAa,EAAK3B,iBAEzDkC,EAAYF,EAASG,WAAWF,GAAaG,IAC7CN,EAAWK,WAAW,EAAIF,IAE1BI,EAAa,EAAKzB,KAAK0B,uBAAuBJ,GAClD,EAAKN,UAAUS,GAEX,EAAKlC,oBACL,EAAKS,KAAK2B,MAAMF,EAAY,CAAEG,SAAS,IAG3C,EAAKnC,YAAcV,EAAe8C,KAAKC,iBAAiB,EAAKhB,SAA1C,kB,4DAnCnB/B,EAAe8C,KAAKE,gBAAgBC,KAAKvC,iB,GA9CtBV,EAAekD,QAsF1CpD,OAAOK,aAAeA,EAEPA,Q,QCnGTgD,E,4MAEIC,uB,qEAEavE,GACnB,IAAMwE,EAAK,IAAIlD,EAAatB,EAAMf,SAAUmF,KAAKK,WAAWzE,IAI5D,OAHAoE,KAAKG,kBAAoBvE,EAAM0E,UAC/BF,EAAGzC,GAAG,UAAWqC,KAAKO,SACtBP,KAAKQ,aAAL,2BAAyB5E,EAAM6E,SAA/B,IAAwCC,eAAgBN,IACjDA,I,gCAIHJ,KAAKG,mBACPH,KAAKG,kBAAkBH,Q,2CAINW,EAA6BC,GAC5CA,EAAQ/F,WAAa8F,EAAU9F,UAAuC,iBAApB+F,EAAQ3C,UAC5D+B,KAAKa,eAAehD,QAAQ+C,EAAQ/F,SAAU,CAC5CoD,SAAU2C,EAAQ3C,SAClBI,aAAcuC,EAAQvC,eAGtBuC,EAAQE,OAASH,EAAUG,MAAQF,EAAQE,MAC7Cd,KAAKa,eAAeE,QAAQH,EAAQE,MAElCF,EAAQI,eAAiBL,EAAUK,mBAAyC1C,IAAzBsC,EAAQI,cAC7DhB,KAAKa,eAAeI,gBAAgBL,EAAQI,cAE1CJ,EAAQM,UAAYP,EAAUO,cAA+B5C,IAApBsC,EAAQM,SACnDlB,KAAKa,eAAeM,WAAWP,EAAQM,SAErCN,EAAQQ,YAAcT,EAAUS,gBAA8C9C,IAAjC0B,KAAKa,eAAetC,YACzC,IAAtBqC,EAAQQ,UACVpB,KAAKa,eAAetC,SAASU,SAE7Be,KAAKa,eAAetC,SAASE,a,+BAKzB,IACA4C,EAAarB,KAAKpE,MAAlByF,SAER,OAAmB,MAAZA,GAAyC,MAArBrB,KAAKQ,aAAuB,KACrD,cAAC,IAAD,CAAiBc,MAAOtB,KAAKQ,aAA7B,SACGa,Q,SAhDiBE,GAsDXC,cAA8BtB,G,6DC1DxBuB,E,iDACTC,aAA6B,K,KAC7BC,UAA2B,K,KAC3BC,aAAuB,G,2DAETvI,GAClB,OAAQA,GACJ,IAAK,QACD2G,KAAK4B,aAAe,aACpB5B,KAAK0B,aAAe,IAAIG,QAAMC,GAE9B,MACJ,IAAK,WACD9B,KAAK4B,aAAe,kBACpB5B,KAAK0B,aAAe,IAAIG,QAAMC,GAC9B,MACJ,IAAK,cACD9B,KAAK4B,aAAe,oCACpB5B,KAAK0B,aAAe,IAAIG,QAAME,GAC9B,MACJ,IAAK,QACD/B,KAAK4B,aAAe,mBACpB5B,KAAK0B,aAAe,IAAIG,QAAMG,GAC9B,MACJ,IAAK,UACDhC,KAAK4B,aAAe,SACpB5B,KAAK0B,aAAe,IAAIG,QAAMC,GAC9B,MACJ,IAAK,OACD9B,KAAK4B,aAAe,aACpB5B,KAAK0B,aAAe,IAAIG,QAAMI,GAC9B,MACJ,IAAK,aACDjC,KAAK4B,aAAe,gBACpB5B,KAAK0B,aAAe,IAAIG,QAAMK,GAC9B,MACJ,QACI,OAAOT,EAA0BU,mBAIzC,OAFAnC,KAAK2B,UAAYtI,EAEV2G,KAAKoC,a,mCAGIC,GAChB,OAAKrC,KAAK0B,cAAiB1B,KAAK2B,WAChC3B,KAAK0B,aAAaY,kBAAkBD,GAE7BrC,KAAKoC,YAHsCX,EAA0BU,qB,iCAO5E,IAAKnC,KAAK0B,eAAiB1B,KAAK2B,UAAW,OAAOF,EAA0BU,mBAE5E,IAAKnC,KAAK0B,aAAaa,YAAa,CAChC,IAAMC,EAASxC,KAAK0B,aAAae,eAAeC,oBAAoB,UAC9DC,EAAoB3C,KAAK0B,aAAae,eAAeC,oBAAoB,qBAC/E,MAAO,CACHrJ,GAAI2G,KAAK2B,UACTiB,MAAO5C,KAAK4B,aACZiB,cAAe,GACfC,QAAS,GACTC,YAAY,EACZC,WAAY,CACRR,OAAM,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAQlB,MAChBqB,kBAAiB,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAmBrB,QAKlD,IAAMuB,EAAgB7C,KAAK0B,aAAauB,WACxC,IAAKJ,EAAe,OAAOpB,EAA0BU,mBAErD,IAAMe,EAAqClD,KAAK0B,aAAayB,eAAevJ,KACxE,SAACwJ,GACG,MAAO,CACHC,MAAOD,EAAEC,MACTC,KAAMF,EAAEE,SAapB,MARqC,CACjCjK,GAAI2G,KAAK2B,UACTiB,MAAO5C,KAAK4B,aACZiB,cAAeA,EACfC,QAASI,EACTH,YAAY,M,0CAOhB,MAAO,CACH1J,GAAI,GACJuJ,MAAO,GACPC,cAAe,GACfC,QAAS,GACTC,YAAY,O,kDC3GlBhJ,EAAYC,YAAW,CACzBuJ,UAAW,CACP1I,SAAU,WACVK,OAAQ,SAEZa,MAAO,CACHL,QAAS,OACTb,SAAU,YAEd6B,KAAM,CACF/B,MAAO,OACPO,OAAQ,OACRC,OAAQ,QACRC,aAAc,MACdC,YAAa,OACbC,YAAa,YACbC,OAAQ,MACRiI,OAAQ,WAEZC,aAAc,CACV9I,MAAO,OACPO,OAAQ,OACRC,OAAQ,QACRC,aAAc,MACdC,YAAa,OACbC,YAAa,mBACbC,OAAQ,MACRiI,OAAQ,aAkFDE,MAvEf,SAAsB9H,GAClB,IAAMC,EAAU9B,IACR4J,EAAoC/H,EAApC+H,mBAAoBC,EAAgBhI,EAAhBgI,YAFgB,EAIlB9H,mBAAS,MAJS,mBAIvC+H,EAJuC,KAI/BC,EAJ+B,OAKdhI,mBAAS,IALK,mBAKvCiI,EALuC,KAK7BC,EAL6B,KAO5C/H,qBAAU,WAaQ,MAAV4H,GAXe,WACf,IAAMI,EAAc,IAAI7K,EAClB8C,EAAWN,EAAMsI,UAAYD,EAAYE,kBAAoBF,EAAY9H,WAC1ED,EAKL4H,EAAU5H,GAJNE,QAAQC,MAAR,iBAQJ+H,MAIR,IAAMC,EAAW,SAACC,GACd,IAAMjL,EAAKkL,OAAOC,SAASF,EAAGG,cAAcpL,IAEtCqL,EAAcd,EAAcG,EAASnK,KAAI,SAAC+K,GAAD,OAAOA,KAAK,GAK3D,GAHAD,EAAYrL,IAAOqL,EAAYrL,GAC/B2K,EAAYU,GAEPb,EAAL,CAGA,IADA,IAAMe,EAA4B,GACzBC,EAAI,EAAGA,EAAI,EAAGA,IACfH,EAAYG,IAAID,EAAgBE,KAAKjB,EAAOgB,GAAGxL,IAGnDsK,GAAoBA,EAAmBiB,KAsB/C,OACI,qBAAKrI,UAAWV,EAAQ0H,UAAxB,SACI,qBAAKhH,UAAWV,EAAQE,MAAxB,SACI,cAACgJ,EAAA,EAAD,CAAMxB,WAAS,EAAf,SAtBQ,WAChB,IAAKM,EAAQ,OAAO,KAEpB,IAAIR,EAAQ,EAEZ,OAAOQ,EAAOjK,KAAI,SAAC8C,GACf,IAAMsI,EAAWjB,EAASV,GAAT,UAAqBxH,EAAQ4H,cAA7B,UAAiD5H,EAAQa,MACpEuI,EACF,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,CAASxC,MAAOlG,EAAK2I,KAArB,SACI,qBAAK7I,IAAKE,EAAKE,SAAUvD,GAAIgK,EAAMiC,WAAYC,QAASlB,EAAU9H,UAAWyI,EAAUvI,IAAI,aAD/D4G,KAMxC,OADAA,IACO4B,KAOcO,UCvG3BzL,EAAYC,YAAW,CACzByL,YAAa,GAGbC,eAAgB,CACZ/K,MAAO,OACPgL,UAAW,YAyCJC,MArCf,WACI,IAAM/J,EAAU9B,IADM,EAIM+B,mBAAS,IAJf,mBAIjBhC,EAJiB,KAIR+L,EAJQ,KAWhBC,EAAU,kBAAyB,IAAnBhM,EAAQiM,QAW9B,OACI,gCACI,cAAC,EAAD,CAAcpC,mBAlBG,SAACqC,GAEtBH,EAAWG,IAgB6C9B,WAAW,EAAMN,aAAa,IAElF,cAACwB,EAAA,EAAD,CAASxC,MAAOkD,IAAY,sBAAwB,4BAApD,SACI,qBAAKvJ,UAAWV,EAAQ6J,eAAxB,SACI,cAACO,EAAA,EAAD,CAAQ1J,UAAWV,EAAQ4J,YAAaF,QAfpC,SAACjB,GACZwB,MAEW,IAAI1M,GACZ4C,SAASlC,IAWyDoM,UAAWJ,IAAWK,QAAQ,YAAY1L,MAAM,UAA9G,2BCtCdV,EAAYC,YAAW,CACzByL,YAAa,GAGbC,eAAgB,CACZ/K,MAAO,OACPgL,UAAW,YA0CJS,OAtCf,WACI,IAAMvK,EAAU9B,IADG,EAIO+B,mBAAS,IAJhB,mBAIduK,EAJc,KAINC,EAJM,KAYbR,EAAU,kBAAMO,EAAON,OAAS,GAWtC,OACI,gCACI,cAAC,EAAD,CAAcpC,mBAnBG,SAACqC,GAElBA,EAAID,OAAS,GACbO,EAAUN,EAAI,KAgBsC9B,WAAW,IAE/D,cAACkB,EAAA,EAAD,CAASxC,MAAOkD,IAAY,iBAAmB,uBAA/C,SACI,qBAAKvJ,UAAWV,EAAQ6J,eAAxB,SACI,cAACO,EAAA,EAAD,CAAQ1J,UAAWV,EAAQ4J,YAAaF,QAfpC,SAACjB,GACjB,GAAKwB,IAEW,IAAI1M,GAYsD8M,UAAWJ,IAAWK,QAAQ,YAAY1L,MAAM,UAA9G,6B,yCCxCdV,GAAYC,YAAW,CACzBuM,KAAM,CACFZ,UAAW,SACXhL,MAAO,QAEX4I,UAAW,CACP1I,SAAU,WACVK,OAAQ,QACRP,MAAO,QACPY,OAAQ,QAEZiL,SAAU,CACNtL,OAAQ,QAEZuL,UAAW,CACP/K,QAAS,YACTb,SAAU,YAEdqK,KAAM,CACFvK,MAAO,OACPQ,OAAQ,QACRC,aAAc,KACdC,YAAa,MACbC,YAAa,YACbkI,OAAQ,UACRtJ,gBAAiB,cAErBwM,aAAc,CACV/L,MAAO,OACPQ,OAAQ,QACRC,aAAc,KACdC,YAAa,MACbC,YAAa,YACbkI,OAAQ,UACRtJ,gBAAiB,gBAoFVyM,GA1EmC,SAAC/K,GAC/C,IAAMC,EAAU9B,KACR4J,EAA2C/H,EAA3C+H,mBAAoBiD,EAAuBhL,EAAvBgL,MAAOhD,EAAgBhI,EAAhBgI,YAF8C,EAInD9H,mBAAS,IAJ0C,mBAI5EiI,EAJ4E,KAIlEC,EAJkE,KAM3EK,EAAW,SAACC,GACd,IAAMjL,EAAKkL,OAAOC,SAASF,EAAGG,cAAcpL,IAEtCqL,EAAcd,EAAcG,EAASnK,KAAI,SAAC+K,GAAD,OAAOA,KAAK,GAE3DD,EAAYrL,IAAOqL,EAAYrL,GAC/B2K,EAAYU,GAGZ,IADA,IAAMmC,EAAwB,GACrBhC,EAAI,EAAGA,EAAI,EAAGA,IACfH,EAAYG,IAAIgC,EAAY/B,KAAK8B,EAAM/B,GAAGxL,IAG9CsK,GAAoBA,EAAmBkD,IA0C/C,OACI,qBAAKtK,UAAWV,EAAQ0K,KAAxB,SACI,qBAAKhK,UAAWV,EAAQ0H,UAAxB,SACI,qBAAKhH,UAAWV,EAAQ4K,UAAxB,SACI,cAAC1B,EAAA,EAAD,CAAMxB,WAAS,EAACuD,QAAS,EAAGxM,WAAW,SAASyM,QAAQ,eAAxD,SA3CQ,WAmBpB,IAjBA,IAAI1D,EAAQ,EAGN2D,EAAYJ,EAAMhN,KAAI,SAACsL,GACzB,IAAMF,EAAWjB,EAASV,GAAT,UAAqBxH,EAAQ6K,cAA7B,UAAiD7K,EAAQqJ,MACpED,EACF,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG5I,UAAWV,EAAQ2K,SAArC,SACI,cAACpB,EAAA,EAAD,CAASxC,MAAOsC,EAAKG,KAArB,SACI,qBAAK7I,IAAK0I,EAAKtI,SAAUvD,GAAIgK,EAAMiC,WAAYC,QAASlB,EAAU9H,UAAWyI,EAAUvI,IAAKyI,EAAKG,QADrEhC,KAMxC,OADAA,IACO4B,KAGLgC,EAAa,GACVpC,EAAI+B,EAAMb,OAAQlB,EAhBV,EAgBwBA,IACrCoC,EAAWnC,KAAK,IAGpB,IAAMoC,EAAaD,EAAWrN,KAAI,SAAAiL,GAC9B,IAAMG,EAAWjB,EAASV,GAAT,UAAqBxH,EAAQ6K,cAA7B,UAAiD7K,EAAQqJ,MACpED,EACF,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG5I,UAAWV,EAAQ2K,SAArC,SACI,cAACpB,EAAA,EAAD,CAASxC,MAAO,UAAhB,SACI,qBAAKpG,IAAK,0BAA2BnD,GAAIgK,EAAMiC,WAAY/I,UAAWyI,EAAUvI,IAAI,aADxD4G,KAMxC,OADAA,IACO4B,KAGX,OAAO+B,EAAUG,OAAOD,GAQPE,YCnHJC,G,oGAIOC,EAAYpC,GAChC,IAAM7B,EAAQiE,EAAMC,QAAQrC,GACxB7B,GAAS,GACTiE,EAAME,OAAOnE,EAAO,O,KCJXoE,G,mGAEb,MAAO,CACHC,WAAY,GACZC,OAAQ,CAAC,sCAAuC,kC,qCAQpD,OAAOF,EAAiBG,oB,mCAGfC,GACTJ,EAAiBG,kBAAoBC,I,uCAGxBxO,GACboO,EAAiBG,kBAAkB9C,KAAKzL,K,0CAGxBA,GAChBgO,GAAYS,OAAOL,EAAiBG,kBAAmBvO,K,iCAIvD,OAAOoO,EAAiBM,gB,+BAGnBF,GACLJ,EAAiBM,cAAgBF,I,mCAGxBxO,GACToO,EAAiBM,cAAcjD,KAAKzL,K,sCAGxBA,GACZgO,GAAYS,OAAOL,EAAiBM,cAAe1O,O,KAxCtCoO,GAQFG,kBAA8B,CAAC,cAR7BH,GASFM,cAA0B,CAAC,YAAa,sB,kCCNtC3O,G,4DAajB4O,SAAW,SAAChC,GAAD,OAA2BA,EAAIpM,KAAI,SAAAP,GAAE,OAAI,EAAK4O,cAAc5O,O,0DAZzDA,GACV,OAAQA,GACJ,IAAK,qBACD,OAAO6O,GACX,IAAK,YACD,OAAOC,GACX,IAAK,aACL,QACI,OAAOC,Q,KCJjBrO,GAAYC,YAAW,CACzBqO,SAAU,CACN1N,MAAO,OACPE,SAAU,WACVG,IAAK,QACLsN,KAAM,SAEVC,aAAc,CACV5N,MAAO,OACPE,SAAU,WACVG,IAAK,QACLsN,KAAM,SAEVE,YAAa,CAETjN,OAAQ,UAEZkN,eAAgB,CACZ9N,MAAO,OACPgL,UAAW,SACX+C,cAAe,UA2IRC,OAvIf,WACI,IAAM9M,EAAU9B,KADH,EAIiC+B,mBAAS,IAJ1C,mBAIR8M,EAJQ,KAIUC,EAJV,OAKyC/M,mBAAS,IALlD,mBAKRgN,EALQ,KAKcC,EALd,OAOqBjN,mBAAS,MAP9B,mBAORkN,EAPQ,KAOIC,EAPJ,OAQ6BnN,mBAAS,MARtC,mBAQRoN,EARQ,KAQQC,EARR,KAYblN,qBAAU,WAiBa,OAAf+M,GAA0C,OAAnBE,GAfT,WAGd,IAAME,EAAe,IAAI3B,GACnB4B,EAAeD,EAAaE,WAC5BC,EAAmBH,EAAaI,eAEhCC,EAAc,IAAIC,GAClBC,EAAgBF,EAAYzB,SAASqB,GACrCO,EAAoBH,EAAYzB,SAASuB,GAE/CN,EAAcU,GACdR,EAAkBS,GAIlBC,MAIR,IAGMC,EAAkB,kBAAelB,EAAiB7C,OAAS,GAC3DgE,EAAsB,kBAAejB,EAAqB/C,OAAS,GAGnEiE,EAAwB,mBAAgBd,GAAiBA,EAAenD,OAAS6C,EAAiB7C,OA/BvF,GAiEjB,OAAKiD,GAAeE,EAiBhB,gCACI,iCACI,qBAAK1M,IAAI,qBAAqBC,IAAI,QAAQF,UAAWV,EAAQwM,WAC7D,cAAC,GAAD,CAAmBzB,MAAOoC,EAAYpF,aAAa,EAAMD,mBA7DvC,SAACqC,GAAD,OAAmB6C,EAAoB7C,SA+D7D,sBAAKzJ,UAAWV,EAAQ4M,eAAxB,UACI,cAACrD,EAAA,EAAD,CAASxC,MAnBboH,IACO,8BAEJF,IAAoB,2BAA6B,6BAgBhD,SACI,+BACI,cAAC7D,EAAA,EAAD,CACI1J,UAAWV,EAAQ2M,YACnBjD,QA3DP,SAACjB,GACd,GAAKwF,IAAL,CAGA,IADA,IAAMG,EAAU,IAAIxC,GACX5C,EAAI,EAAGA,EAAI+D,EAAiB7C,OAAQlB,IACzCoF,EAAQC,gBAAgBtB,EAAiB/D,IACzCoF,EAAQE,iBAAiBvB,EAAiB/D,IAI9CgE,EAAoB,IACpBI,EAAc,MACdE,EAAkB,QAgDEjD,SAAU8D,MAA4BF,IACtC3D,QAAQ,YACR1L,MAAM,UACN2P,UAAW,cAAC,KAAD,IANf,sBAYR,cAAChF,EAAA,EAAD,CAASxC,MA1BboH,IAAgC,0BAE7BD,IAAwB,wBAA0B,kCAwBjD,SACI,+BACI,cAAC9D,EAAA,EAAD,CACI1J,UAAWV,EAAQ2M,YACnBjD,QAxDR,SAACjB,GACb,GAAKyF,IAAL,CAGA,IADA,IAAME,EAAU,IAAIxC,GACX5C,EAAI,EAAGA,EAAIiE,EAAqB/C,OAAQlB,IAC7CoF,EAAQI,oBAAoBvB,EAAqBjE,IACjDoF,EAAQK,aAAaxB,EAAqBjE,IAI9CkE,EAAwB,IACxBE,EAAc,MACdE,EAAkB,QA6CEjD,WA7EkB8C,GAAaA,EAAWjD,OAAS+C,EAAqB/C,OA9B/E,IA2GyCgE,IAClC5D,QAAQ,YACR1L,MAAM,UACN2P,UAAW,cAAC,KAAD,IANf,wBAaZ,iCACI,qBAAK5N,IAAI,yBAAyBC,IAAI,YAAYF,UAAWV,EAAQ0M,eACrE,cAAC,GAAD,CAAmB3B,MAAOsC,EAAgBtF,aAAa,EAAMD,mBA9FvC,SAACqC,GAAD,OAAmB+C,EAAwB/C,YAyClE,MCnGTjM,GAAYC,YAAW,CACzBuQ,OAAQ,GAGRC,WAAY,CACR3P,SAAU,WACVqG,QAAS,GACTnG,MAAO,QAEX0P,QAAS,CACLC,SAAU,QACVvQ,UAAW,QACXuB,QAAS,OACTiP,WAAY,UAEhBC,QAAS,CACLlP,QAAS,UAkKFmP,OAvJf,SAAyBjP,GAA8B,IAuF5BkP,EAtFfC,EAAyBnP,EAAzBmP,QAASC,EAAgBpP,EAAhBoP,YADiC,EAGvBlP,mBAAS,IAAImP,GAAjCC,EAH2C,sBAIlBpP,mBAAS,IAJS,mBAI7CqP,EAJ6C,KAIlCC,EAJkC,OAK1BtP,mBAAS,IALiB,mBAK7C8G,EAL6C,KAKtCyI,EALsC,OAMtBvP,mBAAS,IANa,mBAM7CgH,EAN6C,KAMpCwI,EANoC,OAOZxP,oBAAS,GAPG,mBAO7CyP,EAP6C,KAO/BC,EAP+B,KAS5CC,EAAgC,OAAhBT,EAChBnP,EAAU9B,KAEV2R,EAAc,WAChBF,GAAgB,GAChBT,KAQEY,EAAe,SAACrH,GAClB,IAAMjC,EAAWkC,OAAOC,SAASF,EAAGG,cAAcpL,IAG5CuS,EAAYV,EAAiBW,aAAaxJ,GAE3CuJ,EAAU7I,WASX2I,KARAtP,QAAQ0P,IAAR,mBAAwBzJ,EAAxB,gBAAwCuJ,EAAUvS,KAElD+R,EAAaQ,EAAU/I,eACvBwI,EAASO,EAAUhJ,OACnB0I,EAAWM,EAAU9I,WAQvBiJ,EAAiB,SAACzH,GACpB,IAzB0B9B,EAyBpBoJ,EAAYV,EAAiB9I,WAEnC,GAAKwJ,EAAU7I,WAGR,CAEH,GAAI6I,EAAU5I,WAAY,CACtB,IAAMR,EAASoJ,EAAU5I,WAAWR,OACpC,GAAIA,EAEA,OApCcA,EAmCOA,EAlCjCgJ,GAAgB,QAChBT,EAAQvI,GAqCJkJ,SAXAN,EAAaQ,EAAU/I,eACvByI,EAAWM,EAAU9I,UAqF7B,OAvEA7G,qBAAU,WAsBFwP,IAASF,GApBU,WACnB,GAAKP,EAAL,CAEA5O,QAAQ0P,IAAR,4BAAiCd,IAEjCQ,GAAgB,GAEhB,IAAMI,EAAYV,EAAiBc,eAAehB,GAC9CY,EAAU7I,WACV3G,QAAQC,MAAR,gCAAuC2O,KAG3C5O,QAAQ0P,IAAR,kBAAuBF,EAAUvS,GAAjC,eACA+R,EAAaQ,EAAU/I,eACvBwI,EAASO,EAAUhJ,OACnB0I,EAAWM,EAAU9I,WAMrBkJ,KAEL,CAAChB,IAgDA,cADA,CACCiB,EAAA,EAAD,CACI1P,UAAWV,EAAQ0O,OACnBQ,QAASW,EACTQ,kBAAgB,sBAChBT,KAAMA,EAJV,UAQI,eAACU,EAAA,EAAD,CAAe5P,UAAWV,EAAQ4O,QAAlC,UACI,qBAAKlO,UAAWV,EAAQ2O,WAAY/N,IAAI,GAAGD,IAAI,uBAC/C,6BAAKoG,IA5CO,SAACU,GAErB,IAAIT,EAAgBS,EAEd8I,EAAa9I,EAAKiE,QAAQ,eAAiB,EAC7C6E,IACAvJ,EAAgBA,EAAcwJ,QAAQ,aAAc,KAExD,IAAMC,EAAehJ,EAAKiE,QAAQ,iBAAmB,EACjD+E,IACAzJ,EAAgBA,EAAcwJ,QAAQ,eAAgB,KAE1D,IAAME,EAAgBjJ,EAAKiE,QAAQ,kBAAoB,EACnDgF,IACA1J,EAAgBA,EAAcwJ,QAAQ,gBAAiB,KAE3D,IAAMG,EAAUlJ,EAAKiE,QAAQ,YAAc,EAK3C,OAJIiF,IACA3J,EAAgBA,EAAcwJ,QAAQ,UAAW,KAIjD,gCACI,4BAAIxJ,IACHuJ,EAAa,cAAC,EAAD,IAAqB,KAClCE,EAAe,cAAC,EAAD,IAAmB,KAClCC,EAAgB,cAAC,GAAD,IAAkB,KAClCC,EAAU,cAAC,GAAD,IAAY,QAkBtBC,CAAgBtB,MAErB,cAACuB,EAAA,EAAD,CAAenQ,UAAWV,EAAQ+O,QAAlC,UA3DeE,EA2D2ChI,EA1DpC,IAAtBgI,EAAW/E,OACJ,cAACE,EAAA,EAAD,CAAQV,QAASwG,EAAjB,sBAGJjB,EAAWlR,KAAI,SAACwJ,GAAD,OAClB,cAAC6C,EAAA,EAAD,CAAQ5M,GAAI+J,EAAEC,MAAMiC,WAA0BC,QAASoG,EAAvD,SACKvI,EAAEE,MAD8BF,EAAEC,iB,mBC3H9BsJ,G,+FACHtT,GAEV,IAAIuT,EAAY,KAEhB,OAAQvT,GACJ,IAAK,eACDuT,EAAOC,GACP,MACJ,IAAK,OACDD,EAAOE,GACP,MACJ,QACIF,EAAOC,GAqBf,MAjBY,CACRxT,GAAIuT,EAAKvT,GACTuD,SAAUgQ,EAAKhQ,SACfmQ,SAAUH,EAAKG,SAASnT,KACpB,SAACoT,GACG,MAAO,CACH3T,GAAI2T,EAAE3T,GACNwB,SAAUoS,iBAAOD,EAAEnS,SAAS,GAAImS,EAAEnS,SAAS,IAC3CqS,YAAaF,EAAEE,YACflC,YAAagC,EAAEhC,YACfmC,OAAQH,EAAEG,WAItBC,MAAOR,EAAKQ,W,+CCpCXC,GAAW,SAACC,EAAWC,GAChC,IAAMC,EAAUF,EAAEG,IAAMF,EAAEE,IACpBC,EAAUJ,EAAEK,IAAMJ,EAAEI,IAC1B,OAAOC,KAAKC,KAAKL,EAAUA,EAAUE,EAAUA,IAGtCI,GACT,WAAYC,GAAqC,IAAD,gCAIxCC,YAJwC,OAMzCC,UAAY,kBAAmC,EAAKD,QANX,KAUzCE,YAAc,WACjB,IAAInB,EAA6B,GAKjC,OAJA,EAAKiB,OAAOG,aAAY,SAACC,GACrBrB,EAASjI,KAAKsJ,MAGXrB,GAhBqC,KAmBzCsB,WAAa,SAACC,GAAD,uBAAgD,EAAKN,cAArD,aAAgD,EAAaO,QAAQD,IAnBzC,KAsBzCE,kBAAoB,SAACC,GAGxB,IAFA,IAAM1B,EAAW,EAAKmB,cAEbrJ,EAAI,EAAGA,EAAIkI,EAAShH,OAAQlB,IAAK,CACtC,IAAM6J,EAAS3B,EAASlI,GAKxB,GAHawI,GAASoB,EAAKC,EAAOC,KAAK9T,UACb6T,EAAOC,KAAKzB,YAIlC,OADA9Q,QAAQ0P,IAAI,SACL4C,EAKf,OAAO,MArCP1O,KAAKgO,OAASD,GCLDa,G,mGACGC,GAGhB,IAFA,IAAIC,EAAWC,OAENlK,EAAI,EAAGA,EAAIgK,EAAQ9B,SAAShH,OAAQlB,IAAK,CAC9C,IAAMK,EAAO2J,EAAQ9B,SAASlI,GAC9BiK,EAASE,QAAQ9J,EAAK7L,GAAI,CACtBwB,SAAUqK,EAAKrK,SACfqS,YAAahI,EAAKgI,YAClBlC,YAAa9F,EAAK8F,YAClBmC,OAAQjI,EAAKiI,SAIrB,IAAK,IAAItI,EAAI,EAAGA,EAAIgK,EAAQzB,MAAMrH,OAAQlB,IAAK,CAC3C,IAAMK,EAAO2J,EAAQzB,MAAMvI,GAC3BiK,EAASG,QAAQ/J,EAAKgK,GAAIhK,EAAKiK,KAAM,CAAEC,OAAQlK,EAAKkK,SAGxD,OAAO,IAAItB,GAASgB,O,KCzBPO,G,iDACnBC,OAAc,G,iDACTC,GACHvP,KAAKsP,OAAOxK,KAAKyK,K,4BAGjB,OAAOvP,KAAKsP,OAAOE,U,8BAGjBxP,KAAKsP,OAAS,O,KCRCG,G,mGAWb,OAF6DA,EAAqBC,S,+BAKtEC,GACZF,EAAqBC,OAASC,M,KAfjBF,GAEFC,OAAoB,CAC/BE,aAAc,OACdC,iBAAkB,mBCoPXC,OAjOR,SAAqBlU,GAEJmU,cACS1W,GAD7B,IAFiD,EAKzByC,mBAAS,MALgB,mBAK5CiS,EAL4C,KAKrCiC,EALqC,OAM7BlU,mBAAS,MANoB,mBAM5C2S,EAN4C,KAMvCwB,EANuC,OAO7BnU,mBAAS,IAAIuT,IAA5Ba,EAP4C,sBAQbpU,mBAAS,MARI,mBAQ5CkP,EAR4C,KAQ/BmF,EAR+B,OASvBrU,mBAAS,MATc,mBAS5CsU,EAT4C,KASpCC,EAToC,OAUjBvU,mBAAS,MAVQ,mBAU5CwU,EAV4C,KAUjCC,EAViC,OAWbzU,oBAAS,GAXI,mBAW5C0U,EAX4C,KAW/BC,EAX+B,KAqB3CC,EAAgB,SAACC,GAEnBvU,QAAQ0P,IAAI,cAEZ,IAZsB8E,EAYhBC,EAAeX,EAAYY,MACjC,GAAID,EAAc,CAWd,GAVAzU,QAAQ0P,IAAR,sBAA2B+E,EAAaxX,KAExC4W,EAAOY,EAAalC,KAAK9T,UAhBP+V,EAmBDC,EAAaxX,GAAGiM,WAlB/BgL,IAENA,EAAUT,iBAAmBe,EAC7BL,EAAaD,IAoBLO,EAAalC,KAAKxB,SAAWqD,EAAa,CAC1CpU,QAAQ0P,IAAR,mBAAwB+E,EAAalC,KAAKxB,SAC1C,IAAM4D,EAASF,EAAalC,KAAKxB,OAAO6D,MAAM,KAC9C,GAAsB,IAAlBD,EAAOhL,OAAc,CACrB,IAAMkL,EAAW,CACbrB,aAAcmB,EAAO,GACrBlB,iBAAkBkB,EAAO,IAEvBG,EAAe,IAAIzB,GAEzBgB,GAAe,GACfR,EAAO,MACPiB,EAAaC,SAASF,GACtBV,EAAaU,GACbjB,EAAS,MACTK,EAAU,OAKdQ,EAAalC,KAAK3D,aAElBmF,EAAeU,EAAalC,KAAK3D,aAGrCyF,GAAe,KA0CjBW,EAAiB,SAACC,EAAoBT,GAExC,GAAKS,EAAL,CAEA,IAAMC,EAAQD,EAAShD,WAAWuC,GAC9BU,GACApB,EAAYpL,KAAKwM,GACjBZ,KAEAtU,QAAQC,MAAR,4BAAmCuU,MAc3C3U,qBAAU,WAmCO,MAAT8R,GAjCY,WACZ,IACMwD,GADe,IAAI9B,IACS+B,WAClC,GAAKD,EAAL,CAKAhB,EAAagB,GAEb,IACM5C,GADU,IAAIhC,IACC8E,OAAOF,EAAa3B,cACzC,GAAKjB,EAAL,CAKA0B,EAAU1B,EAAK/R,UAEfR,QAAQ0P,IAAR,uBAAqB6C,QAArB,IAAqBA,OAArB,EAAqBA,EAAM5B,SAAShH,OAApC,cACA,IAAMsL,EAAWzC,GAAa8C,MAAM/C,GAE9BgD,EAAgBN,EAAShD,WAAWkD,EAAa1B,kBACnD8B,GACA1B,EAAM,OAAC0B,QAAD,IAACA,OAAD,EAACA,EAAehD,KAAK9T,UAG/BmV,EAASqB,GAGTD,EAAeC,EAAUE,EAAa1B,uBAjBlCzT,QAAQC,MAAR,oBATAD,QAAQC,MAAR,sBA8BJuV,MAIR,IAAMC,EAAS,IAAIC,eAAa7E,iBAAO,CAAC,EAAK,IAAOA,iBAAO,CAAC,KAAM,OAG9D8E,EAAa,IAAIC,OAAK,CACtBC,QAAS,oBACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,MA2BrB,OAAK7B,GAAcF,GAAW3B,EAK1B,eAAC2D,EAAA,EAAD,CACIC,IAAKC,MAAIC,OACTC,MAAO,EACPC,SAAU,EACVC,SAAU,EACVb,OAAQA,EACRc,UAAWd,EACXjT,iBAAiB,EACjB2G,QAlJY,SAACqN,GACjB,GAAK7E,GAAUuC,EAAf,CAEAlU,QAAQ0P,IAAR,sBAA2B8B,KAAKiF,MAAMD,EAAE9U,OAAO2P,KAA/C,YAAuDG,KAAKiF,MAAMD,EAAE9U,OAAO6P,OAG3E,IAAM2D,EAAQvD,EAAMS,kBAAkBoE,EAAE9U,QAExC,GAAIwT,EAAO,CACPlV,QAAQ0P,IAAR,4BAAiCwF,EAAMjY,KAEvC,IACIyZ,EADaC,KAAMC,MAAMjF,EAAME,aACbgF,KAAX,OAAgB3C,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAWT,iBAAkByB,EAAMjY,IAE9D,GAAIyZ,EAAK/M,QAAU,EAEf,YADA3J,QAAQ0P,IAAR,4BAAiCwF,EAAMjY,KAI3CyZ,EAAKhC,MAELZ,EAAYgD,QAEZ,IADA,IAAIC,EAAaL,EAAKhC,MACfqC,IACHjD,EAAYpL,KAAKqO,IAEbA,EAAWxE,KAAK3D,cAGpBmI,EAAaL,EAAKhC,MAGtBJ,OAmHA0C,aAAa,EATjB,UAWI,cAAC,GAAD,CAAiBrI,QAlGI,SAACvI,GAC1BpG,QAAQ0P,IAAI,mBACZqE,EAAe,MAEX3N,GAAUuL,GACVqD,EAAerD,EAAOvL,IA6F0BwI,YAAaA,IAE7D,cAACqI,EAAA,EAAD,CAAcC,IAAKlD,EAAQyB,OAAQA,IACnC,cAAC,EAAD,CAAa5T,SAAU,IAAMpD,SAAU4T,EAAKpQ,cAAc,EAAOyC,KAAMiR,EAAYzR,UAAWoQ,IAtC7F3C,EAEYA,EAAMG,cAOPtU,KAAI,SAACoT,GACjB,IAAMlM,EAAO,IAAIkR,OAAK,CAClBC,QAAS,mBACTC,SAAU,CAAC,GAAI,IACf3V,UAAWyQ,EAAE2B,KAAKxB,OAAS,YAAc,gBAE7C,OAAO,cAAClN,EAAA,EAAD,CAAmBpF,SAAUmS,EAAE2B,KAAK9T,SAAU+H,MAAOoK,EAAE3T,GAAGiM,WAAYxE,KAAMA,GAA/DkM,EAAE3T,OAfP,QAoBZ,MChOMka,G,mGAEb,MAAO,CACH5L,OAAQ,CACJ,oDACA,2CACA,qD,mFCIV6L,GAAkBC,cAAW,SAACC,GAAD,MAAY,CAC3CC,KAAM,CACFhJ,WAAY,SACZzQ,gBAAiBwZ,EAAME,QAAQC,OAAOC,MACtCrZ,MAAOiZ,EAAME,QAAQC,OAAOE,OAEhCC,KAAM,CACFrJ,WAAY,SACZnQ,SAAU,OARMiZ,CAUpBQ,MAEEC,GAAiBT,cAAW,SAACC,GAAD,MAAY,CAC1CS,KAAM,CACF,qBAAsB,CAClBja,gBAAiBwZ,EAAME,QAAQQ,OAAOC,WAH3BZ,CAMnBa,MAEEva,GAAYC,YAAW,CACzBua,MAAO,CACH7J,SAAU,OAQH,SAAS8J,GAAgB5Y,GACpC,IAAMC,EAAU9B,KAER0a,EAAe7Y,EAAf6Y,WAER,SAASC,EAAWrP,EAAcsP,EAAcC,EAAkBC,GAC9D,MAAO,CAAExP,OAAMsP,OAAMC,WAAUC,SAGnC,IAAMC,EAAiB,SAACC,GAAD,OAA0BA,EAAUJ,KAAOI,EAAUH,UAEtEI,EAAO,CACTN,EAAW,WAAYD,EAAWQ,SAASN,KAAMF,EAAWQ,SAASL,SAAUE,EAAeL,EAAWQ,WACzGP,EAAW,YAAaD,EAAWS,UAAUP,KAAMF,EAAWS,UAAUN,SAAUE,EAAeL,EAAWS,YAC5GR,EAAW,cAAeD,EAAWU,aAAaR,KAAMF,EAAWU,aAAaP,SAAUE,EAAeL,EAAWU,eACpHT,EAAW,eAAgBD,EAAWW,aAAaT,KAAMF,EAAWW,aAAaR,SAAUE,EAAeL,EAAWW,eACrHV,EAAW,SAAUD,EAAWY,OAAOV,KAAMF,EAAWY,OAAOT,SAAUE,EAAeL,EAAWY,SACnGX,EAAW,WAAYD,EAAWa,SAASX,KAAMF,EAAWa,SAASV,SAAUE,EAAeL,EAAWa,WACzGZ,EAAW,OAAQD,EAAWQ,SAASN,KAAMF,EAAWQ,SAASL,SAAUE,EAAeL,EAAWQ,YAGzG,OACI,cAACM,GAAA,EAAD,CAAgBC,UAAWC,KAA3B,SACI,eAACC,GAAA,EAAD,CAAOnZ,UAAWV,EAAQ0Y,MAAOoB,aAAW,mBAA5C,UACI,cAACC,GAAA,EAAD,UACI,eAACtB,GAAA,EAAD,WACI,cAACd,GAAD,wBACA,cAACA,GAAD,CAAiBqC,MAAM,QAAvB,kBACA,cAACrC,GAAD,CAAiBqC,MAAM,QAAvB,sBACA,cAACrC,GAAD,CAAiBqC,MAAM,QAAvB,wBAGR,cAACC,GAAA,EAAD,UACKd,EAAKpb,KAAI,SAACmc,GAAD,OACN,eAAC7B,GAAD,WACI,cAACV,GAAD,CAAiBgC,UAAU,KAAKQ,MAAM,MAAtC,SACKD,EAAI1Q,OAET,cAACmO,GAAD,CAAiBqC,MAAM,QAAvB,SAAgCE,EAAIpB,OACpC,cAACnB,GAAD,CAAiBqC,MAAM,QAAvB,SAAgCE,EAAInB,WACpC,cAACpB,GAAD,CAAiBqC,MAAM,QAAvB,SAAgCE,EAAIlB,UANnBkB,EAAI1Q,gBClEjD,IAAMtL,GAAYC,YAAW,CACzBwO,YAAa,CAETjN,OAAQ,UAEZkN,eAAgB,CACZ9N,MAAO,OACPgL,UAAW,SACX+C,cAAe,UAoFRuN,GAhFgC,WAC3C,IAAMpa,EAAU9B,KADiC,EAIK+B,mBAAS,IAJd,mBAI5CgN,EAJ4C,KAItBC,EAJsB,OAKPjN,mBAAS,MALF,mBAK5CoN,EAL4C,KAK5BC,EAL4B,KASjDlN,qBAAU,WAaiB,OAAnBiN,GAXc,WAEd,IACMK,GADe,IAAI9B,IACa+B,eAGhCI,GADc,IAAIF,IACc1B,SAASuB,GAE/CJ,EAAkBS,GAIlBC,MAIR,IAEME,EAAsB,kBAAejB,EAAqB/C,OAAS,GAkBzE,IAAKmD,EAAgB,OAAO,KAQ5B,OACI,gCACI,+BACI,cAAC,GAAD,CAAmBtC,MAAOsC,EAAgBvF,mBA/BpB,SAACqC,GAAD,OAAmB+C,EAAwB/C,QAiCrE,qBAAKzJ,UAAWV,EAAQ4M,eAAxB,SACI,cAACrD,EAAA,EAAD,CAASxC,MATVmH,IAAwB,iBAAmB,kCAS1C,SACI,+BACI,cAAC9D,EAAA,EAAD,CACI1J,UAAWV,EAAQ2M,YACnBjD,QAlCN,SAACjB,GACVyF,KAkCe7D,UAAW6D,IACX5D,QAAQ,YACR1L,MAAM,UACN2P,UAAW,cAAC,KAAD,IANf,6BCrElBrQ,GAAYC,YAAW,CACzBkc,cAAe,CACXhc,gBAAiB,QACjByQ,WAAY,SACZvQ,QAAS,OACT+b,oBAAqB,iBACrBC,aAAc,sBACdlb,OAAQ,uBAEZoN,KAAM,GACN+N,eAAgB,CACZ1L,WAAY,iBAEhB2L,gBAAiB,CACbzb,SAAU,WACVK,OAAQ,QACRF,IAAK,QACLF,OAAQ,GAEZyb,cAAe,CACX1b,SAAU,YAEd2b,MAAO,CACH3b,SAAU,WACVyN,KAAM,OACNtN,IAAK,SACLL,MAAO,OACP8b,OAAQ,2FAEZC,SAAU,CACNxc,gBAAiB,QACjBgB,OAAQ,oBACRJ,OAAQ,EACRK,OAAQ,QACRE,YAAa,MACbC,YAAa,QACbF,aAAc,QAElBub,YAAa,CACT9b,SAAU,WACVyN,KAAM,MACN3N,MAAO,MACPQ,OAAQ,QACRC,aAAc,MACdC,YAAa,OACbC,YAAa,iBACbC,OAAQ,QAEZqb,aAAc,CACV/b,SAAU,WACVF,MAAO,OACPQ,OAAQ,QACRC,aAAc,MACdC,YAAa,MACbC,YAAa,kBAEjBub,iBAAkB,CACdvO,KAAM,OACNtN,IAAK,QAET8b,wBAAyB,CACrBxO,KAAM,OACNtN,IAAK,SAET+b,mBAAoB,CAChBzO,KAAM,OACNtN,IAAK,SAETgc,iBAAkB,CACd1O,KAAM,OACNtN,IAAK,SAETyL,UAAW,CACP5L,SAAU,WACVK,OAAQ,oBACRhB,gBAAiB,QACjBiB,OAAQ,QACRE,YAAa,MACbC,YAAa,QACbF,aAAc,QAElBqZ,WAAY,CACRwC,UAAW,SACX/c,gBAAiB,QACjBgd,WAAY,SACZ/b,OAAQ,QACRE,YAAa,MACbC,YAAa,QACbF,aAAc,QAElB+b,gBAAiB,CACbzb,QAAS,eAqIF0b,OA7HR,SAAqBxb,GACxB,IAAMC,EAAU9B,KAGVV,EADc0W,cACF1W,GAJ+B,EAM3ByC,mBAAS,MANkB,mBAM5CY,EAN4C,KAMtC2a,EANsC,OAOzBvb,mBAAS,MAPgB,mBAO5CC,EAP4C,KAOrCC,EAPqC,OAQzBF,mBAAS,MARgB,mBAQ5Cwb,EAR4C,KAQrCC,EARqC,OASjBzb,oBAAU,GATO,mBAS5C6F,EAT4C,KASjC6V,EATiC,KAgDjD,OArCAvb,qBAAU,WAgCF0F,IAActI,GA9BD,WACb,IACMoe,GADU,IAAIre,GACIS,cAAcR,GAGhC6C,GADe,IAAIuL,IACKtL,WAGxBub,GADe,IAAInE,IACKoE,WAEzBF,EAIAvb,EAIAwb,GAKLtb,QAAQ0P,IAAI,gBACZ0L,EAAane,GACbge,EAAQI,GACRzb,EAASE,GACTqb,EAASG,IARLtb,QAAQC,MAAR,iBAJAD,QAAQC,MAAR,iBAJAD,QAAQC,MAAR,gBAoBJub,MAIHlb,GAASX,GAAUub,EASpB,sBAAK/a,UAAWV,EAAQqa,cAAxB,UACI,sBAAK3Z,UAAWV,EAAQyM,KAAxB,UACI,sBAAK/L,UAAWV,EAAQ6a,SAAxB,UACI,uBACA,qBAAKna,UAAWV,EAAQya,gBAAxB,SACI,oBAAI/Z,UAAU,SAAd,SAAwBG,EAAK2I,SAEjC,sBAAK9I,UAAWV,EAAQ0a,cAAxB,UACI,mBAAG5Z,KAAK,MAAR,SACI,qBAAKH,IAAI,mBAAmBD,UAAWV,EAAQ2a,MAAO/Z,IAAI,YAE9D,qBAAKD,IAAKE,EAAKE,SAAUL,UAAWV,EAAQ8a,YAAala,IAAI,YAC7D,qBAAKD,IAAI,kBAAkBD,UAAS,UAAKV,EAAQ+a,aAAb,YAA6B/a,EAAQgb,kBAAoBpa,IAAI,SACjG,qBACID,IAAI,yBACJD,UAAS,UAAKV,EAAQ+a,aAAb,YAA6B/a,EAAQib,yBAC9Cra,IAAI,gBAER,qBAAKD,IAAI,iBAAiBD,UAAS,UAAKV,EAAQ+a,aAAb,YAA6B/a,EAAQmb,kBAAoBva,IAAI,SAChG,qBAAKD,IAAI,mBAAmBD,UAAS,UAAKV,EAAQ+a,aAAb,YAA6B/a,EAAQkb,oBAAsBta,IAAI,iBAG5G,sBAAKF,UAAWV,EAAQ4K,UAAxB,UACI,uBACA,oBAAIlK,UAAWV,EAAQwa,eAAvB,6BACA,uBACA,cAAC,GAAD,UAGR,sBAAK9Z,UAAWV,EAAQ4Y,WAAxB,UACI,uBACA,uBACA,oBAAIlY,UAAWV,EAAQwa,eAAvB,wBACA,qBAAK9Z,UAAWV,EAAQsb,gBAAxB,SACI,cAAC3C,GAAD,CAAiBC,WAAY/X,EAAKmb,eAEtC,oBAAItb,UAAWV,EAAQwa,eAAvB,mBACA,sBAAK9Z,UAAWV,EAAQsb,gBAAxB,UACI,iDACA,6CACA,yDACA,kDAEJ,oBAAI5a,UAAWV,EAAQwa,eAAvB,oBACA,sBAAK9Z,UAAWV,EAAQsb,gBAAxB,UACI,+CACA,gDAEJ,oBAAI5a,UAAWV,EAAQwa,eAAvB,oBACA,qBAAK9Z,UAAWV,EAAQsb,gBAAxB,SAA0Cza,EAAKiL,OAAO/N,KAAI,SAAC+K,GAAD,OAxDlD,SAACA,GAAD,OAChB,8BACKA,EAAEU,KADP,KACeV,EAAEwK,KADjB,KACyBxK,EAAEmT,aAsD8CC,CAAYpT,QAC7E,oBAAIpI,UAAWV,EAAQwa,eAAvB,4BACA,sBAAK9Z,UAAWV,EAAQsb,gBAAxB,UACI,4CAAepb,EAAM2L,cACpB3L,EAAM4L,OAAO/N,KAAI,SAAC+K,GAAD,OACd,4BAAIA,UAGZ,oBAAIpI,UAAWV,EAAQwa,eAAvB,mCACA,qBAAK9Z,UAAWV,EAAQsb,gBAAxB,SACKG,EAAM3P,OAAO/N,KAAI,SAAC+K,GAAD,OACd,4BAAIA,eArEc,MC7B3BqT,OAnHR,SAAsBpc,GAEzB,IAAMqc,EAAahL,iBAAO,CAAC,EAAG,IAFqB,EAK/BnR,mBAASmc,GALsB,gCAMXnc,mBAHpB,gBAH+B,gCAO/BA,mBAAS,IAAIuT,KAPkB,uBAQfvT,mBAAS,OARM,mBAQ9CkP,EAR8C,KAQjCmF,EARiC,KAyEnDlU,qBAAU,eAmBV,IAAM4V,EAAS,IAAIC,eAAa7E,iBAAO,CAAC,EAAK,IAAOA,iBAAO,CAAC,KAAM,QAIlE,OACI,eAACmF,EAAA,EAAD,CACIC,IAAKC,MAAIC,OACTC,KAAM,EACNC,SAAU,EACVC,QAAS,GACTb,OAAQA,EACRc,UAAWd,EACXjT,iBAAiB,EACjB2G,QA3CY,SAACqN,GAGjBxW,QAAQ0P,IAAI,eAAiB8G,EAAE9U,SAyC3BsV,aAAa,EATjB,UAWI,cAAC,GAAD,CAAiBrI,QAxCI,SAACvI,GAC1BpG,QAAQ0P,IAAI,mBACZqE,EAAe,OAsCqCnF,YAAaA,IAE7D,cAACqI,EAAA,EAAD,CAAcC,IAAI,kBAAkBzB,OAAQA,Q,oBClGzCqG,GA5BEC,aAAe,ICgCjBC,OAxBf,WAEI,OACI,qBAAK7b,UAAU,MAAf,SACI,eAAC8b,GAAA,EAAD,CAAe3E,MAAOwE,GAAtB,UACI,cAAC,EAAD,IACA,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CACIpF,KAAK,eACL0C,UAAW,WACP,OAAO,cAAC,GAAD,OAGf,cAAC,IAAD,CAAO1C,KAAK,aAAa0C,UAAWwC,KACpC,cAAC,IAAD,CAAOlF,KAAK,OAAO0C,UAAW1F,KAC9B,cAAC,IAAD,CAAOgD,KAAK,IAAI0C,UAAW1F,gBCbpCwI,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.665aaab5.chunk.js","sourcesContent":["import Hero from \"../models/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroIds: string[] = [\"gyvwain_the_chivalrous\", \"balthazar_the_unblemished\", \"gossamer\", \"gargomela_the_black\"];\r\n\r\n    getParty(): Hero[] {\r\n        const party = MockHeroService._heroIds.map((id) => this.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    setParty(heroIds: string[]): void {\r\n        MockHeroService._heroIds = heroIds;\r\n    }\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return [Gyvwain, Balthazar, Gossamer, Gargamela, Justin];\r\n    }\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Hero from \"../models/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        minHeight: \"100px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        fontSize: \"calc(10px + 2vmin)\",\r\n        color: \"white\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"30px\",\r\n    },\r\n    headerImg: {\r\n        width: \"90px\",\r\n        height: \"90px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"70px\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\nfunction Header(props: HeaderProps) {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = useState(null as Hero[] | null); // The map graph data\r\n\r\n    useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockHeroService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <a key={hero.id} href={`/#/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </a>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import React from 'react'\r\nimport Drift_Marker from \"./Drift_Marker\" \r\nimport { Icon, DivIcon, LatLngExpression } from 'leaflet'\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from 'react-leaflet';\r\n\r\ntype LeafletElement = Drift_Marker\r\n\r\ntype DriftMarkerProps = {\r\n  icon?: Icon | DivIcon,\r\n  draggable?: boolean,\r\n  opacity?: number,\r\n  position: LatLngExpression,\r\n  duration: number,\r\n  keepAtCenter?: boolean,\r\n  zIndexOffset?: number,\r\n  onMoveEnd?: (name: DriftMarker) => void;\r\n} & MapLayerProps\r\n\r\nclass DriftMarker extends MapLayer<DriftMarkerProps, LeafletElement> {\r\n\r\n  private onMoveEndCallback?: (name: DriftMarker) => void;\r\n\r\n  createLeafletElement(props: DriftMarkerProps): LeafletElement {\r\n    const el = new Drift_Marker(props.position, this.getOptions(props));\r\n    this.onMoveEndCallback = props.onMoveEnd;\r\n    el.on('moveend', this.moveEnd);\r\n    this.contextValue = { ...props.leaflet, popupContainer: el }\r\n    return el\r\n  }\r\n\r\n  moveEnd() {\r\n    if (this.onMoveEndCallback) {\r\n      this.onMoveEndCallback(this);\r\n    }\r\n  }\r\n\r\n  updateLeafletElement(fromProps: DriftMarkerProps, toProps: DriftMarkerProps) {\r\n    if (toProps.position !== fromProps.position && typeof toProps.duration == 'number') {\r\n      this.leafletElement.slideTo(toProps.position, {\r\n        duration: toProps.duration,\r\n        keepAtCenter: toProps.keepAtCenter\r\n      })\r\n    }\r\n    if (toProps.icon !== fromProps.icon && toProps.icon) {\r\n      this.leafletElement.setIcon(toProps.icon)\r\n    }\r\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset)\r\n    }\r\n    if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n      this.leafletElement.setOpacity(toProps.opacity)\r\n    }\r\n    if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n      if (toProps.draggable === true) {\r\n        this.leafletElement.dragging.enable()\r\n      } else {\r\n        this.leafletElement.dragging.disable()\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props\r\n\r\n    return children == null || this.contextValue == null ? null : (\r\n      <LeafletProvider value={this.contextValue}>\r\n        {children}\r\n      </LeafletProvider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withLeaflet<DriftMarkerProps>(DriftMarker);\r\n\r\nexport {};\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\nimport TheInterceptContent from \"./TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/chasm.ink.json\";\r\nimport homeContent from \"./encounters/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/nine-bells.ink.json\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        switch (id) {\r\n            case \"hoard\":\r\n                this.currentTitle = \"Treasure !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                //paragraphText: \"You stumble tired and exhaused into a room stuffed to the ceiling with well-crafted wooden coffers.\",\r\n                break;\r\n            case \"wet-room\":\r\n                this.currentTitle = \"The Intercept !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"common-room\":\r\n                this.currentTitle = \"Tracking the Yellow-Bellied Crook\";\r\n                this.currentStory = new Story(commonRoomContent);\r\n                break;\r\n            case \"chasm\":\r\n                this.currentTitle = \"Across the Chasm\";\r\n                this.currentStory = new Story(chasmContent);\r\n                break;\r\n            case \"warrens\":\r\n                this.currentTitle = \"Rats !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"home\":\r\n                this.currentTitle = \"Scupperden\";\r\n                this.currentStory = new Story(homeContent);\r\n                break;\r\n            case \"nine-bells\":\r\n                this.currentTitle = \"The Cathedral\";\r\n                this.currentStory = new Story(nineBellsContent);\r\n                break;\r\n            default:\r\n                return MockStoryEncounterService.createEmptyStory();\r\n        }\r\n        this.currentId = id;\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value,\r\n                    detailedEncounter: detailedEncounter?.value,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map(\r\n            (c: Choice) => {\r\n                return {\r\n                    index: c.index,\r\n                    text: c.text,\r\n                } as InkStoryChoice\r\n            }\r\n        );\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import { Grid, makeStyles } from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Hero from \"../models/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    party: {\r\n        padding: \"30px\",\r\n        position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroSelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\nfunction HeroSelector(props: HeroSelectorProps) {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    let [heroes, setHeroes] = useState(null as Hero[] | null); // The map graph data\r\n    let [selected, setSelected] = useState([] as boolean[]);\r\n\r\n    useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <Grid container>{renderParty()}</Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React, { useState } from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nfunction PartySelection() {\r\n    const classes = useStyles();\r\n\r\n    // let [isValid, setIsValid] = useState(false);\r\n    let [heroIds, setHeroIds] = useState([] as string[]);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = () => heroIds.length === 4; \r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockHeroService();\r\n        service.setParty(heroIds);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} multiSelect={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={changeParty} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default PartySelection;\r\n","import React, { useState } from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nfunction HeroDismiss() {\r\n    const classes = useStyles();\r\n\r\n    // let [isValid, setIsValid] = useState(false);\r\n    let [heroId, setHeroId] = useState(\"\");\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        if (ids.length > 0)\r\n            setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = () => heroId.length > 0; \r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockHeroService();\r\n        \r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={dismissHero} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Dismiss\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default HeroDismiss;\r\n","import { Grid, makeStyles } from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { FunctionComponent, useState } from \"react\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"5%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"5%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: FunctionComponent<any> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, items, multiSelect } = props;\r\n\r\n    let [selected, setSelected] = useState([] as boolean[]);\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        const selectedIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedIds.push(items[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) onSelectionChanged(selectedIds);\r\n    };\r\n\r\n    const renderInventory = () => {\r\n\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem}>\r\n                    <Tooltip title={item.name} key={index}>\r\n                        <img src={item.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt={item.name} />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map(i => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem}>\r\n                    <Tooltip title={\"Nothing\"} key={index}>\r\n                        <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={4} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InventorySelector;\r\n","export default class ArrayHelper {\r\n    /*\r\n    * Remove an item from an array\r\n    */\r\n    public static remove<T>(array: T[], item: T): void {\r\n        const index = array.indexOf(item);\r\n        if (index > -1) {\r\n            array.splice(index, 1);\r\n        }\r\n    }\r\n}","import ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\n\r\nexport default class MockPartyService {\r\n    getParty(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static _inventoryItemIds: string[] = [\"wolf_spear\"];\r\n    private static _stashItemIds: string[] = [\"hag_teeth\", \"token_of_servitude\"];\r\n\r\n    getInventory(): string[] {\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        MockPartyService._inventoryItemIds.push(id);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        ArrayHelper.remove(MockPartyService._inventoryItemIds, id);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        MockPartyService._stashItemIds.push(id);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        ArrayHelper.remove(MockPartyService._stashItemIds, id);\r\n    }\r\n}\r\n","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\n\r\nexport default class MockHeroService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude;\r\n            case \"hag_teeth\":\r\n                return HagTeeth;\r\n            case \"wolf_spear\":\r\n            default:\r\n                return WolfSpear;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Item from \"../models/Item\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    stashImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\nfunction Stash() {\r\n    const classes = useStyles();\r\n\r\n    // let [isValid, setIsValid] = useState(false);\r\n    let [stashSelectedIds, setStashSelectedIds] = useState([] as string[]);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = useState([] as string[]);\r\n\r\n    let [stashItems, setStashItems] = useState(null as Item[] | null);\r\n    let [inventoryItems, setInventoryItems] = useState(null as Item[] | null);\r\n\r\n    const maxItems = 8;\r\n\r\n    useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const stashSelectionChanged = (ids: string[]) => setStashSelectedIds(ids);\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);;\r\n\r\n    const isStashSelected = (): boolean => stashSelectedIds.length > 0; \r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n\r\n    const willStashBeTooBig = (): boolean => (stashItems ? stashItems.length + inventorySelectedIds.length > maxItems : false);\r\n    const willInventoryBeTooBig = (): boolean => (inventoryItems ? inventoryItems.length + stashSelectedIds.length > maxItems : false);\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isStashSelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < stashSelectedIds.length; i++) {\r\n            service.removeStashItem(stashSelectedIds[i]);\r\n            service.addInventoryItem(stashSelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setStashSelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n\r\n        // TODO: How to trigger a reload?\r\n    }\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < inventorySelectedIds.length; i++) {\r\n            service.removeInventoryItem(inventorySelectedIds[i]);\r\n            service.addStashItem(inventorySelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setInventorySelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    if (!stashItems || !inventoryItems)\r\n        return null;\r\n\r\n    const stashToolTip = () => {\r\n        if (willInventoryBeTooBig())\r\n            return \"Too many items in inventory\";\r\n\r\n        return isStashSelected() ? \"Take Item from the Stash\" : \"Please select a stash item\";\r\n    }\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in stash\";\r\n\r\n        return isInventorySelected() ? \"Put Item in the Stash\" : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src=\"./images/stash.png\" alt=\"stash\" className={classes.stashImg} />\r\n                <InventorySelector items={stashItems} multiSelect={true} onSelectionChanged={stashSelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={stashToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isStashSelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willStashBeTooBig() || !isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector items={inventoryItems} multiSelect={true} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Stash;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\nimport PartySelection from \"./PartySelection\";\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\n\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveTo?: string) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nfunction EncounterDialog(props: EncounterDialogProps) {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = useState(new MockEncounterService());\r\n    let [paragraph, setParagraph] = useState(\"\");\r\n    let [title, setTitle] = useState(\"\");\r\n    let [choices, setChoices] = useState([] as InkStoryChoice[]);\r\n    let [storyStarted, setStoryStarted] = useState(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo: string) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo);\r\n    };\r\n\r\n    const handleChoice = (ev: any) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        }\r\n        else {\r\n            // Finish the story\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraph(encounter.paragraphText);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            // Finished -> Check variables\r\n            if (encounter.finishData) {\r\n                const moveTo = encounter.finishData.moveTo;\r\n                if (moveTo) {\r\n                    handleCloseWithValue(moveTo);\r\n                    return;\r\n                }\r\n            }\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n        if (encChoices.length === 0) {\r\n            return <Button onClick={handleContinue}>Continue</Button>;\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    const renderParagraph = (text: string) => {\r\n\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelection /> : null}\r\n                {isHeroSelect ? <HeroSelector /> : null}\r\n                {isHeroDismiss ? <HeroDismiss /> : null}\r\n                {isStash ? <Stash /> : null}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        // className={classes.dialog}\r\n        <Dialog\r\n            className={classes.dialog}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-dialog-title\"\r\n            open={open}\r\n            //disableBackdropClick={true}\r\n        >\r\n            {/* <DialogTitle id=\"simple-dialog-title\">Set backup account</DialogTitle> */}\r\n            <DialogContent className={classes.content}>\r\n                <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" />\r\n                <h1>{title}</h1>\r\n                {renderParagraph(paragraph)}\r\n            </DialogContent>\r\n            <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EncounterDialog;\r\n","import { latLng } from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            vertices: json.vertices.map(\r\n                (v: any) => {\r\n                    return {\r\n                        id: v.id,\r\n                        position: latLng(v.position[0], v.position[1]),\r\n                        clickRadius: v.clickRadius,\r\n                        encounterId: v.encounterId,\r\n                        exitId: v.exitId,\r\n                    } as MapVertex;\r\n                }\r\n            ),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): any => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n}\r\n","import GameState from \"../models/GameState\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static _state: GameState = {\r\n        currentMapId: \"town\",\r\n        currentVertextId: \"scupperden-road\",\r\n    };\r\n\r\n    public getState(): GameState {\r\n        const stateJson = null; //localStorage.getItem(\"state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService._state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        MockGameStateService._state = state;\r\n        // localStorage.setItem(\"state\", JSON.stringify(state));\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// UI Elements\r\nimport { CRS, Icon, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Marker } from 'react-leaflet';\r\nimport DriftMarker from '../components/DriftMarker';\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\n\r\n// Services\r\nimport MockMapService from '../services/MockMapService';\r\n\r\n// Pathfinding imports\r\nimport npath from 'ngraph.path';\r\nimport GraphBuilder  from '../services/GraphBuilder';\r\nimport Queue from '../models/Queue';\r\nimport { Node } from \"ngraph.graph\";\r\nimport { useParams } from 'react-router-dom';\r\nimport MockGameStateService from '../services/MockGameStateService';\r\nimport GameState from '../models/GameState';\r\nimport { MapGraph, NodeData } from '../models/MapGraph';\r\n\r\ntype OverheadMapProps = {\r\n    // None\r\n};\r\n\r\nexport function OverheadMap(props: OverheadMapProps) {\r\n    \r\n    const params: any = useParams();\r\n    const mapId: string = params.id;\r\n\r\n    let [graph, setGraph] = useState(null as MapGraph | null); // The map graph data\r\n    let [pos, setPos] = useState(null as LatLng | null); // The current (target) position of the player marker\r\n    let [vertexQueue] = useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    let [encounterId, setEncounterId] = useState(null as string | null);\r\n    let [mapUrl, setMapUrl] = useState(null as string | null);\r\n    let [userState, setUserState] = useState(null as GameState | null);\r\n    let [initialNode, setInitialNode] = useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    const setCurrentVertex = (vertexId: string) => {\r\n         if (!userState) return;\r\n\r\n        userState.currentVertextId = vertexId;\r\n        setUserState(userState);\r\n    }\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (marker: any) => {\r\n        \r\n        console.log(\"Move ended\");\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update user state\r\n            setCurrentVertex(targetVertex.id.toString());\r\n\r\n            //debugger;\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                    } as GameState;\r\n                    const stateService = new MockGameStateService();\r\n\r\n                    setInitialNode(true);\r\n                    setPos(null);\r\n                    stateService.setState(newState);\r\n                    setUserState(newState);\r\n                    setGraph(null);\r\n                    setMapUrl(null);\r\n                }\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        if (!graph || !userState) return; // Map not loaded\r\n\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n\r\n        // Move to the nearest vertex to the clicked point\r\n        const match = graph.findNearestVertex(e.latlng);\r\n\r\n        if (match) {\r\n            console.log(`Clicked on vertex ${match.id}`);\r\n\r\n            var pathFinder = npath.aStar(graph.getNGraph());\r\n            let path = pathFinder.find(userState?.currentVertextId, match.id);\r\n\r\n            if (path.length <= 1) {\r\n                console.log(`No route found to ${match.id}`);\r\n                return;\r\n            }\r\n\r\n            path.pop(); // Remove the current/start node\r\n\r\n            vertexQueue.clear();\r\n            let nextVertex = path.pop();\r\n            while (nextVertex) {\r\n                vertexQueue.push(nextVertex);\r\n                // Stop if a vertex with an an encounter is hit\r\n                if (nextVertex.data.encounterId) {\r\n                    break;\r\n                }\r\n                nextVertex = path.pop();\r\n            }\r\n\r\n            handleMoveEnd(null); // Trigger the move to the next vertex\r\n        }\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(null);\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo: string | undefined) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (moveTo && graph) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newUserState = stateService.getState();\r\n            if (!newUserState) {\r\n                console.error(`No user state data`);\r\n                return;\r\n            }\r\n\r\n            setUserState(newUserState);\r\n\r\n            const service = new MockMapService();\r\n            const data = service.getMap(newUserState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            setMapUrl(data.imageUrl);\r\n\r\n            console.log(`Found ${data?.vertices.length} vertices`);\r\n            const mapGraph = GraphBuilder.Build(data);\r\n\r\n            const initialVertex = mapGraph.findVertex(newUserState.currentVertextId);\r\n            if (initialVertex) {\r\n                setPos(initialVertex?.data.position);\r\n            }\r\n\r\n            setGraph(mapGraph);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(mapGraph, newUserState.currentVertextId);\r\n        };\r\n\r\n        if (graph == null) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    var markerIcon = new Icon({\r\n        iconUrl: \"images/marker.png\",\r\n        iconSize: [50, 75],\r\n        iconAnchor: [25, 65],\r\n        // popupAnchor: [-3, -76],\r\n        // shadowUrl: 'my-icon-shadow.png',\r\n        // shadowSize: [68, 95],\r\n        // shadowAnchor: [22, 94]\r\n    });\r\n\r\n    const renderVertexMarkers = () => {\r\n        if (!graph) return null;\r\n        \r\n        const vertices = graph.getVertices();\r\n\r\n        // for (let i = 0; i < vertices.length; i++) {\r\n        //     const v = vertices[i];\r\n        //     console.log(`marker at ${v.data['position']} is ${v.id}`);\r\n        // }\r\n\r\n        return vertices.map((v) => {\r\n            const icon = new Icon({\r\n                iconUrl: \"images/blank.svg\",\r\n                iconSize: [50, 50],\r\n                className: v.data.exitId ? \"exit-icon\" : \"vertex-icon\",\r\n            });\r\n            return <Marker key={v.id} position={v.data.position} title={v.id.toString()} icon={icon} />\r\n        });\r\n    };\r\n\r\n    if (!userState || !mapUrl || !pos)\r\n        return null;\r\n\r\n    // maxBounds={bounds}\r\n    return (\r\n        <Map\r\n            crs={CRS.Simple}\r\n            zoom={-1}\r\n            minZoom={-1}\r\n            maxZoom={-1}\r\n            bounds={bounds}\r\n            maxBounds={bounds}\r\n            scrollWheelZoom={false}\r\n            onClick={handleClick}\r\n            zoomControl={false}\r\n        >\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n            <ImageOverlay url={mapUrl} bounds={bounds} />\r\n            <DriftMarker duration={1000} position={pos} keepAtCenter={false} icon={markerIcon} onMoveEnd={handleMoveEnd} />\r\n            {renderVertexMarkers()}\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default OverheadMap;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/AttributeList\";\r\nimport Attribute from \"../models/Attribute\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nexport default function StatisticsBlock(props: StatisticsBlockProps) {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    function createData(name: string, base: number, modifier: number, total: number) {\r\n        return { name, base, modifier, total };\r\n    }\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.modifier;\r\n\r\n    const rows = [\r\n        createData(\"Strength\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n        createData(\"Dexterity\", statistics.dexterity.base, statistics.dexterity.modifier, attributeTotal(statistics.dexterity)),\r\n        createData(\"Consitution\", statistics.constitution.base, statistics.constitution.modifier, attributeTotal(statistics.constitution)),\r\n        createData(\"Intelligence\", statistics.intelligence.base, statistics.intelligence.modifier, attributeTotal(statistics.intelligence)),\r\n        createData(\"Wisdom\", statistics.wisdom.base, statistics.wisdom.modifier, attributeTotal(statistics.wisdom)),\r\n        createData(\"Charisma\", statistics.charisma.base, statistics.charisma.modifier, attributeTotal(statistics.charisma)),\r\n        createData(\"Luck\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Base</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Total</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.base}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.total}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Item from \"../models/Item\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\nconst PartyInventory: FunctionComponent<any> = () => {\r\n    const classes = useStyles();\r\n\r\n    // let [isValid, setIsValid] = useState(false);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = useState([] as string[]);\r\n    let [inventoryItems, setInventoryItems] = useState(null as Item[] | null);\r\n\r\n    const maxItems = 8;\r\n\r\n    useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);\r\n\r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n\r\n    const equipItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        // TODO\r\n\r\n        // const service = new MockPartyService();\r\n        // for (let i = 0; i < inventorySelectedIds.length; i++) {\r\n        //     service.removeInventoryItem(inventorySelectedIds[i]);\r\n        //     service.addStashItem(inventorySelectedIds[i]);\r\n        // }\r\n\r\n        // // Force a reload of items\r\n        // setInventorySelectedIds([]);\r\n        // setInventoryItems(null);\r\n    };\r\n\r\n    if (!inventoryItems) return null;\r\n\r\n    const inventoryToolTip = () => {\r\n        //if (willInventoryBeTooBig()) return \"Too many items in stash\";\r\n\r\n        return isInventorySelected() ? \"Equip the item\" : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={inventoryItems} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventory;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport Trait from \"../models/Trait\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\n\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\nimport PartyInventory from \"../components/PartyInventory\";\r\n\r\nconst useStyles = makeStyles({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"calc(100vh - 115px)\",\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"100px\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        position: \"absolute\",\r\n        left: \"20px\",\r\n        top: \"-100px\",\r\n        width: \"40px\",\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"calc(60vh - 55px)\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        position: \"absolute\",\r\n        left: \"20%\",\r\n        width: \"40%\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"68px\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"90px\",\r\n        top: \"35px\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"90px\",\r\n        top: \"135px\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"90px\",\r\n        top: \"235px\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"90px\",\r\n        top: \"335px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"calc(40vh - 80px)\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statistics: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n});\r\n\r\ntype HeroProfileProps = {\r\n    //id: string,\r\n};\r\n\r\nexport function HeroProfile(props: HeroProfileProps) {\r\n    const classes = useStyles();\r\n\r\n    const params: any = useParams();\r\n    const id = params.id;\r\n\r\n    let [hero, setHero] = useState(null as Hero | null);\r\n    let [party, setParty] = useState(null as PartyStatistics | null);\r\n    let [world, setWorld] = useState(null as WorldStatistics | null);\r\n    let [currentId, setCurrentId] = useState(-1);\r\n\r\n    useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const partyService = new MockPartyService();\r\n            const newParty = partyService.getParty();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n        };\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world) return null;\r\n\r\n    const renderTrait = (t: Trait) => (\r\n        <p>\r\n            {t.name}: {t.from}, {t.behaviour}\r\n        </p>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.characterGrid}>\r\n            <div className={classes.left}>\r\n                <div className={classes.portrait}>\r\n                    <br />\r\n                    <div className={classes.bannerContainer}>\r\n                        <h1 className=\"banner\">{hero.name}</h1>\r\n                    </div>\r\n                    <div className={classes.itemContainer}>\r\n                        <a href=\"/#/\">\r\n                            <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                        </a>\r\n                        <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                        <img src=\"images/helm.svg\" className={`${classes.portraitItem} ${classes.portraitItemHelm}`} alt=\"helm\" />\r\n                        <img\r\n                            src=\"images/breastplate.svg\"\r\n                            className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}\r\n                            alt=\"breastplate\"\r\n                        />\r\n                        <img src=\"images/leg.svg\" className={`${classes.portraitItem} ${classes.portraitItemLegs}`} alt=\"legs\" />\r\n                        <img src=\"images/glove.svg\" className={`${classes.portraitItem} ${classes.portraitItemGloves}`} alt=\"gloves\" />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.inventory}>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                    <br />\r\n                    <PartyInventory />\r\n                </div>\r\n            </div>\r\n            <div className={classes.statistics}>\r\n                <br />\r\n                <br />\r\n                <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    <StatisticsBlock statistics={hero.attributes} />\r\n                </div>\r\n                <h1 className={classes.sectionHeading}>Other</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    <p>Hit Points 10/16</p>\r\n                    <p>Initiative 2</p>\r\n                    <p>Spell Resistance Save 14</p>\r\n                    <p>Witch Taint 12</p>\r\n                </div>\r\n                <h1 className={classes.sectionHeading}>Skills</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    <p>Persuasion d10</p>\r\n                    <p>Religion d12</p>\r\n                </div>\r\n                <h1 className={classes.sectionHeading}>Traits</h1>\r\n                <div className={classes.statisticsBlock}>{hero.traits.map((t) => renderTrait(t))}</div>\r\n                <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    <p>Reputation {party.reputation}</p>\r\n                    {party.traits.map((t) => (\r\n                        <p>{t}</p>\r\n                    ))}\r\n                </div>\r\n                <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    {world.traits.map((t) => (\r\n                        <p>{t}</p>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroProfile;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// UI Elements\r\nimport { CRS, Icon, latLng, LatLngBounds } from 'leaflet';\r\nimport { Map, ImageOverlay, Polygon } from \"react-leaflet\";\r\nimport DriftMarker from '../components/DriftMarker';\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport Queue from '../models/Queue';\r\nimport { Graph, Node } from \"ngraph.graph\";\r\n\r\ntype EncounterMapProps = {\r\n    // None\r\n};\r\n\r\nexport function EncounterMap(props: EncounterMapProps) {\r\n    // const pos = { lat: -51.505, lng: -0.09 } as any;\r\n    const initialPos = latLng([0, 0]);\r\n    const initialNode = \"common-room\";\r\n\r\n    let [pos, setPos] = useState(initialPos); // The current (target) position of the player marker\r\n    let [currentVertex, setCurrentVertex] = useState(initialNode); // The current vertex that the player marker is at\r\n    let [vertexQueue] = useState(new Queue<any>()); // A queue of points to visit during path-finding\r\n    let [encounterId, setEncounterId] = useState(null as string | null);\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    const getVertices = (graph: Graph<any, any> | null): Node<any>[] => {\r\n        if (!graph) return [];\r\n\r\n        var vertices: Node<any>[] = [];\r\n        graph.forEachNode((n: Node<any>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    // // Get the vertex nearest to the clicked point\r\n    // const findNearestVertex = (graph: Graph<any, any> | null, pos: LatLng): any => {\r\n    //     const vertices = getVertices(graph);\r\n\r\n    //     for (let i = 0; i < vertices.length; i++) {\r\n    //         const vertex = vertices[i];\r\n\r\n    //         const dist = distance(pos, vertex.data[\"position\"]);\r\n    //         const isInRadius = dist < vertex.data[\"clickRadius\"];\r\n\r\n    //         if (isInRadius) {\r\n    //             return vertex;\r\n    //         }\r\n    //         // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.clickRadius}) = ${isInRadius}`);\r\n    //     }\r\n\r\n    //     return null;\r\n    // };\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (marker: any) => {\r\n        console.log(\"Move ended\");\r\n\r\n        var targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data[\"position\"]);\r\n            setCurrentVertex(targetVertex.id);\r\n\r\n            const targetEncounterId = targetVertex.data[\"encounterId\"];\r\n            if (targetEncounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetEncounterId);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        //if (!graph) return; // Map not loaded\r\n\r\n        console.log(\"clicked at: \" + e.latlng);\r\n    };\r\n\r\n    const handleEncounterClose = (moveTo: string | undefined) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Initial load of map data\r\n        // const loadMap = () => {\r\n        //     const service = new MockMapService();\r\n        //     const data = service.getMap(\"temple\");\r\n        //     if (!data) {\r\n        //         console.error(`No map data`);\r\n        //         return;\r\n        //     }\r\n        //     console.log(`Found ${data?.vertices.length} vertices`);\r\n        //     const graph = GraphBuilder.Build(data);\r\n        //     setGraph(graph);\r\n        // };\r\n        // if (graph == null) {\r\n        //     loadMap();\r\n        // }\r\n    });\r\n\r\n    //const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([0.009634, 0.009642]));\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n    //const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    // maxBounds={bounds}\r\n    return (\r\n        <Map\r\n            crs={CRS.Simple}\r\n            zoom={3}\r\n            minZoom={-5}\r\n            maxZoom={20}\r\n            bounds={bounds}\r\n            maxBounds={bounds}\r\n            scrollWheelZoom={false}\r\n            onClick={handleClick}\r\n            zoomControl={true}\r\n        >\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            {/* <TileLayer url=\"tiles/Tavern/row-{x}-col-{y}.png\" bounds={bounds} /> */}\r\n            <ImageOverlay url=\"maps/tavern.png\" bounds={bounds} />\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default EncounterMap;\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    // palette: {\r\n    //     primary: {\r\n    //         light: blue[500],\r\n    //         main: blue[500],\r\n    //         dark: blue[500],\r\n    //     },\r\n    //     secondary: {\r\n    //         light: blue[100],\r\n    //         main: blue[100],\r\n    //         dark: blue[100],\r\n    //     },\r\n    //     action: {\r\n    //         hover: blue[800],\r\n    //     },\r\n    // },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","import \"./App.scss\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\nimport OverheadMap from \"./pages/OverheadMap\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterMap from \"./pages/EncounterMap\";\r\nimport React from \"react\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport PitTheme from \"./PitTheme\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <ThemeProvider theme={PitTheme}>\r\n                <Header />\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route\r\n                            path=\"/profile/:id\"\r\n                            component={() => {\r\n                                return <HeroProfile />;\r\n                            }}\r\n                        />\r\n                        <Route path=\"/encounter\" component={EncounterMap} />\r\n                        <Route path=\"/:id\" component={OverheadMap} />\r\n                        <Route path=\"/\" component={OverheadMap} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}