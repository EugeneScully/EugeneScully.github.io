{"version":3,"sources":["models/Trait.ts","PitTheme.tsx","pages/MainMenu.tsx","helpers/ArrayHelper.ts","services/MockItemService.ts","helpers/HeroHelper.ts","services/MockHeroService.ts","services/MockPartyService.ts","components/Header.tsx","components/Drift_Marker.tsx","components/DriftMarker.tsx","services/MockStoryEncounterService.ts","components/HeroSelector.tsx","components/PartySelection.tsx","components/HeroDismiss.tsx","models/Hero.ts","models/Item.ts","services/StringConverters.ts","components/ItemTooltipContent.tsx","components/InventorySelector.tsx","components/Stash.tsx","components/EncounterDialog.tsx","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","models/Queue.ts","services/MockGameStateService.ts","pages/OverheadMap.tsx","services/MockWorldService.ts","components/PartyInventory.tsx","components/EquippedItems.tsx","components/StatisticsBlock.tsx","components/CalculatedStatisticsBlock.tsx","components/TraitList.tsx","pages/HeroProfile.tsx","pages/EncounterMap.tsx","MainLayout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TraitType","ModifierType","PitTheme","createMuiTheme","useStyles","makeStyles","root","backgroundColor","height","close","position","top","left","width","zIndex","filter","container","titleContainer","padding","appLogo","pointerEvents","card","margin","cursor","right","boxShadow","MainMenu","classes","history","useHistory","className","href","src","alt","Grid","item","xs","Card","CardHeader","title","CardContent","onClick","remote","require","getCurrentWindow","push","ArrayHelper","array","index","indexOf","splice","MockItemService","getItems","ids","map","id","getItemDetail","TokenOfServitude","HagTeeth","CeramicHelm","CeramicArmor","WolfSpear","HeroHelper","getAllTraits","hero","traits","concat","itemTraits","temporaryTraits","addItemTraits","i","length","itemTrait","heroTrait","name","type","behaviour","from","removeItemTraits","matches","t","remove","calculateAttributesWithModifiers","allTraits","strMod","dexMod","conMod","intMod","wisMod","chaMod","luckMod","j","modifierType","Strength","modifierValue","Dexterity","Constitution","Intelligence","Wisdom","Charisma","Luck","attributes","strength","base","modifier","dexterity","constitution","intelligence","wisdom","charisma","luck","calculateStatsWithModifiers","armorMod","moveSpeedMod","meleeAttackMod","meleeAttackSpeedMod","meleeDamageDieMod","meleeDamageMod","hpMod","hitDieMod","spellResistMod","Armor","MoveSpeed","MeleeAttack","MeleeAttackSpeed","MeleeDamageDie","MeleeDamage","RangedAttack","RangedAttackSpeed","RangedDamageDie","RangedDamage","HitPoints","HitDie","SpellResistance","stats","armour","attack","moveSpeed","attackSpeed","damageDie","damageBonus","maxHitPoints","currentHitPoints","hitDie","spellResistance","MockHeroService","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroes","heroId","itemId","heroMatch","find","itemService","originalItem","itemWithSameType","equippedItems","itemType","MockPartyService","reputation","heroService","_heroIds","getHeroDetail","heroIds","_inventoryItemIds","itemIds","_stashItemIds","appHeader","headerSpan","display","headerParty","headerImg","border","borderRadius","borderWidth","borderColor","Header","props","useState","party","setParty","useEffect","newParty","getParty","console","error","loadParty","imageUrl","window","exports","Leaflet_module","L","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","undefined","dragging","enabled","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","this","Marker","DriftMarker","onMoveEndCallback","el","getOptions","onMoveEnd","moveEnd","contextValue","leaflet","popupContainer","fromProps","toProps","leafletElement","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","draggable","children","value","MapLayer","withLeaflet","MockStoryEncounterService","currentStory","currentId","currentTitle","Story","TheInterceptContent","commonRoomContent","chasmContent","homeContent","nineBellsContent","brawlContent","createEmptyStory","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","variablesState","GetVariableWithName","detailedEncounter","paragraphText","choices","isFinished","finishData","Continue","encounterChoices","currentChoices","c","text","heroSelected","HeroSelector","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","partyService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","Number","parseInt","currentTarget","newSelected","selectedHeroIds","imgClass","output","Tooltip","toString","renderParty","partyButton","partyButtonDiv","textAlign","PartySelection","React","setHeroIds","isValid","Button","disabled","variant","color","HeroDismiss","Alignment","HeroClass","StatusFlags","AbilityFlags","ItemType","setHeroId","StringConverters","resourceMap","JSON","parse","stringify","Resources","classToString","heroClass","resources","getResources","key","alignmentToString","alignment","modifierToString","itemTypeText","abilitiesToString","abilities","None","Acrobatics","Devices","PatronBond","Perception","Sorcery","Stealth","Survival","join","description","ItemTooltipContent","renderBehaviors","effects","e","valueToString","Fragment","Typography","align","traitJsx","newTraits","renderTraits","main","gridItem","inventory","itemSelected","InventorySelector","items","selectedIds","spacing","alignItems","justify","itemGrids","arrow","emptyItems","emptyGrids","renderInventory","stashImg","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","Stash","stashSelectedIds","setStashSelectedIds","inventorySelectedIds","setInventorySelectedIds","stashItems","setStashItems","inventoryItems","setInventoryItems","stashItemIds","getStash","inventoryItemIds","getInventory","newStashItems","newInventoryItems","loadItems","isStashSelected","isInventorySelected","willInventoryBeTooBig","service","removeStashItem","addInventoryItem","startIcon","removeInventoryItem","addStashItem","dialog","background","content","minWidth","minHeight","fontFamily","actions","EncounterDialog","encChoices","onClose","encounterId","MockEncounterService","encounterService","paragraph","setParagraph","setTitle","setChoices","storyStarted","setStoryStarted","open","handleClose","handleChoice","encounter","chooseChoice","log","handleContinue","startEncounter","Dialog","aria-labelledby","DialogContent","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","renderParagraph","DialogActions","MockMapService","json","BlackTempleMap","TownMap","vertices","v","latLng","clickRadius","exitId","edges","distance","x","y","latDist","lat","lngDist","lng","Math","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","weight","Queue","_store","val","shift","MockGameStateService","_state","state","currentMapId","currentVertextId","OverheadMap","useParams","setGraph","setPos","vertexQueue","setEncounterId","mapUrl","setMapUrl","userState","setUserState","initialNode","setInitialNode","handleMoveEnd","marker","vertexId","targetVertex","pop","splits","split","newState","stateService","setState","moveToVertexId","mapGraph","match","newUserState","getState","getMap","Build","initialVertex","loadMap","bounds","LatLngBounds","markerIcon","Icon","iconUrl","iconSize","iconAnchor","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","round","path","npath","aStar","clear","nextVertex","zoomControl","ImageOverlay","url","MockWorldService","PartyInventory","onEquipItem","isItemEquipable","itemContainer","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","portraitItemWeapon","portraitItemShield","portraitNoItemImg","portraitItemImg","EquippedItems","headItem","WearableHead","bodyItem","WearableBody","armsItem","WearableArms","feetItem","WearableFeet","StyledTableCell","withStyles","theme","head","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","action","hover","TableRow","table","StatisticsBlock","statistics","createData","total","attributeTotal","attribute","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","row","scope","maxWidth","statisticsBlock","CalculatedStatisticsBlock","md","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","TraitList","renderTraitIcon","renderTrait","characterGrid","gridAutoRows","breakpoints","down","gridTemplateColumns","up","sectionHeading","bannerContainer","portrait","portraitImg","overflowY","gridRowEnd","HeroProfile","setHero","world","setWorld","setEquippedItems","setCurrentId","newHero","getPartyStatistics","newWorld","getWorld","newItems","loadHero","class","removedItemId","equipItem","EncounterMap","initialPos","MainLayout","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a719d38.chunk.js","sourcesContent":["\r\nexport enum TraitType {\r\n    Uncategorised = 0,\r\n    Mental = 1,\r\n    Mystical = 2,\r\n    Physical = 3,\r\n    Item = 4,\r\n    // MentalPhobia = 100,\r\n    // MysticalCurse = 200,\r\n};\r\n\r\nexport enum ModifierType {\r\n    None = 0,\r\n    Strength = 10,\r\n    Dexterity = 11,\r\n    Constitution = 12,\r\n    Intelligence = 13,\r\n    Wisdom = 14,\r\n    Charisma = 15,\r\n    Luck = 16,\r\n    HitPoints = 20,\r\n    HitDie = 21,\r\n    Armor = 22,\r\n    SpellResistance = 23,\r\n    MoveSpeed = 24,\r\n    MeleeAttackSpeed = 25,\r\n    MeleeAttack = 26,\r\n    MeleeDamageDie = 27,\r\n    MeleeDamage = 28,\r\n    RangedAttackSpeed = 29,\r\n    RangedAttack = 30,\r\n    RangedDamageDie = 31,\r\n    RangedDamage = 32,\r\n    MeleeChanceForParalysis = 50,\r\n    MeleeChanceForPoisoned = 51,\r\n    MeleeChanceForBleeding = 52,\r\n    MeleeChanceForTerrified = 53,\r\n    MeleeChanceForCharmed = 54,\r\n    RangedChanceForParalysis = 60,\r\n    RangedChanceForPoisoned = 61,\r\n    RangedChanceForBleeding = 62,\r\n    RangedChanceForTerrified = 63,\r\n    RangedChanceForCharmed = 64,\r\n    AddAbility = 100,\r\n    RemoveAbility = 101, // Items can prevent abilities being used (e.g. Armor prevents Sorcery)\r\n    AbilitySorcery = 110,\r\n    AbilityStealth = 111,\r\n    AbilityPerception = 112,\r\n    AbilityPatronBond = 113,\r\n    AbilitySurvival = 114,\r\n    AbilityDevices = 115,\r\n    AbilityAcrobatics = 116,\r\n};\r\n\r\nexport interface TraitEffect {\r\n\r\n    modifierType: ModifierType;\r\n\r\n    modifierValue: number;\r\n}\r\n\r\nexport default interface Trait {\r\n    // ID for the trait\r\n    id: string;\r\n\r\n    // A name for the trait\r\n    name: string;\r\n\r\n    // The type of trait\r\n    type: TraitType;\r\n\r\n    // What does it do\r\n    behaviour: TraitEffect[];\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    // palette: {\r\n    //     primary: {\r\n    //         light: blue[500],\r\n    //         main: blue[500],\r\n    //         dark: blue[500],\r\n    //     },\r\n    //     secondary: {\r\n    //         light: blue[100],\r\n    //         main: blue[100],\r\n    //         dark: blue[100],\r\n    //     },\r\n    //     action: {\r\n    //         hover: blue[800],\r\n    //     },\r\n    // },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        position: \"absolute\",\r\n        top: \"20px\",\r\n        left: \"20px\",\r\n        width: \"40px\",\r\n        zIndex: 2,\r\n        filter: \"invert(60%)\",\r\n    },\r\n    container: {\r\n        top: \"8vh\",\r\n        position: \"relative\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"8vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"40px\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n        },\r\n    },\r\n});\r\n\r\nconst MainMenu: React.FunctionComponent = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    let history = useHistory();\r\n\r\n    const onExit = () => {\r\n        const remote = require(\"electron\").remote;\r\n        if (remote) { \r\n            const window = remote.getCurrentWindow();\r\n            window.close();\r\n        }\r\n        else {\r\n            history.push('/');\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <a href=\"/#/\">\r\n                <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n            </a>\r\n            <div className={classes.titleContainer}>\r\n                <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n            </div>\r\n            <Grid container className={classes.container}>\r\n                <Grid item xs={4}></Grid>\r\n                <Grid item xs={4}>\r\n                    <Card className={classes.card}>\r\n                        <CardHeader title=\"New Game\" />\r\n                        <CardContent>Start a new game</CardContent>\r\n                    </Card>\r\n                    <Card className={classes.card} onClick={onExit}>\r\n                        <CardHeader title=\"Quit\" />\r\n                        <CardContent>Exit the game</CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={4}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","export default class ArrayHelper {\r\n    /*\r\n    * Remove an item from an array\r\n    */\r\n    public static remove<T>(array: T[], item: T): void {\r\n        const index = array.indexOf(item);\r\n        if (index > -1) {\r\n            array.splice(index, 1);\r\n        }\r\n    }\r\n}","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\nimport CeramicHelm from \"./items/ceramic_helm.json\";\r\nimport CeramicArmor from \"./items/ceramic_armor.json\";\r\n\r\nexport default class MockItemService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude;\r\n            case \"hag_teeth\":\r\n                return HagTeeth;\r\n            case \"ceramic_helm\":\r\n                return CeramicHelm;\r\n            case \"ceramic_armor\":\r\n                return CeramicArmor;\r\n            case \"wolf_spear\":\r\n            default:\r\n                return WolfSpear;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import AttributeList from \"../models/AttributeList\";\r\nimport CalculatedStats from \"../models/CalculatedStats\";\r\nimport Hero from \"../models/Hero\";\r\nimport HeroTrait from \"../models/HeroTrait\";\r\nimport Item from \"../models/Item\";\r\nimport Trait, { ModifierType } from \"../models/Trait\";\r\nimport ArrayHelper from \"./ArrayHelper\";\r\n\r\nexport default class HeroHelper {\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getAllTraits = (hero: Hero): HeroTrait[] => hero.traits.concat(hero.itemTraits).concat(hero.temporaryTraits);\r\n\r\n    /*\r\n     * Add traits from an item to the hero\r\n     */\r\n    public static addItemTraits = (hero: Hero, item: Item): void => {\r\n        for (let i = 0; i < item.traits.length; i++) {\r\n            const itemTrait: Trait = item.traits[i];\r\n            const heroTrait: HeroTrait = {\r\n                id: itemTrait.id,\r\n                name: itemTrait.name,\r\n                type: itemTrait.type,\r\n                behaviour: itemTrait.behaviour,\r\n                from: item.name,\r\n            };\r\n            hero.itemTraits.push(heroTrait);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Remove traits from an item to the hero\r\n     */\r\n    public static removeItemTraits = (hero: Hero, item: Item): void => {\r\n        const matches = hero.itemTraits.filter((t) => t.from === item.name);\r\n        for (let i = 0; i < matches.length; i++) {\r\n            ArrayHelper.remove(hero.itemTraits, matches[i]);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static calculateAttributesWithModifiers = (hero: Hero): AttributeList => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let strMod = 0,\r\n            dexMod = 0,\r\n            conMod = 0,\r\n            intMod = 0,\r\n            wisMod = 0,\r\n            chaMod = 0,\r\n            luckMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Strength:\r\n                        strMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Dexterity:\r\n                        dexMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Constitution:\r\n                        conMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Intelligence:\r\n                        intMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Wisdom:\r\n                        wisMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Charisma:\r\n                        chaMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Luck:\r\n                        luckMod += behaviour.modifierValue;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attributes = hero.attributes;\r\n        const newAttributeList: AttributeList = {\r\n            strength: { base: attributes.strength.base, modifier: strMod },\r\n            dexterity: { base: attributes.dexterity.base, modifier: dexMod },\r\n            constitution: { base: attributes.constitution.base, modifier: conMod },\r\n            intelligence: { base: attributes.intelligence.base, modifier: intMod },\r\n            wisdom: { base: attributes.wisdom.base, modifier: wisMod },\r\n            charisma: { base: attributes.charisma.base, modifier: chaMod },\r\n            luck: { base: attributes.luck.base, modifier: luckMod },\r\n        };\r\n\r\n        return newAttributeList;\r\n    };\r\n\r\n    public static calculateStatsWithModifiers = (hero: Hero): CalculatedStats => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let armorMod = 0,\r\n            moveSpeedMod = 0,\r\n            meleeAttackMod = 0,\r\n            meleeAttackSpeedMod = 0,\r\n            meleeDamageDieMod = 0,\r\n            meleeDamageMod = 0,\r\n            rangedAttackMod = 0,\r\n            rangedAttackSpeedMod = 0,\r\n            rangedDamageDieMod = 0,\r\n            rangedDamageMod = 0,\r\n            hpMod = 0,\r\n            hitDieMod = 0,\r\n            spellResistMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Armor:\r\n                        armorMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MoveSpeed:\r\n                        moveSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeAttack:\r\n                        meleeAttackMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeAttackSpeed:\r\n                        meleeAttackSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeDamageDie:\r\n                        meleeDamageDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeDamage:\r\n                        meleeDamageMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttack:\r\n                        rangedAttackMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttackSpeed:\r\n                        rangedAttackSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedDamageDie:\r\n                        rangedDamageDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedDamage:\r\n                        rangedDamageMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.HitPoints:\r\n                        hpMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.HitDie:\r\n                        hitDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.SpellResistance:\r\n                        spellResistMod += behaviour.modifierValue;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const stats = hero.stats;\r\n        const newStats: CalculatedStats = {\r\n            armour: stats.armour + armorMod,\r\n            attack: stats.attack + meleeAttackMod,\r\n            moveSpeed: stats.moveSpeed + moveSpeedMod,\r\n            attackSpeed: stats.attackSpeed + meleeAttackSpeedMod,\r\n            damageDie: stats.damageDie + meleeDamageDieMod,\r\n            damageBonus: stats.damageBonus + meleeDamageMod,\r\n            maxHitPoints: stats.maxHitPoints + hpMod,\r\n            currentHitPoints: stats.currentHitPoints,\r\n            hitDie: stats.hitDie + hitDieMod,\r\n            spellResistance: stats.spellResistance + spellResistMod,\r\n        };\r\n\r\n        return newStats;\r\n    };\r\n}\r\n","import Hero from \"../models/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\nimport ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport MockItemService from \"./MockItemService\";\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroes: Hero[] = [Gyvwain, Balthazar, Gossamer, Gargamela, Justin];\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return MockHeroService._heroes;\r\n    }\r\n\r\n    /*\r\n    * Equip an item in one of the equip slots\r\n    * If an item needs to be removed, return the item Id\r\n    */\r\n    equipItem(heroId: string, itemId: string): string | null {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw \"Can't find hero\";\r\n\r\n        const itemService = new MockItemService();\r\n        const originalItem = itemService.getItemDetail(itemId);\r\n        if (!originalItem) throw \"Can't find original item\";\r\n\r\n        // Check if the hero already has an item of this type equipped\r\n        const items = itemService.getItems(heroMatch.equippedItems);\r\n        const itemWithSameType = items.find(item => item.itemType == originalItem.itemType);\r\n\r\n        // TODO: We need special logic around equipable weapons\r\n\r\n        heroMatch.equippedItems.push(itemId);\r\n        \r\n        // Add traits from the item\r\n        HeroHelper.addItemTraits(heroMatch, originalItem);\r\n\r\n        if (!itemWithSameType) return null; \r\n\r\n        // Remove traits from the removed item\r\n        HeroHelper.removeItemTraits(heroMatch, itemWithSameType);\r\n        \r\n        return itemWithSameType.id;\r\n    }\r\n\r\n    unequipItem(heroId: string, itemId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw \"Can't find hero\";\r\n\r\n        const itemService = new MockItemService();\r\n        const item = itemService.getItemDetail(itemId);\r\n        if (!item) throw \"Can't find original item\";\r\n\r\n        ArrayHelper.remove(heroMatch.equippedItems, item.id);\r\n\r\n        // Remove traits from the removed item\r\n        HeroHelper.removeItemTraits(heroMatch, item);\r\n    }\r\n}\r\n","import ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport Hero from \"../models/Hero\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockHeroService from \"./MockHeroService\";\r\n\r\nexport default class MockPartyService {\r\n    getPartyStatistics(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static _heroIds: string[] = [\"gyvwain_the_chivalrous\", \"balthazar_the_unblemished\", \"gossamer\", \"gargomela_the_black\"];\r\n\r\n    getParty(): Hero[] {\r\n        const heroService = new MockHeroService();\r\n        const party = MockPartyService._heroIds.map((id) => heroService.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    setParty(heroIds: string[]): void {\r\n        MockPartyService._heroIds = heroIds;\r\n    }\r\n\r\n    private static _inventoryItemIds: string[] = [\"wolf_spear\", \"ceramic_helm\", \"ceramic_armor\"];\r\n    private static _stashItemIds: string[] = [\"hag_teeth\", \"token_of_servitude\"];\r\n\r\n    getInventory(): string[] {\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        MockPartyService._inventoryItemIds.push(id);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        ArrayHelper.remove(MockPartyService._inventoryItemIds, id);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        MockPartyService._stashItemIds.push(id);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        ArrayHelper.remove(MockPartyService._stashItemIds, id);\r\n    }\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Hero from \"../models/Hero\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        \"-webkit-app-region\": \"drag\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"2vh\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n    headerImg: {\r\n        width: \"7vh\",\r\n        height: \"7vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"5vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\nfunction Header(props: HeaderProps) {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = useState(null as Hero[] | null); // The map graph data\r\n\r\n    useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockPartyService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <a key={hero.id} href={`/#/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </a>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <a href=\"/#/menu\">\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                </a>\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import React from 'react'\r\nimport Drift_Marker from \"./Drift_Marker\" \r\nimport { Icon, DivIcon, LatLngExpression } from 'leaflet'\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from 'react-leaflet';\r\n\r\ntype LeafletElement = Drift_Marker\r\n\r\ntype DriftMarkerProps = {\r\n  icon?: Icon | DivIcon,\r\n  draggable?: boolean,\r\n  opacity?: number,\r\n  position: LatLngExpression,\r\n  duration: number,\r\n  keepAtCenter?: boolean,\r\n  zIndexOffset?: number,\r\n  onMoveEnd?: (name: DriftMarker) => void;\r\n} & MapLayerProps\r\n\r\nclass DriftMarker extends MapLayer<DriftMarkerProps, LeafletElement> {\r\n\r\n  private onMoveEndCallback?: (name: DriftMarker) => void;\r\n\r\n  createLeafletElement(props: DriftMarkerProps): LeafletElement {\r\n    const el = new Drift_Marker(props.position, this.getOptions(props));\r\n    this.onMoveEndCallback = props.onMoveEnd;\r\n    el.on('moveend', this.moveEnd);\r\n    this.contextValue = { ...props.leaflet, popupContainer: el }\r\n    return el\r\n  }\r\n\r\n  moveEnd() {\r\n    if (this.onMoveEndCallback) {\r\n      this.onMoveEndCallback(this);\r\n    }\r\n  }\r\n\r\n  updateLeafletElement(fromProps: DriftMarkerProps, toProps: DriftMarkerProps) {\r\n    if (toProps.position !== fromProps.position && typeof toProps.duration == 'number') {\r\n      this.leafletElement.slideTo(toProps.position, {\r\n        duration: toProps.duration,\r\n        keepAtCenter: toProps.keepAtCenter\r\n      })\r\n    }\r\n    if (toProps.icon !== fromProps.icon && toProps.icon) {\r\n      this.leafletElement.setIcon(toProps.icon)\r\n    }\r\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset)\r\n    }\r\n    if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n      this.leafletElement.setOpacity(toProps.opacity)\r\n    }\r\n    if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n      if (toProps.draggable === true) {\r\n        this.leafletElement.dragging.enable()\r\n      } else {\r\n        this.leafletElement.dragging.disable()\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props\r\n\r\n    return children == null || this.contextValue == null ? null : (\r\n      <LeafletProvider value={this.contextValue}>\r\n        {children}\r\n      </LeafletProvider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withLeaflet<DriftMarkerProps>(DriftMarker);\r\n\r\nexport {};\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\nimport TheInterceptContent from \"./encounters/TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/chasm.ink.json\";\r\nimport homeContent from \"./encounters/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/nine-bells.ink.json\";\r\nimport brawlContent from \"./encounters/brawl.ink.json\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        switch (id) {\r\n            case \"hoard\":\r\n                this.currentTitle = \"Treasure !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                //paragraphText: \"You stumble tired and exhaused into a room stuffed to the ceiling with well-crafted wooden coffers.\",\r\n                break;\r\n            case \"wet-room\":\r\n                this.currentTitle = \"The Intercept !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"common-room\":\r\n                this.currentTitle = \"Tracking the Yellow-Bellied Crook\";\r\n                this.currentStory = new Story(commonRoomContent);\r\n                break;\r\n            case \"chasm\":\r\n                this.currentTitle = \"Across the Chasm\";\r\n                this.currentStory = new Story(chasmContent);\r\n                break;\r\n            case \"warrens\":\r\n                this.currentTitle = \"Rats !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"home\":\r\n                this.currentTitle = \"Scupperden\";\r\n                this.currentStory = new Story(homeContent);\r\n                break;\r\n            case \"nine-bells\":\r\n                this.currentTitle = \"The Cathedral\";\r\n                this.currentStory = new Story(nineBellsContent);\r\n                break;\r\n            case \"brawl\":\r\n                this.currentTitle = \"Thugs!\";\r\n                this.currentStory = new Story(brawlContent);\r\n                break;\r\n            default:\r\n                return MockStoryEncounterService.createEmptyStory();\r\n        }\r\n        this.currentId = id;\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value,\r\n                    detailedEncounter: detailedEncounter?.value,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map(\r\n            (c: Choice) => {\r\n                return {\r\n                    index: c.index,\r\n                    text: c.text,\r\n                } as InkStoryChoice\r\n            }\r\n        );\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import { Grid, makeStyles } from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Hero from \"../models/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    party: {\r\n        padding: \"30px\",\r\n        position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroSelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\nfunction HeroSelector(props: HeroSelectorProps) {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    let [heroes, setHeroes] = useState(null as Hero[] | null); // The map graph data\r\n    let [selected, setSelected] = useState([] as boolean[]);\r\n\r\n    useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <Grid container>{renderParty()}</Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nconst PartySelection: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    // let [isValid, setIsValid] = useState(false);\r\n    let [heroIds, setHeroIds] = React.useState([] as string[]);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = () => heroIds.length === 4; \r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockPartyService();\r\n        service.setParty(heroIds);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} multiSelect={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={changeParty} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default PartySelection;\r\n","import React, { useState } from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nfunction HeroDismiss() {\r\n    const classes = useStyles();\r\n\r\n    // let [isValid, setIsValid] = useState(false);\r\n    let [heroId, setHeroId] = useState(\"\");\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        if (ids.length > 0)\r\n            setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = () => heroId.length > 0; \r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockHeroService();\r\n        \r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={dismissHero} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Dismiss\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default HeroDismiss;\r\n","import AttributeList from \"./AttributeList\";\r\nimport CalculatedStats from \"./CalculatedStats\";\r\nimport HeroTrait from \"./HeroTrait\";\r\n\r\nexport enum Alignment {\r\n    Lawful = 0,\r\n    Neutral = 1,\r\n    Chaotic = 2,\r\n}\r\n\r\nexport enum HeroClass {\r\n    /*\r\n     * A traditional fighter, guard, barbarian or mercenary for hire\r\n     */\r\n    Warrior = 0,\r\n    /*\r\n     * A scounrel, bandit, robber\r\n     */\r\n    Thief = 1,\r\n    /*\r\n     * A mistrusted user of magic. Usually obviously marked, correpted or tainted\r\n     */\r\n    Sorcerer = 2,\r\n    /*\r\n     * A follower, patron, or somone bound to a god, demon or higher power\r\n     */\r\n    Templar = 3,\r\n}\r\n\r\nexport enum StatusFlags {\r\n    None = 0x00,\r\n    Paralysed = 0x01,\r\n    Poisoned = 0x04,\r\n    Bleeding = 0x08,\r\n    Terrified = 0x10,\r\n    Charmed = 0x20,\r\n    // Sleeping, Petrified,\r\n}\r\n\r\nexport enum AbilityFlags {\r\n    None = 0x00,\r\n    Sorcery = 0x01,\r\n    Stealth = 0x02,\r\n    Perception = 0x04,\r\n    PatronBond = 0x08,\r\n    Survival = 0x10,\r\n    Devices = 0x20,\r\n    Acrobatics = 0x40,\r\n}\r\n\r\n// TODO: Split hero into core stats & calculated (view) ?\r\ninterface Hero {\r\n    // ID of the hero\r\n    id: string;\r\n\r\n    // Display name of the hero\r\n    name: string;\r\n\r\n    // Origins of the hero\r\n    background: string;\r\n\r\n    imageUrl: string;\r\n\r\n    // Hero attributes\r\n    attributes: AttributeList;\r\n\r\n    // Any special states\r\n    status: StatusFlags;\r\n\r\n    stats: CalculatedStats;\r\n\r\n    abilities: AbilityFlags;\r\n\r\n    alignment: Alignment;\r\n\r\n    class: HeroClass;\r\n\r\n    // Itesm equpped by the hero\r\n    equippedItems: string[];\r\n\r\n    // Hero traits\r\n    traits: HeroTrait[];\r\n\r\n    // Hero traits\r\n    itemTraits: HeroTrait[];\r\n\r\n    // Hero traits\r\n    temporaryTraits: HeroTrait[];\r\n}\r\n\r\nexport default Hero;\r\n","import Trait from \"./Trait\";\r\n\r\nexport enum ItemType {\r\n    Usable = 1,\r\n    Quest = 2,\r\n    WearableHead = 10,\r\n    WearableBody = 11,\r\n    WearableArms = 12,\r\n    WearableFeet = 13,\r\n    WeaponMelee1h = 20,\r\n    WeaponMelee2h = 21,\r\n    WeaponRanged1h = 22,\r\n    WeaponRanged2h = 23,\r\n    Shield = 24,\r\n}\r\n\r\nexport default interface Item {\r\n    // ID of the item\r\n    id: string;\r\n\r\n    // Name of the item\r\n    name: string;\r\n\r\n    // Text description for the item\r\n    description: string;\r\n\r\n    // URL of the image to display for the item\r\n    imageUrl: string;\r\n\r\n    // The type of item\r\n    itemType: ItemType;\r\n\r\n    // Item traits\r\n    traits: Trait[];\r\n}","import { AbilityFlags, Alignment, HeroClass } from \"../models/Hero\";\r\nimport { ItemType } from \"../models/Item\";\r\nimport { ModifierType } from \"../models/Trait\";\r\nimport Resources from \"../resources.en.json\";\r\n\r\nexport default class StringConverters {\r\n    private static resourceMap: any = null;\r\n\r\n    static getResources(): any {\r\n        if (!StringConverters.resourceMap) {\r\n            // TODO: This is silly\r\n            StringConverters.resourceMap = JSON.parse(JSON.stringify(Resources));\r\n        }\r\n\r\n        return StringConverters.resourceMap;\r\n    }\r\n\r\n    static classToString = (heroClass: HeroClass): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"HeroClass_\" + HeroClass[heroClass];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static alignmentToString = (alignment: Alignment): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"Alignment_\" + Alignment[alignment];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static modifierToString = (modifierType: ModifierType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ModifierType_\" + ModifierType[modifierType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static itemTypeText = (itemType: ItemType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ItemType_\" + ItemType[itemType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static abilitiesToString = (abilities: AbilityFlags): string => {\r\n        if (abilities === AbilityFlags.None) return \"None\";\r\n\r\n        const output: string[] = [];\r\n\r\n        if (abilities & AbilityFlags.Acrobatics) output.push(\"Acrobatics\");\r\n        if (abilities & AbilityFlags.Devices) output.push(\"Disable/Modify Devices\");\r\n        if (abilities & AbilityFlags.PatronBond) output.push(\"Patron Bond\");\r\n        if (abilities & AbilityFlags.Perception) output.push(\"Perception\");\r\n        if (abilities & AbilityFlags.Sorcery) output.push(\"Sorcery\");\r\n        if (abilities & AbilityFlags.Stealth) output.push(\"Stealth\");\r\n        if (abilities & AbilityFlags.Survival) output.push(\"Survival\");\r\n\r\n        return output.join(\", \");\r\n    };\r\n}\r\n","import { makeStyles, Typography } from \"@material-ui/core\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport Item from \"../models/Item\";\r\nimport Trait, { TraitEffect } from \"../models/Trait\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        padding: \"5px\",\r\n    },\r\n    description: {\r\n        padding: \"10px\",\r\n        margin: \"10px 0\",\r\n        backgroundColor: \"#999\",\r\n    },\r\n    itemType: {\r\n        padding: \"500px 10px 0 10px\",\r\n        margin: \"100px 0 0 0 \",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n    traits: {\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n});\r\n\r\ntype ItemTooltipContentProps = {\r\n    item: Item | undefined;\r\n};\r\n\r\nconst ItemTooltipContent: FunctionComponent<ItemTooltipContentProps> = (props: ItemTooltipContentProps): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n    const { item } = props;\r\n\r\n    const renderTraits = (traits: Trait[]): JSX.Element => {\r\n\r\n        let traitJsx: JSX.Element[] = [];\r\n        for (let i = 0; i < traits.length; i++) {\r\n            const newTraits = renderBehaviors(traits[i].behaviour);\r\n            traitJsx = traitJsx.concat(newTraits);\r\n        }\r\n        return <div>{traitJsx}</div>;\r\n    }\r\n\r\n    const renderBehaviors = (effects: TraitEffect[]): JSX.Element[] => {\r\n        return effects.map((e) => (\r\n            <p>\r\n                {valueToString(e.modifierValue)} {StringConverters.modifierToString(e.modifierType)}\r\n            </p>\r\n        ));\r\n    };\r\n\r\n    const valueToString = (value: number): string => (value > 0 ? `+${value}` : value.toString());\r\n\r\n    if (!item)\r\n        return <p>\"None\"</p>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography className={classes.title} color=\"inherit\">\r\n                {item.name}\r\n            </Typography>\r\n            <p className={classes.description}>{item.description}</p>\r\n            <Typography className={classes.itemType}>{StringConverters.itemTypeText(item.itemType)}</Typography>\r\n            <Typography className={classes.traits} align=\"right\">\r\n                {renderTraits(item.traits)}\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemTooltipContent;\r\n","import { Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { FunctionComponent, useState } from \"react\";\r\nimport Item from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => boolean;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: FunctionComponent<any> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, items, multiSelect } = props;\r\n\r\n    let [selected, setSelected] = useState([] as boolean[]);\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        const selectedIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedIds.push(items[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) {\r\n            const result = onSelectionChanged(selectedIds);\r\n        }\r\n    };\r\n\r\n    const renderInventory = () => {\r\n\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem}>\r\n                    <Tooltip title={<ItemTooltipContent item={item} />} key={index} arrow>\r\n                        <img src={item.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt={item.name} />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map(i => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem}>\r\n                    <Tooltip title={\"Nothing\"} key={index}>\r\n                        <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InventorySelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Item from \"../models/Item\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    stashImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\nconst Stash: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    // let [isValid, setIsValid] = useState(false);\r\n    let [stashSelectedIds, setStashSelectedIds] = React.useState([] as string[]);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState([] as string[]);\r\n\r\n    let [stashItems, setStashItems] = React.useState(null as Item[] | null);\r\n    let [inventoryItems, setInventoryItems] = React.useState(null as Item[] | null);\r\n\r\n    const maxItems = 8;\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const stashSelectionChanged = (ids: string[]) => setStashSelectedIds(ids);\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);;\r\n\r\n    const isStashSelected = (): boolean => stashSelectedIds.length > 0; \r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n\r\n    const willStashBeTooBig = (): boolean => (stashItems ? stashItems.length + inventorySelectedIds.length > maxItems : false);\r\n    const willInventoryBeTooBig = (): boolean => (inventoryItems ? inventoryItems.length + stashSelectedIds.length > maxItems : false);\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isStashSelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < stashSelectedIds.length; i++) {\r\n            service.removeStashItem(stashSelectedIds[i]);\r\n            service.addInventoryItem(stashSelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setStashSelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n\r\n        // TODO: How to trigger a reload?\r\n    }\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < inventorySelectedIds.length; i++) {\r\n            service.removeInventoryItem(inventorySelectedIds[i]);\r\n            service.addStashItem(inventorySelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setInventorySelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    if (!stashItems || !inventoryItems)\r\n        return null;\r\n\r\n    const stashToolTip = () => {\r\n        if (willInventoryBeTooBig())\r\n            return \"Too many items in inventory\";\r\n\r\n        return isStashSelected() ? \"Take Item from the Stash\" : \"Please select a stash item\";\r\n    }\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in stash\";\r\n\r\n        return isInventorySelected() ? \"Put Item in the Stash\" : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src=\"./images/stash.png\" alt=\"stash\" className={classes.stashImg} />\r\n                <InventorySelector items={stashItems} multiSelect={true} onSelectionChanged={stashSelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={stashToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isStashSelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willStashBeTooBig() || !isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector items={inventoryItems} multiSelect={true} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Stash;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\nimport PartySelection from \"./PartySelection\";\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\n\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveTo?: string) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nfunction EncounterDialog(props: EncounterDialogProps) {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = useState(new MockEncounterService());\r\n    let [paragraph, setParagraph] = useState(\"\");\r\n    let [title, setTitle] = useState(\"\");\r\n    let [choices, setChoices] = useState([] as InkStoryChoice[]);\r\n    let [storyStarted, setStoryStarted] = useState(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo: string) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo);\r\n    };\r\n\r\n    const handleChoice = (ev: any) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        }\r\n        else {\r\n            // Finish the story\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraph(encounter.paragraphText);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            // Finished -> Check variables\r\n            if (encounter.finishData) {\r\n                const moveTo = encounter.finishData.moveTo;\r\n                if (moveTo) {\r\n                    handleCloseWithValue(moveTo);\r\n                    return;\r\n                }\r\n            }\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n        if (encChoices.length === 0) {\r\n            return <Button onClick={handleContinue}>Continue</Button>;\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    const renderParagraph = (text: string) => {\r\n\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelection /> : null}\r\n                {isHeroSelect ? <HeroSelector /> : null}\r\n                {isHeroDismiss ? <HeroDismiss /> : null}\r\n                {isStash ? <Stash /> : null}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        // className={classes.dialog}\r\n        <Dialog\r\n            className={classes.dialog}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-dialog-title\"\r\n            open={open}\r\n            //disableBackdropClick={true}\r\n        >\r\n            {/* <DialogTitle id=\"simple-dialog-title\">Set backup account</DialogTitle> */}\r\n            <DialogContent className={classes.content}>\r\n                <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" />\r\n                <h1>{title}</h1>\r\n                {renderParagraph(paragraph)}\r\n            </DialogContent>\r\n            <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EncounterDialog;\r\n","import { latLng } from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            vertices: json.vertices.map(\r\n                (v: any) => {\r\n                    return {\r\n                        id: v.id,\r\n                        position: latLng(v.position[0], v.position[1]),\r\n                        clickRadius: v.clickRadius,\r\n                        encounterId: v.encounterId,\r\n                        exitId: v.exitId,\r\n                    } as MapVertex;\r\n                }\r\n            ),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): any => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n}\r\n","import GameState from \"../models/GameState\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static _state: GameState = {\r\n        currentMapId: \"town\",\r\n        currentVertextId: \"scupperden-road\",\r\n    };\r\n\r\n    public getState(): GameState {\r\n        const stateJson = null; //localStorage.getItem(\"state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService._state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        MockGameStateService._state = state;\r\n        // localStorage.setItem(\"state\", JSON.stringify(state));\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\n// UI Elements\r\nimport { CRS, Icon, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Marker } from 'react-leaflet';\r\nimport DriftMarker from '../components/DriftMarker';\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\n\r\n// Services\r\nimport MockMapService from '../services/MockMapService';\r\n\r\n// Pathfinding imports\r\nimport npath from 'ngraph.path';\r\nimport GraphBuilder  from '../services/GraphBuilder';\r\nimport Queue from '../models/Queue';\r\nimport { Node } from \"ngraph.graph\";\r\nimport { useParams } from 'react-router-dom';\r\nimport MockGameStateService from '../services/MockGameStateService';\r\nimport GameState from '../models/GameState';\r\nimport { MapGraph, NodeData } from '../models/MapGraph';\r\n\r\ntype OverheadMapProps = {\r\n    // None\r\n};\r\n\r\nconst OverheadMap: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    \r\n    const params: any = useParams();\r\n    const mapId: string = params.id;\r\n\r\n    let [graph, setGraph] = React.useState(null as MapGraph | null); // The map graph data\r\n    let [pos, setPos] = React.useState(null as LatLng | null); // The current (target) position of the player marker\r\n    let [vertexQueue] = React.useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    let [encounterId, setEncounterId] = React.useState(null as string | null);\r\n    let [mapUrl, setMapUrl] = React.useState(null as string | null);\r\n    let [userState, setUserState] = React.useState(null as GameState | null);\r\n    let [initialNode, setInitialNode] = React.useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    const setCurrentVertex = (vertexId: string) => {\r\n         if (!userState) return;\r\n\r\n        userState.currentVertextId = vertexId;\r\n        setUserState(userState);\r\n    }\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (marker: any) => {\r\n        \r\n        console.log(\"Move ended\");\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update user state\r\n            setCurrentVertex(targetVertex.id.toString());\r\n\r\n            //debugger;\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                    } as GameState;\r\n                    const stateService = new MockGameStateService();\r\n\r\n                    setInitialNode(true);\r\n                    setPos(null);\r\n                    stateService.setState(newState);\r\n                    setUserState(newState);\r\n                    setGraph(null);\r\n                    setMapUrl(null);\r\n                }\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        if (!graph || !userState) return; // Map not loaded\r\n\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n\r\n        // Move to the nearest vertex to the clicked point\r\n        const match = graph.findNearestVertex(e.latlng);\r\n\r\n        if (match) {\r\n            console.log(`Clicked on vertex ${match.id}`);\r\n\r\n            var pathFinder = npath.aStar(graph.getNGraph());\r\n            let path = pathFinder.find(userState?.currentVertextId, match.id);\r\n\r\n            if (path.length <= 1) {\r\n                console.log(`No route found to ${match.id}`);\r\n                return;\r\n            }\r\n\r\n            path.pop(); // Remove the current/start node\r\n\r\n            vertexQueue.clear();\r\n            let nextVertex = path.pop();\r\n            while (nextVertex) {\r\n                vertexQueue.push(nextVertex);\r\n                // Stop if a vertex with an an encounter is hit\r\n                if (nextVertex.data.encounterId) {\r\n                    break;\r\n                }\r\n                nextVertex = path.pop();\r\n            }\r\n\r\n            handleMoveEnd(null); // Trigger the move to the next vertex\r\n        }\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(null);\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo: string | undefined) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (moveTo && graph) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newUserState = stateService.getState();\r\n            if (!newUserState) {\r\n                console.error(`No user state data`);\r\n                return;\r\n            }\r\n\r\n            setUserState(newUserState);\r\n\r\n            const service = new MockMapService();\r\n            const data = service.getMap(newUserState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            setMapUrl(data.imageUrl);\r\n\r\n            console.log(`Found ${data?.vertices.length} vertices`);\r\n            const mapGraph = GraphBuilder.Build(data);\r\n\r\n            const initialVertex = mapGraph.findVertex(newUserState.currentVertextId);\r\n            if (initialVertex) {\r\n                setPos(initialVertex?.data.position);\r\n            }\r\n\r\n            setGraph(mapGraph);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(mapGraph, newUserState.currentVertextId);\r\n        };\r\n\r\n        if (graph == null) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    var markerIcon = new Icon({\r\n        iconUrl: \"images/marker.png\",\r\n        iconSize: [50, 75],\r\n        iconAnchor: [25, 65],\r\n        // popupAnchor: [-3, -76],\r\n        // shadowUrl: 'my-icon-shadow.png',\r\n        // shadowSize: [68, 95],\r\n        // shadowAnchor: [22, 94]\r\n    });\r\n\r\n    const renderVertexMarkers = () => {\r\n        if (!graph) return null;\r\n        \r\n        const vertices = graph.getVertices();\r\n\r\n        // for (let i = 0; i < vertices.length; i++) {\r\n        //     const v = vertices[i];\r\n        //     console.log(`marker at ${v.data['position']} is ${v.id}`);\r\n        // }\r\n\r\n        return vertices.map((v) => {\r\n            const icon = new Icon({\r\n                iconUrl: \"images/blank.svg\",\r\n                iconSize: [50, 50],\r\n                className: v.data.exitId ? \"exit-icon\" : \"vertex-icon\",\r\n            });\r\n            return <Marker key={v.id} position={v.data.position} title={v.id.toString()} icon={icon} />\r\n        });\r\n    };\r\n\r\n    if (!userState || !mapUrl || !pos)\r\n        return null;\r\n\r\n    // maxBounds={bounds}\r\n    return (\r\n        <Map\r\n            crs={CRS.Simple}\r\n            zoom={-1}\r\n            minZoom={-1}\r\n            maxZoom={-1}\r\n            bounds={bounds}\r\n            maxBounds={bounds}\r\n            scrollWheelZoom={false}\r\n            onClick={handleClick}\r\n            zoomControl={false}\r\n        >\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n            <ImageOverlay url={mapUrl} bounds={bounds} />\r\n            <DriftMarker duration={1000} position={pos} keepAtCenter={false} icon={markerIcon} onMoveEnd={handleMoveEnd} />\r\n            {renderVertexMarkers()}\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default OverheadMap;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventoryProps = {\r\n    items: Item[];\r\n    onEquipItem: (itemId: string) => void;\r\n};\r\n\r\nconst PartyInventory: React.FunctionComponent<PartyInventoryProps> = (props: PartyInventoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, onEquipItem } = props;\r\n\r\n    // let [isValid, setIsValid] = useState(false);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState([] as string[]);\r\n\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);\r\n\r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n    const isItemEquipable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n\r\n        const match = items.find((item) => item.id === inventorySelectedIds[0]);\r\n        if (!match) return false; // Error?\r\n\r\n        return match.itemType >= 10;\r\n    };\r\n\r\n    const equipItem = () => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        if (onEquipItem) onEquipItem(inventorySelectedIds[0]);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected()) return \"Please select an inventory item\";\r\n\r\n        return isItemEquipable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={items} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventory;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport Item, { ItemType } from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"7vw\",\r\n        top: \"-1vh\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"7vw\",\r\n        top: \"6.5vh\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"7vw\",\r\n        top: \"14vh\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"7vw\",\r\n        top: \"21.5vh\",\r\n    },\r\n    portraitItemWeapon: {\r\n        left: \"3.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitItemShield: {\r\n        left: \"10.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitNoItemImg: {\r\n        filter: \"brightness(35%)\",\r\n    },\r\n    portraitItemImg: {\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"50%\",\r\n    },\r\n});\r\n\r\ntype EquippedItemsProps = {\r\n    equippedItems: Item[];\r\n};\r\n\r\n/*\r\n* Hero Profile Screen : Display the items that the hero has equipped\r\n*/\r\nconst EquippedItems: FunctionComponent<EquippedItemsProps> = (props: EquippedItemsProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const { equippedItems } = props;\r\n\r\n    const headItem = equippedItems.find((item) => item.itemType === ItemType.WearableHead);\r\n    const bodyItem = equippedItems.find((item) => item.itemType === ItemType.WearableBody);\r\n    const armsItem = equippedItems.find((item) => item.itemType === ItemType.WearableArms);\r\n    const feetItem = equippedItems.find((item) => item.itemType === ItemType.WearableFeet);\r\n\r\n    return (\r\n        <div className={classes.itemContainer}>\r\n            <Tooltip title={<ItemTooltipContent item={headItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemHelm}`}>\r\n                    {headItem ? (\r\n                        <img src={headItem.imageUrl} className={classes.portraitItemImg} alt=\"helm\" />\r\n                    ) : (\r\n                        <img src=\"images/helm.svg\" className={classes.portraitNoItemImg} alt=\"helm\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={bodyItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}>\r\n                    {bodyItem ? (\r\n                        <img src={bodyItem.imageUrl} className={classes.portraitItemImg} alt=\"breastplate\" />\r\n                    ) : (\r\n                        <img src=\"images/breastplate.svg\" className={classes.portraitNoItemImg} alt=\"breastplate\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={feetItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemLegs}`}>\r\n                    {feetItem ? (\r\n                        <img src={feetItem.imageUrl} className={classes.portraitItemImg} alt=\"legs\" />\r\n                    ) : (\r\n                        <img src=\"images/leg.svg\" className={classes.portraitNoItemImg} alt=\"legs\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={armsItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemGloves}`}>\r\n                    {armsItem ? (\r\n                        <img src={armsItem.imageUrl} className={classes.portraitItemImg} alt=\"gloves\" />\r\n                    ) : (\r\n                        <img src=\"images/glove.svg\" className={classes.portraitNoItemImg} alt=\"gloves\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemWeapon}`}>\r\n                    <img src=\"images/sword.svg\" className={classes.portraitNoItemImg} alt=\"weapon\" />\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemShield}`}>\r\n                    <img src=\"images/shield.svg\" className={classes.portraitNoItemImg} alt=\"shield\" />\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EquippedItems;\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/AttributeList\";\r\nimport Attribute from \"../models/Attribute\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nconst StatisticsBlock: React.FunctionComponent<StatisticsBlockProps> = (props: StatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    function createData(name: string, base: number, modifier: number, total: number) {\r\n        return { name, base, modifier, total };\r\n    }\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.modifier;\r\n\r\n    const rows = [\r\n        createData(\"Strength\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n        createData(\"Dexterity\", statistics.dexterity.base, statistics.dexterity.modifier, attributeTotal(statistics.dexterity)),\r\n        createData(\"Consitution\", statistics.constitution.base, statistics.constitution.modifier, attributeTotal(statistics.constitution)),\r\n        createData(\"Intelligence\", statistics.intelligence.base, statistics.intelligence.modifier, attributeTotal(statistics.intelligence)),\r\n        createData(\"Wisdom\", statistics.wisdom.base, statistics.wisdom.modifier, attributeTotal(statistics.wisdom)),\r\n        createData(\"Charisma\", statistics.charisma.base, statistics.charisma.modifier, attributeTotal(statistics.charisma)),\r\n        createData(\"Luck\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Base</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Total</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.base}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.total}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default StatisticsBlock;","import React from \"react\";\r\nimport { Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport LocationSearchingIcon from \"@material-ui/icons/LocationSearching\";\r\n\r\nimport CalculatedStats from \"../models/CalculatedStats\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        //backgroundColor: theme.palette.background.paper,\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype CalculatedStatisticsBlockProps = {\r\n    statistics: CalculatedStats;\r\n};\r\n\r\nexport default function CalculatedStatisticsBlock(props: CalculatedStatisticsBlockProps) {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    return (\r\n        <div className={classes.statisticsBlock}>\r\n            <Grid container>\r\n                <Grid item xs={1} md={1}></Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FavoriteIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Hit Points ${statistics.currentHitPoints} / ${statistics.currentHitPoints}`}\r\n                                secondary={`Hit Die D${statistics.hitDie}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <SecurityIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Armor Class ${statistics.armour}`}\r\n                                secondary={`Spell Resistance ${statistics.spellResistance}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FastForwardIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack Speed ${statistics.attackSpeed}`}\r\n                                secondary={`Move Speed ${statistics.moveSpeed}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <LocationSearchingIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack +${statistics.attack}`}\r\n                                secondary={`Damage D${statistics.damageDie} + ${statistics.damageBonus}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={1} md={1}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, ListItemText, Grid } from \"@material-ui/core\";\r\n\r\nimport HeroTrait from \"../models/HeroTrait\";\r\n\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\n\r\nconst useStyles = makeStyles({\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype TraitListProps = {\r\n    traits: HeroTrait[];\r\n};\r\n\r\nconst TraitList: React.FunctionComponent<TraitListProps> = (props: TraitListProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { traits } = props;\r\n\r\n    const renderTraitIcon = ((t: HeroTrait) => {\r\n        switch (t.type) {\r\n            case 1: // Mental\r\n                return <FaceIcon />;\r\n            case 2: // Mystical\r\n                return <FlashOnIcon />;\r\n            case 3: // Physical\r\n                return <AccessibilityNewIcon />;\r\n            case 4: // Item\r\n                return <AllInboxIcon />;\r\n            default:\r\n                return <AllInboxIcon />;\r\n        }\r\n    });\r\n\r\n\r\n    // TODO: Add behiavor , {t.behaviour}\r\n    const renderTrait = (t: HeroTrait) => (\r\n        <ListItem>\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    {renderTraitIcon(t)}\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={t.name}\r\n                secondary={t.from}\r\n            />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <Grid container className={classes.statisticsBlock}>\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8}>\r\n                <List>{traits.map((t) => renderTrait(t))}</List>\r\n            </Grid>\r\n            <Grid item xs={2}></Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TraitList;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport Item from \"../models/Item\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\nimport MockItemService from \"../services/MockItemService\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nimport PartyInventory from \"../components/PartyInventory\";\r\nimport EquippedItems from \"../components/EquippedItems\";\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport CalculatedStatisticsBlock from \"../components/CalculatedStatisticsBlock\";\r\nimport TraitList from \"../components/TraitList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"91.5vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        position: \"absolute\",\r\n        top: \"10.2%\",\r\n        left: \"1%\",\r\n        width: \"40px\",\r\n        zIndex: 2,\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"56vh\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        //left: \"20%\",\r\n        width: \"18vw\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"28px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"34vh\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statistics: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n}));\r\n\r\ntype HeroProfileProps = {\r\n    //id: string,\r\n};\r\n\r\nconst HeroProfile: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const params: any = useParams();\r\n    const id = params.id;\r\n\r\n    let [hero, setHero] = React.useState(null as Hero | null);\r\n    let [party, setParty] = React.useState(null as PartyStatistics | null);\r\n    let [world, setWorld] = React.useState(null as WorldStatistics | null);\r\n    let [equippedItems, setEquippedItems] = React.useState(null as Item[] | null);\r\n    let [inventoryItems, setInventoryItems] = React.useState(null as Item[] | null);\r\n    let [currentId, setCurrentId] = React.useState(-1);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const partyService = new MockPartyService();\r\n            const newParty = partyService.getPartyStatistics();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            const itemsService = new MockItemService();\r\n            const newItems = itemsService.getItems(newHero.equippedItems);\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n            if (!newItems) {\r\n                console.error(`No items data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n            setEquippedItems(newItems);\r\n        };\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world || !equippedItems || !inventoryItems) return null;\r\n\r\n    const onEquipItem = (itemId: string) => {\r\n\r\n        // console.log(`hero '${id}' equips ${itemId}`);\r\n\r\n        // Equip the item\r\n        const heroService = new MockHeroService();\r\n        const removedItemId = heroService.equipItem(id, itemId);\r\n\r\n        // Remove the item from party inventory\r\n        const partyService = new MockPartyService();\r\n        partyService.removeInventoryItem(itemId);\r\n        if (removedItemId) {\r\n            partyService.addInventoryItem(removedItemId);\r\n        }\r\n\r\n        // Force a refresh\r\n        setCurrentId(-1);\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.characterGrid}>\r\n            <div className={classes.left}>\r\n                <div className={classes.portrait}>\r\n                    <br />\r\n                    <a href=\"/#/\">\r\n                        <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                    </a>\r\n                    <div className={classes.bannerContainer}>\r\n                        <h1 className=\"banner\">{hero.name}</h1>\r\n                    </div>\r\n                    <div className={classes.itemContainer}>\r\n                        <p>\r\n                            {StringConverters.classToString(hero.class)} - {StringConverters.alignmentToString(hero.alignment)}\r\n                        </p>\r\n                        <Grid container>\r\n                            <Grid item xs={3}>\r\n                                <EquippedItems equippedItems={equippedItems} />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                            </Grid>\r\n                            <Grid item xs={3}></Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.inventory}>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                    <PartyInventory items={inventoryItems} onEquipItem={onEquipItem} />\r\n                </div>\r\n            </div>\r\n            <div className={classes.statistics}>\r\n                <br />\r\n                <div className={classes.statisticsBlock}>\r\n                    <p>{hero.background}</p>\r\n                </div>\r\n                <br />\r\n                <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    <StatisticsBlock statistics={HeroHelper.calculateAttributesWithModifiers(hero)} />\r\n                </div>\r\n                <h1 className={classes.sectionHeading}>Other</h1>\r\n                <CalculatedStatisticsBlock statistics={HeroHelper.calculateStatsWithModifiers(hero)} />\r\n                <h1 className={classes.sectionHeading}>Abilities</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    <p>{StringConverters.abilitiesToString(hero.abilities)}</p>\r\n                </div>\r\n                <h1 className={classes.sectionHeading}>Traits</h1>\r\n                <TraitList traits={HeroHelper.getAllTraits(hero)} />\r\n                <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    <p>Reputation {party.reputation}</p>\r\n                    {party.traits.map((t) => (\r\n                        <p>{t}</p>\r\n                    ))}\r\n                </div>\r\n                <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                <div className={classes.statisticsBlock}>\r\n                    {world.traits.map((t) => (\r\n                        <p>{t}</p>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroProfile;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// UI Elements\r\nimport { CRS, Icon, latLng, LatLngBounds } from 'leaflet';\r\nimport { Map, ImageOverlay, Polygon } from \"react-leaflet\";\r\nimport DriftMarker from '../components/DriftMarker';\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport Queue from '../models/Queue';\r\nimport { Graph, Node } from \"ngraph.graph\";\r\n\r\ntype EncounterMapProps = {\r\n    // None\r\n};\r\n\r\nexport function EncounterMap(props: EncounterMapProps) {\r\n    // const pos = { lat: -51.505, lng: -0.09 } as any;\r\n    const initialPos = latLng([0, 0]);\r\n    const initialNode = \"common-room\";\r\n\r\n    let [pos, setPos] = useState(initialPos); // The current (target) position of the player marker\r\n    let [currentVertex, setCurrentVertex] = useState(initialNode); // The current vertex that the player marker is at\r\n    let [vertexQueue] = useState(new Queue<any>()); // A queue of points to visit during path-finding\r\n    let [encounterId, setEncounterId] = useState(null as string | null);\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    const getVertices = (graph: Graph<any, any> | null): Node<any>[] => {\r\n        if (!graph) return [];\r\n\r\n        var vertices: Node<any>[] = [];\r\n        graph.forEachNode((n: Node<any>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    // // Get the vertex nearest to the clicked point\r\n    // const findNearestVertex = (graph: Graph<any, any> | null, pos: LatLng): any => {\r\n    //     const vertices = getVertices(graph);\r\n\r\n    //     for (let i = 0; i < vertices.length; i++) {\r\n    //         const vertex = vertices[i];\r\n\r\n    //         const dist = distance(pos, vertex.data[\"position\"]);\r\n    //         const isInRadius = dist < vertex.data[\"clickRadius\"];\r\n\r\n    //         if (isInRadius) {\r\n    //             return vertex;\r\n    //         }\r\n    //         // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.clickRadius}) = ${isInRadius}`);\r\n    //     }\r\n\r\n    //     return null;\r\n    // };\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (marker: any) => {\r\n        console.log(\"Move ended\");\r\n\r\n        var targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data[\"position\"]);\r\n            setCurrentVertex(targetVertex.id);\r\n\r\n            const targetEncounterId = targetVertex.data[\"encounterId\"];\r\n            if (targetEncounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetEncounterId);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        //if (!graph) return; // Map not loaded\r\n\r\n        console.log(\"clicked at: \" + e.latlng);\r\n    };\r\n\r\n    const handleEncounterClose = (moveTo: string | undefined) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Initial load of map data\r\n        // const loadMap = () => {\r\n        //     const service = new MockMapService();\r\n        //     const data = service.getMap(\"temple\");\r\n        //     if (!data) {\r\n        //         console.error(`No map data`);\r\n        //         return;\r\n        //     }\r\n        //     console.log(`Found ${data?.vertices.length} vertices`);\r\n        //     const graph = GraphBuilder.Build(data);\r\n        //     setGraph(graph);\r\n        // };\r\n        // if (graph == null) {\r\n        //     loadMap();\r\n        // }\r\n    });\r\n\r\n    //const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([0.009634, 0.009642]));\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n    //const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    // maxBounds={bounds}\r\n    return (\r\n        <Map\r\n            crs={CRS.Simple}\r\n            zoom={3}\r\n            minZoom={-5}\r\n            maxZoom={20}\r\n            bounds={bounds}\r\n            maxBounds={bounds}\r\n            scrollWheelZoom={false}\r\n            onClick={handleClick}\r\n            zoomControl={true}\r\n        >\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            {/* <TileLayer url=\"tiles/Tavern/row-{x}-col-{y}.png\" bounds={bounds} /> */}\r\n            <ImageOverlay url=\"maps/tavern.png\" bounds={bounds} />\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default EncounterMap;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\n\r\n// Pages\r\nimport OverheadMap from \"./pages/OverheadMap\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterMap from \"./pages/EncounterMap\";\r\n\r\nconst MainLayout: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path=\"/profile/:id\"\r\n                        component={() => {\r\n                            return <HeroProfile />;\r\n                        }}\r\n                    />\r\n                    <Route path=\"/encounter\" component={EncounterMap} />\r\n                    <Route path=\"/:id\" component={OverheadMap} />\r\n                    <Route path=\"/\" component={OverheadMap} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainLayout;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport PitTheme from \"./PitTheme\";\r\n\r\n// Pages\r\nimport MainMenu from \"./pages/MainMenu\";\r\nimport MainLayout from \"./MainLayout\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <ThemeProvider theme={PitTheme}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path=\"/menu\" component={MainMenu} />\r\n                        <Route path=\"/\" component={MainLayout} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}