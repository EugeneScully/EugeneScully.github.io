{"version":3,"sources":["helpers/ElectronHelper.ts","PitTheme.tsx","components/LinkTo.tsx","components/KeyMaps.tsx","services/MockSaveService.ts","components/MenuCards.tsx","pages/MainMenu.tsx","services/MockItemService.ts","helpers/AttributeHelper.ts","services/MockHeroService.ts","services/MockPartyService.ts","components/Header.tsx","services/MockGameStateService.ts","models/character/Hero.ts","models/Item.ts","models/character/Trait.ts","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","services/MockVariableService.ts","services/MockStoryEncounterService.ts","components/HeroList.tsx","components/HeroSelector.tsx","components/PartySelection.tsx","components/HeroDismiss.tsx","services/StringConverters.ts","components/ItemTooltipContent.tsx","components/InventorySelector.tsx","components/Stash.tsx","services/MockTraitService.ts","components/TraitList.tsx","components/TraitSelector.tsx","components/EncounterDialog.tsx","components/markers/VertexMarker.tsx","models/Queue.ts","components/markers/Drift_Marker.tsx","components/markers/DriftMarker2.tsx","components/markers/PartyMarker.tsx","services/TimeTracker.ts","components/OverheadMap.tsx","components/LoadingProgress.tsx","components/OverheadMapLoader.tsx","services/MockDetailedEncounterService.ts","components/markers/HeroMarker.tsx","helpers/Transforms.ts","helpers/GridHelpers.ts","models/CharacterEncounterData.ts","components/markers/GridMarker.tsx","components/markers/FoeMarker.tsx","components/encounter-map/StaticMarker.tsx","components/encounter-map/CombatPath.tsx","components/markers/CustomMarker.tsx","components/markers/DamageDisplay.tsx","components/CombatIndicator.tsx","components/ActionBar.tsx","services/DiceRoller.ts","services/DiceSeedTracker.ts","services/InitiativeTracker.ts","models/AttackResult.ts","services/EffectTableServiceStatic.ts","helpers/HeroHelper.ts","helpers/CombatHelper.ts","helpers/CombatPositionHelper.ts","helpers/CombatActionHelper.ts","components/markers/IsoMarker.tsx","components/EncounterMap.tsx","services/MockNpcService.ts","helpers/ArrayHelper.ts","components/EncounterMapLoader.tsx","pages/MapPage.tsx","services/MockWorldService.ts","components/PartyInventory.tsx","components/EquippedItems.tsx","components/StatisticsBlock.tsx","components/CalculatedStatisticsBlock.tsx","pages/HeroProfile.tsx","pages/EncounterPage.tsx","services/MockQuestService.ts","pages/QuestsPage.tsx","MainLayout.tsx","components/SaveGameSelector.tsx","pages/GameNewMenu.tsx","pages/GameLoadMenu.tsx","pages/GameDeleteMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ElectronHelper","window","process","type","versions","electron","navigator","userAgent","indexOf","PitTheme","createMuiTheme","palette","primary","light","main","dark","LinkTo","props","url","children","top","left","width","classes","makeStyles","container","zIndex","display","cursor","containerAbsolute","position","useStyles","isPositioned","history","useHistory","className","onClick","event","push","KeyMaps","backUrl","navigateToUrl","Mousetrap","bind","MockSaveService","setCurrentSave","slot","_currentSave","localStorage","setItem","toString","getCurrentSave","getItem","slotId","Number","parseInt","markSlotUpdated","Date","getSlotUpdateTimes","slot1","slot2","slot3","deleteSlot","Error","removeItem","key","value","this","JSON","stringify","json","parse","undefined","card","margin","backgroundColor","right","boxShadow","cardDisabled","cardActive","MenuCards","selectClass","i","active","enabled","items","Grid","item","xs","map","Card","onSelected","CardHeader","title","Typography","variant","avatar","icon","CardContent","description","root","height","close","filter","cardIcon","fontSize","titleContainer","padding","appLogo","pointerEvents","MainMenu","React","useState","saveTimes","setSaveTimes","useEffect","saveService","loadSaves","slotCount","s","length","allSlotsFull","oneSlotFull","isElectron","require","ipcRenderer","send","src","alt","MockItemService","getItems","ids","id","getItemDetail","TokenOfServitude","HagTeeth","CeramicHelm","CeramicArmor","WolfSpear","AttributeHelper","attribute","total","base","bonus","convertSimpleToComplex","attributes","strength","dexterity","constitution","intelligence","wisdom","charisma","luck","MockHeroService","hero","getHeroData","convertToDetailed","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroes","heroId","itemId","heroMatch","find","itemService","originalItem","itemWithSameType","currentStatus","equippedItems","itemType","saveObject","getObject","permanentTraits","baseTraits","temporaryTraits","currentHitPoints","baseHitPoints","lostSpells","name","background","imageUrl","tokenUrl","tokenOffset","abilities","alignment","level","stats","status","armour","meleeAttackBonus","meleeAttackSpeed","meleeEffectId","meleeDamageBonus","rangedAttackBonus","rangedAttackSpeed","rangedEffectId","rangedDamageBonus","spellAttackBonus","spellAttackSpeed","spellDamageBonus","spells","moveSpeed","maxHitPoints","spellResistance","damageResistance","behavior","MockPartyService","reputation","traits","heroService","getPartyIds","getHeroDetail","_heroIds","heroIds","defaultHeroIds","_inventoryItemIds","inventoryIds","defaultInventoryIds","itemIds","inventoryItems","getInventory","setInventory","_stashItemIds","stashIds","defaultStashIds","getStash","setStash","stashItems","_quests","quests","defaultQuests","quest","newQuests","q","appHeader","headerSpan","headerParty","headerImg","border","borderRadius","borderWidth","borderColor","Header","party","setParty","newParty","getParty","console","error","loadParty","MockGameStateService","_state","stateJson","state","defaultState","log","currentMapId","currentVertextId","currentMapCovers","currentTurn","seed","Math","random","MAX_SAFE_INTEGER","Alignment","StatusFlags","AbilityFlags","ItemType","TraitType","ModifierType","MockMapService","BlackTempleMap","TownMap","coverUrls","useDayNight","pathColor","vertices","v","Leaflet","latLng","clickRadius","encounterId","marker","exitId","coverIds","edges","distance","x","y","latDist","lat","lngDist","lng","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","from","weight","MockVariableService","MockStoryEncounterService","currentStory","currentId","currentTitle","TheInterceptContent","commonRoomContent","chasmContent","homeContent","storeRoomContent","nineBellsContent","brawlContent","squallsEndEntryContent","dartTrapContent","Story","createEmptyStory","tags","globalTags","titleTag","t","startsWith","substring","trimStart","variableService","skipVariableTag","skipVariable","getVariable","variableValues","join","split","forEach","variablesState","SetGlobal","StringValue","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","GetVariableWithName","detailedEncounter","coverVisible","paragraphText","choices","isFinished","finishData","Continue","encounterChoices","currentChoices","c","index","text","heroSelected","HeroList","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","partyService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","currentTarget","newSelected","selectedHeroIds","imgClass","output","style","textAlign","Tooltip","renderParty","HeroSelector","partyButton","partyButtonDiv","PartySelection","setHeroIds","isValid","Button","setPartyIds","disabled","color","HeroDismiss","setHeroId","StringConverters","resourceMap","Resources","alignmentToString","resources","getResources","modifierToString","modifierType","itemTypeText","abilitiesToString","None","Acrobatics","Devices","PatronBond","Perception","Sorcery","Stealth","Survival","ItemTooltipContent","renderBehaviors","effects","e","modifierValue","Fragment","align","traitJsx","newTraits","concat","renderTraits","gridItem","inventory","itemSelected","InventorySelector","selectedIds","spacing","alignItems","justify","itemGrids","arrow","emptyItems","emptyGrids","renderInventory","stashImg","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","Stash","stashSelectedIds","setStashSelectedIds","inventorySelectedIds","setInventorySelectedIds","setStashItems","setInventoryItems","stashItemIds","inventoryItemIds","newStashItems","newInventoryItems","loadItems","isStashSelected","isInventorySelected","willInventoryBeTooBig","service","removeStashItem","addInventoryItem","startIcon","removeInventoryItem","addStashItem","MockTraitService","getTraits","getTraitDetail","PhobiaUndead","ToughSkin","ResurrectionBotched","CompulsionKleptomaniac","notSelected","TraitList","selectedTrait","setSelectedTrait","renderTraitIcon","renderTrait","ListItem","trait","ListItemAvatar","Avatar","ListItemText","secondary","List","dense","traitsBlock","button","buttonDiv","TraitSelector","traitIds","setTraits","loadTraits","paper","overflow","dialog","userSelect","opacity","content","minWidth","minHeight","fontFamily","actions","portrait","placeholder","float","paragraph","EncounterDialog","onClose","MockEncounterService","encounterService","paragraphs","setParagraphs","setTitle","setChoices","storyStarted","setStoryStarted","open","handleClose","handleChoice","encounter","chooseChoice","encounterFinish","processFinish","handleContinue","finish","encounterDetailId","startEncounter","encChoices","Dialog","aria-labelledby","DialogContent","p","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","selectTraitStart","selectTraitEnd","traitsStart","substr","replaceAll","isRandomTrait","renderParagraph","DialogActions","tooltip","whiteSpace","verticalAlign","justifyContent","marginLeft","marginRight","flexShrink","VertexMarker","onHover","onHoverEnd","vertextId","Icon","iconUrl","image","iconSize","dimensions","iconAnchor","anchor","Marker","onclick","onmouseover","onmouseout","renderTooltipIcon","Queue","_store","val","shift","exports","Leaflet_module","L","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","dragging","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","DriftMarker2","leafletElement","rest","DivIcon","el","contextValue","leaflet","popupContainer","createLeafletElement","forceUpdate","fromProps","toProps","zIndexOffset","setZIndexOffset","setOpacity","draggable","_icon","portal","createPortal","MapLayer","withLeaflet","PartyMarker","isActive","onMoveEnd","iconActive","_","TimeTracker","_dayLength","isNight","hour","isMorning","isEvening","toLogString","logString","dayMap","nightMap","eveningMap","morningMap","bottom","OverheadMap","startState","mapUrl","onNewMap","setPos","path","setPath","vertexQueue","setEncounterId","gameState","setGameState","initialNode","setInitialNode","visibleCovers","setVisibleCovers","handleMoveEnd","targetVertex","pop","thisCoverIds","splits","newState","currentEncounterId","clear","stateService","getState","setState","vertexId","npath","aStar","nextVertex","pathVertexes","moveToVertexId","mapGraph","match","bounds","LatLngBounds","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","round","zoomControl","ImageOverlay","covers","renderCovers","renderMarkers","Polyline","positions","dashArray","dashOffset","LoadingProgress","CircularProgress","OverheadMapLoader","setGraph","setPathColor","setMapUrl","setCoverUrls","setUseDayNight","getMap","Build","loadMap","MockDetailedEncounterService","TavernMap","HeroMarker","progress","circularProgress","percentHp","details","displayPos","colorPrimary","thickness","size","Transforms","isoX","carX","carY","isoY","cardinalToIsometric","car","cardinalToIsometric2","isometricToCardinal","iso","offset","scale","GridHelpers","tokenGrid","grid","mergeGridEntry","gridToDisplayTuple","gridScale","gridOffset","gridToDisplayCenterTuple","gridToDisplay","gridToDisplayCenter","reverseOffset","coords","reverseScale","displayToGrid","result","floor","getGridLocation","char","getInitialPositions","characters","gridPosition","CharacterEncounterData","tokenEntry","baseEntry","buildAstarGrid","isWalkable","getGridPath","start","end","isHeroMove","mergedGrid","buildMergedGrids","endEntry","isFoe","isHero","isBlocked","AStarFinder","matrix","startGridPosition","endGridPosition","findPath","reverse","getRangedGridPath","range","distanceSquared","splice","getHeroPath","getFoePath","findNearestHero","paths","heroEntries","sortedPaths","sort","p1","p2","entry","isEncounter","canEndMove","displayGrid","displayStrings","gridEntry","selectedAttack","gridPos","isMoving","queueStrings","convertFunc","GridMarker","gridToDisplayFunc","FoeMarker","foe","meleeHover","hoverUrl","attackIcon","onMouseOver","onMouseOut","StaticMarker","CombatPath","move","fullPath","remainderPathLength","fullMoveStart","fullMoveEnd","halfMoveStart","remainderPath","slice","fullMovePath","halfMovePath","halfMoveMarker","fullMoveMarker","CustomMarker","RL","zIndexOff","fromPosition","fromZIndexOffset","fromOpacity","fromDraggable","fromClassName","toPosition","toZIndexOffset","toOpacity","toDraggable","toClassName","difference","itemsToRemove","includes","fromClasses","toClasses","classList","remove","updateLeafletElement","LeafletProvider","explode","death","miss","DamageDisplay","damage","show","Fade","in","transitionDelay","timeout","enter","exit","CombatIndicator","isCombat","initiative","ActionBar","renderButton","renderSpells","DiceRoller","rollDie","dieType","ceil","generate","roll20","roll10","DiceSeedTracker","reduce","a","b","charCodeAt","mulberry32","imul","InitiativeTracker","initiatives","_initiatives","processDelay","delay","init","getInitiatives","getNextInitiative","displayInitiatives","gameId","foes","fromEncounterId","roller","heroInitiatives","h","next","getModifier","foeInitiatives","f","n1","n2","AttackResult","createMiss","createFumble","createHit","createCritical","createDeath","EffectTableServiceStatic","Fists","Spear","Bow","MagicMissle","table","rawRoll","matches","useRaw","resultMin","resultMax","HeroHelper","statistics","modifier","getItemTraits","itemTraits","getAllTraits","calculateAttributesWithModifiers","allTraits","strMod","dexMod","conMod","intMod","wisMod","chaMod","luckMod","j","Strength","Dexterity","Constitution","Intelligence","Wisdom","Charisma","Luck","calculateStatsWithModifiers","armorMod","moveSpeedMod","meleeAttackMod","meleeAttackSpeedMod","meleeDamageMod","rangedAttackMod","rangedAttackSpeedMod","rangedDamageMod","spellAttackMod","spellAttackSpeedMod","spellDamageMod","hpMod","spellResistMod","damageResistMod","Armor","MoveSpeed","MeleeAttack","MeleeAttackSpeed","MeleeDamage","MeleeEffect","RangedEffect","RangedAttack","RangedAttackSpeed","RangedDamage","SpellAttack","SpellAttackSpeed","SpellDamage","HitPoints","SpellResistance","DamageResistance","Status","meleeEffect","getEffect","rangedEffect","meleeEffectAttackModifier","attackModifier","rangedEffectAttackModifier","getStatModifier","CombatHelper","determineAttackResultShared","seedAttack","seedDamage","attacker","target","effectId","attackBonus","damageBonus","targetPos","attackerPos","attackerDetail","targetDetail","resultService","effect","attackRoll","attackValue","isMiss","dodgeWith","isFumble","isCritical","getResultEntry","damageDieCount","damageDie","damageModifier","determineAttackResult","determineMeleeAttackResult","determineRangedAttackResult","determineSpellAttackResult","determineMaxRange","CombatPositionHelper","updatePosition","newPosition","oldPositions","newPositions","removePosition","getPositionByEntry","findIndex","clearAllQueues","CombatActionHelper","trimPathToMove","maxPath","buildAttack","movePath","isAttack","character","action","buildMove","IsoMarker","dot","dotActive","EncounterMap","heroData","setHeroData","foeData","setFoeData","damagePos","setDamagePos","setTokenGrid","selectedHero","setSelectedHero","attackTarget","setAttackTarget","setInitiatives","currentAction","setCurrentAction","setSeed","params","useParams","startNextActor","initiativeTracker","newNextToMove","gridDisplay","foeMatch","closestHeroPath","newCharacterAction","newInitiatives","numMoves","heroPos","getPosition","setCharacterPosition","executeCurrentAction","onHeroClick","encounters","handleAttack","targetMatch","attackSeed","damageSeed","results","newFoeDetails","removeCharacter","addDamagePos","showHoverPath","hoverGridPos","displayPath","onFoeHover","onFoeHoverEnd","onClickGridMarker","processMarkerAction","onFoeClick","endPos","endToken","newAction","markers","renderGridMarkers","useTokens","renderHeroes","damages","displayResults","dam","renderDamageMarkers","MockNpcService","getFoeData","clone","thugContent","ArrayHelper","array","count","clonedArray","Object","assign","self","EncounterMapLoader","setEncounter","setFoes","encounterData","getEncounterDetail","newHeroes","foeEntries","entries","npcs","foeIds","removeDuplicates","npcService","newFoes","getFoeDetail","foeInstances","foeDeepClone","buildInitial","loadEncounter","showGrid","MapPage","newGameState","loadGameState","MockWorldService","PartyInventory","onEquipItem","isItemEquipable","itemContainer","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","portraitItemWeapon","portraitItemShield","portraitNoItemImg","portraitItemImg","EquippedItems","headItem","WearableHead","bodyItem","WearableBody","armsItem","WearableArms","feetItem","WearableFeet","weaponItem","WeaponMelee1h","StyledTableCell","withStyles","theme","head","common","black","white","body","TableCell","StyledTableRow","hover","TableRow","StatisticsBlock","createData","calculation","attributeTotal","attributeCalculation","showModifier","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","row","scope","maxWidth","statisticsBlock","CalculatedStatisticsBlock","setEffects","meleeEffectEntry","rangedEffectEntry","loadEffects","md","characterGrid","gridAutoRows","breakpoints","down","gridTemplateColumns","up","sectionHeading","bannerContainer","portraitImg","overflowY","gridRowEnd","HeroProfile","setHero","world","setWorld","setEquippedItems","setCurrentId","newHero","getPartyStatistics","newWorld","getWorld","newItems","loadHero","removedItemId","equipItem","EncounterPage","MockQuestService","ThereAndBackQuest","SongOfTheSeaQuest","marginTop","list","activeItem","questCard","questContent","QuestsPage","setQuests","activeQuest","setActiveQuest","questService","partyQuests","getQuests","partyQuest","getQuestDetail","loadQuests","renderQuests","detail","MainLayout","SaveGameSelector","saves","enabledSlots","currentSlot","getDateString","date","toLocaleString","getDescription","isCurrentSlot","saveButtons","chooseText","GameNewMenu","currentSave","clearCache","GameLoadMenu","calculateEnabledSlots","GameDeleteMenu","App","onContextMenu","preventDefault","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98f96b3b.chunk.js","sourcesContent":["export default class ElectronHelper {\r\n    /*\r\n     * Are we running under electron?\r\n     */\r\n    public static isElectron(): boolean {\r\n        \r\n        // Renderer process\r\n        if (typeof window !== \"undefined\" && typeof window.process === \"object\" && window.process.type === \"renderer\") {\r\n            return true;\r\n        }\r\n\r\n        // Main process\r\n        if (typeof process !== \"undefined\" && typeof process.versions === \"object\" && !!process.versions.electron) {\r\n            return true;\r\n        }\r\n\r\n        // Detect the user agent when the `nodeIntegration` option is set to true\r\n        if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n//import { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: \"#ffd600\",\r\n            main: \"#ffd600\",\r\n            dark: \"#ffd600\",\r\n        },\r\n        // secondary: {\r\n        //     light: blue[100],\r\n        //     main: blue[100],\r\n        //     dark: blue[100],\r\n        // },\r\n        // action: {\r\n        //     hover: blue[800],\r\n        // },\r\n    },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\ntype LinkToProps = {\r\n    url: string;\r\n    children?: React.ReactNode;\r\n    top?: string,\r\n    left?: string;\r\n    width?: string;\r\n};\r\n\r\nconst LinkTo: React.FunctionComponent<LinkToProps> = (props: LinkToProps) => {\r\n    \r\n    const { url, children, top, left, width } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        container: {\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n        containerAbsolute: {\r\n            position: \"absolute\",\r\n            top: top ?? \"20px\",\r\n            left: left ?? \"20px\",\r\n            width: width ?? \"40px\",\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    const isPositioned = top || left || width;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => history.push(url);\r\n\r\n    return (\r\n        <div className={isPositioned ? classes.containerAbsolute : classes.container} onClick={navigateToUrl}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LinkTo;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Mousetrap from \"mousetrap\";\r\n\r\ntype KeyMapsProps = {\r\n    backUrl: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst KeyMaps: React.FunctionComponent<KeyMapsProps> = (props: KeyMapsProps) => {\r\n    const { backUrl, children } = props;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string): void => history.push(url);\r\n\r\n    Mousetrap.bind(\"1\", () => navigateToUrl(\"/profile/1\"));\r\n    Mousetrap.bind(\"2\", () => navigateToUrl(\"/profile/2\"));\r\n    Mousetrap.bind(\"3\", () => navigateToUrl(\"/profile/3\"));\r\n    Mousetrap.bind(\"4\", () => navigateToUrl(\"/profile/4\"));\r\n    Mousetrap.bind([\"q\", \"Q\"], () => navigateToUrl(\"/quests\"));\r\n    Mousetrap.bind(\"esc\", () => navigateToUrl(backUrl));\r\n\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default KeyMaps;\r\n","export default class MockSaveService {\r\n    private static _currentSave = -1;\r\n\r\n    public setCurrentSave = (slot: number) => {\r\n        MockSaveService._currentSave = slot;\r\n        localStorage.setItem(\"currentSlot\", slot.toString());\r\n    };\r\n\r\n    public getCurrentSave = (): number => {\r\n        if (MockSaveService._currentSave > 0) return MockSaveService._currentSave;\r\n        const slot = localStorage.getItem(\"currentSlot\");\r\n\r\n        const slotId = slot ? Number.parseInt(slot) : 0;\r\n\r\n        MockSaveService._currentSave = slotId;\r\n\r\n        return slotId;\r\n    };\r\n\r\n    public markSlotUpdated = () => {\r\n        localStorage.setItem(this.getCurrentSave() + \"_time\", new Date().toString());\r\n    };\r\n\r\n    public getSlotUpdateTimes = (): (Date | null)[] => {\r\n        const slot1 = localStorage.getItem(\"0_time\");\r\n        const slot2 = localStorage.getItem(\"1_time\");\r\n        const slot3 = localStorage.getItem(\"2_time\");\r\n\r\n        const items: (Date | null)[] = [slot1 ? new Date(slot1) : null, slot2 ? new Date(slot2) : null, slot3 ? new Date(slot3) : null];\r\n\r\n        return items;\r\n    }\r\n\r\n    public deleteSlot = (slot: number) => {\r\n\r\n        if (slot === this.getCurrentSave()) {\r\n            throw new Error(\"Can't delete current save\");\r\n        }\r\n\r\n        localStorage.removeItem(slot + \"_time\");\r\n        localStorage.removeItem(slot + \"_state\");\r\n    }\r\n\r\n    public saveObject<T>(key: string, value: T) {\r\n        localStorage.setItem(this.getCurrentSave() + \"_\" + key, JSON.stringify(value));\r\n        this.markSlotUpdated();\r\n    }\r\n\r\n    public getObject<T>(key: string): T | undefined {\r\n        const json = localStorage.getItem(this.getCurrentSave() + \"_\" + key);\r\n        return json ? JSON.parse(json) : undefined;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        top: \"1vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"lightsteelblue\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n            backgroundColor: \"ghostwhite\",\r\n        },\r\n    },\r\n    cardDisabled: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkgrey\",\r\n    },\r\n    cardActive: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkseagreen\",\r\n    },\r\n});\r\n\r\nexport type MenuCard = {\r\n    title: string;\r\n    description: string;\r\n    enabled: boolean;\r\n    active?: boolean;\r\n    icon?: JSX.Element;\r\n    onSelected: () => void;\r\n};\r\n\r\ntype MenuCardsProps = {\r\n    items: MenuCard[];\r\n};\r\n\r\nconst MenuCards: React.FunctionComponent<MenuCardsProps> = (props: MenuCardsProps) => {\r\n    const classes = useStyles();\r\n\r\n    const selectClass = (i: MenuCard) => (i.active ? classes.cardActive : i.enabled ? classes.card : classes.cardDisabled);\r\n\r\n    const { items } = props;\r\n    const renderCards = () =>\r\n        items.map((i) => (\r\n            <Card className={selectClass(i)} onClick={i.onSelected}>\r\n                <CardHeader title={<Typography variant=\"h2\">{i.title}</Typography>} avatar={i.icon} />\r\n                <CardContent>{i.description}</CardContent>\r\n            </Card>\r\n        ));\r\n\r\n    return (\r\n        <Grid container className={classes.container}>\r\n            <Grid item xs={3}></Grid>\r\n            <Grid item xs={6}>\r\n                {renderCards()}\r\n            </Grid>\r\n            <Grid item xs={3}></Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MenuCards;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport SystemUpdateAltIcon from \"@material-ui/icons/SystemUpdateAlt\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\n\r\nimport LinkTo from '../components/LinkTo';\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport ElectronHelper from '../helpers/ElectronHelper';\r\nimport MockSaveService from '../services/MockSaveService';\r\nimport MenuCards, { MenuCard } from '../components/MenuCards';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"9vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n});\r\n\r\nconst MainMenu: React.FunctionComponent = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n\r\n    let history = useHistory();\r\n    const navigateToNewGame = () => history.push(\"/game/new\");\r\n    const navigateToLoadGame = () => history.push(\"/game/load\");\r\n    const navigateToDeleteGame = () => history.push(\"/game/delete\");\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    const onElectronExit = () => {\r\n        const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n        ipcRenderer.send(\"close-app\");\r\n    }\r\n\r\n    if (!saveTimes)\r\n        return null;\r\n\r\n    const slotCount = saveTimes.filter(s => s !== null).length;\r\n    const allSlotsFull = slotCount >= 3;\r\n    const oneSlotFull = slotCount === 1;\r\n\r\n    const items: MenuCard[] = [\r\n        {\r\n            title: \"New Game\",\r\n            description: \"Start a new game\" + (allSlotsFull ? \" (All slots full)\" : \"\"),\r\n            enabled: !allSlotsFull,\r\n            icon: <AddCircleOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToNewGame,\r\n        },\r\n        {\r\n            title: \"Load Game\",\r\n            description: \"Load a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <SystemUpdateAltIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToLoadGame,\r\n        },\r\n        {\r\n            title: \"Delete Game\",\r\n            description: \"Delete a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <DeleteOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToDeleteGame,\r\n        },\r\n    ];\r\n\r\n    // Add a quit option if running under Electron\r\n    if (ElectronHelper.isElectron()) {\r\n        items.push({\r\n            title: \"Quit\",\r\n            description: \"Exit the game\",\r\n            enabled: true,\r\n            icon: <ExitToAppIcon className={classes.cardIcon} />,\r\n            onSelected: onElectronExit,\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <MenuCards items={items} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\nimport CeramicHelm from \"./items/ceramic_helm.json\";\r\nimport CeramicArmor from \"./items/ceramic_armor.json\";\r\n\r\nexport default class MockItemService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude;\r\n            case \"hag_teeth\":\r\n                return HagTeeth;\r\n            case \"ceramic_helm\":\r\n                return CeramicHelm;\r\n            case \"ceramic_armor\":\r\n                return CeramicArmor;\r\n            case \"wolf_spear\":\r\n            default:\r\n                return WolfSpear;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import Attribute from \"../models/character/Attribute\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\nimport AttributeSimple from \"../models/character/AttributesSimple\";\r\n\r\nexport default class AttributeHelper {\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static convertSimpleToComplex = (attributes: AttributeSimple): AttributeList => {\r\n        const attributesComplex = {\r\n            strength: { base: attributes.strength, bonus: 0 },\r\n            dexterity: { base: attributes.dexterity, bonus: 0 },\r\n            constitution: { base: attributes.constitution, bonus: 0 },\r\n            intelligence: { base: attributes.intelligence, bonus: 0 },\r\n            wisdom: { base: attributes.wisdom, bonus: 0 },\r\n            charisma: { base: attributes.charisma, bonus: 0 },\r\n            luck: { base: attributes.luck, bonus: 0 },\r\n        };\r\n        return attributesComplex;\r\n    };\r\n\r\n    public static getModifier(attribute: Attribute): number {\r\n        const total = attribute.base + attribute.bonus;\r\n        if (total <= 1) return -5;\r\n        if (total <= 3) return -4;\r\n        if (total <= 5) return -3;\r\n        if (total <= 7) return -2;\r\n        if (total <= 9) return -1;\r\n        if (total <= 11) return 0;\r\n        if (total <= 13) return 1;\r\n        if (total <= 15) return 2;\r\n        if (total <= 17) return 3;\r\n        if (total <= 19) return 4;\r\n        if (total <= 21) return 5;\r\n        if (total <= 23) return 6;\r\n        if (total <= 25) return 7;\r\n        if (total <= 27) return 8;\r\n        return 9;\r\n    }\r\n}\r\n","import Hero  from \"../models/character/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\nimport MockItemService from \"./MockItemService\";\r\nimport HeroData from \"../models/character/HeroData\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport MockSaveService from \"./MockSaveService\";\r\nimport CurrentStatus from \"../models/character/CurrentStats\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        const hero = this.getHeroData(id);\r\n        return MockHeroService.convertToDetailed(hero);\r\n    }\r\n\r\n    private static convertToDetailed(hero: HeroData): Hero {\r\n\r\n        const saveService = new MockSaveService();\r\n        const currentStatus = saveService.getObject<CurrentStatus>(\"heroStatus_\" + hero.id) ?? {\r\n            permanentTraits: hero.baseTraits,\r\n            temporaryTraits: [],\r\n            equippedItems: hero.equippedItems,\r\n            currentHitPoints: hero.baseHitPoints,\r\n            lostSpells: [],\r\n        };\r\n\r\n        const clone = {\r\n            id: hero.id,\r\n            name: hero.name,\r\n            description: hero.description,\r\n            background: hero.background,\r\n            imageUrl: hero.imageUrl,\r\n            tokenUrl: hero.tokenUrl,\r\n            tokenOffset: hero.tokenOffset,\r\n            abilities: hero.abilities,\r\n            alignment: hero.alignment,\r\n            level: hero.level,\r\n            attributes: AttributeHelper.convertSimpleToComplex(hero.attributes),\r\n            currentStatus: currentStatus,\r\n            // TODO: Fix this calculation\r\n            stats: {\r\n                status: 0,\r\n                armour: 10,\r\n                meleeAttackBonus: 0,\r\n                meleeAttackSpeed: 5,\r\n                meleeEffectId: \"Fists\",\r\n                meleeDamageBonus: 0,\r\n                rangedAttackBonus: 0,\r\n                rangedAttackSpeed: 5,\r\n                rangedEffectId: \"Bow\",\r\n                rangedDamageBonus: 0,\r\n                spellAttackBonus: 0,\r\n                spellAttackSpeed: 5,\r\n                spellDamageBonus: 0,\r\n                spells: hero.spells,\r\n                moveSpeed: 3,\r\n                maxHitPoints: hero.baseHitPoints,\r\n                spellResistance: 3,\r\n                damageResistance: 0,\r\n            },\r\n            spells: hero.spells,\r\n            behavior: [],\r\n        } as Hero;\r\n\r\n        return clone;\r\n    }\r\n\r\n    private getHeroData(id: string): HeroData {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroes: Hero[] = [\r\n        MockHeroService.convertToDetailed(Gyvwain),\r\n        MockHeroService.convertToDetailed(Balthazar),\r\n        MockHeroService.convertToDetailed(Gossamer),\r\n        MockHeroService.convertToDetailed(Gargamela),\r\n        MockHeroService.convertToDetailed(Justin),\r\n    ];\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return MockHeroService._heroes;\r\n    }\r\n\r\n    /*\r\n     * Equip an item in one of the equip slots\r\n     * If an item needs to be removed, return the item Id\r\n     */\r\n    equipItem(heroId: string, itemId: string): string | null {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const originalItem = itemService.getItemDetail(itemId);\r\n        if (!originalItem) throw new Error(\"Can't find original item\");\r\n\r\n        // Check if the hero already has an item of this type equipped\r\n        const items = itemService.getItems(heroMatch.currentStatus.equippedItems);\r\n        const itemWithSameType = items.find((item) => item.itemType === originalItem.itemType);\r\n\r\n        // TODO: We need special logic around equipable weapons\r\n\r\n        heroMatch.currentStatus.equippedItems.push(itemId);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n\r\n        if (!itemWithSameType) return null;\r\n\r\n        return itemWithSameType.id;\r\n    }\r\n\r\n    unequipItem(heroId: string, itemId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const item = itemService.getItemDetail(itemId);\r\n        if (!item) throw new Error(\"Can't find original item\");\r\n\r\n        // Remove the item\r\n        heroMatch.currentStatus.equippedItems = heroMatch.currentStatus.equippedItems.filter((i) => i !== item.id);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroStatus_\" + heroId, heroMatch.currentStatus);\r\n    }\r\n}\r\n","import Hero from \"../models/character/Hero\";\r\nimport PartyQuest from \"../models/PartyQuest\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockHeroService from \"./MockHeroService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockPartyService {\r\n    getPartyStatistics(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static defaultHeroIds = (): string[] => [\r\n        \"gyvwain_the_chivalrous\",\r\n        \"balthazar_the_unblemished\",\r\n        \"gossamer\",\r\n        \"gargomela_the_black\",\r\n    ];\r\n\r\n    private static _heroIds: string[] | undefined = undefined;\r\n\r\n    getParty(): Hero[] {\r\n        const heroService = new MockHeroService();\r\n        const party = this.getPartyIds().map((id) => heroService.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    getPartyIds(): string[] {\r\n        if (MockPartyService._heroIds) {\r\n            return MockPartyService._heroIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const heroIds = saveService.getObject<string[]>(\"heroIds\") ?? MockPartyService.defaultHeroIds();\r\n\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        return MockPartyService._heroIds;\r\n    }\r\n\r\n    setPartyIds(heroIds: string[]): void {\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroIds\", heroIds);\r\n    }\r\n\r\n    private static defaultInventoryIds = (): string[] => [\"wolf_spear\", \"ceramic_helm\", \"ceramic_armor\"];\r\n\r\n    private static defaultStashIds = (): string[] => [\"hag_teeth\", \"token_of_servitude\"];\r\n\r\n    private static defaultQuests = (): PartyQuest[] => [\r\n        {\r\n            id: \"song_of_the_sea\",\r\n            status: \"current\",\r\n        },\r\n        {\r\n            id: \"there_and_back\",\r\n            status: \"active\",\r\n        },\r\n    ];\r\n\r\n    private static _inventoryItemIds: string[] | undefined = undefined;\r\n    private static _stashItemIds: string[] | undefined = undefined;\r\n\r\n    getInventory(): string[] {\r\n        if (MockPartyService._inventoryItemIds) {\r\n            return MockPartyService._inventoryItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const inventoryIds = saveService.getObject<string[]>(\"inventoryItemIds\") ?? MockPartyService.defaultInventoryIds();\r\n\r\n        MockPartyService._inventoryItemIds = inventoryIds;\r\n\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"inventoryItemIds\", itemIds);\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory();\r\n        inventoryItems.push(id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory().filter((i) => i !== id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._stashItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n\r\n        const stashIds = saveService.getObject<string[]>(\"stashItemIds\") ?? MockPartyService.defaultStashIds();\r\n\r\n        MockPartyService._stashItemIds = stashIds;\r\n\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"stashItemIds\", itemIds);\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        const items = this.getStash();\r\n        items.push(id);\r\n        this.setStash(items);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        const stashItems = this.getStash().filter((i) => i !== id);\r\n        this.setStash(stashItems);\r\n    }\r\n\r\n    private static _quests: PartyQuest[] = [];\r\n\r\n    getQuests(): PartyQuest[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._quests;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const quests = saveService.getObject<PartyQuest[]>(\"quests\") ?? MockPartyService.defaultQuests();\r\n\r\n        MockPartyService._quests = quests;\r\n\r\n        return MockPartyService._quests;\r\n    }\r\n\r\n    updateQuest(quest: PartyQuest) {\r\n        const saveService = new MockSaveService();\r\n        const quests = saveService.getObject<PartyQuest[]>(\"quests\") ?? MockPartyService.defaultQuests();\r\n        const newQuests = quests.filter((q) => q.id !== quest.id);\r\n        newQuests.push(quest);\r\n        saveService.saveObject(\"quests\", newQuests);\r\n        MockPartyService._quests = newQuests;\r\n    }\r\n\r\n    public clearCache() {\r\n        MockPartyService._heroIds = undefined;\r\n        MockPartyService._inventoryItemIds = undefined;\r\n        MockPartyService._stashItemIds = undefined;\r\n    }\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"./LinkTo\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        \"-webkit-app-region\": \"drag\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"2vh\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n    headerImg: {\r\n        width: \"7vh\",\r\n        height: \"7vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"5vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\n\r\nconst Header: React.FunctionComponent<HeaderProps> = (props: HeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = React.useState<Hero[] | null>(null); // The map graph data\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockPartyService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <LinkTo key={hero.id} url={`${process.env.PUBLIC_URL}/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </LinkTo>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                </LinkTo>\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import GameState from \"../models/GameState\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static defaultState = (): GameState => {\r\n        return {\r\n            currentMapId: \"town\",\r\n            currentVertextId: \"hut-road\", // \"scupperden-road\"\r\n            currentMapCovers: [],\r\n            currentTurn: 0,\r\n            seed: Math.random() * Number.MAX_SAFE_INTEGER\r\n        }\r\n    };\r\n\r\n    private static _state: GameState | undefined = undefined;\r\n\r\n    public getState(): GameState {\r\n        if (MockGameStateService._state != null) \r\n            return MockGameStateService._state;\r\n            \r\n        const saveService = new MockSaveService();\r\n        \r\n        const stateJson = localStorage.getItem(saveService.getCurrentSave() + \"_state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService.defaultState();\r\n\r\n        MockGameStateService._state = state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        const saveService = new MockSaveService();\r\n\r\n        MockGameStateService._state = state;\r\n        console.log(\"setState : \" + JSON.stringify(state));\r\n        localStorage.setItem(saveService.getCurrentSave() + \"_state\", JSON.stringify(state));\r\n        saveService.markSlotUpdated();\r\n    }\r\n\r\n    public clearCache() {\r\n        MockGameStateService._state = undefined;\r\n    }\r\n}\r\n","import AttributeList from \"./AttributeList\";\r\nimport CalculatedStats from \"./CalculatedStats\";\r\nimport CharacterBehavior from \"./CharacterBehavior\";\r\nimport CurrentStatus from \"./CurrentStats\";\r\n\r\nexport enum Alignment {\r\n    Lawful = 0,\r\n    Neutral = 1,\r\n    Chaotic = 2,\r\n}\r\n\r\n/**\r\n * Special ongoing status effects on a character\r\n * \r\n * Limit this list for now and add one at a time slowly\r\n * TODO: Sleeping, Petrified, Paralysed (Are these just Stunned with other modifiers?)\r\n */\r\nexport enum StatusFlags {\r\n    None = 0x00,\r\n    Stunned = 0x01,\r\n    Poisoned = 0x04,\r\n    Bleeding = 0x08,\r\n    Terrified = 0x10,\r\n    Charmed = 0x20,\r\n}\r\n\r\nexport enum AbilityFlags {\r\n    None = 0x00,\r\n    Sorcery = 0x01,\r\n    Stealth = 0x02,\r\n    Perception = 0x04,\r\n    PatronBond = 0x08,\r\n    Survival = 0x10,\r\n    Devices = 0x20,\r\n    Acrobatics = 0x40,\r\n}\r\n\r\n// TODO: Split hero into core stats & calculated (view) ?\r\nexport default interface Hero {\r\n    // ID of the hero\r\n    id: string;\r\n\r\n    // Display name of the hero\r\n    name: string;\r\n\r\n    /** Short description of the hero */\r\n    description: string;\r\n\r\n    // Origins of the hero\r\n    background: string;\r\n\r\n    /** Portrait image location */\r\n    imageUrl: string;\r\n\r\n    /** Map token image location */\r\n    tokenUrl: string;\r\n\r\n    /** Offset to display the token at */\r\n    tokenOffset: number[];\r\n\r\n    // Hero attributes\r\n    attributes: AttributeList;\r\n\r\n    // Any special states\r\n    currentStatus: CurrentStatus;\r\n\r\n    stats: CalculatedStats;\r\n\r\n    abilities: AbilityFlags;\r\n\r\n    alignment: Alignment;\r\n\r\n    behavior: CharacterBehavior[];\r\n\r\n    level: number;\r\n\r\n    spells: string[];\r\n}\r\n\r\n","import Trait from \"./character/Trait\";\r\n\r\nexport enum ItemType {\r\n    Usable = 1,\r\n    Quest = 2,\r\n    WearableHead = 10,\r\n    WearableBody = 11,\r\n    WearableArms = 12,\r\n    WearableFeet = 13,\r\n    WeaponMelee1h = 20,\r\n    WeaponMelee2h = 21,\r\n    WeaponRanged1h = 22,\r\n    WeaponRanged2h = 23,\r\n    Shield = 24,\r\n}\r\n\r\nexport default interface Item {\r\n    /** ID of the item */\r\n    id: string;\r\n\r\n    /** Name of the item */\r\n    name: string;\r\n\r\n    /** Text description for the item */\r\n    description: string;\r\n\r\n    /** URL of the image to display for the item */\r\n    imageUrl: string;\r\n\r\n    /** The type of item */\r\n    itemType: ItemType;\r\n\r\n    /** For weapons, the attack effect table to use */\r\n    effectTable?: string;\r\n\r\n    /** Item traits */\r\n    traits: Trait[];\r\n}","\r\nexport enum TraitType {\r\n    Uncategorised = 0,\r\n    Mental = 1,\r\n    Mystical = 2,\r\n    Physical = 3,\r\n    Item = 4,\r\n    // MentalPhobia = 100,\r\n    // MysticalCurse = 200,\r\n};\r\n\r\nexport enum ModifierType {\r\n    None = 0,\r\n    Strength = 10,\r\n    Dexterity = 11,\r\n    Constitution = 12,\r\n    Intelligence = 13,\r\n    Wisdom = 14,\r\n    Charisma = 15,\r\n    Luck = 16,\r\n    HitPoints = 20,\r\n    Armor = 22,\r\n    SpellResistance = 23,\r\n    MoveSpeed = 24,\r\n    MeleeAttackSpeed = 25,\r\n    MeleeAttack = 26,\r\n    MeleeEffect = 27,\r\n    MeleeDamage = 28,\r\n    RangedAttackSpeed = 29,\r\n    RangedAttack = 30,\r\n    RangedEffect = 31,\r\n    RangedDamage = 32,\r\n    SpellAttackSpeed = 33,\r\n    SpellAttack = 34,\r\n    SpellDamage = 35,\r\n    DamageResistance = 33,\r\n    MeleeChanceForParalysis = 50,\r\n    MeleeChanceForPoisoned = 51,\r\n    MeleeChanceForBleeding = 52,\r\n    MeleeChanceForTerrified = 53,\r\n    MeleeChanceForCharmed = 54,\r\n    RangedChanceForParalysis = 60,\r\n    RangedChanceForPoisoned = 61,\r\n    RangedChanceForBleeding = 62,\r\n    RangedChanceForTerrified = 63,\r\n    RangedChanceForCharmed = 64,\r\n    AddAbility = 100,\r\n    RemoveAbility = 101, // Items can prevent abilities being used (e.g. Armor prevents Sorcery)\r\n    AbilitySorcery = 110,\r\n    AbilityStealth = 111,\r\n    AbilityPerception = 112,\r\n    AbilityPatronBond = 113,\r\n    AbilitySurvival = 114,\r\n    AbilityDevices = 115,\r\n    AbilityAcrobatics = 116,\r\n    /** Add a status effect to the character */\r\n    Status = 200,\r\n    /** Character is immune to this type of status effects */\r\n    StatusImmunity = 201,\r\n};\r\n\r\nexport interface TraitEffect {\r\n\r\n    modifierType: ModifierType;\r\n\r\n    modifierValue: string;\r\n}\r\n\r\nexport default interface Trait {\r\n    /** Unique Identifier for the trait */\r\n    id: string;\r\n\r\n    /** A name for the trait */\r\n    name: string;\r\n\r\n    /** A longer description for the trait */\r\n    description: string;\r\n\r\n    /** The type of trait */\r\n    type: TraitType;\r\n\r\n    /** What does it do */\r\n    behavior: TraitEffect[];\r\n}\r\n","import Leaflet from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            coverUrls: json.coverUrls,\r\n            useDayNight: json.useDayNight,\r\n            pathColor: json.pathColor,\r\n            vertices: json.vertices.map((v: any) => {\r\n                return {\r\n                    id: v.id,\r\n                    position: Leaflet.latLng(v.position[0], v.position[1]),\r\n                    clickRadius: v.clickRadius,\r\n                    encounterId: v.encounterId,\r\n                    marker: v.marker,\r\n                    exitId: v.exitId,\r\n                    coverIds: v.coverIds,\r\n                } as MapVertex;\r\n            }),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\nimport CustomMarker from \"./CustomMarker\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): Node<NodeData> | null => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n    marker?: CustomMarker;\r\n    /** The cover layer to obscure this vertex */\r\n    coverIds?: number[];\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n                marker: item.marker,\r\n                coverIds: item.coverIds,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","import MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockVariableService {\r\n    getVariable(id: string): string | undefined {\r\n        const saveService = new MockSaveService();\r\n        return saveService.getObject<string>(id);\r\n    }\r\n\r\n    setVariable(id: string, value: string) {\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject<string>(id, value);\r\n    }\r\n}\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { IntValue, StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\n// Temple dark flame\r\nimport TheInterceptContent from \"./encounters/temple_dark_flame/TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/temple_dark_flame/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/temple_dark_flame/chasm.ink.json\";\r\nimport storeRoomContent from \"./encounters/temple_dark_flame/store-room.ink.json\";\r\nimport dartTrapContent from \"./encounters/temple_dark_flame/dart-trap.ink.json\";\r\n\r\n// Squall's End\r\nimport homeContent from \"./encounters/squalls_end/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/squalls_end/nine-bells.ink.json\";\r\nimport brawlContent from \"./encounters/squalls_end/brawl.ink.json\";\r\nimport squallsEndEntryContent from \"./encounters/squalls_end/squalls-end-entry.ink.json\";\r\nimport MockVariableService from \"./MockVariableService\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        let json: any = undefined;\r\n\r\n        switch (id) {\r\n            case \"hoard\":\r\n            case \"wet-room\":\r\n            case \"intercept\":\r\n                json = TheInterceptContent;\r\n                break;\r\n            case \"common-room\":\r\n                json = commonRoomContent;\r\n                break;\r\n            case \"chasm\":\r\n                json = chasmContent;\r\n                break;\r\n            case \"warrens\":\r\n                json = TheInterceptContent;\r\n                break;\r\n            case \"home\":\r\n                json = homeContent;\r\n                break;\r\n            case \"store-room\":\r\n                json = storeRoomContent;\r\n                break;\r\n            case \"nine-bells\":\r\n                json = nineBellsContent;\r\n                break;\r\n            case \"brawl\":\r\n                json = brawlContent;\r\n                break;\r\n            case \"slumberton-entry\":\r\n                json = squallsEndEntryContent;\r\n                break;\r\n            case \"dart-trap\":\r\n                json = dartTrapContent;\r\n                break;\r\n            default:\r\n                json = undefined;\r\n        }\r\n\r\n        this.currentStory = json ? new Story(json) : new Story(MockStoryEncounterService.createEmptyStory());\r\n        this.currentId = id;\r\n\r\n        // Extract the Title from the JSON file. It should be in the form \"# title: My Encounter\"\r\n        const tags = this.currentStory.globalTags;\r\n        const titleTag = tags ? tags.find((t) => t.startsWith(\"title:\")) : undefined;\r\n\r\n        this.currentTitle = titleTag ? titleTag.substring(6).trimStart() : \"Encounter\";\r\n\r\n        // Check if there is a skip variable to skip this encounter\r\n        const variableService = new MockVariableService();\r\n        const skipVariableTag = tags ? tags.find((t) => t.startsWith(\"skip-variable:\")) : undefined;\r\n        const skipVariable = skipVariableTag ? skipVariableTag.substring(14).trimStart() : undefined;\r\n        if (skipVariable) {\r\n            const result = variableService.getVariable(skipVariable);\r\n            if (result === \"true\") {\r\n                 return MockStoryEncounterService.createEmptyStory();\r\n            }\r\n        }\r\n\r\n        // Imported local variarbles for use in the encounter\r\n        const imports = tags ? tags.filter((t) => t.startsWith(\"import:\")).map((t) => t.substring(6).trimStart()) : [];\r\n        const importedVariables = imports.join(\",\").split(\",\");\r\n\r\n        const variableValues = importedVariables.map((v) => [v, variableService.getVariable(v)]).filter((v) => v[1] !== undefined);\r\n\r\n        // Assign quest & global variables\r\n        if (this.currentStory != null) {\r\n            variableValues.forEach((v) => (v[0] && v[1] ? this.currentStory?.variablesState.SetGlobal(v[0], new StringValue(v[1])) : null));\r\n        }\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            const coverVisible = this.currentStory.variablesState.GetVariableWithName(\"coverVisible\") as IntValue;\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value ?? undefined,\r\n                    detailedEncounter: detailedEncounter?.value ?? undefined,\r\n                    coverVisible: coverVisible?.value ?? undefined,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map((c: Choice) => {\r\n            return {\r\n                index: c.index,\r\n                text: c.text,\r\n            } as InkStoryChoice;\r\n        });\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    party: {\r\n        padding: \"0 30px\",\r\n        //position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroListProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\n/*\r\n * The selection of heroes one the menu bar\r\n */\r\nconst HeroList: React.FunctionComponent<HeroListProps> = (props: HeroListProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    let [heroes, setHeroes] = React.useState<Hero[] | null>(null); // The map graph data\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3} style={{ textAlign: \"center\" }}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.party}>\r\n            <Grid container>{renderParty()}</Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HeroList;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport HeroList from \"./HeroList\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    }\r\n});\r\n\r\ntype HeroSelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\n/*\r\n* The selection of heroes one the menu bar\r\n*/\r\nconst HeroSelector: React.FunctionComponent<HeroSelectorProps> = (props: HeroSelectorProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <HeroList chooseAll={props.chooseAll} multiSelect={props.multiSelect} onSelectionChanged={props.onSelectionChanged} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nconst PartySelection: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [heroIds, setHeroIds] = React.useState<string[]>([]);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = () => heroIds.length === 4; \r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockPartyService();\r\n        service.setPartyIds(heroIds);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} multiSelect={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={changeParty} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default PartySelection;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\n\r\nconst HeroDismiss: React.FunctionComponent = (): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [heroId, setHeroId] = React.useState(\"\");\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        if (ids.length > 0)\r\n            setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = () => heroId.length > 0; \r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockHeroService();\r\n        \r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={dismissHero} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Dismiss\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default HeroDismiss;\r\n","import { AbilityFlags, Alignment } from \"../models/character/Hero\";\r\nimport { ItemType } from \"../models/Item\";\r\nimport { ModifierType } from \"../models/character/Trait\";\r\nimport Resources from \"../resources.en.json\";\r\n\r\nexport default class StringConverters {\r\n    private static resourceMap: any = null;\r\n\r\n    static getResources(): any {\r\n        if (!StringConverters.resourceMap) {\r\n            // TODO: This is silly\r\n            StringConverters.resourceMap = JSON.parse(JSON.stringify(Resources));\r\n        }\r\n\r\n        return StringConverters.resourceMap;\r\n    }\r\n\r\n    static alignmentToString = (alignment: Alignment): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"Alignment_\" + Alignment[alignment];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static modifierToString = (modifierType: ModifierType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ModifierType_\" + ModifierType[modifierType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static itemTypeText = (itemType: ItemType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ItemType_\" + ItemType[itemType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static abilitiesToString = (abilities: AbilityFlags): string => {\r\n        if (abilities === AbilityFlags.None) return \"None\";\r\n\r\n        const output: string[] = [];\r\n\r\n        if (abilities & AbilityFlags.Acrobatics) output.push(\"Acrobatics\");\r\n        if (abilities & AbilityFlags.Devices) output.push(\"Disable/Modify Devices\");\r\n        if (abilities & AbilityFlags.PatronBond) output.push(\"Patron Bond\");\r\n        if (abilities & AbilityFlags.Perception) output.push(\"Perception\");\r\n        if (abilities & AbilityFlags.Sorcery) output.push(\"Sorcery\");\r\n        if (abilities & AbilityFlags.Stealth) output.push(\"Stealth\");\r\n        if (abilities & AbilityFlags.Survival) output.push(\"Survival\");\r\n\r\n        return output.join(\", \");\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport Item from \"../models/Item\";\r\nimport Trait, { TraitEffect } from \"../models/character/Trait\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        padding: \"5px\",\r\n    },\r\n    description: {\r\n        padding: \"10px\",\r\n        margin: \"10px 0\",\r\n        backgroundColor: \"#999\",\r\n    },\r\n    itemType: {\r\n        padding: \"500px 10px 0 10px\",\r\n        margin: \"100px 0 0 0 \",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n    traits: {\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n});\r\n\r\ntype ItemTooltipContentProps = {\r\n    item: Item | undefined;\r\n};\r\n\r\nconst ItemTooltipContent: React.FunctionComponent<ItemTooltipContentProps> = (props: ItemTooltipContentProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { item } = props;\r\n\r\n    const renderTraits = (traits: Trait[]): JSX.Element => {\r\n        let traitJsx: JSX.Element[] = [];\r\n        for (let i = 0; i < traits.length; i++) {\r\n            const newTraits = renderBehaviors(traits[i].behavior);\r\n            traitJsx = traitJsx.concat(newTraits);\r\n        }\r\n        return <div>{traitJsx}</div>;\r\n    };\r\n\r\n    const renderBehaviors = (effects: TraitEffect[]): JSX.Element[] => {\r\n        return effects.map((e) => (\r\n            <p>\r\n                {e.modifierValue} {StringConverters.modifierToString(e.modifierType)}\r\n            </p>\r\n        ));\r\n    };\r\n\r\n    if (!item) return <p>\"None\"</p>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography className={classes.title} color=\"inherit\">\r\n                {item.name}\r\n            </Typography>\r\n            <p className={classes.description}>{item.description}</p>\r\n            <Typography className={classes.itemType}>{StringConverters.itemTypeText(item.itemType)}</Typography>\r\n            <Typography className={classes.traits} align=\"right\">\r\n                {renderTraits(item.traits)}\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemTooltipContent;\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\nimport Item from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: React.FunctionComponent<InventorySelectorProps> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, items, multiSelect } = props;\r\n\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        const selectedIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedIds.push(items[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) {\r\n            onSelectionChanged(selectedIds);\r\n        }\r\n    };\r\n\r\n    const renderInventory = () => {\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={item.id}>\r\n                    <Tooltip title={<ItemTooltipContent item={item} />} key={index} arrow>\r\n                        <img src={item.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt={item.name} />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map((i) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={index.toString()}>\r\n                    <Tooltip title={\"Nothing\"} key={index}>\r\n                        <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InventorySelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Item from \"../models/Item\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    stashImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\nconst Stash: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [stashSelectedIds, setStashSelectedIds] = React.useState<string[]>([]);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState<string[]>([]);\r\n\r\n    let [stashItems, setStashItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n\r\n    const maxItems = 8;\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const stashSelectionChanged = (ids: string[]) => setStashSelectedIds(ids);\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);;\r\n\r\n    const isStashSelected = (): boolean => stashSelectedIds.length > 0; \r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n\r\n    const willStashBeTooBig = (): boolean => (stashItems ? stashItems.length + inventorySelectedIds.length > maxItems : false);\r\n    const willInventoryBeTooBig = (): boolean => (inventoryItems ? inventoryItems.length + stashSelectedIds.length > maxItems : false);\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isStashSelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < stashSelectedIds.length; i++) {\r\n            service.removeStashItem(stashSelectedIds[i]);\r\n            service.addInventoryItem(stashSelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setStashSelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n\r\n        // TODO: How to trigger a reload?\r\n    }\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < inventorySelectedIds.length; i++) {\r\n            service.removeInventoryItem(inventorySelectedIds[i]);\r\n            service.addStashItem(inventorySelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setInventorySelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    if (!stashItems || !inventoryItems)\r\n        return null;\r\n\r\n    const stashToolTip = () => {\r\n        if (willInventoryBeTooBig())\r\n            return \"Too many items in inventory\";\r\n\r\n        return isStashSelected() ? \"Take Item from the Stash\" : \"Please select a stash item\";\r\n    }\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in stash\";\r\n\r\n        return isInventorySelected() ? \"Put Item in the Stash\" : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src=\"./images/stash.png\" alt=\"stash\" className={classes.stashImg} />\r\n                <InventorySelector items={stashItems} multiSelect={true} onSelectionChanged={stashSelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={stashToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isStashSelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willStashBeTooBig() || !isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector items={inventoryItems} multiSelect={true} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Stash;\r\n","import Trait from \"../models/character/Trait\";\r\n\r\nimport CompulsionKleptomaniac from \"./traits/compulsion_kleptomaniac.json\";\r\nimport PhobiaUndead from \"./traits/phobia_undead.json\";\r\nimport ResurrectionBotched from \"./traits/resurrection_botched.json\";\r\nimport ToughSkin from \"./traits/physical_tough_skin.json\";\r\n\r\nexport default class MockTraitService {\r\n    getTraitDetail(id: string): Trait {\r\n        switch (id) {\r\n            case \"phobia_undead\":\r\n                return PhobiaUndead;\r\n            case \"physical_tough_skin\":\r\n                return ToughSkin;\r\n            case \"resurrection_botched\":\r\n                return ResurrectionBotched;\r\n            case \"compulsion_kleptomaniac\":\r\n            default:\r\n                return CompulsionKleptomaniac;\r\n        }\r\n    }\r\n\r\n    getTraits = (ids: string[]): Trait[] => ids.map((id) => this.getTraitDetail(id));\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, ListItemText, Grid } from \"@material-ui/core\";\r\n\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\n\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\n\r\nconst useStyles = makeStyles({\r\n    selected: {\r\n        margin: \"5px\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"4px\",\r\n        border: \"solid steelblue 4px\",\r\n    },\r\n    notSelected: {\r\n        margin: \"5px\",\r\n        borderRadius: \"4px\",\r\n        border: \"solid white 4px\",\r\n    },\r\n});\r\n\r\ntype TraitListProps = {\r\n    traits: HeroTrait[];\r\n    onSelect?: (trait: HeroTrait) => void;\r\n};\r\n\r\nconst TraitList: React.FunctionComponent<TraitListProps> = (props: TraitListProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { traits } = props;\r\n    const [selectedTrait, setSelectedTrait] = React.useState<HeroTrait | undefined>(undefined);\r\n\r\n    const renderTraitIcon = (t: HeroTrait) => {\r\n        switch (t.type) {\r\n            case 1: // Mental\r\n                return <FaceIcon />;\r\n            case 2: // Mystical\r\n                return <FlashOnIcon />;\r\n            case 3: // Physical\r\n                return <AccessibilityNewIcon />;\r\n            case 4: // Item\r\n                return <AllInboxIcon />;\r\n            default:\r\n                return <AllInboxIcon />;\r\n        }\r\n    };\r\n\r\n    const onSelect = (trait: HeroTrait) => {\r\n        if (props.onSelect) {\r\n            console.log(\"select : \" + trait.id);\r\n            if (selectedTrait === undefined || trait.id !== selectedTrait.id) {\r\n                setSelectedTrait(trait);\r\n                props.onSelect(trait);\r\n            }\r\n        }\r\n    };\r\n\r\n    const renderTrait = (t: HeroTrait) => (\r\n        <ListItem\r\n            key={t.id}\r\n            className={selectedTrait !== undefined && t.id === selectedTrait.id ? classes.selected : classes.notSelected}\r\n            onClick={() => onSelect(t)}\r\n        >\r\n            <ListItemAvatar>\r\n                <Avatar>{renderTraitIcon(t)}</Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={t.name} secondary={t.from ?? t.description} />\r\n        </ListItem>\r\n    );\r\n\r\n    return <List dense={true}>{traits.map((t) => renderTrait(t))}</List>;\r\n};\r\n\r\nexport default TraitList;\r\n","import React from \"react\";\r\nimport { Grid, makeStyles, Tooltip, Button } from \"@material-ui/core\";\r\n\r\nimport MockTraitService from \"../services/MockTraitService\";\r\nimport Trait from \"../models/character/Trait\";\r\nimport TraitList from \"./TraitList\";\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\nimport HeroList from \"./HeroList\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        //position: \"relative\",\r\n    },\r\n    party: {\r\n        padding: \"0 30px\",\r\n        width: \"90%\",\r\n    },\r\n    traits: {\r\n        padding: \"0 30px\",\r\n        width: \"90%\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    traitsBlock: {\r\n        padding: \"10px 0\",\r\n    },\r\n    button: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    buttonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n\r\ntype TraitSelectorProps = {\r\n    /** The trait selection list */\r\n    traitIds: string[];\r\n\r\n    /** Use a luck roll to choose a trait */\r\n    isRandomTrait: boolean;\r\n};\r\n\r\n/*\r\n * Select a trait, or just give a trait to a hero\r\n */\r\nconst TraitSelector: React.FunctionComponent<TraitSelectorProps> = (props: TraitSelectorProps) => {\r\n    const classes = useStyles();\r\n    const { traitIds } = props;\r\n\r\n    const [traits, setTraits] = React.useState<Trait[] | undefined>(undefined);\r\n    const [heroId, setHeroId] = React.useState<string | undefined>(undefined);\r\n    const [selectedTrait, setSelectedTrait] = React.useState<string | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of traits\r\n        const loadTraits = () => {\r\n            const service = new MockTraitService();\r\n            const newTraits = service.getTraits(traitIds);\r\n            if (!newTraits) {\r\n                console.error(`No trait data`);\r\n                return;\r\n            }\r\n\r\n            setTraits(newTraits);\r\n        };\r\n\r\n        if (traits == undefined) {\r\n            loadTraits();\r\n        }\r\n    });\r\n\r\n    const onHeroSelect = (ids: string[]) => {\r\n        if (ids.length > 0) {\r\n            setHeroId(ids[0]);\r\n        }\r\n    };\r\n\r\n    const onSelect = (trait: Trait) => {\r\n        // TODO: Assign the trait to the selected hero?\r\n        setSelectedTrait(trait.id);\r\n    };\r\n\r\n    const renderTraits = () => {\r\n        if (!traits) return null;\r\n\r\n        return (\r\n            <Grid container className={classes.traitsBlock}>\r\n                <Grid item xs={1}></Grid>\r\n                <Grid item xs={10}>\r\n                    <TraitList onSelect={onSelect} traits={traits.map((t) => t as HeroTrait)} />\r\n                </Grid>\r\n                <Grid item xs={1}></Grid>\r\n            </Grid>\r\n        );\r\n    };\r\n\r\n    const isValid = () => selectedTrait !== undefined && heroId !== undefined;\r\n\r\n    const onApply = () => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <HeroList onSelectionChanged={onHeroSelect} />\r\n            </div>\r\n            <div className={classes.traits}>\r\n                <Grid container>{renderTraits()}</Grid>\r\n            </div>\r\n            <Tooltip title={isValid() ? \"Apply a trait to the hero\" : \"Select a trait and a hero\"}>\r\n                <div className={classes.buttonDiv}>\r\n                    <Button className={classes.button} onClick={onApply} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TraitSelector;\r\n","import React from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\nimport PartySelection from \"./PartySelection\";\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\nimport StoryEncounterFinish from \"../models/InkStoryFinish\";\r\nimport TraitSelector from \"./TraitSelector\";\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        overflow: \"visible\",\r\n    },\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n        userSelect: \"none\",\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n    portrait: {\r\n        borderRadius: \"50%\",\r\n        width: \"200px\",\r\n        position: \"absolute\",\r\n        top: \"-60px\",\r\n        left: \"-60px\",\r\n        border: \"8px solid white\",\r\n    },\r\n    placeholder: {\r\n        float: \"left\",\r\n        width: \"130px\",\r\n        height: \"140px\",\r\n    },\r\n    paragraph: {\r\n        display: \"inline-block\",\r\n        width: \"100%\",\r\n    },\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveToNode?: string, startEncounterId?: string, coverVisible?: number) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nconst EncounterDialog: React.FunctionComponent<EncounterDialogProps> = (props: EncounterDialogProps) => {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = React.useState(new MockEncounterService());\r\n    let [paragraphs, setParagraphs] = React.useState<string[]>([]);\r\n    let [title, setTitle] = React.useState(\"\");\r\n    let [choices, setChoices] = React.useState<InkStoryChoice[]>([]);\r\n    let [storyStarted, setStoryStarted] = React.useState(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo?: string, encounterDetailId?: string, coverVisible?: number) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo, encounterDetailId, coverVisible);\r\n    };\r\n\r\n    const handleChoice = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            const encounterFinish = encounterService.continue();\r\n            processFinish(encounterFinish.finishData);\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            processFinish(encounter.finishData);\r\n        }\r\n    };\r\n\r\n    const processFinish = (finish?: StoryEncounterFinish): void => {\r\n        // Finished -> Check variables\r\n        if (!finish || (finish.moveTo === undefined && finish.detailedEncounter === undefined && finish.coverVisible === undefined)) {\r\n            handleClose();\r\n        } else {\r\n            handleCloseWithValue(finish.moveTo, finish.detailedEncounter, finish.coverVisible);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraphs(encounter.paragraphText.split(\"...\"));\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n        if (encChoices.length === 0) {\r\n            return <Button onClick={handleContinue}>Continue</Button>;\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    const renderParagraph = (text: string) => {\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n        }\r\n        const selectTraitStart = text.indexOf(\"[SelectTrait(\");\r\n        const isSelectTrait = selectTraitStart >= 0;\r\n        let traits: string[] | undefined = undefined;\r\n        if (isSelectTrait) {\r\n            const selectTraitEnd = text.indexOf(\"]\", selectTraitStart);\r\n            const traitsStart = selectTraitStart + 13; \r\n            const traitsRaw = paragraphText.substr(traitsStart, selectTraitEnd - traitsStart - 1);\r\n            traits = traitsRaw.split(\",\").map(t => t.replaceAll('\"', ''));\r\n            paragraphText = paragraphText.substr(0, selectTraitStart).concat(paragraphText.substr(selectTraitEnd + 1));\r\n        }\r\n\r\n        return (\r\n            <div className={classes.paragraph}>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelection /> : null}\r\n                {isHeroSelect ? <HeroSelector /> : null}\r\n                {isHeroDismiss ? <HeroDismiss /> : null}\r\n                {traits ? <TraitSelector traitIds={traits} isRandomTrait={false} /> : null}\r\n                {isStash ? <Stash /> : null}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                classes={{\r\n                    paper: classes.paper,\r\n                }}\r\n                className={classes.dialog}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-dialog-title\"\r\n                open={open}\r\n            >\r\n                <DialogContent className={classes.content}>\r\n                    <img src=\"./images/knight.jpg\" className={classes.portrait} alt=\"portrait\" />\r\n                    <div className={classes.placeholder}></div>\r\n                    {/* <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" /> */}\r\n                    <h1>{title}</h1>\r\n                    {paragraphs.map((p) => renderParagraph(p))}\r\n                </DialogContent>\r\n                <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterDialog;\r\n","import React from \"react\";\r\n\r\nimport Leaflet from \"leaflet\";\r\nimport { Marker, Tooltip } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\n\r\nimport { Node } from \"ngraph.graph\";\r\nimport { NodeData } from \"../../models/MapGraph\";\r\n\r\nconst useStyles = makeStyles({\r\n    tooltip: {\r\n        padding: \"3px 8px 3px 3px\",\r\n        height: \"32px\",\r\n        display: \"inline-flex\",\r\n        fontSize: \"0.8125rem\",\r\n        // //transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        alignItems: \"center\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"',\r\n        whiteSpace: \"nowrap\",\r\n        borderRadius: \"10px\",\r\n        verticalAlign: \"middle\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        color: \"#616161\",\r\n        marginLeft: \"3px\",\r\n        marginRight: \"5px\",\r\n        width: \"1em\",\r\n        height: \"1em\",\r\n        display: \"inline-block\",\r\n        fontSize: \"1.5rem\",\r\n        //transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        flexShrink: 0,\r\n        userSelect: \"none\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype VertexMarkerProps = {\r\n    vertex: Node<NodeData>;\r\n    onHover: (id: string) => void;\r\n    onHoverEnd: (id: string) => void;\r\n    onClick: (id: string) => void;\r\n};\r\n\r\nconst VertexMarker: React.FunctionComponent<VertexMarkerProps> = (props: VertexMarkerProps) => {\r\n\r\n    const { vertex, onHover, onHoverEnd, onClick } = props;\r\n    const vertextId = vertex.id.toString();\r\n\r\n    const classes = useStyles();\r\n\r\n    const iconConversionX = 1.4;\r\n    const iconConversionY = 1.5;\r\n\r\n    const renderTooltipIcon = () => {\r\n        if (vertex.data.exitId) \r\n            return <ExitToAppIcon className={classes.icon} />;\r\n\r\n        // Render icons for special encounters\r\n        switch(vertex.data.encounterId) {\r\n            case \"home\":\r\n                return <HomeIcon className={classes.icon} />;\r\n            default:\r\n                return <GpsFixedIcon className={classes.icon} />;\r\n        }\r\n    }\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: vertex.data.marker ? `/images/markers/${vertex.data.marker.image}.png` : \"images/blank.svg\",\r\n        iconSize: vertex.data.marker\r\n            ? [vertex.data.marker.dimensions[0] * iconConversionX, vertex.data.marker.dimensions[1] * iconConversionY]\r\n            : [50, 50],\r\n        iconAnchor: vertex.data.marker\r\n            ? [vertex.data.marker.anchor[0] * iconConversionX, vertex.data.marker.anchor[1] * iconConversionY]\r\n            : [25, 25],\r\n        className: vertex.data.marker ? \"vertex-icon\" : vertex.data.exitId ? \"exit-icon\" : \"bullseye-icon\",\r\n    });\r\n\r\n    // Note: Leaflet tooltips breaks the onclick detection on the map object\r\n    return (\r\n        <Marker\r\n            key={vertextId}\r\n            position={vertex.data.position}\r\n            icon={icon}\r\n            onclick={() => onClick(vertextId)}\r\n            onmouseover={() => onHover(vertextId)}\r\n            onmouseout={() => onHoverEnd(vertextId)}\r\n        >\r\n            <Tooltip className={classes.tooltip}>\r\n                {renderTooltipIcon()}\r\n                <span>{vertex.id.toString()}</span>\r\n            </Tooltip>\r\n        </Marker>\r\n    );\r\n};\r\n\r\nexport default VertexMarker;\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n  length = (): number => this._store.length;\r\n}\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        // ES: Ignore slides where destination is same as the source\r\n        // ES: I'm not sure why this happens when any state is set on the encounter page\r\n        // const slideTo = latLng(this._slideToLatLng)\r\n        // if (slideTo.lat === this.getLatLng().lat && slideTo.lng === this.getLatLng().lng)\r\n        //     return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import { createPortal } from \"react-dom\";\r\nimport Drift_Marker from \"./Drift_Marker\";\r\nimport { DivIcon, LatLngExpression } from \"leaflet\";\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from \"react-leaflet\";\r\n\r\ntype LeafletElement = Drift_Marker;\r\n\r\ntype DriftMarker2Props = {\r\n    draggable?: boolean;\r\n    opacity?: number;\r\n    position: LatLngExpression;\r\n    duration: number;\r\n    keepAtCenter?: boolean;\r\n    zIndexOffset?: number;\r\n    onClick?: (name: DriftMarker2) => void;\r\n    onMoveEnd?: (name: DriftMarker2) => void;\r\n    onMouseOver?: (name: DriftMarker2) => void;\r\n    onMouseOut?: (name: DriftMarker2) => void;\r\n} & MapLayerProps;\r\n\r\n/*\r\n * A marker combining the drift marker and allowing react components as children\r\n * Modified from CustomMarker & here : https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n */\r\nclass DriftMarker2 extends MapLayer<DriftMarker2Props, LeafletElement> {\r\n    // private onMoveEndCallback?: (name: DriftMarker2) => void;\r\n    // private onClickCallback?: (name: DriftMarker2) => void;\r\n    // private onHover?: (name: DriftMarker2) => void;\r\n    // private onHoverEnd?: (name: DriftMarker2) => void;\r\n\r\n    leafletElement: any;\r\n\r\n    createLeafletElement(props: DriftMarker2Props): any {\r\n        const { position, ...rest } = props;\r\n\r\n        // // when not providing className, the element's background is a white square\r\n        // // when not providing iconSize, the element will be 12x12 pixels\r\n        const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n        const el = new Drift_Marker(position, { icon: icon, ...rest }) as any;\r\n\r\n        // this.onMoveEndCallback = props.onMoveEnd;\r\n        // this.onClickCallback = props.onClick;\r\n        // el.onHover = props.onHover;\r\n        // el.onHoverEnd = props.onHoverEnd;\r\n        // el.on(\"moveend\", this.moveEnd);\r\n        // el.on(\"click\", this.clicked);\r\n        // el.on(\"moveend\", () => {\r\n        //     if (props.onMoveEnd) this.moveEnd(props.onMoveEnd);\r\n        // });\r\n        // el.on(\"click\", () => {\r\n        //     if (props.onClick) this.moveEnd(props.onClick);\r\n        // });\r\n        // el.on(\"mouseover\", () => {\r\n        //     debugger;\r\n        //     if (this.onHover) {\r\n        //         this.onHover(this);\r\n        //     }\r\n        // });\r\n        // el.on(\"mouseout\", () => {\r\n        //     if (this.onHoverEnd) {\r\n        //         this.onHoverEnd(this);\r\n        //     }\r\n        // });\r\n        this.contextValue = { ...props.leaflet, popupContainer: el };\r\n        return el;\r\n    }\r\n\r\n    // moveEnd(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onMoveEndCallback) {\r\n    //     //     this.onMoveEndCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    // clicked(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onClickCallback) {\r\n    //     //     this.onClickCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (super.componentWillMount) {\r\n            super.componentWillMount();\r\n        }\r\n        this.leafletElement = this.createLeafletElement(this.props);\r\n        this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n    }\r\n\r\n    // Turning this on stops the moveend update\r\n    // componentDidUpdate(fromProps: any) {\r\n    //     this.updateLeafletElement(fromProps, this.props);\r\n    // }\r\n\r\n    updateLeafletElement(fromProps: DriftMarker2Props, toProps: DriftMarker2Props) {\r\n        if (toProps.position !== fromProps.position && typeof toProps.duration == \"number\") {\r\n            this.leafletElement.slideTo(toProps.position, {\r\n                duration: toProps.duration,\r\n                keepAtCenter: toProps.keepAtCenter,\r\n            });\r\n        }\r\n        if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n            this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\r\n        }\r\n        if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n            this.leafletElement.setOpacity(toProps.opacity);\r\n        }\r\n        if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n            if (toProps.draggable === true) {\r\n                this.leafletElement.dragging.enable();\r\n            } else {\r\n                this.leafletElement.dragging.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const container = this.leafletElement._icon;\r\n\r\n        if (!container) {\r\n            return null;\r\n        }\r\n\r\n        const portal = createPortal(children, container);\r\n\r\n        return children == null || this.contextValue == null ? null : <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>;\r\n    }\r\n}\r\n\r\nexport default withLeaflet<DriftMarker2Props>(DriftMarker2);\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { LatLng } from \"leaflet\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\n\r\ntype PartyMarkerProps = {\r\n    name: string;\r\n    id: string;\r\n    imageUrl: string;\r\n    position: LatLng;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (id: string) => void;\r\n    onMoveEnd: (id: string) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst PartyMarker: React.FunctionComponent<PartyMarkerProps> = (props: PartyMarkerProps) => {\r\n    const { id, imageUrl, isActive, position, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={position}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(id)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(id);\r\n            }}\r\n        >\r\n            <div>\r\n                <img src={imageUrl} className={isActive ? classes.iconActive : classes.icon} alt=\"party\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default PartyMarker;\r\n","import GameState from \"../models/GameState\";\r\n\r\nexport default class TimeTracker {\r\n    private static _dayLength: number = 24;\r\n\r\n    public static isNight = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour >= 15 && hour <= 20;\r\n    };\r\n\r\n    public static isMorning = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour > 20;\r\n    };\r\n\r\n    public static isEvening = (state: GameState): boolean => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        return hour > 11 && hour < 15;\r\n    };\r\n\r\n    public static toLogString = (state: GameState): string => {\r\n        const hour = state.currentTurn % TimeTracker._dayLength;\r\n        let logString = `Hour = ${hour} - `;\r\n        if (TimeTracker.isNight(state)) logString += \"It's night\";\r\n        else if (TimeTracker.isMorning(state)) logString += \"It's morning\";\r\n        else if (TimeTracker.isEvening(state)) logString += \"It's evening\";\r\n        else logString += \"It's day\";\r\n        return logString;\r\n    };\r\n}\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Polyline } from \"react-leaflet\";\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\nimport VertexMarker from \"./markers/VertexMarker\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\n\r\n// Pathfinding imports\r\nimport npath from \"ngraph.path\";\r\nimport { Node } from \"ngraph.graph\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport Queue from \"../models/Queue\";\r\nimport { MapGraph, NodeData } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport PartyMarker from \"./markers/PartyMarker\";\r\nimport LinkTo from \"./LinkTo\";\r\nimport TimeTracker from \"../services/TimeTracker\";\r\n\r\nconst useStyles = makeStyles({\r\n    dayMap: {},\r\n    nightMap: {\r\n        filter: \"brightness(0.4) grayscale(0.6)\",\r\n    },\r\n    eveningMap: {\r\n        filter: \"brightness(0.7) grayscale(0.3) saturate(1.28) hue-rotate(328deg)\",\r\n    },\r\n    morningMap: {\r\n        filter: \"brightness(0.8) grayscale(0.3) sepia(0.4) saturate(1.28)\",\r\n    },\r\n    quests: {\r\n        position: \"absolute\",\r\n        bottom: \"15px\",\r\n        right: \"15px\",\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        zIndex: 1000,\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            color: \"white\",\r\n        },\r\n    },\r\n});\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    graph: MapGraph; // The map graph data\r\n    mapUrl: string;\r\n    coverUrls: string[];\r\n    pathColor: string; // The default path colour is brown\r\n    useDayNight: boolean;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMap: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState, graph, mapUrl, pathColor, useDayNight, onNewMap } = props;\r\n\r\n    const [pos, setPos] = React.useState<LatLng | undefined>(undefined); // The current (target) position of the player marker\r\n    const [path, setPath] = React.useState<LatLng[]>([]); // The path to the hovered vertex\r\n    const [vertexQueue] = React.useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // TODO: Derived state anti-pattern\r\n    const [gameState, setGameState] = React.useState<GameState>(startState);\r\n    const [initialNode, setInitialNode] = React.useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    const [visibleCovers, setVisibleCovers] = React.useState<number[]>(startState.currentMapCovers);\r\n\r\n    const classes = useStyles();\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (name: string) => {\r\n        console.log(`Move ended : ${name} with ${vertexQueue.length()} queued`);\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update visibile covers list (that hide the map with a fog of war)\r\n            if (targetVertex.data.coverIds) {\r\n                for (let i = 0; i < targetVertex.data.coverIds.length; i++) {\r\n                    const thisCoverIds = targetVertex.data.coverIds[i];\r\n                    if (visibleCovers.indexOf(thisCoverIds) < 0) {\r\n                        visibleCovers.push(thisCoverIds);\r\n                        setVisibleCovers(visibleCovers);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update user state\r\n            gameState.currentVertextId = targetVertex.id.toString();\r\n            gameState.currentTurn++;\r\n            setGameState(gameState);\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState: GameState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                        currentEncounterId: undefined,\r\n                        currentMapCovers: [],\r\n                        currentTurn: startState.currentTurn,\r\n                        seed: startState.seed,\r\n                    };\r\n\r\n                    vertexQueue.clear();\r\n                    onNewMap(newState);\r\n                }\r\n            } else if (vertexQueue.length() <= 0) {\r\n                // Save the movement if its the last move\r\n                const stateService = new MockGameStateService();\r\n                const newState = stateService.getState();\r\n                newState.currentVertextId = targetVertex.id.toString();\r\n                newState.currentMapCovers = visibleCovers;\r\n                console.log(visibleCovers);\r\n                stateService.setState(newState);\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n    };\r\n\r\n    const onClick = (vertexId: string) => {\r\n        console.log(`Clicked on vertex ${vertexId}`);\r\n\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        if (path.length <= 1) {\r\n            console.log(`No route found to ${vertexId}`);\r\n            return;\r\n        }\r\n\r\n        path.pop(); // Remove the current/start node\r\n\r\n        vertexQueue.clear();\r\n        let nextVertex = path.pop();\r\n        while (nextVertex) {\r\n            vertexQueue.push(nextVertex);\r\n            // Stop if a vertex with an an encounter is hit\r\n            if (nextVertex.data.encounterId) {\r\n                break;\r\n            }\r\n            nextVertex = path.pop();\r\n        }\r\n\r\n        handleMoveEnd(\"party\"); // Trigger the move to the next vertex\r\n    };\r\n\r\n    // On hover, show the path to the marker\r\n    const onHover = (vertexId: string) => {\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        let pathVertexes = path.map((p) => p.data.position);\r\n        setPath(pathVertexes);\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(\"party\");\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string, coverVisible?: number) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (encounterDetailId) {\r\n            console.log(\"Start detailed encounter : \" + encounterDetailId);\r\n            const newState: GameState = {\r\n                currentMapId: startState.currentMapId,\r\n                currentVertextId: startState.currentVertextId,\r\n                currentEncounterId: encounterDetailId,\r\n                currentMapCovers: [],\r\n                currentTurn: startState.currentTurn,\r\n                seed: startState.seed,\r\n            };\r\n\r\n            vertexQueue.clear();\r\n            onNewMap(newState);\r\n        }\r\n\r\n        if (moveTo) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n\r\n        if (coverVisible !== undefined) {\r\n            visibleCovers.push(coverVisible);\r\n            setVisibleCovers(visibleCovers);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (initialNode) {\r\n            console.log(\"Initial node : \" + gameState.currentMapId + \", \" + gameState.currentVertextId);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(graph, gameState.currentVertextId);\r\n            setInitialNode(false);\r\n        }\r\n    }, [initialNode, gameState.currentMapId, gameState.currentVertextId, moveToVertexId, graph]);\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n\r\n    if (!pos) return null;\r\n\r\n    const isMarkerVisible = (node: NodeData) => {\r\n        // if (node.coverIds === undefined)\r\n        //     return true;\r\n        // const intersect = node.coverIds.filter((value) => visibleCovers.includes(value));\r\n        // return intersect.length > 0;\r\n        return true;\r\n    };\r\n\r\n    const renderMarkers = (graph: MapGraph) =>\r\n        graph\r\n            .getVertices()\r\n            .map((v) =>\r\n                isMarkerVisible(v.data) ? (\r\n                    <VertexMarker key={v.id} vertex={v} onHover={onHover} onHoverEnd={() => setPath([])} onClick={onClick} />\r\n                ) : null\r\n            );\r\n\r\n    const renderCovers = (coverUrls: string[]): JSX.Element[] => {\r\n        const covers: JSX.Element[] = [];\r\n        for (let i = 0; i < coverUrls.length; i++) {\r\n            if (visibleCovers.indexOf(i) < 0) covers.push(<ImageOverlay url={coverUrls[i]} bounds={bounds} />);\r\n        }\r\n        return covers;\r\n    };\r\n\r\n    console.log(TimeTracker.toLogString(gameState));\r\n\r\n    const getLightingClass = () =>\r\n        useDayNight === false\r\n            ? classes.dayMap\r\n            : TimeTracker.isEvening(gameState)\r\n            ? classes.eveningMap\r\n            : TimeTracker.isNight(gameState)\r\n            ? classes.nightMap\r\n            : TimeTracker.isMorning(gameState)\r\n            ? classes.morningMap\r\n            : classes.dayMap;\r\n\r\n    return (\r\n        <div>\r\n            <Map\r\n                className={\r\n                    TimeTracker.isEvening(gameState)\r\n                        ? classes.eveningMap\r\n                        : TimeTracker.isNight(gameState)\r\n                        ? classes.nightMap\r\n                        : TimeTracker.isMorning(gameState)\r\n                        ? classes.morningMap\r\n                        : classes.dayMap\r\n                }\r\n                crs={CRS.Simple}\r\n                zoom={-1}\r\n                minZoom={-1}\r\n                maxZoom={-1}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={handleClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n                <ImageOverlay url={mapUrl} bounds={bounds} />\r\n                {renderCovers(props.coverUrls)}\r\n                {renderMarkers(graph)}\r\n                <Polyline positions={path} color={pathColor} dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n                <PartyMarker\r\n                    name=\"party\"\r\n                    id=\"party\"\r\n                    imageUrl=\"images/knight.jpg\"\r\n                    position={pos}\r\n                    onMoveEnd={handleMoveEnd}\r\n                    isActive={true}\r\n                />\r\n            </Map>\r\n            <LinkTo key=\"quests\" url={`${process.env.PUBLIC_URL}/quests/`}>\r\n                <ExploreIcon color=\"disabled\" className={classes.quests} />\r\n            </LinkTo>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OverheadMap;\r\n","import React from \"react\";\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nconst LoadingProgress: React.FunctionComponent = () => {\r\n    const useStyles = makeStyles(() => ({\r\n        root: {\r\n            textAlign: \"center\",\r\n            padding: \"40vh 0 0 0\",\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingProgress;\r\n","import React from \"react\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport { MapGraph } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockMapService from \"../services/MockMapService\";\r\nimport GraphBuilder from \"../services/GraphBuilder\";\r\nimport OverheadMap from \"./OverheadMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMapLoader: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState } = props;\r\n\r\n    const [graph, setGraph] = React.useState<MapGraph | undefined>(undefined); // The map graph data\r\n    const [pathColor, setPathColor] = React.useState<string | undefined>(undefined);\r\n\r\n    const [mapUrl, setMapUrl] = React.useState<string | undefined>(undefined);\r\n    const [coverUrls, setCoverUrls] = React.useState<string[]>([]);\r\n    const [useDayNight, setUseDayNight] = React.useState<boolean>(false);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const service = new MockMapService();\r\n\r\n            const data = service.getMap(startState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\r\n                `Loaded map : ${startState.currentMapId}, ${startState.currentVertextId}. ${data?.vertices.length} vertices. Path Color ${\r\n                    data.pathColor ?? \"None\"\r\n                }`\r\n            );\r\n\r\n            setMapUrl(data.imageUrl);\r\n            setCoverUrls(data.coverUrls);\r\n            setPathColor(data.pathColor ?? \"#5E4E00\"); // The default path colour is brown\r\n            setUseDayNight(data.useDayNight);\r\n\r\n            const mapGraph = GraphBuilder.Build(data);\r\n            setGraph(mapGraph);\r\n        };\r\n\r\n        if (!graph) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n        props.onNewMap(newState);\r\n\r\n        // Force a reload of the map\r\n        // Need to set the graph last, or the load can happen after the useEffect\r\n        setMapUrl(undefined);\r\n        setPathColor(undefined);\r\n        setGraph(undefined);\r\n        setCoverUrls([]);\r\n    };\r\n\r\n    if (!mapUrl || !graph || !pathColor) return <LoadingProgress />;\r\n\r\n    return (\r\n        <OverheadMap\r\n            startState={startState}\r\n            graph={graph}\r\n            mapUrl={mapUrl}\r\n            coverUrls={coverUrls}\r\n            pathColor={pathColor}\r\n            useDayNight={useDayNight}\r\n            onNewMap={onNewMap}\r\n        />\r\n    );\r\n};\r\n\r\nexport default OverheadMapLoader;\r\n","import EncounterDetail from \"../models/EncounterDetail\";\r\n\r\nimport TavernMap from \"./encounter-maps/tavern.json\";\r\n\r\nexport default class MockDetailedEncounterService {\r\n    public getEncounterDetail(id: string): EncounterDetail | null {\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"tavern\":\r\n            default:\r\n                json = TavernMap;\r\n                break;\r\n        }\r\n\r\n        return json\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype HeroMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst HeroMarker: React.FunctionComponent<HeroMarkerProps> = (props: HeroMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-32px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.currentStatus.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={hero.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={hero.details.name} />\r\n            </div>\r\n            <div className={classes.root}></div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default HeroMarker;\r\n","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\n\r\nexport default class Transforms {\r\n    // Conversion functions from isometric to cardinal co-ordinates\r\n    public static isoX = (carX: number, carY: number): number => carX + carY;\r\n    public static isoY = (carX: number, carY: number): number => carY - carX;\r\n\r\n    /*\r\n     * Convert cardinal co-ordinates to isometric co-ordinates\r\n     */\r\n    public static cardinalToIsometric = (car: LatLngTuple): LatLng =>\r\n        latLng(Transforms.isoY(car[0], car[1]), Transforms.isoX(car[0], car[1]));\r\n\r\n    public static cardinalToIsometric2 = (car: LatLng): LatLng =>\r\n        latLng(Transforms.isoY(car.lat, car.lng), Transforms.isoX(car.lat, car.lng));\r\n\r\n    public static carX = (isoX: number, isoY: number): number => (isoX + isoY) * 0.5;\r\n    public static carY = (isoX: number, isoY: number): number => (isoY - isoX) * 0.5;\r\n\r\n    /*\r\n     * Convert isometric co-ordinates to cardinal co-ordinates\r\n     */\r\n    public static isometricToCardinal = (iso: LatLng): LatLng =>\r\n        latLng(Transforms.carY(iso.lat, iso.lng), Transforms.carX(iso.lat, iso.lng));\r\n\r\n    public static offset = (iso: LatLng, offset: LatLngTuple): LatLng => latLng(iso.lat + offset[0], iso.lng + offset[1]);\r\n    public static scale = (iso: LatLng, scale: LatLngTuple): LatLng => latLng(iso.lat * scale[0], iso.lng * scale[1]);\r\n}","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\nimport Transforms from \"./Transforms\";\r\nimport EncounterDetail, { GridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { AStarFinder } from \"astar-typescript\";\r\nimport Hero from \"../models/character/Hero\";\r\n\r\nexport default class GridHelpers {\r\n    // Convert a grid co-ordinate to a display co-ordinate by converting to isometric, scaling & offsetting\r\n    public static gridToDisplayTuple = (car: LatLngTuple, encounter: EncounterDetail): LatLng =>\r\n        Transforms.offset(Transforms.scale(Transforms.cardinalToIsometric(car), encounter.gridScale), encounter.gridOffset);\r\n\r\n    public static gridToDisplayCenterTuple = (car: LatLngTuple, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayTuple([car[0] + 0.5, car[1] + 0.5], encounter);\r\n\r\n    public static gridToDisplay = (car: LatLng, encounter: EncounterDetail): LatLng =>\r\n        GridHelpers.gridToDisplayTuple([car.lat, car.lng], encounter);\r\n\r\n    public static gridToDisplayCenter = (car: LatLng, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayCenterTuple([car.lat, car.lng], encounter);\r\n\r\n    // And the reverse transforms\r\n    public static reverseOffset = (coords: LatLng, gridOffset: LatLngTuple) => Transforms.offset(coords, [-gridOffset[0], -gridOffset[1]]);\r\n\r\n    public static reverseScale = (coords: LatLng, gridScale: LatLngTuple) =>\r\n        Transforms.scale(coords, [1.0 / gridScale[0], 1.0 / gridScale[1]]);\r\n\r\n    public static displayToGrid = (iso: LatLng, encounter: EncounterDetail): [number, number] => {\r\n        const { gridOffset, gridScale } = encounter;\r\n\r\n        const result = Transforms.isometricToCardinal(GridHelpers.reverseScale(GridHelpers.reverseOffset(iso, gridOffset), gridScale));\r\n        return [Math.floor(result.lat), Math.floor(result.lng)];\r\n    };\r\n\r\n    /*\r\n     * Get the first found location for a grid entry (hero or encoutner ID)\r\n     */\r\n    private static getGridLocation = (grid: TokenGridEntry[][], char: GridEntry): LatLng | undefined => {\r\n        for (let x = 0; x < grid.length; x++) {\r\n            const currentRow = grid[x];\r\n            const index = currentRow.indexOf(char);\r\n            if (index >= 0) {\r\n                return latLng(x, index);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /*\r\n     * Get the initial locations for a grid entry (hero or encoutner ID)\r\n     */\r\n    public static getInitialPositions = (encounter: EncounterDetail, characters: [NpcGridEntry, Hero][]): CharacterEncounterData[] => {\r\n        return characters.map((c: [NpcGridEntry, Hero]) => {\r\n            const gridPosition = GridHelpers.getGridLocation(encounter.tokenGrid, c[0]);\r\n            return new CharacterEncounterData(\r\n                c[1],\r\n                c[0],\r\n                \"melee\",\r\n                gridPosition,\r\n                GridHelpers.gridToDisplayCenter(gridPosition ?? latLng([0, 0]), encounter)\r\n            );\r\n        });\r\n    };\r\n\r\n    public static mergeGridEntry = (tokenEntry: TokenGridEntry, baseEntry: GridEntry): GridEntry =>\r\n        tokenEntry !== \" \" ? (tokenEntry as GridEntry) : baseEntry;\r\n\r\n    private static buildMergedGrids(tokenGrid: TokenGridEntry[][], grid: GridEntry[][]): GridEntry[][] {\r\n        const output: GridEntry[][] = [];\r\n\r\n        for (let x = 0; x < grid.length; x++) {\r\n            output[x] = [];\r\n            for (let y = 0; y < grid.length; y++) {\r\n                output[x][y] = GridHelpers.mergeGridEntry(tokenGrid[x][y], grid[x][y]);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private static buildAstarGrid = (grid: GridEntry[][]): number[][] => {\r\n        return grid.map((e) => e.map((item) => (GridHelpers.isWalkable(item) ? 0 : 1)));\r\n    };\r\n\r\n    public static getGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const mergedGrid = GridHelpers.buildMergedGrids(tokenGrid, grid);\r\n        const endEntry = mergedGrid[end.lat][end.lng];\r\n\r\n        const isFoe = GridHelpers.isFoe(endEntry);\r\n        const isHero = GridHelpers.isHero(endEntry);\r\n        const isBlocked = endEntry === \"0\";\r\n\r\n        // Allow movement on start/end points\r\n        mergedGrid[start.lat][start.lng] = \"1\";\r\n        if (isHeroMove && !isBlocked && !isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n        else if (!isHeroMove && !isBlocked && isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n\r\n        // Build a new crid each time because everything heroes, foes move\r\n        const aStar = new AStarFinder({\r\n            grid: {\r\n                matrix: GridHelpers.buildAstarGrid(mergedGrid),\r\n            },\r\n        });\r\n\r\n        const startGridPosition = { x: start.lng, y: start.lat };\r\n        const endGridPosition = { x: end.lng, y: end.lat };\r\n\r\n        //console.log(`Path from : (${startGridPosition.x},${startGridPosition.y}) to (${endGridPosition.x},${endGridPosition.y})`);\r\n\r\n        const path = aStar.findPath(startGridPosition, endGridPosition);\r\n\r\n        //console.log(`Path length : ${path.length}`);\r\n        // If attacking a foe, don't move onto the foe\r\n        if (isFoe || isHero) path.pop();\r\n\r\n        return path.reverse();\r\n    };\r\n\r\n    public static getRangedGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const path = GridHelpers.getGridPath(tokenGrid, grid, start, end, isHeroMove);\r\n\r\n        if (range <= 1) return path;\r\n\r\n        const distanceSquared = (x: LatLng, y: LatLng): number => {\r\n            const latDist = x.lat - y.lat;\r\n            const lngDist = x.lng - y.lng;\r\n            // Note: Removed Math.sqrt to make slightly faster?\r\n            return latDist * latDist + lngDist * lngDist;\r\n        };\r\n\r\n        for (let i = path.length - 1; i >= 0; i--) {\r\n            const dist = distanceSquared(latLng(path[i][1], path[i][0]), end);\r\n            // console.log(`Dist from ${path[i][1]}, ${path[i][0]} to ${end.lat}, ${end.lng} = ${dist}`);\r\n            if (dist < range * range) {\r\n                return path.splice(i);\r\n            }\r\n        }\r\n\r\n        // TODO: Instead check each node on the path to check if its within range\r\n        return path.splice(range - 1);\r\n    };\r\n\r\n    public static getHeroPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number\r\n    ): number[][] =>\r\n        range > 0\r\n            ? GridHelpers.getRangedGridPath(tokenGrid, grid, start, end, range, true)\r\n            : GridHelpers.getGridPath(tokenGrid, grid, start, end, true);\r\n\r\n    public static getFoePath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        range: number\r\n    ): number[][] =>\r\n        range > 0\r\n            ? GridHelpers.getRangedGridPath(tokenGrid, grid, start, end, range, false)\r\n            : GridHelpers.getGridPath(tokenGrid, grid, start, end, false);\r\n\r\n    public static findNearestHero = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng\r\n    ): [GridEntry, number[][]] | undefined => {\r\n        const paths: [GridEntry, number[][]][] = [];\r\n        const heroEntries: HeroGridEntry[] = [\"A\", \"B\", \"C\", \"D\"];\r\n        for (let i = 0; i < heroEntries.length; i++) {\r\n            const end = GridHelpers.getGridLocation(tokenGrid, heroEntries[i]);\r\n            if (end) {\r\n                paths.push([heroEntries[i], GridHelpers.getFoePath(tokenGrid, grid, start, end, 0)]);\r\n            }\r\n        }\r\n\r\n        const sortedPaths = paths.filter((p) => p[1].length > 0).sort((p1, p2) => p1[1].length - p2[1].length);\r\n        return sortedPaths.length > 0 ? sortedPaths[0] : undefined;\r\n    };\r\n\r\n    public static isHero = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"A\":\r\n            case \"B\":\r\n            case \"C\":\r\n            case \"D\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isEncounter = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"E\":\r\n            case \"F\":\r\n            case \"G\":\r\n            case \"H\":\r\n            case \"I\":\r\n            case \"J\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isFoe = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"K\":\r\n            case \"L\":\r\n            case \"M\":\r\n            case \"N\":\r\n            case \"O\":\r\n            case \"P\":\r\n            case \"Q\":\r\n            case \"R\":\r\n            case \"S\":\r\n            case \"T\":\r\n            case \"U\":\r\n            case \"V\":\r\n            case \"W\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isWalkable = (entry: GridEntry) => entry !== \"0\" && !GridHelpers.isFoe(entry) && !GridHelpers.isHero(entry);\r\n\r\n    public static canEndMove = (entry: GridEntry) => entry === \"1\" || entry === \"2\" || entry === \"X\" || GridHelpers.isEncounter(entry);\r\n\r\n    public static displayGrid = (tokenGrid: TokenGridEntry[][]): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < tokenGrid.length; i++) {\r\n            displayStrings.push(tokenGrid[i].join(\" - \"));\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","\r\nimport { LatLng } from \"leaflet\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport { NpcGridEntry } from \"./EncounterDetail\";\r\nimport Hero from \"./character/Hero\";\r\nimport Queue from \"./Queue\";\r\n\r\nexport default class CharacterEncounterData {\r\n    constructor(details: Hero, gridEntry: NpcGridEntry, selectedAttack: string, gridPos?: LatLng, displayPos?: LatLng, vertexQueue?: Queue<[number, number]>) {\r\n        this.gridPos = gridPos;\r\n        this.gridEntry = gridEntry;\r\n        this.displayPos = displayPos;\r\n        this.selectedAttack = selectedAttack;\r\n        this.vertexQueue = vertexQueue ?? new Queue<[number, number]>();\r\n        this.details = details;\r\n    }\r\n\r\n    public details: Hero;\r\n\r\n    public gridEntry: NpcGridEntry;\r\n\r\n    public gridPos?: LatLng;\r\n\r\n    public displayPos?: LatLng;\r\n\r\n    public vertexQueue: Queue<[number, number]>;\r\n\r\n    public selectedAttack: string;\r\n\r\n    // TODO\r\n    // public lastAttack: string;\r\n\r\n    public static buildFromGrid(gridPos: LatLng | undefined, convertFunc: (pos: LatLng) => LatLng): CharacterEncounterData {\r\n        const result = <CharacterEncounterData>{\r\n            gridPos: gridPos,\r\n            displayPos: gridPos ? convertFunc(gridPos) : undefined,\r\n            selectedAttack: \"melee\",\r\n            vertexQueue: new Queue<[number, number]>(),\r\n        };\r\n        return result;\r\n    }\r\n\r\n    // TODO: Disable path display when moving\r\n    public isMoving = (): boolean => this.vertexQueue.length() > 0;\r\n\r\n    public toString(): string {\r\n        const queueStrings = this.vertexQueue._store.map((i) => `${i[0]},${i[1]}`);\r\n\r\n        return `${this.gridPos?.lat},${this.gridPos?.lng} display ${this.displayPos?.lat},${this.displayPos?.lng} [${queueStrings.join(\r\n            \"],[\"\r\n        )}]`;\r\n    }\r\n\r\n    public isFoe = (): boolean => GridHelpers.isFoe(this.gridEntry);\r\n\r\n    public isHero = (): boolean => GridHelpers.isHero(this.gridEntry);\r\n}\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLng, LatLngTuple } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { GridEntry } from \"../../models/EncounterDetail\";\r\nimport GridHelpers from \"../../helpers/GridHelpers\";\r\n\r\ntype GridMarkerProps = {\r\n    gridPos: [number, number];\r\n    entry: GridEntry;\r\n    gridToDisplayFunc: (car: LatLngTuple) => LatLng;\r\n    onHover: (gridPos: [number, number]) => void;\r\n    onHoverEnd: (gridPos: [number, number]) => void;\r\n    onClick: (gridPos: [number, number]) => void;\r\n};\r\n\r\nconst GridMarker: React.FunctionComponent<GridMarkerProps> = (props: GridMarkerProps) => {\r\n    const { gridPos, entry, gridToDisplayFunc, onHover, onHoverEnd, onClick } = props;\r\n\r\n    const displayPos = gridToDisplayFunc([gridPos[0] + 0.5, gridPos[1] + 0.5]);\r\n\r\n    const isHero = GridHelpers.isHero(entry);\r\n    const isFoe = GridHelpers.isFoe(entry);\r\n    if (isHero || isFoe) return null; // No markers on hero or foe positions\r\n        \r\n    const canEndMove = GridHelpers.canEndMove(entry);\r\n\r\n    const iconUrl = canEndMove ? \"/images/bullseye-flat.svg\" : \"/images/times-solid.svg\";\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        // TODO: Size not scaled\r\n        iconSize: [50, 50],\r\n        iconAnchor: [25, 25],\r\n        className: \"hover-icon\",\r\n    });\r\n\r\n    return (\r\n        <Marker\r\n            key={`${gridPos[0]}.${gridPos[1]}`}\r\n            position={displayPos}\r\n            icon={icon}\r\n            onclick={() => onClick(gridPos)}\r\n            onmouseover={() => onHover(gridPos)}\r\n            onmouseout={() => onHoverEnd(gridPos)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GridMarker;\r\n","import React from \"react\";\r\n\r\nimport { makeStyles, CircularProgress } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype FoeMarkerProps = {\r\n    foe: CharacterEncounterData;\r\n    isActive: boolean;\r\n    attackIcon: string;\r\n    duration?: number;\r\n    onClick?: (foe: CharacterEncounterData) => void;\r\n    onMoveEnd: (foe: CharacterEncounterData) => void;\r\n    onHover: (hero: CharacterEncounterData) => void;\r\n    onHoverEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A map marker that represents an enemy or foe\r\n */\r\nconst FoeMarker: React.FunctionComponent<FoeMarkerProps> = (props: FoeMarkerProps) => {\r\n    const { foe, isActive, duration, onClick, onMoveEnd, onHover, onHoverEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-54px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid indianred\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            \"&:hover\": {\r\n                border: \"6px solid red\",\r\n            },\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid red\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        meleeHover: {\r\n            position: \"absolute\",\r\n            zIndex: 9,\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            opacity: 0,\r\n            \"&:hover\": {\r\n                filter: \"invert(1)\",\r\n                opacity: 1,\r\n            },\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (foe.details.currentStatus.currentHitPoints / foe.details.stats.maxHitPoints) * 100;\r\n\r\n    //const ff = foe.details;\r\n\r\n    //console.log(`# ${ff.id},${foe.gridEntry} has ${percentHp}% hp`);\r\n\r\n    if (!foe.displayPos) return null;\r\n\r\n    const hoverUrl =\r\n        props.attackIcon === \"melee\"\r\n            ? \"./images/melee.svg\"\r\n            : props.attackIcon === \"ranged\"\r\n            ? \"./images/ranged.svg\"\r\n            : \"./images/meteor-solid.svg\";\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={foe.displayPos}\r\n            keepAtCenter={false}\r\n            onMouseOver={() => onHover(foe)}\r\n            onMouseOut={() => onHoverEnd(foe)}\r\n            onMoveEnd={(_: any) => onMoveEnd(foe)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(foe);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={5}\r\n                    size={62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={foe.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={foe.details.name} />\r\n                <img src={hoverUrl} className={classes.meleeHover} alt=\"melee\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default FoeMarker;\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLngExpression } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        filter: \"invert(100%)\",\r\n    },\r\n});\r\n\r\ntype StaticMarkerProps = {\r\n    displayPos: LatLngExpression | undefined;\r\n    iconUrl: string;\r\n    width: number;\r\n    height: number;\r\n    zIndexOffset: number;\r\n};\r\n\r\nconst StaticMarker: React.FunctionComponent<StaticMarkerProps> = (props: StaticMarkerProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { displayPos, iconUrl, width, height } = props;\r\n\r\n    if (!displayPos) return null;\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        iconSize: [width, height],\r\n        iconAnchor: [width >> 1, height >> 1],\r\n        className: classes.icon,\r\n    });\r\n\r\n    return <Marker zIndexOffset={props.zIndexOffset} key={displayPos.toString()} position={displayPos} icon={icon} />;\r\n};\r\n\r\nexport default StaticMarker;\r\n","import React from \"react\";\r\nimport { LatLng } from \"leaflet\";\r\nimport { Polyline } from \"react-leaflet\";\r\nimport StaticMarker from \"./StaticMarker\";\r\n\r\ntype CombatPathProps = {\r\n    // How far the hero can move\r\n    move: number;\r\n\r\n    // The path color\r\n    pathColor: string;\r\n\r\n    // The path to display\r\n    path: LatLng[];\r\n};\r\n\r\n/*\r\n * Display a movement path during combat, split into segments showing how much movement is consumed\r\n */\r\nconst CombatPath: React.FunctionComponent<CombatPathProps> = (props: CombatPathProps): JSX.Element => {\r\n    const { move, pathColor } = props;\r\n\r\n    const fullPath = props.path;\r\n\r\n    const length = fullPath.length;\r\n    const remainderPathLength = length - move * 2;\r\n    const fullMoveStart = remainderPathLength > 0 ? remainderPathLength - 1 : 0;\r\n    const fullMoveEnd = length - move;\r\n    const halfMoveStart = fullMoveEnd > 0 ? length - move - 1 : 0;\r\n\r\n    const remainderPath = remainderPathLength > 0 ? fullPath.slice(0, remainderPathLength) : [];\r\n    const fullMovePath = fullMoveEnd > 0 ? fullPath.slice(fullMoveStart, fullMoveEnd) : [];\r\n    const halfMovePath = fullPath.slice(halfMoveStart);\r\n\r\n    // A marker for the half move path\r\n    const halfMoveMarker = halfMovePath.length > 0 ? halfMovePath[0] : undefined;\r\n\r\n    // A marker for the (!damagePos) move path\r\n    const fullMoveMarker = fullMovePath.length > 0 ? fullMovePath[0] : undefined;\r\n\r\n    const zIndexOffset = -1000;\r\n\r\n    return (\r\n        <div>\r\n            <StaticMarker zIndexOffset={zIndexOffset} displayPos={halfMoveMarker} iconUrl=\"./images/half.svg\" width={30} height={20} />\r\n            <StaticMarker zIndexOffset={zIndexOffset} displayPos={fullMoveMarker} iconUrl=\"./images/circle.svg\" width={30} height={20} />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={remainderPath}\r\n                color=\"indianred\"\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={fullMovePath}\r\n                color=\"#c6c6c6\"\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n            <Polyline\r\n                zIndexOffset={zIndexOffset}\r\n                positions={halfMovePath}\r\n                color={pathColor}\r\n                dashArray=\"5,10,3,7,11,9\"\r\n                weight={4}\r\n                dashOffset=\"0\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatPath;\r\n","import * as React from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { DivIcon, LatLngExpression, marker } from \"leaflet\";\r\nimport * as RL from \"react-leaflet\";\r\nimport { MapLayer, MapLayerProps } from \"react-leaflet\";\r\n\r\ntype CustomMarkerProps = {\r\n    position: LatLngExpression,\r\n    zIndexOff: number;\r\n} & MapLayerProps;\r\n\r\n/*\r\n* From:\r\n* https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n*/\r\nconst CustomMarker = (RL as any).withLeaflet(\r\n    class extends MapLayer<CustomMarkerProps> {\r\n        leafletElement: any;\r\n\r\n        createLeafletElement(props: CustomMarkerProps) {\r\n            const { position, ...rest } = props;\r\n\r\n            // when not providing className, the element's background is a white square\r\n            // when not providing iconSize, the element will be 12x12 pixels\r\n            const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n            const el = marker(position, { icon: icon, zIndexOffset: props.zIndexOff, ...rest });\r\n            this.contextValue = { ...props.leaflet, popupContainer: el };\r\n            return el;\r\n        }\r\n\r\n        updateLeafletElement(fromProps: any, toProps: any) {\r\n            const {\r\n                position: fromPosition,\r\n                zIndexOffset: fromZIndexOffset,\r\n                opacity: fromOpacity,\r\n                draggable: fromDraggable,\r\n                className: fromClassName,\r\n            } = fromProps;\r\n            const {\r\n                position: toPosition,\r\n                zIndexOffset: toZIndexOffset,\r\n                toOpacity,\r\n                draggable: toDraggable,\r\n                className: toClassName,\r\n            } = toProps;\r\n\r\n            function difference<T>(items: Array<T>, itemsToRemove: Array<T>): Array<T> {\r\n                return items.filter((item) => !itemsToRemove.includes(item));\r\n            }\r\n\r\n            if (toPosition !== fromPosition) {\r\n                this.leafletElement.setLatLng(toPosition);\r\n            }\r\n            if (toZIndexOffset !== fromZIndexOffset) {\r\n                this.leafletElement.setZIndexOffset(toZIndexOffset);\r\n            }\r\n            if (toOpacity !== fromOpacity) {\r\n                this.leafletElement.setOpacity(toOpacity);\r\n            }\r\n            if (toDraggable !== fromDraggable) {\r\n                if (toDraggable) {\r\n                    this.leafletElement.dragging.enable();\r\n                } else {\r\n                    this.leafletElement.dragging.disable();\r\n                }\r\n            }\r\n            if (toClassName !== fromClassName) {\r\n                const fromClasses = fromClassName.split(\" \");\r\n                const toClasses = toClassName.split(\" \");\r\n                this.leafletElement._icon.classList.remove(...difference(fromClasses, toClasses));\r\n                this.leafletElement._icon.classList.add(...difference(toClasses, fromClasses));\r\n            }\r\n        }\r\n\r\n        componentWillMount() {\r\n            if (super.componentWillMount) {\r\n                super.componentWillMount();\r\n            }\r\n            this.leafletElement = this.createLeafletElement(this.props);\r\n            this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n        }\r\n\r\n        componentDidUpdate(fromProps: any) {\r\n            this.updateLeafletElement(fromProps, this.props);\r\n        }\r\n\r\n        render() {\r\n            const { children } = this.props;\r\n            const container = this.leafletElement._icon;\r\n\r\n            if (!container) {\r\n                return null;\r\n            }\r\n\r\n            const portal = createPortal(children, container);\r\n\r\n            const LeafletProvider = (RL as any).LeafletProvider;\r\n\r\n            return children == null || portal == null || this.contextValue == null ? null : (\r\n                <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport default CustomMarker;","import React from \"react\";\r\n\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\nimport { Fade } from \"@material-ui/core\";\r\nimport CustomMarker from \"./CustomMarker\";\r\nimport { latLng, LatLng } from \"leaflet\";\r\nimport AttackResult from \"../../models/AttackResult\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"relative\",\r\n        top: \"-20px\",\r\n        left: \"-20px\",\r\n        pointerEvents: \"none\",\r\n    },\r\n    explode: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n    },\r\n    death: {\r\n        position: \"absolute\",\r\n        width: \"55px\",\r\n        height: \"55px\",\r\n        filter: \"invert(0.9)\",\r\n    },\r\n    miss: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n        filter: \"invert(0.67)\", // TODO: Use different svg\r\n    },\r\n    text: {\r\n        position: \"absolute\",\r\n        color: \"white\",\r\n        top: \"27px\",\r\n        width: \"80px\",\r\n    },\r\n});\r\n\r\ntype DamageDisplayProps = {\r\n    result: AttackResult;\r\n};\r\n\r\nconst DamageDisplay: React.FunctionComponent<DamageDisplayProps> = (props: DamageDisplayProps): JSX.Element => {\r\n    const { position, damage, result } = props.result;\r\n    const classes = useStyles();\r\n\r\n    const show = damage !== undefined;\r\n\r\n    return (\r\n        <CustomMarker position={position ?? latLng([0, 0])} zIndexOff={1000}>\r\n            <Fade in={show} style={{ transitionDelay: \"300ms\" }} timeout={{ enter: 500, exit: 500 }}>\r\n                {result === \"death\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/skull.svg\" className={classes.death} alt=\"death\" />\r\n                    </div>\r\n                ) : result === \"miss\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.miss} alt=\"miss\" />\r\n                        <Typography className={classes.text}>Miss</Typography>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.explode} alt=\"damage\" />\r\n                        <Typography className={classes.text}>{damage}</Typography>\r\n                    </div>\r\n                )}\r\n            </Fade>\r\n        </CustomMarker>\r\n    );\r\n};\r\n\r\nexport default DamageDisplay;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport SportsKabaddiIcon from \"@material-ui/icons/SportsKabaddi\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        zIndex: 501,\r\n        position: \"absolute\",\r\n        bottom: \"30px\",\r\n        right: \"30px\",\r\n    },\r\n    icon: {\r\n    },\r\n});\r\n\r\ntype CombatIndicatorProps = {\r\n    isCombat: boolean;\r\n    initiative: number;\r\n};\r\n\r\nconst CombatIndicator: React.FunctionComponent<CombatIndicatorProps> = (props: CombatIndicatorProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            {props.isCombat ? (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <Typography>{Math.round(props.initiative)}</Typography>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <SportsKabaddiIcon className={classes.icon} />\r\n                </Button>\r\n            ) : (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <VisibilityIcon className={classes.icon} />\r\n                </Button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatIndicator;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography, Fade } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"absolute\",\r\n        bottom: \"25px\",\r\n        left: \"25px\",\r\n    },\r\n    button: {\r\n        zIndex: 501,\r\n        padding: \"6px 0px\",\r\n        margin: \"5px\",\r\n        opacity: 0.8,\r\n    },\r\n    icon: {\r\n        width: \"50px\",\r\n        height: \"50px\",\r\n        borderRadius: \"5px\",\r\n    },\r\n});\r\n\r\ntype ActionBarProps = {\r\n    spells: string[];\r\n    selected: string;\r\n    onSelect: (id: string) => void;\r\n};\r\n\r\nconst ActionBar: React.FunctionComponent<ActionBarProps> = (props: ActionBarProps): JSX.Element => {\r\n    const { spells, selected, onSelect } = props;\r\n    const classes = useStyles();\r\n\r\n    const renderButton = (name: string) => (\r\n        <Button\r\n            key={name}\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            className={classes.button}\r\n            color={selected === name ? \"primary\" : \"default\"}\r\n            onClick={() => onSelect(name)}\r\n        >\r\n            <img src={`./images/skills/${name}.png`} className={classes.icon} alt={`${name}`} />\r\n        </Button>\r\n    );\r\n\r\n    const renderSpells = (spells: string[]): JSX.Element[] => spells.map((s) => renderButton(s));\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {renderButton(\"melee\")}\r\n            {renderButton(\"ranged\")}\r\n            {renderSpells(spells)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActionBar;\r\n","/*\r\n* Use the random game seed & encounter ID to determine initiative values\r\n* in a random but recreateable way\r\n*/\r\nexport default class DiceRoller {\r\n\r\n    private generate(seed: number): number {\r\n        const result = seed / 4294967296;\r\n        return result;\r\n    }\r\n\r\n    public rollDie = (seed: number, dieType: number): number => {\r\n        return Math.ceil(this.generate(seed) * dieType);\r\n    };\r\n\r\n    public roll20 = (seed: number): number => this.rollDie(seed, 20);\r\n\r\n    public roll10 = (seed: number): number => this.rollDie(seed, 10);\r\n}\r\n","import MockGameStateService from \"./MockGameStateService\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class DiceSeedTracker {\r\n    public static fromEncounterId(id: string) {\r\n        const hashCode = (s: string) =>\r\n            s.split(\"\").reduce((a, b) => {\r\n                a = (a << 5) - a + b.charCodeAt(0);\r\n                return a & a;\r\n            }, 0);\r\n\r\n        const service = new MockGameStateService();\r\n        const state = service.getState();\r\n\r\n        return hashCode(id) ^ state.seed;\r\n    }\r\n\r\n    public static next(seed: number): number {\r\n        const result = DiceSeedTracker.mulberry32(seed);\r\n        return result;\r\n    }\r\n\r\n    private static mulberry32(a: number): number {\r\n        var t = (a += 0x6d2b79f5);\r\n        t = Math.imul(t ^ (t >>> 15), t | 1);\r\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n        return ((t ^ (t >>> 14)) >>> 0);\r\n    }\r\n}\r\n","import { NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport DiceRoller from \"./DiceRoller\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport DiceSeedTracker from \"./DiceSeedTracker\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class InitiativeTracker {\r\n    private _initiatives: [string, NpcGridEntry, number][] = [];\r\n\r\n    constructor(initiatives: [string, NpcGridEntry, number][]) {\r\n        this._initiatives = initiatives;\r\n    }\r\n\r\n    public static buildInitial(\r\n        gameId: string,\r\n        heroes: [NpcGridEntry, Hero][],\r\n        foes: [NpcGridEntry, Hero][]\r\n    ): [string, NpcGridEntry, number][] {\r\n        // Generate some random initial initiatives\r\n        let seed = DiceSeedTracker.fromEncounterId(gameId);\r\n        const roller = new DiceRoller();\r\n        const heroInitiatives: [string, NpcGridEntry, number][] = heroes.map((h) => {\r\n            seed = DiceSeedTracker.next(seed);\r\n            return [h[1].id, h[0], -(roller.roll10(seed) - AttributeHelper.getModifier(h[1].attributes.dexterity))];\r\n        });\r\n        const foeInitiatives: [string, NpcGridEntry, number][] = foes.map((f) => {\r\n            seed = DiceSeedTracker.next(seed);\r\n            return [f[1].id, f[0], -(roller.roll10(seed) - AttributeHelper.getModifier(f[1].attributes.dexterity))];\r\n        });\r\n\r\n        const initiatives = heroInitiatives.concat(foeInitiatives);\r\n        return InitiativeTracker.sort(initiatives);\r\n    }\r\n\r\n    public processDelay = (name: string, delay: number): [string, NpcGridEntry, number][] => {\r\n        const match = this._initiatives.find((init) => init[0] === name);\r\n        if (!match) {\r\n            console.log(\"Initiative not found : \" + name);\r\n            return this._initiatives;\r\n        }\r\n        match[2] += delay;\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    };\r\n\r\n    public remove = (name: string): [string, NpcGridEntry, number][] => {\r\n        this._initiatives = this._initiatives.filter(i => i[0] !== name);\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    }\r\n\r\n    private static sort = (initiatives: [string, NpcGridEntry, number][]): [string, NpcGridEntry, number][] => {\r\n        const result = initiatives.sort((n1, n2) => n1[2] - n2[2]);\r\n        return result;\r\n    };\r\n\r\n    public getInitiatives = (): [string, NpcGridEntry, number][] => this._initiatives;\r\n\r\n    public getNextInitiative = () => this._initiatives[0];\r\n\r\n    public displayInitiatives = (): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < this._initiatives.length; i++) {\r\n            displayStrings.push(`${this._initiatives[i][0]} : ${this._initiatives[i][1]}`);\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","import { LatLng } from \"leaflet\";\r\n\r\nexport default class AttackResult {\r\n    public constructor(result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\", damage: number, position: LatLng) {\r\n        this.result = result;\r\n        this.damage = damage;\r\n        this.position = position;\r\n    }\r\n\r\n    public result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\";\r\n    public damage: number;\r\n    public position: LatLng;\r\n\r\n    public static createMiss = (position: LatLng): AttackResult => new AttackResult(\"miss\", 0, position);\r\n    public static createFumble = (position: LatLng): AttackResult => new AttackResult(\"fumble\", 0, position);\r\n    public static createHit = (damage: number, position: LatLng): AttackResult => new AttackResult(\"hit\", damage, position);\r\n    public static createCritical = (damage: number, position: LatLng): AttackResult => new AttackResult(\"critical\", damage, position);\r\n    public static createDeath = (damage: number, position: LatLng): AttackResult => new AttackResult(\"death\", damage, position);\r\n}\r\n","import EffectTable from \"../models/EffectTable\";\r\nimport EffectTableEntry from \"../models/EffectTableEntry\";\r\n\r\nimport Spear from \"./effects/spear.json\";\r\nimport Bow from \"./effects/bow.json\";\r\nimport Fists from \"./effects/fists.json\";\r\nimport MagicMissle from \"./effects/magic_missile.json\";\r\n\r\nexport default class EffectTableServiceStatic {\r\n    public getEffect(id: string): EffectTable | null {\r\n        switch (id) {\r\n            case \"Fists\":\r\n                return Fists as EffectTable;\r\n            case \"Spear\":\r\n                return Spear as EffectTable;\r\n            case \"Bow\":\r\n                return Bow as EffectTable;\r\n            case \"Magic Missile\":\r\n                return MagicMissle as EffectTable;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public getResultEntry(table: EffectTable | null, rawRoll: number, total: number): EffectTableEntry | null {\r\n        if (!table) return null;\r\n        \r\n        const matches = table.effects.filter(\r\n            (e) =>\r\n                (e.useRaw && rawRoll >= e.resultMin && rawRoll <= e.resultMax) ||\r\n                (!e.useRaw && total >= e.resultMin && total <= e.resultMax)\r\n        );\r\n        return matches.length > 0 ? matches[0] : null;\r\n    }\r\n}\r\n","import AttributeList from \"../models/character/AttributeList\";\r\nimport CalculatedStats from \"../models/character/CalculatedStats\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport HeroTrait from \"../models/character/HeroTrait\";\r\nimport { ModifierType } from \"../models/character/Trait\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport AttributeHelper from \"./AttributeHelper\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nexport default class HeroHelper {\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getItemTraits = (hero: Hero): HeroTrait[] => {\r\n        let traits: HeroTrait[] = [];\r\n        const service = new MockItemService();\r\n\r\n        // TODO: This might be a few queries, we can consider a cache if we move to server side requests\r\n        const items = hero.currentStatus.equippedItems.map((i) => service.getItemDetail(i));\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            const itemTraits = item.traits.map((t) => {\r\n                return {\r\n                    id: t.id,\r\n                    name: t.name,\r\n                    description: t.description,\r\n                    type: t.type,\r\n                    behavior: t.behavior,\r\n                    from: item.name,\r\n                };\r\n            });\r\n            traits = traits.concat(itemTraits);\r\n        }\r\n\r\n        return traits;\r\n    };\r\n\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getAllTraits = (hero: Hero): HeroTrait[] =>\r\n        HeroHelper.getItemTraits(hero).concat(hero.currentStatus.permanentTraits).concat(hero.currentStatus.temporaryTraits);\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static calculateAttributesWithModifiers = (hero: Hero): AttributeList => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let strMod = 0,\r\n            dexMod = 0,\r\n            conMod = 0,\r\n            intMod = 0,\r\n            wisMod = 0,\r\n            chaMod = 0,\r\n            luckMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behavior.length; j++) {\r\n                const behavior = allTraits[i].behavior[j];\r\n                switch (behavior.modifierType) {\r\n                    case ModifierType.Strength:\r\n                        strMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Dexterity:\r\n                        dexMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Constitution:\r\n                        conMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Intelligence:\r\n                        intMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Wisdom:\r\n                        wisMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Charisma:\r\n                        chaMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Luck:\r\n                        luckMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attributes = hero.attributes;\r\n        const newAttributeList: AttributeList = {\r\n            strength: { base: attributes.strength.base, bonus: strMod },\r\n            dexterity: { base: attributes.dexterity.base, bonus: dexMod },\r\n            constitution: { base: attributes.constitution.base, bonus: conMod },\r\n            intelligence: { base: attributes.intelligence.base, bonus: intMod },\r\n            wisdom: { base: attributes.wisdom.base, bonus: wisMod },\r\n            charisma: { base: attributes.charisma.base, bonus: chaMod },\r\n            luck: { base: attributes.luck.base, bonus: luckMod },\r\n        };\r\n\r\n        return newAttributeList;\r\n    };\r\n\r\n    public static calculateStatsWithModifiers = (hero: Hero): CalculatedStats => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let armorMod = 0,\r\n            moveSpeedMod = 0,\r\n            meleeAttackMod = 0,\r\n            meleeAttackSpeedMod = 0,\r\n            meleeDamageMod = 0,\r\n            rangedAttackMod = 0,\r\n            rangedAttackSpeedMod = 0,\r\n            rangedDamageMod = 0,\r\n            spellAttackMod = 0,\r\n            spellAttackSpeedMod = 0,\r\n            spellDamageMod = 0,\r\n            hpMod = 0,\r\n            spellResistMod = 0,\r\n            damageResistMod = 0;\r\n        let status = 0;\r\n        let meleeEffectId = hero.stats.meleeEffectId;\r\n        let rangedEffectId = hero.stats.rangedEffectId;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behavior.length; j++) {\r\n                const behavior = allTraits[i].behavior[j];\r\n                switch (behavior.modifierType) {\r\n                    case ModifierType.Armor:\r\n                        armorMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MoveSpeed:\r\n                        moveSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeAttack:\r\n                        meleeAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeAttackSpeed:\r\n                        meleeAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeDamage:\r\n                        meleeDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.MeleeEffect:\r\n                        meleeEffectId = behavior.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedEffect:\r\n                        rangedEffectId = behavior.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttack:\r\n                        rangedAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.RangedAttackSpeed:\r\n                        rangedAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.RangedDamage:\r\n                        rangedDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellAttack:\r\n                        spellAttackMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellAttackSpeed:\r\n                        spellAttackSpeedMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellDamage:\r\n                        spellDamageMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.HitPoints:\r\n                        hpMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.SpellResistance:\r\n                        spellResistMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.DamageResistance:\r\n                        damageResistMod += parseInt(behavior.modifierValue);\r\n                        break;\r\n                    case ModifierType.Status:\r\n                        status |= parseInt(behavior.modifierValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const stats = hero.stats;\r\n        const service = new EffectTableServiceStatic();\r\n        const meleeEffect = service.getEffect(stats.meleeEffectId);\r\n        const rangedEffect = service.getEffect(stats.rangedEffectId);\r\n        const meleeEffectAttackModifier = HeroHelper.getModifier(hero, meleeEffect?.attackModifier);\r\n        const rangedEffectAttackModifier = HeroHelper.getModifier(hero, rangedEffect?.attackModifier);\r\n\r\n        const newStats: CalculatedStats = {\r\n            // TODO\r\n            status: status,\r\n\r\n            armour: stats.armour + armorMod,\r\n\r\n            meleeAttackBonus: stats.meleeAttackBonus + meleeEffectAttackModifier + meleeAttackMod,\r\n            meleeAttackSpeed: stats.meleeAttackSpeed + meleeAttackSpeedMod,\r\n            meleeDamageBonus: stats.meleeAttackBonus + meleeDamageMod,\r\n            meleeEffectId: meleeEffectId,\r\n\r\n            rangedAttackBonus: stats.rangedAttackBonus + rangedEffectAttackModifier + rangedAttackMod,\r\n            rangedAttackSpeed: stats.rangedAttackSpeed + rangedAttackSpeedMod,\r\n            rangedDamageBonus: stats.rangedAttackBonus + rangedDamageMod,\r\n            rangedEffectId: stats.rangedEffectId,\r\n\r\n            spellAttackBonus: stats.spellAttackBonus + spellAttackMod,\r\n            spellAttackSpeed: stats.spellAttackSpeed + spellAttackSpeedMod,\r\n            spellDamageBonus: stats.spellDamageBonus + spellDamageMod,\r\n\r\n            spells: hero.spells.filter(s => hero.currentStatus.lostSpells.indexOf(s) < 0),\r\n            moveSpeed: stats.moveSpeed + moveSpeedMod,\r\n            maxHitPoints: stats.maxHitPoints + hpMod,\r\n            spellResistance: stats.spellResistance + spellResistMod,\r\n            damageResistance: stats.damageResistance + damageResistMod,\r\n        };\r\n\r\n        // TODO: Are there class & level bonuses, or we represent these as traits?\r\n\r\n        return newStats;\r\n    };\r\n\r\n    public static getModifier = (\r\n        hero: Hero,\r\n        modifier: \"str\" | \"dex\" | \"con\" | \"wis\" | \"int\" | \"cha\" | \"luck\" | \"magic\" | \"melee\" | \"ranged\" | \"armor\" | \"level\" | undefined\r\n    ): number => HeroHelper.getStatModifier(hero.stats, hero.attributes, modifier);\r\n\r\n    public static getStatModifier(\r\n        statistics: CalculatedStats,\r\n        attributes: AttributeList,\r\n        modifier: \"str\" | \"dex\" | \"con\" | \"wis\" | \"int\" | \"cha\" | \"luck\" | \"magic\" | \"melee\" | \"ranged\" | \"armor\" | \"level\" | undefined\r\n    ): number {\r\n        switch (modifier) {\r\n            case undefined:\r\n                return 0;\r\n            case \"str\":\r\n                return AttributeHelper.getModifier(attributes.strength);\r\n            case \"dex\":\r\n                return AttributeHelper.getModifier(attributes.dexterity);\r\n            case \"con\":\r\n                return AttributeHelper.getModifier(attributes.constitution);\r\n            case \"wis\":\r\n                return AttributeHelper.getModifier(attributes.wisdom);\r\n            case \"int\":\r\n                return AttributeHelper.getModifier(attributes.intelligence);\r\n            case \"cha\":\r\n                return AttributeHelper.getModifier(attributes.charisma);\r\n            case \"luck\":\r\n                return AttributeHelper.getModifier(attributes.luck);\r\n            case \"magic\":\r\n                return statistics.spellAttackBonus;\r\n            case \"melee\":\r\n                return statistics.meleeAttackBonus;\r\n            case \"ranged\":\r\n                return statistics.rangedAttackBonus;\r\n            case \"armor\":\r\n                return statistics.armour;\r\n            case \"level\":\r\n                throw new Error(\"Not implemented\");\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n}\r\n","import AttackResult from \"../models/AttackResult\";\r\nimport IAttackResult from \"../models/AttackResult\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport DiceRoller from \"../services/DiceRoller\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport HeroHelper from \"./HeroHelper\";\r\n\r\n/** Combat results helper functions */\r\nexport default class CombatHelper {\r\n    private static determineAttackResultShared = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData,\r\n        effectId: string,\r\n        attackBonus: number,\r\n        damageBonus: number\r\n    ): IAttackResult => {\r\n        const targetPos = target.gridPos;\r\n        const attackerPos = attacker.gridPos;\r\n\r\n        if (!attackerPos) throw new Error(\"Attacker missing position\");\r\n        if (!targetPos) throw new Error(\"Target missing position\");\r\n\r\n        const roller = new DiceRoller();\r\n        const attackerDetail = attacker.details;\r\n        const targetDetail = target.details;\r\n\r\n        const resultService = new EffectTableServiceStatic();\r\n        const effect = resultService.getEffect(effectId);\r\n        if (effect === null) {\r\n            throw new Error(\"Can't find effect: \" + effectId);\r\n        }\r\n\r\n        const attackRoll = roller.roll20(seedAttack);\r\n        const attackModifier = HeroHelper.getModifier(attackerDetail, effect.attackModifier);\r\n        const attackValue = attackBonus + attackModifier + attackRoll;\r\n\r\n        console.log(`Attack : ${attackBonus} + ${attackModifier} + ${attackRoll}`);\r\n\r\n        const targetNumber = HeroHelper.getModifier(targetDetail, effect.dodgeWith);\r\n        const isMiss = attackValue < targetNumber;\r\n        const isFumble = attackRoll <= 1;\r\n        const isCritical = attackRoll >= 20;\r\n\r\n        const entry = resultService.getResultEntry(effect, attackRoll, attackValue);\r\n        if (entry === null) {\r\n            throw new Error(\"Can't find effect entry: \" + effectId);\r\n        }\r\n\r\n        // TODO: Use table instead\r\n        if (isFumble) {\r\n            console.log(`${attackerDetail.id} : Funbles`);\r\n            // TODO: Add a fumble table?\r\n            return AttackResult.createFumble(attackerPos);\r\n        }\r\n\r\n        if (isMiss) {\r\n            // Miss\r\n            console.log(\r\n                `${attackerDetail.id} : Miss ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry})`\r\n            );\r\n            return AttackResult.createMiss(targetPos);\r\n        }\r\n\r\n        //console.log(`Effect table : ${effectId} = d${entry.damageDie} x ${entry.damageDieCount} + ${entry.damageModifier}`);\r\n\r\n        // Hit, calculate damage\r\n        let damage = 0;\r\n        for (let i = 0; i < entry.damageDieCount; i++) {\r\n            damage += roller.rollDie(seedDamage, entry.damageDie);\r\n            damage += damageBonus;\r\n            if (entry.damageModifier) {\r\n                damage += HeroHelper.getModifier(attackerDetail, entry.damageModifier);\r\n            }\r\n            //console.log(`Damage total : ${damage}`);\r\n        }\r\n\r\n        console.log(\r\n            `${attackerDetail.id} hits ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry}) for ${damage}`\r\n        );\r\n\r\n        return isCritical ? AttackResult.createCritical(damage, targetPos) : AttackResult.createHit(damage, targetPos);\r\n    };\r\n\r\n    public static determineAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        if (attacker.selectedAttack === \"melee\") \r\n            return CombatHelper.determineMeleeAttackResult(seedAttack, seedDamage, attacker, target);\r\n\r\n        if (attacker.selectedAttack === \"ranged\") \r\n            return CombatHelper.determineRangedAttackResult(seedAttack, seedDamage, attacker, target);\r\n\r\n        return CombatHelper.determineSpellAttackResult(seedAttack, seedDamage, attacker, target, attacker.selectedAttack);\r\n    };\r\n\r\n    public static determineSpellAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData,\r\n        effectId: string\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            effectId,\r\n            attacker.details.stats.spellAttackBonus,\r\n            attacker.details.stats.spellDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineMeleeAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            attacker.details.stats.meleeEffectId,\r\n            attacker.details.stats.meleeAttackBonus,\r\n            attacker.details.stats.meleeDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineRangedAttackResult = (\r\n        seedAttack: number,\r\n        seedDamage: number,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        return CombatHelper.determineAttackResultShared(\r\n            seedAttack,\r\n            seedDamage,\r\n            attacker,\r\n            target,\r\n            attacker.details.stats.rangedEffectId,\r\n            attacker.details.stats.rangedAttackBonus,\r\n            attacker.details.stats.rangedDamageBonus\r\n        );\r\n    };\r\n\r\n    public static determineMaxRange = (attacker: CharacterEncounterData): number => {\r\n        var effectId;\r\n        switch (attacker.selectedAttack) {\r\n            case \"melee\":\r\n                effectId = attacker.details.stats.meleeEffectId;\r\n                break;\r\n            case \"ranged\":\r\n                effectId = attacker.details.stats.rangedEffectId;\r\n                break;\r\n            default:\r\n                effectId = attacker.selectedAttack;\r\n                break;\r\n        }\r\n        const resultService = new EffectTableServiceStatic();\r\n        const effect = resultService.getEffect(effectId);\r\n        if (effect === null) {\r\n            throw new Error(\"Can't find effect: \" + effectId);\r\n        }\r\n        const baseRange = effect.range;\r\n\r\n        // TODO: We might allow traits to increase or decrease range?\r\n        return baseRange;\r\n    };\r\n}\r\n","import CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { NpcGridEntry } from \"../models/EncounterDetail\";\r\n\r\nexport default class CombatPositionHelper {\r\n    /** Update the hero or foe position */\r\n    public static updatePosition = (\r\n        newPosition: CharacterEncounterData,\r\n        oldPositions: CharacterEncounterData[]\r\n    ): CharacterEncounterData[] => {\r\n        // We need a new array here, or the update is not detected\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            newPositions.push(oldPositions[i].gridEntry === newPosition.gridEntry ? newPosition : oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Remove the position of the foe or hero (death of fled) */\r\n    public static removePosition = (entry: NpcGridEntry, oldPositions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            if (oldPositions[i].gridEntry !== entry) newPositions.push(oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Get the position of a hero or foe by the grid entry */\r\n    public static getPositionByEntry = (entry: NpcGridEntry, positions: CharacterEncounterData[]): CharacterEncounterData | undefined => {\r\n        const index = positions.findIndex((h) => h.gridEntry === entry);\r\n        if (index < 0 || index >= positions.length) {\r\n            console.error(\"Can't find character : \" + entry);\r\n            return undefined;\r\n        }\r\n        return positions[index];\r\n    };\r\n\r\n    /** Clear all hero/foe movement queues */\r\n    public static clearAllQueues = (positions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < positions.length; i++) {\r\n            newPositions.push(positions[i]); // TODO: Should we deep clone here?\r\n            newPositions[i].vertexQueue.clear();\r\n        }\r\n        return newPositions;\r\n    };\r\n}\r\n","import CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { TokenGridEntry } from \"../models/EncounterDetail\";\r\n\r\n/** Trim the move path to just the max move allowed */\r\nexport default class CombatActionHelper {\r\n    public static trimPathToMove = (path: number[][], maxPath: number): number[][] => {\r\n        let remainderPathLength = path.length - maxPath * 2 - 1;\r\n        if (remainderPathLength <= 0) remainderPathLength = 0; // Always remove the start grid item\r\n\r\n        return path.slice(remainderPathLength);\r\n    };\r\n\r\n    /**\r\n     * Build an action to attack foe, or move toward them if too far away\r\n     */\r\n    public static buildAttack = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        // TODO: Trim path to max ranged distance. Maybe simple trim by length to begin with\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n        const isAttack = path.length === movePath.length;\r\n\r\n        if (isAttack) {\r\n            console.log(`${attacker.gridEntry} ${attacker.selectedAttack} attack ${target} (${path.length})`);\r\n        } else {\r\n            console.log(`${attacker.gridEntry} move towards ${target} (${path.length})`);\r\n        }\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: isAttack ? attacker.selectedAttack : \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n\r\n    /**\r\n     * Build an action to melee attack foe, or move toward them if too far away\r\n     */\r\n    public static buildMove = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n\r\n        console.log(`${attacker.gridEntry} melee attack ${target} (${path.length})`);\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype IsoMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst IsoMarker: React.FunctionComponent<IsoMarkerProps> = (props: IsoMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            position: \"absolute\",\r\n        },\r\n        icon: {\r\n            position: \"relative\",\r\n        },\r\n        dot: {\r\n            height: \"35px\",\r\n            width: \"65px\",\r\n            backgroundColor: \"#bbb\",\r\n            borderRadius: \"50%\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            bottom: \"18px\",\r\n            left: \"14px\",\r\n            zIndex: -1,\r\n        },\r\n        dotActive: {\r\n            height: \"35px\",\r\n            width: \"65px\",\r\n            backgroundColor: \"#d4af37\",\r\n            borderRadius: \"50%\",\r\n            display: \"inline-block\",\r\n            position: \"absolute\",\r\n            bottom: \"18px\",\r\n            left: \"14px\",\r\n            zIndex: -1,\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.currentStatus.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root} style={{ top: hero.details.tokenOffset[1], left: hero.details.tokenOffset[0] }}>\r\n                {/* <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                /> */}\r\n                <img src={hero.details.tokenUrl} className={classes.icon} alt={hero.details.name} />\r\n                <span className={isActive ? classes.dotActive : classes.dot} />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default IsoMarker;\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds, LatLngTuple } from \"leaflet\";\r\nimport { Map, ImageOverlay } from \"react-leaflet\";\r\nimport EncounterDialog from \"./EncounterDialog\";\r\n\r\n// Models\r\nimport EncounterDetail, { EncounterGridEntry, FoeGridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport HeroMarker from \"./markers/HeroMarker\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\n\r\n// Markers\r\nimport GridMarker from \"./markers/GridMarker\";\r\nimport FoeMarker from \"./markers/FoeMarker\";\r\nimport CombatPath from \"./encounter-map/CombatPath\";\r\nimport DamageDisplay from \"./markers/DamageDisplay\";\r\nimport CombatIndicator from \"./CombatIndicator\";\r\nimport ActionBar from \"./ActionBar\";\r\n\r\n// Helpers\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport CombatHelper from \"../helpers/CombatHelper\";\r\nimport CombatPositionHelper from \"../helpers/CombatPositionHelper\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport CombatActionHelper from \"../helpers/CombatActionHelper\";\r\nimport AttackResult from \"../models/AttackResult\";\r\nimport IsoMarker from \"./markers/IsoMarker\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport DiceSeedTracker from \"../services/DiceSeedTracker\";\r\n\r\ntype EncounterMapProps = {\r\n    /** The encounter data */\r\n    encounter: EncounterDetail;\r\n\r\n    /** The heroes detailed information, referenced by grid-entry */\r\n    heroes: [HeroGridEntry, Hero][];\r\n\r\n    /** The foes detailed information, referenced by grid-entry */\r\n    foes: [FoeGridEntry, Hero][];\r\n\r\n    /** If true, show a helper grid */\r\n    showGrid: boolean;\r\n\r\n    /** The inititive scores for heroes & foes */\r\n    initiatives: [string, NpcGridEntry, number][];\r\n};\r\n\r\ntype EncounterParams = {\r\n    useTokens?: string;\r\n};\r\n\r\nconst EncounterMap: React.FunctionComponent<EncounterMapProps> = (props: EncounterMapProps): JSX.Element => {\r\n    const { encounter } = props;\r\n\r\n    const pathColor = props.encounter.pathColor ?? \"white\";\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n    const {\r\n        gridToDisplayTuple,\r\n        gridToDisplayCenterTuple,\r\n        gridToDisplayCenter,\r\n        displayToGrid,\r\n        getInitialPositions,\r\n        mergeGridEntry,\r\n    } = GridHelpers;\r\n\r\n    // The current (grid) position of the hero markers\r\n    const [heroData, setHeroData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.heroes));\r\n    const [foeData, setFoeData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.foes));\r\n\r\n    // The positions to display damage markers\r\n    const [damagePos, setDamagePos] = React.useState<AttackResult[]>([]);\r\n\r\n    // The path to the hovered vertex (display when hovering over the grid)\r\n    const [path, setPath] = React.useState<LatLng[]>([]);\r\n\r\n    // The current grid state\r\n    const [tokenGrid, setTokenGrid] = React.useState<TokenGridEntry[][]>(encounter.tokenGrid);\r\n    // TODO: We could go further and custom create a network of these grid points and use the other pathfindind algorithm?\r\n\r\n    // The current ink encouter begind displayed\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // The ID of the currently selected hero. Inital hero is selected on initiative score\r\n    const [selectedHero, setSelectedHero] = React.useState<NpcGridEntry | undefined>(undefined);\r\n\r\n    // Is the current move an attack?\r\n    const [attackTarget, setAttackTarget] = React.useState<TokenGridEntry | undefined>(undefined);\r\n\r\n    // TODO: Is this a state - This a state anti-pattern\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][]>(props.initiatives);\r\n\r\n    const [currentAction, setCurrentAction] = React.useState<CharacterAction | undefined>(undefined);\r\n\r\n    const [seed, setSeed] = React.useState<number>(DiceSeedTracker.fromEncounterId(encounter.id));\r\n\r\n    // Is the encounter is combat mode?\r\n    const isCombat = (): boolean => foeData.length > 0;\r\n\r\n    // The max length of a path\r\n    const maxPath = isCombat() ? 3 : 20;\r\n\r\n    const params = useParams<EncounterParams>();\r\n\r\n    // This effect tracks when the end of the current character's turn happens\r\n    React.useEffect(() => {\r\n        // Start the next character's turn\r\n        const startNextActor = () => {\r\n            const initiativeTracker = new InitiativeTracker(initiatives);\r\n            const newNextToMove = initiativeTracker.getNextInitiative();\r\n            const name = newNextToMove[0];\r\n            const entry = newNextToMove[1];\r\n\r\n            console.log(`** Next to move ${name} (${entry})`);\r\n\r\n            // console.log(\" - \" + initiativeTracker.displayInitiatives().join(\"\\n- \"));\r\n\r\n            const gridDisplay = GridHelpers.displayGrid(tokenGrid);\r\n            console.log(gridDisplay.join(\"\\n\"));\r\n\r\n            setSelectedHero(entry);\r\n\r\n            if (!GridHelpers.isHero(entry)) {\r\n                // TODO: Foe has their action\r\n                const foeMatch = foeData.find((f) => f.gridEntry === entry);\r\n                if (foeMatch && foeMatch.gridPos) {\r\n                    const closestHeroPath = GridHelpers.findNearestHero(tokenGrid, encounter.grid, foeMatch.gridPos);\r\n                    if (closestHeroPath !== undefined) {\r\n                        const newCharacterAction = CombatActionHelper.buildAttack(\r\n                            foeMatch,\r\n                            closestHeroPath[0],\r\n                            closestHeroPath[1],\r\n                            maxPath\r\n                        );\r\n                        if (newCharacterAction.action === \"melee\") {\r\n                            setAttackTarget(newCharacterAction.target);\r\n                        }\r\n                        setCurrentAction(newCharacterAction);\r\n                    } else {\r\n                        console.error(`Foe : ${foeMatch.gridEntry} has no hero accessible`);\r\n                        const newInitiatives = initiativeTracker.processDelay(name, foeMatch.details.stats.moveSpeed);\r\n                        setInitiatives(newInitiatives);\r\n                        startNextActor(); // Trigger next to move\r\n                    }\r\n                } else {\r\n                    console.error(\"Can't find matching foe : \" + name);\r\n                    const newInitiatives = initiativeTracker.remove(name);\r\n                    setInitiatives(newInitiatives);\r\n                    startNextActor(); // Trigger next to move\r\n                }\r\n                //startNextActor(); // Trigger next to move\r\n            }\r\n        };\r\n\r\n        const executeCurrentAction = (currentAction: CharacterAction) => {\r\n            try {\r\n                const { id, path, action } = currentAction;\r\n\r\n                const numMoves = Math.ceil((path.length - 1) / maxPath);\r\n                console.log(`Moving ${id} (${currentAction.character}) distance ${path.length - 1} with ${numMoves} moves`);\r\n\r\n                const heroPos = getPosition(currentAction.character);\r\n                if (heroPos === undefined) {\r\n                    console.error(\"Can't find hero for action : \" + id);\r\n                    return;\r\n                }\r\n\r\n                // TODO: Chech nodes for encounters\r\n                let nextVertex = path.pop();\r\n                while (nextVertex) {\r\n                    //console.log(`Queue vertex ${nextVertex[0]}, ${nextVertex[1]}`);\r\n                    heroPos.vertexQueue.push([nextVertex[0], nextVertex[1]]);\r\n                    nextVertex = path.pop();\r\n                }\r\n\r\n                const newPosition = new CharacterEncounterData(\r\n                    heroPos.details,\r\n                    heroPos.gridEntry,\r\n                    heroPos.selectedAttack,\r\n                    heroPos.gridPos,\r\n                    heroPos.displayPos,\r\n                    heroPos.vertexQueue\r\n                );\r\n                setCharacterPosition(newPosition);\r\n\r\n                // Calculates new initiatives after move\r\n                const initiativeTracker = new InitiativeTracker(initiatives);\r\n                let delay = numMoves * heroPos.details.stats.moveSpeed;\r\n                // TODO: Make based on spell or attack table?\r\n                if (action === \"melee\") delay += heroPos.details.stats.meleeAttackSpeed;\r\n                else if (action === \"ranged\") delay += heroPos.details.stats.rangedAttackSpeed;\r\n                else delay += heroPos.details.stats.spellAttackSpeed;\r\n                const newInitiatives = initiativeTracker.processDelay(id, delay);\r\n                setInitiatives(newInitiatives);\r\n\r\n                // Trigger the move to the next vertex\r\n                handleMoveEnd(newPosition);\r\n            } finally {\r\n                // Clear the current action so that we don't run again\r\n                setCurrentAction(undefined);\r\n            }\r\n        };\r\n\r\n        // console.log(\"useEffect end of turn\");\r\n        if (!selectedHero) {\r\n            startNextActor();\r\n        }\r\n        if (currentAction) {\r\n            executeCurrentAction(currentAction);\r\n        }\r\n    }, [selectedHero, currentAction]);\r\n\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    /** Clicked on a hero to move if in combat mode */\r\n    const onHeroClick = (hero: CharacterEncounterData) => {\r\n        console.log(\"Select hero : \" + hero.details.id);\r\n        setSelectedHero(hero.gridEntry);\r\n    };\r\n\r\n    /** Get the position of a hero or foe */\r\n    const getPosition = (entry?: NpcGridEntry): CharacterEncounterData | undefined =>\r\n        entry\r\n            ? GridHelpers.isHero(entry)\r\n                ? CombatPositionHelper.getPositionByEntry(entry, heroData)\r\n                : CombatPositionHelper.getPositionByEntry(entry, foeData)\r\n            : undefined;\r\n\r\n    /** Clear hero & foe movement queues */\r\n    const clearAllQueues = () => {\r\n        setHeroData(CombatPositionHelper.clearAllQueues(heroData));\r\n        setFoeData(CombatPositionHelper.clearAllQueues(foeData));\r\n    };\r\n\r\n    /** Update the hero or foe position */\r\n    const setCharacterPosition = (position: CharacterEncounterData) => {\r\n        // console.log(`setCharacterPosition : ${position.details.id}`);\r\n        if (position.isHero()) {\r\n            setHeroData(CombatPositionHelper.updatePosition(position, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.updatePosition(position, foeData));\r\n        }\r\n    };\r\n\r\n    /** Remove the hero or foe position due to death or fleeing */\r\n    const removeCharacter = (character: CharacterEncounterData) => {\r\n        const initiativeTracker = new InitiativeTracker(initiatives);\r\n        const newInitiatives = initiativeTracker.remove(character.details.id);\r\n        setInitiatives(newInitiatives);\r\n        if (GridHelpers.isHero(character.gridEntry)) {\r\n            setHeroData(CombatPositionHelper.removePosition(character.gridEntry, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.removePosition(character.gridEntry, foeData));\r\n        }\r\n    };\r\n\r\n    /** Clicked on the map (not on grid) */\r\n    const onMapClick = (e: any) => console.log(`Clicked at: ${e.latlng}, grid ${displayToGrid(e.latlng, encounter)}`);\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (character: CharacterEncounterData) => {\r\n        setPath([]);\r\n\r\n        //console.log(`handleMoveEnd : ${character.details.id}`);\r\n\r\n        const targetVertex = character.vertexQueue.pop();\r\n        if (targetVertex !== undefined) {\r\n            const gridPos = latLng(targetVertex[1], targetVertex[0]);\r\n            const displayPos = gridToDisplayCenter(gridPos, encounter);\r\n\r\n            // Update the token grid\r\n            if (character.gridPos) {\r\n                // const oldEntry = tokenGrid[prevPos.gridPos.lat][prevPos.gridPos.lng];\r\n                tokenGrid[character.gridPos.lat][character.gridPos.lng] = \" \";\r\n                tokenGrid[gridPos.lat][gridPos.lng] = character.gridEntry;\r\n\r\n                console.log(\r\n                    `Move end: ${character.details.id} (${character.vertexQueue.length()} queued) next, ${targetVertex[0]},${\r\n                        targetVertex[1]\r\n                    }, previous position : ${character.gridPos.lng},${character.gridPos.lat}`\r\n                );\r\n            } else {\r\n                console.error(`Can't find current grid pos ${targetVertex[0]},${targetVertex[1]}`);\r\n                return;\r\n            }\r\n\r\n            const newPosition = new CharacterEncounterData(\r\n                character.details,\r\n                character.gridEntry,\r\n                character.selectedAttack,\r\n                gridPos,\r\n                displayPos,\r\n                character.vertexQueue\r\n            );\r\n            setCharacterPosition(newPosition);\r\n\r\n            // Stop if a vertex with an an encounter is hit\r\n            const entry = encounter.grid[gridPos.lat][gridPos.lng];\r\n            if (GridHelpers.isEncounter(entry)) {\r\n                const encounterId = encounter.encounters[entry as EncounterGridEntry];\r\n                if (encounterId) {\r\n                    console.log(`Encounter : ${encounterId}`);\r\n                    clearAllQueues();\r\n                    setEncounterId(encounterId);\r\n                }\r\n            }\r\n\r\n            // Check if the current hero has finished their move\r\n            if (character.vertexQueue.length() > 0) {\r\n                //console.log(\"Continuing move\");\r\n                return;\r\n            }\r\n        } else {\r\n            handleAttack(character);\r\n\r\n            // Trigger the end of turn effect for this hero\r\n            setSelectedHero(undefined);\r\n            setTokenGrid(tokenGrid);\r\n        }\r\n    };\r\n\r\n    const handleAttack = (character: CharacterEncounterData) => {\r\n        if (attackTarget) {\r\n            // Get the attacker & target\r\n            console.log(`Finished move : ${character.details.id} with attack`);\r\n            const targetMatch = getPosition(attackTarget as NpcGridEntry);\r\n            if (targetMatch && targetMatch.displayPos) {\r\n                // Calculate the attack roll seeds\r\n                const attackSeed = DiceSeedTracker.next(seed);\r\n                const damageSeed = DiceSeedTracker.next(seed);\r\n                // Set the seed for the next rolls\r\n                setSeed(damageSeed);\r\n\r\n                let results = CombatHelper.determineAttackResult(attackSeed, damageSeed, character, targetMatch);\r\n                if (results.result !== \"fumble\" && results.result !== \"miss\") {\r\n                    const newFoeDetails = { ...targetMatch };\r\n\r\n                    // Reduce hit points & check for death\r\n                    newFoeDetails.details.currentStatus.currentHitPoints -= results.damage;\r\n                    const isDeath = newFoeDetails.details.currentStatus.currentHitPoints <= 0;\r\n\r\n                    if (isDeath) {\r\n                        console.log(`DEAD : ${newFoeDetails.details.id}`);\r\n                        if (newFoeDetails.gridPos) results = AttackResult.createDeath(results.damage, newFoeDetails.gridPos);\r\n                        removeCharacter(targetMatch);\r\n                        if (targetMatch.gridPos) tokenGrid[targetMatch.gridPos.lat][targetMatch.gridPos.lng] = \" \";\r\n                    } else {\r\n                        setCharacterPosition(newFoeDetails);\r\n                    }\r\n                }\r\n                addDamagePos(results);\r\n            } else console.error(`Can't find foe at : ${attackTarget}`);\r\n\r\n            setAttackTarget(undefined);\r\n        } else {\r\n            console.log(`Finished move : ${character.details.id} no attack`);\r\n        }\r\n    };\r\n\r\n    const addDamagePos = (result: AttackResult) => {\r\n        setDamagePos((state) => state.concat(result));\r\n    };\r\n\r\n    const showHoverPath = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n        if (heroPos.isMoving()) return;\r\n\r\n        const range = isFoe ? CombatHelper.determineMaxRange(heroPos) : 0;\r\n\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, latLng(hoverGridPos), range);\r\n        const displayPath = fullPath.map((item) => gridToDisplayCenterTuple([item[1], item[0]], encounter));\r\n        setPath(displayPath);\r\n    };\r\n\r\n    const onHover = (hoverGridPos: [number, number]) => showHoverPath(hoverGridPos, false);\r\n\r\n    const onHoverEnd = (hoverGridPos: [number, number]) => setPath([]);\r\n\r\n    const onFoeHover = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            showHoverPath([foe.gridPos.lat, foe.gridPos.lng], true);\r\n        }\r\n    };\r\n\r\n    const onFoeHoverEnd = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            onHoverEnd([foe.gridPos.lat, foe.gridPos.lng]);\r\n        }\r\n    };\r\n\r\n    const onClickGridMarker = (gridPos: [number, number]) => processMarkerAction(gridPos, false);\r\n\r\n    /** Clicked on a foe to attack */\r\n    const onFoeClick = (position: CharacterEncounterData) => {\r\n        if (position.gridPos) processMarkerAction([position.gridPos.lat, position.gridPos.lng], true);\r\n    };\r\n\r\n    const processMarkerAction = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n\r\n        clearAllQueues();\r\n        setDamagePos([]);\r\n\r\n        const range = CombatHelper.determineMaxRange(heroPos);\r\n\r\n        const endPos = latLng(hoverGridPos);\r\n        const endToken = tokenGrid[endPos.lat][endPos.lng];\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, endPos, range);\r\n\r\n        const newAction = !isFoe\r\n            ? CombatActionHelper.buildMove(heroPos, endToken, fullPath, maxPath)\r\n            : CombatActionHelper.buildAttack(heroPos, endToken, fullPath, maxPath);\r\n\r\n        if (newAction.action !== \"move\") {\r\n            setAttackTarget(endToken);\r\n        }\r\n\r\n        setCurrentAction(newAction);\r\n\r\n        console.log(`Set current action : ${newAction.id} ${newAction.action}`);\r\n    };\r\n\r\n    const selectedAttackChanged = (id: string) => {\r\n        const position = getPosition(selectedHero);\r\n        if (!position) return;\r\n\r\n        position.selectedAttack = id;\r\n        setCharacterPosition(position);\r\n    };\r\n\r\n    const renderHeroes = () => {\r\n        return params.useTokens ?? false\r\n            ? heroData.map((hero) => (\r\n                  <IsoMarker\r\n                      hero={hero}\r\n                      isActive={selectedHero === hero.gridEntry}\r\n                      duration={300}\r\n                      onMoveEnd={handleMoveEnd}\r\n                      onClick={onHeroClick}\r\n                  />\r\n              ))\r\n            : heroData.map((hero) => (\r\n                  <HeroMarker\r\n                      hero={hero}\r\n                      isActive={selectedHero === hero.gridEntry}\r\n                      duration={300}\r\n                      onMoveEnd={handleMoveEnd}\r\n                      onClick={onHeroClick}\r\n                  />\r\n              ));\r\n    };\r\n\r\n    const renderFoes = () => {\r\n        return foeData.map((foe) => (\r\n            <FoeMarker\r\n                foe={foe}\r\n                attackIcon={getPosition(selectedHero)?.selectedAttack ?? \"melee\"}\r\n                isActive={selectedHero === foe.gridEntry}\r\n                duration={300}\r\n                onMoveEnd={handleMoveEnd}\r\n                onClick={onFoeClick}\r\n                onHover={onFoeHover}\r\n                onHoverEnd={onFoeHoverEnd}\r\n            />\r\n        ));\r\n    };\r\n\r\n    const renderGridMarkers = (encounter: EncounterDetail): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        for (let x = 0; x < encounter.grid.length; x++) {\r\n            for (let y = 0; y < encounter.grid.length; y++) {\r\n                markers.push(\r\n                    <GridMarker\r\n                        gridPos={[x, y]}\r\n                        entry={mergeGridEntry(encounter.tokenGrid[x][y], encounter.grid[x][y])}\r\n                        gridToDisplayFunc={(pos: LatLngTuple) => gridToDisplayTuple(pos, encounter)}\r\n                        onHover={onHover}\r\n                        onHoverEnd={onHoverEnd}\r\n                        onClick={onClickGridMarker}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    const renderDamageMarkers = (damages: AttackResult[]): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        // Map damage markers to dsipaly positions\r\n        const displayResults = damages.map((dam) => new AttackResult(dam.result, dam.damage, gridToDisplayCenter(dam.position, encounter)));\r\n        for (let i = 0; i < displayResults.length; i++) {\r\n            markers.push(<DamageDisplay result={displayResults[i]} />);\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    // Note: Order of markers matters for z-index\r\n    return (\r\n        <div>\r\n            <CombatIndicator isCombat={isCombat()} initiative={initiatives[0][2]} />\r\n            <ActionBar\r\n                spells={getPosition(selectedHero)?.details.stats.spells ?? []}\r\n                selected={getPosition(selectedHero)?.selectedAttack ?? \"melee\"}\r\n                onSelect={selectedAttackChanged}\r\n            />\r\n            <Map\r\n                crs={CRS.Simple}\r\n                zoom={0}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={onMapClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                <ImageOverlay url={encounter.imageUrl} bounds={bounds} />\r\n                <CombatPath path={path} pathColor={pathColor} move={maxPath} />\r\n                {renderGridMarkers(encounter)}\r\n                {renderHeroes()}\r\n                {renderFoes()}\r\n                {renderDamageMarkers(damagePos)}\r\n            </Map>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterMap;\r\n","import AttributeHelper from \"../helpers/AttributeHelper\";\r\nimport FoeData from \"../models/character/FoeData\";\r\nimport Hero, { AbilityFlags } from \"../models/character/Hero\";\r\nimport thugContent from \"./npcs/thug.json\";\r\n\r\nexport default class MockNpcService {\r\n    \r\n    getFoeDetail(id: string): Hero {\r\n        const foe = this.getFoeData(id);\r\n\r\n        const clone = (({ attributes, ...o }) => o)(foe) as Hero;\r\n        clone.attributes = AttributeHelper.convertSimpleToComplex(foe.attributes);\r\n        clone.currentStatus = {\r\n            lostSpells: [],\r\n            temporaryTraits: [],\r\n            permanentTraits: [],\r\n            currentHitPoints: foe.stats.maxHitPoints,\r\n            equippedItems: [],\r\n        };\r\n        clone.abilities = AbilityFlags.None;\r\n        clone.description = \"\";\r\n        clone.background = \"\";  \r\n        return clone;\r\n    }\r\n\r\n    private getFoeData(id: string): FoeData {\r\n        switch (id) {\r\n            case \"thug\":\r\n            default:\r\n                return thugContent as FoeData;\r\n        }\r\n    }\r\n}\r\n","export default class ArrayHelper {\r\n    /*\r\n     * Take the first N items from an array\r\n     */\r\n    public static take<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        if (count > array.length) return clonedArray;\r\n        clonedArray.splice(count);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Take the last N items from an array\r\n     */\r\n    public static takeLast<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        const offset = clonedArray.length - count - 1;\r\n        if (offset > array.length) return clonedArray;\r\n        clonedArray.splice(0, offset);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Remove duplicates from an array\r\n     */\r\n    public static removeDuplicates<T>(array: T[]): Array<T> {\r\n        function onlyUnique(value: T, index: number, self: Array<T>) {\r\n            return self.indexOf(value) === index;\r\n        }\r\n\r\n        return array.filter(onlyUnique);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport EncounterDetail, { FoeGridEntry, HeroGridEntry, NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport EncounterMap from \"./EncounterMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Hero from \"../models/character/Hero\";\r\nimport MockNpcService from \"../services/MockNpcService\";\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport GameState from \"../models/GameState\";\r\n\r\ntype EncounterMapLoaderProps = {\r\n    encounterId: string;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst EncounterMapLoader: React.FunctionComponent<EncounterMapLoaderProps> = (props: EncounterMapLoaderProps): JSX.Element => {\r\n    const [encounter, setEncounter] = React.useState<EncounterDetail | undefined>(undefined);\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][] | undefined>(undefined);\r\n\r\n    // The heroe detailed information\r\n    const [heroes, setHeroes] = React.useState<[HeroGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    // The foe detailed information, referenced my token entries so that we can keep track of each foe instamce\r\n    const [foes, setFoes] = React.useState<[FoeGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEncounter = () => {\r\n            const service = new MockDetailedEncounterService();\r\n            const encounterData = service.getEncounterDetail(props.encounterId);\r\n            if (!encounterData) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n            setEncounter(encounterData);\r\n\r\n            // Load heroes\r\n            const partyService = new MockPartyService();\r\n            const newHeroes = partyService.getParty();\r\n            if (!newHeroes) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n\r\n            const heroEntries: [HeroGridEntry, Hero][] = [\r\n                [\"A\", newHeroes[0]],\r\n                [\"B\", newHeroes[1]],\r\n                [\"C\", newHeroes[2]],\r\n                [\"D\", newHeroes[3]],\r\n            ];\r\n\r\n            setHeroes(heroEntries);\r\n\r\n            // Load foes\r\n            const foeEntries = Object.entries(encounterData.npcs);\r\n            const foeIds = ArrayHelper.removeDuplicates(foeEntries.map((f) => f[1]));\r\n            const npcService = new MockNpcService();\r\n\r\n            const newFoes = foeIds.map((id) => npcService.getFoeDetail(id));\r\n            const foeInstances: [FoeGridEntry, Hero][] = [];\r\n            for (let i = 0; i < foeEntries.length; i++) {\r\n                const foeData = foeEntries[i];\r\n                const foe = newFoes.find((f) => f.id === foeData[1]);\r\n                if (foe) {\r\n                    // Add a clone of the foe data referenced by grid location so that we can track for instance stats separately\r\n                    const foeDeepClone: Hero = JSON.parse(JSON.stringify(foe)); // Was { ...foe }\r\n                    foeInstances.push([foeData[0] as FoeGridEntry, foeDeepClone]);\r\n                }\r\n            }\r\n            setFoes(foeInstances);\r\n\r\n            // Generate some random initial initiatives\r\n            const initiatives: [string, NpcGridEntry, number][] = InitiativeTracker.buildInitial(\r\n                encounterData.id,\r\n                heroEntries,\r\n                foeInstances\r\n            );\r\n            console.log(\" - \" + new InitiativeTracker(initiatives).displayInitiatives().join(\"\\n- \"));\r\n            setInitiatives(initiatives);\r\n        };\r\n\r\n        if (encounter == null) {\r\n            loadEncounter();\r\n        }\r\n    });\r\n\r\n    if (!encounter || !initiatives || !heroes || !foes) return <LoadingProgress />;\r\n\r\n    return <EncounterMap encounter={encounter} heroes={heroes} foes={foes} showGrid={true} initiatives={initiatives} />;\r\n};\r\n\r\nexport default EncounterMapLoader;\r\n","import React from \"react\";\r\n\r\n// Pathfinding imports\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport GameState from \"../models/GameState\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport OverheadMapLoader from \"../components/OverheadMapLoader\";\r\nimport EncounterMapLoader from \"../components/EncounterMapLoader\";\r\n\r\nconst MapPage: React.FunctionComponent = () => {\r\n    let [gameState, setGameState] = React.useState<GameState | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of game state data\r\n        const loadGameState = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newGameState = stateService.getState();\r\n            if (!newGameState) {\r\n                console.error(`No game state data`);\r\n                return;\r\n            }\r\n\r\n            setGameState(newGameState);\r\n        };\r\n\r\n        if (gameState == null) {\r\n            loadGameState();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n        console.log(`New map : ${newState.currentMapId}, ${newState.currentVertextId}, ${newState.currentEncounterId}`);\r\n\r\n        // Save the new map state\r\n        const stateService = new MockGameStateService();\r\n        stateService.setState(newState);\r\n        setGameState(newState);\r\n    };\r\n\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    if (!gameState) return null;\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            {gameState.currentEncounterId ? (\r\n                <EncounterMapLoader encounterId={gameState.currentEncounterId} onNewMap={onNewMap} />\r\n            ) : (\r\n                <OverheadMapLoader startState={gameState} onNewMap={onNewMap} />\r\n            )}\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default MapPage;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventoryProps = {\r\n    items: Item[];\r\n    onEquipItem: (itemId: string) => void;\r\n};\r\n\r\nconst PartyInventory: React.FunctionComponent<PartyInventoryProps> = (props: PartyInventoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, onEquipItem } = props;\r\n\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState<string[]>([]);\r\n\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);\r\n\r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n    const isItemEquipable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n\r\n        const match = items.find((item) => item.id === inventorySelectedIds[0]);\r\n        if (!match) return false; // Error?\r\n\r\n        return match.itemType >= 10;\r\n    };\r\n\r\n    const equipItem = () => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        if (onEquipItem) onEquipItem(inventorySelectedIds[0]);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected()) return \"Please select an inventory item\";\r\n\r\n        return isItemEquipable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={items} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventory;\r\n","import React from \"react\";\r\nimport { makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport Item, { ItemType } from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"7vw\",\r\n        top: \"-1vh\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"7vw\",\r\n        top: \"6.5vh\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"7vw\",\r\n        top: \"14vh\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"7vw\",\r\n        top: \"21.5vh\",\r\n    },\r\n    portraitItemWeapon: {\r\n        left: \"3.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitItemShield: {\r\n        left: \"10.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitNoItemImg: {\r\n        filter: \"brightness(35%)\",\r\n    },\r\n    portraitItemImg: {\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"50%\",\r\n    },\r\n});\r\n\r\ntype EquippedItemsProps = {\r\n    equippedItems: Item[];\r\n};\r\n\r\n/*\r\n* Hero Profile Screen : Display the items that the hero has equipped\r\n*/\r\nconst EquippedItems: React.FunctionComponent<EquippedItemsProps> = (props: EquippedItemsProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const { equippedItems } = props;\r\n\r\n    const headItem = equippedItems.find((item) => item.itemType === ItemType.WearableHead);\r\n    const bodyItem = equippedItems.find((item) => item.itemType === ItemType.WearableBody);\r\n    const armsItem = equippedItems.find((item) => item.itemType === ItemType.WearableArms);\r\n    const feetItem = equippedItems.find((item) => item.itemType === ItemType.WearableFeet);\r\n    const weaponItem = equippedItems.find((item) => item.itemType === ItemType.WeaponMelee1h);\r\n\r\n    return (\r\n        <div className={classes.itemContainer}>\r\n            <Tooltip title={<ItemTooltipContent item={headItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemHelm}`}>\r\n                    {headItem ? (\r\n                        <img src={headItem.imageUrl} className={classes.portraitItemImg} alt=\"helm\" />\r\n                    ) : (\r\n                        <img src=\"images/helm.svg\" className={classes.portraitNoItemImg} alt=\"helm\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={bodyItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}>\r\n                    {bodyItem ? (\r\n                        <img src={bodyItem.imageUrl} className={classes.portraitItemImg} alt=\"breastplate\" />\r\n                    ) : (\r\n                        <img src=\"images/breastplate.svg\" className={classes.portraitNoItemImg} alt=\"breastplate\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={feetItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemLegs}`}>\r\n                    {feetItem ? (\r\n                        <img src={feetItem.imageUrl} className={classes.portraitItemImg} alt=\"legs\" />\r\n                    ) : (\r\n                        <img src=\"images/leg.svg\" className={classes.portraitNoItemImg} alt=\"legs\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={armsItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemGloves}`}>\r\n                    {armsItem ? (\r\n                        <img src={armsItem.imageUrl} className={classes.portraitItemImg} alt=\"gloves\" />\r\n                    ) : (\r\n                        <img src=\"images/glove.svg\" className={classes.portraitNoItemImg} alt=\"gloves\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={weaponItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemWeapon}`}>\r\n                    {weaponItem ? (\r\n                        <img src={weaponItem.imageUrl} className={classes.portraitItemImg} alt=\"weapon\" />\r\n                    ) : (\r\n                        <img src=\"images/sword.svg\" className={classes.portraitNoItemImg} alt=\"weapon\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemShield}`}>\r\n                    <img src=\"images/shield.svg\" className={classes.portraitNoItemImg} alt=\"shield\" />\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EquippedItems;\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\nimport Attribute from \"../models/character/Attribute\";\r\nimport AttributeHelper from \"../helpers/AttributeHelper\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nconst StatisticsBlock: React.FunctionComponent<StatisticsBlockProps> = (props: StatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    const createData = (name: string, calculation: string, modifier: string) => {\r\n        return { name, calculation, modifier };\r\n    };\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.bonus;\r\n    const attributeCalculation = (attribute: Attribute) =>\r\n        attributeTotal(attribute) === attribute.base ? attribute.base.toString() : `${attribute.base} (${attributeTotal(attribute)})`;\r\n    const displayWithPlusMinus = (val: number) => val > 0 ? `+${val}` : val.toString();\r\n    const showModifier = (attribute: Attribute) => displayWithPlusMinus(AttributeHelper.getModifier(attribute));\r\n\r\n    const rows = [\r\n        createData(\"Strength\", attributeCalculation(statistics.strength), showModifier(statistics.strength)),\r\n        createData(\"Dexterity\", attributeCalculation(statistics.dexterity), showModifier(statistics.dexterity)),\r\n        createData(\"Consitution\", attributeCalculation(statistics.constitution), showModifier(statistics.constitution)),\r\n        createData(\"Intelligence\", attributeCalculation(statistics.intelligence), showModifier(statistics.intelligence)),\r\n        createData(\"Wisdom\", attributeCalculation(statistics.wisdom), showModifier(statistics.wisdom)),\r\n        createData(\"Charisma\", attributeCalculation(statistics.charisma), showModifier(statistics.charisma)),\r\n        createData(\"Luck\", attributeCalculation(statistics.strength), showModifier(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Value</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.calculation}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default StatisticsBlock;","import React from \"react\";\r\nimport { Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport LocationSearchingIcon from \"@material-ui/icons/LocationSearching\";\r\n\r\nimport CalculatedStats from \"../models/character/CalculatedStats\";\r\nimport EffectTable from \"../models/EffectTable\";\r\nimport EffectTableServiceStatic from \"../services/EffectTableServiceStatic\";\r\nimport EffectTableEntry from \"../models/EffectTableEntry\";\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\nimport AttributeList from \"../models/character/AttributeList\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        //backgroundColor: theme.palette.background.paper,\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype CalculatedStatisticsBlockProps = {\r\n    statistics: CalculatedStats;\r\n    attributes: AttributeList;\r\n    level: number;\r\n    currentHitPoints: number;\r\n};\r\n\r\ntype EffectResults = {\r\n    meleeEffect: EffectTable;\r\n    meleeEffectEntry: EffectTableEntry;\r\n    rangedEffect: EffectTable;\r\n    rangedEffectEntry: EffectTableEntry;\r\n};\r\n\r\nconst CalculatedStatisticsBlock: React.FunctionComponent<CalculatedStatisticsBlockProps> = (props: CalculatedStatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics, attributes } = props;\r\n\r\n    const [effects, setEffects] = React.useState<EffectResults | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEffects = () => {\r\n            const service = new EffectTableServiceStatic();\r\n            const meleeEffect = service.getEffect(statistics.meleeEffectId);\r\n            const rangedEffect = service.getEffect(statistics.rangedEffectId);\r\n            const meleeEffectEntry = service.getResultEntry(meleeEffect, 15, 15);\r\n            const rangedEffectEntry = service.getResultEntry(rangedEffect, 15, 15);\r\n\r\n            if (meleeEffect && rangedEffect && meleeEffectEntry && rangedEffectEntry)\r\n                setEffects({\r\n                    meleeEffect: meleeEffect,\r\n                    meleeEffectEntry: meleeEffectEntry,\r\n                    rangedEffect: rangedEffect,\r\n                    rangedEffectEntry: rangedEffectEntry,\r\n                });\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (!effects) {\r\n            loadEffects();\r\n        }\r\n    }, [effects]);\r\n\r\n    if (!effects) return null;\r\n\r\n    return (\r\n        <div className={classes.statisticsBlock}>\r\n            <Grid container>\r\n                <Grid item xs={1} md={1}></Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FavoriteIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Hit Points ${props.currentHitPoints} / ${statistics.maxHitPoints}`}\r\n                                secondary={`Level ${props.level}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <SecurityIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Armor Class ${statistics.armour}`}\r\n                                secondary={`Spell Resistance ${statistics.spellResistance}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FastForwardIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack Speed ${statistics.meleeAttackSpeed}`}\r\n                                secondary={`Move Speed ${statistics.moveSpeed}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <LocationSearchingIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack +${statistics.meleeAttackBonus} (${statistics.meleeEffectId} Table)`}\r\n                                secondary={`Damage D${effects.meleeEffectEntry.damageDie} + ${\r\n                                    statistics.meleeDamageBonus +\r\n                                    HeroHelper.getStatModifier(statistics, attributes, effects.meleeEffectEntry.damageModifier)\r\n                                }`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={1} md={1}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CalculatedStatisticsBlock;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/character/Hero\";\r\nimport Item from \"../models/Item\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\nimport MockItemService from \"../services/MockItemService\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nimport PartyInventory from \"../components/PartyInventory\";\r\nimport EquippedItems from \"../components/EquippedItems\";\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport CalculatedStatisticsBlock from \"../components/CalculatedStatisticsBlock\";\r\nimport TraitList from \"../components/TraitList\";\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"91.5vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"56vh\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        //left: \"20%\",\r\n        width: \"18vw\",\r\n        height: \"18vw\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"28px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"34vh\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    right: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n    traitsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n}));\r\n\r\ntype HeroProfileProps = {\r\n    id: string;\r\n};\r\n\r\nconst HeroProfile: React.FunctionComponent<HeroProfileProps> = (props: HeroProfileProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { id } = props;\r\n\r\n    let [hero, setHero] = React.useState<Hero | null>(null);\r\n    let [party, setParty] = React.useState<PartyStatistics | null>(null);\r\n    let [world, setWorld] = React.useState<WorldStatistics | null>(null);\r\n    let [equippedItems, setEquippedItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n    let [currentId, setCurrentId] = React.useState(\"\");\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const partyService = new MockPartyService();\r\n\r\n            // Process special keypress IDs, and re-direct to the correct hero\r\n            switch (id) {\r\n                case \"1\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[0]);\r\n                    return;\r\n                case \"2\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[1]);\r\n                    return;\r\n                case \"3\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[2]);\r\n                    return;\r\n                case \"4\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[3]);\r\n                    return;\r\n            }\r\n\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const newParty = partyService.getPartyStatistics();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            const itemsService = new MockItemService();\r\n            const newItems = itemsService.getItems(newHero.currentStatus.equippedItems);\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n            if (!newItems) {\r\n                console.error(`No items data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n            setEquippedItems(newItems);\r\n        };\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world || !equippedItems || !inventoryItems) return null;\r\n\r\n    const onEquipItem = (itemId: string) => {\r\n        // console.log(`hero '${id}' equips ${itemId}`);\r\n\r\n        // Equip the item\r\n        const heroService = new MockHeroService();\r\n        const removedItemId = heroService.equipItem(id, itemId);\r\n\r\n        // Remove the item from party inventory\r\n        const partyService = new MockPartyService();\r\n        partyService.removeInventoryItem(itemId);\r\n        if (removedItemId) {\r\n            partyService.addInventoryItem(removedItemId);\r\n        }\r\n\r\n        // Force a refresh\r\n        setCurrentId(\"\");\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.characterGrid}>\r\n                <div className={classes.left}>\r\n                    <div className={classes.portrait}>\r\n                        <br />\r\n                        <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                            <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                        </LinkTo>\r\n                        <div className={classes.bannerContainer}>\r\n                            <h1 className=\"banner\">{hero.name}</h1>\r\n                        </div>\r\n                        <div className={classes.itemContainer}>\r\n                            <p>\r\n                                {hero.description} - {StringConverters.alignmentToString(hero.alignment)}\r\n                            </p>\r\n                            <Grid container>\r\n                                <Grid item xs={3}>\r\n                                    <EquippedItems equippedItems={equippedItems} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                                </Grid>\r\n                                <Grid item xs={3}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.inventory}>\r\n                        <br />\r\n                        <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                        <PartyInventory items={inventoryItems} onEquipItem={onEquipItem} />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.right}>\r\n                    <br />\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{hero.background}</p>\r\n                    </div>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <StatisticsBlock statistics={HeroHelper.calculateAttributesWithModifiers(hero)} />\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Other</h1>\r\n                    <CalculatedStatisticsBlock\r\n                        statistics={HeroHelper.calculateStatsWithModifiers(hero)}\r\n                        attributes={hero.attributes}\r\n                        level={hero.level}\r\n                        currentHitPoints={hero.currentStatus.currentHitPoints}\r\n                    />\r\n                    <h1 className={classes.sectionHeading}>Abilities</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{StringConverters.abilitiesToString(hero.abilities)}</p>\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Traits</h1>\r\n                    <Grid container className={classes.traitsBlock}>\r\n                        <Grid item xs={2}></Grid>\r\n                        <Grid item xs={8}>\r\n                            <TraitList traits={HeroHelper.getAllTraits(hero)} />\r\n                        </Grid>\r\n                        <Grid item xs={2}></Grid>\r\n                    </Grid>\r\n                    <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>Reputation {party.reputation}</p>\r\n                        {party.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        {world.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default HeroProfile;\r\n","import React from 'react';\r\n\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport EncounterMapLoader from '../components/EncounterMapLoader';\r\nimport GameState from '../models/GameState';\r\n\r\n/*\r\n* Page for testing encounters\r\n* Actual encounters will be loaded through the main map page tracking the GameState.\r\n*/\r\nconst EncounterPage: React.FunctionComponent = (): JSX.Element => {\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n\r\n        console.log(\"New map : \" + newState.currentMapId + \", \" + newState.currentVertextId);\r\n    };\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <EncounterMapLoader encounterId=\"tavern\" onNewMap={onNewMap} />\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default EncounterPage;\r\n","import Quest from \"../models/Quest\";\r\n\r\nimport SongOfTheSeaQuest from \"./quests/song_of_the_sea.json\";\r\nimport ThereAndBackQuest from \"./quests/there_and_back.json\";\r\n\r\nexport default class MockQuestService {\r\n    getQuestDetail(id: string): Quest {\r\n        switch (id) {\r\n            case \"there_and_back\":\r\n                return ThereAndBackQuest;\r\n            case \"song_of_the_sea\":\r\n            default:\r\n                return SongOfTheSeaQuest;\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Avatar, Card, CardContent, CardHeader, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Quest from \"../models/Quest\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\n\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockQuestService from \"../services/MockQuestService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"../components/LinkTo\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: \"beige\",\r\n    },\r\n    grid: {\r\n        marginTop: \"120px\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"76vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    right: {\r\n        //overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n        margin: \"30px\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    list: {\r\n        padding: \"20px\",\r\n    },\r\n    item: {\r\n        backgroundColor: \"#fafaf0\",\r\n        margin: \"10px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    activeItem: {\r\n        backgroundColor: \"#ffffff\",\r\n        margin: \"10px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    questCard: {\r\n        margin: \"60px 20px\",\r\n        padding: \"30px\",\r\n    },\r\n    questContent: {\r\n        fontFamily: \"Martel\",\r\n    },\r\n}));\r\n\r\ntype QuestsPageProps = {};\r\n\r\nconst QuestsPage: React.FunctionComponent<QuestsPageProps> = (props: QuestsPageProps) => {\r\n    const classes = useStyles();\r\n\r\n    const [quests, setQuests] = React.useState<Quest[] | undefined>(undefined);\r\n    const [activeQuest, setActiveQuest] = React.useState<Quest | undefined>(undefined);\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadQuests = () => {\r\n            const questService = new MockQuestService();\r\n            const partyService = new MockPartyService();\r\n\r\n            const partyQuests = partyService.getQuests();\r\n            const quests: Quest[] = [];\r\n            partyQuests.forEach((partyQuest) => {\r\n                const quest = questService.getQuestDetail(partyQuest.id);\r\n                quests.push(quest);\r\n                if (partyQuest.status === \"current\") {\r\n                    setActiveQuest(quest);\r\n                }\r\n            });\r\n            setQuests(quests);\r\n        };\r\n\r\n        if (!quests) {\r\n            loadQuests();\r\n        }\r\n    });\r\n\r\n    if (quests === undefined) return null;\r\n\r\n    const onSelectQuest = (selectedQuest: Quest) => setActiveQuest(selectedQuest);\r\n\r\n    const renderQuests = (renderQuests: Quest[]): JSX.Element[] =>\r\n        renderQuests.map((q) => (\r\n            <ListItem className={activeQuest?.id === q.id ? classes.activeItem : classes.item} onClick={() => onSelectQuest(q)}>\r\n                <ListItemAvatar>\r\n                    <Avatar>\r\n                        <ExploreIcon />\r\n                    </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={q.name} secondary={q.description} />\r\n            </ListItem>\r\n        ));\r\n\r\n    const renderActiveQuest = (): JSX.Element | null => {\r\n        if (!activeQuest) return null;\r\n\r\n        return (\r\n            <Card className={classes.questCard}>\r\n                <CardHeader title={activeQuest.name} />\r\n                <CardContent className={classes.questContent}>{activeQuest.detail}</CardContent>\r\n            </Card>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <br />\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.bannerContainer}>\r\n                    <h1 className=\"banner\">Quests</h1>\r\n                </div>\r\n                <br />\r\n                <div className={classes.grid}>\r\n                    <div className={classes.left}>\r\n                        <br />\r\n                        <List className={classes.list}>{renderQuests(quests)}</List>\r\n                    </div>\r\n                    <div className={classes.right}>{renderActiveQuest()}</div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default QuestsPage;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\n\r\n// Pages\r\nimport MapPage from \"./pages/MapPage\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterPage from \"./pages/EncounterPage\";\r\nimport KeyMaps from \"./components/KeyMaps\";\r\nimport QuestsPage from \"./pages/QuestsPage\";\r\n\r\nconst MainLayout: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <KeyMaps backUrl=\"/menu\">\r\n                <Header />\r\n            </KeyMaps>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path={`${process.env.PUBLIC_URL}/profile/:id`}\r\n                        component={(props: any) => <HeroProfile id={props.match.params.id} />}\r\n                    />\r\n                    <Route path={`${process.env.PUBLIC_URL}/quests/`} component={QuestsPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/encounter/:useTokens/`} component={EncounterPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/`} component={MapPage} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport MenuCards, { MenuCard } from \"./MenuCards\";\r\n\r\nconst useStyles = makeStyles({\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n});\r\n\r\ntype SaveGameSelectorProps = {\r\n    enabledSlots: boolean[];\r\n    saves: (Date | null)[];\r\n    currentSlot: number;\r\n    onSelected: (slot: number) => void;\r\n};\r\n\r\nconst SaveGameSelector: React.FunctionComponent<SaveGameSelectorProps> = (props: SaveGameSelectorProps) => {\r\n    const classes = useStyles();\r\n    \r\n    const { saves, enabledSlots, currentSlot, onSelected } = props;\r\n\r\n    const getDateString = (date: Date | null) => (date ? `${date.toLocaleString()}` : \"Empty\");\r\n    const getDescription = (date: Date | null, isCurrentSlot: boolean) => {\r\n        return isCurrentSlot ? `Current Save (${getDateString(date)})` : getDateString(date);\r\n    };\r\n\r\n    const saveButtons: MenuCard[] = [\r\n        {\r\n            title: \"Slot A\",\r\n            description: getDescription(saves[0], currentSlot === 0),\r\n            enabled: enabledSlots[0],\r\n            active: currentSlot === 0,\r\n            onSelected: () => onSelected(0),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot B\",\r\n            description: getDescription(saves[1], currentSlot === 1),\r\n            enabled: enabledSlots[1],\r\n            active: currentSlot === 1,\r\n            onSelected: () => onSelected(1),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot C\",\r\n            description: getDescription(saves[2], currentSlot === 2),\r\n            enabled: enabledSlots[2],\r\n            active: currentSlot === 2,\r\n            onSelected: () => onSelected(2),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n    ];\r\n\r\n    return <MenuCards items={saveButtons} />;\r\n};\r\n\r\nexport default SaveGameSelector;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameNewMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHome = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"New game in slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHome();\r\n    };\r\n\r\n    // Can choose any empty slots\r\n    const enabledSlots = (): boolean[] => saveTimes.map((s) => s === null);\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose an empty save slot\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameNewMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameLoadMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHomeMap = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Loaing slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHomeMap();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const calculateEnabledSlots = (saves: (Date | null)[]): boolean[] => {\r\n        const enabledSlots = saves.map((s) => s !== null);\r\n        console.log(\"Games : \" + JSON.stringify(enabledSlots));\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to load\r\n                </Typography>\r\n                <SaveGameSelector\r\n                    enabledSlots={calculateEnabledSlots(saveTimes)}\r\n                    currentSlot={currentSave}\r\n                    saves={saveTimes}\r\n                    onSelected={saveSelected}\r\n                />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameLoadMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameDeleteMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToMenu = () => history.push(\"/menu\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Deleting slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.deleteSlot(slot);\r\n\r\n        navigateToMenu();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const enabledSlots = (): boolean[] => {\r\n        const enabledSlots = saveTimes.map((s) => s !== null);\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to delete\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameDeleteMenu;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport PitTheme from \"./PitTheme\";\r\n\r\n// Pages\r\nimport MainMenu from \"./pages/MainMenu\";\r\nimport MainLayout from \"./MainLayout\";\r\nimport GameNewMenu from \"./pages/GameNewMenu\";\r\nimport GameLoadMenu from \"./pages/GameLoadMenu\";\r\nimport GameDeleteMenu from \"./pages/GameDeleteMenu\";\r\n\r\nconst App : React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <div\r\n            className=\"app\"\r\n            onContextMenu={(e) => {\r\n                // Disable right-lick menu\r\n                e.preventDefault();\r\n                return false;\r\n            }}\r\n        >\r\n            <ThemeProvider theme={PitTheme}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path={`${process.env.PUBLIC_URL}/menu`} component={MainMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/new`} component={GameNewMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/load`} component={GameLoadMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/delete`} component={GameDeleteMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/`} component={MainLayout} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}