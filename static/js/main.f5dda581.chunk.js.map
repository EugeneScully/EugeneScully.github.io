{"version":3,"sources":["helpers/ElectronHelper.ts","PitTheme.tsx","components/LinkTo.tsx","components/KeyMaps.tsx","services/MockSaveService.ts","models/Trait.ts","components/MenuCards.tsx","pages/MainMenu.tsx","services/MockItemService.ts","helpers/HeroHelper.ts","services/MockHeroService.ts","services/MockPartyService.ts","components/Header.tsx","services/MockGameStateService.ts","models/Hero.ts","models/Item.ts","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","services/MockStoryEncounterService.ts","components/HeroSelector.tsx","components/PartySelection.tsx","components/HeroDismiss.tsx","services/StringConverters.ts","components/ItemTooltipContent.tsx","components/InventorySelector.tsx","components/Stash.tsx","components/EncounterDialog.tsx","components/markers/VertexMarker.tsx","models/Queue.ts","components/markers/Drift_Marker.tsx","components/markers/DriftMarker2.tsx","components/markers/PartyMarker.tsx","components/OverheadMap.tsx","components/LoadingProgress.tsx","components/OverheadMapLoader.tsx","services/MockDetailedEncounterService.ts","components/markers/HeroMarker.tsx","helpers/Transforms.ts","helpers/GridHelpers.ts","models/CharacterEncounterData.ts","components/markers/GridMarker.tsx","components/CombatIndicator.tsx","components/markers/FoeMarker.tsx","components/encounter-map/StaticMarker.tsx","components/encounter-map/CombatPath.tsx","components/markers/CustomMarker.tsx","components/markers/DamageDisplay.tsx","services/DiceRoller.ts","services/InitiativeTracker.ts","models/AttackResult.ts","helpers/CombatHelper.ts","helpers/CombatPositionHelper.ts","helpers/CombatActionHelper.ts","components/EncounterMap.tsx","services/MockNpcService.ts","helpers/ArrayHelper.ts","components/EncounterMapLoader.tsx","pages/MapPage.tsx","services/MockWorldService.ts","components/PartyInventory.tsx","components/EquippedItems.tsx","components/StatisticsBlock.tsx","components/CalculatedStatisticsBlock.tsx","components/TraitList.tsx","pages/HeroProfile.tsx","pages/EncounterPage.tsx","MainLayout.tsx","components/SaveGameSelector.tsx","pages/GameNewMenu.tsx","pages/GameLoadMenu.tsx","pages/GameDeleteMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ElectronHelper","window","process","type","versions","electron","navigator","userAgent","indexOf","PitTheme","createMuiTheme","LinkTo","props","url","children","top","left","width","classes","makeStyles","container","zIndex","display","cursor","containerAbsolute","position","useStyles","isPositioned","history","useHistory","className","onClick","event","push","KeyMaps","backUrl","navigateToUrl","Mousetrap","bind","MockSaveService","setCurrentSave","slot","_currentSave","localStorage","setItem","toString","getCurrentSave","getItem","slotId","Number","parseInt","markSlotUpdated","Date","getSlotUpdateTimes","slot1","slot2","slot3","deleteSlot","Error","removeItem","key","value","this","JSON","stringify","json","parse","undefined","TraitType","ModifierType","card","margin","backgroundColor","right","boxShadow","cardDisabled","cardActive","MenuCards","selectClass","i","active","enabled","items","Grid","item","xs","map","Card","onSelected","CardHeader","title","Typography","variant","avatar","icon","CardContent","description","root","height","close","filter","cardIcon","fontSize","titleContainer","padding","appLogo","pointerEvents","MainMenu","React","useState","saveTimes","setSaveTimes","useEffect","saveService","loadSaves","slotCount","s","length","allSlotsFull","oneSlotFull","isElectron","require","ipcRenderer","send","src","alt","MockItemService","getItems","ids","id","getItemDetail","TokenOfServitude","HagTeeth","CeramicHelm","CeramicArmor","WolfSpear","HeroHelper","getAllTraits","hero","traits","concat","itemTraits","temporaryTraits","addItemTraits","itemTrait","heroTrait","name","behaviour","from","removeItemTraits","t","calculateAttributesWithModifiers","allTraits","strMod","dexMod","conMod","intMod","wisMod","chaMod","luckMod","j","modifierType","Strength","modifierValue","Dexterity","Constitution","Intelligence","Wisdom","Charisma","Luck","attributes","strength","base","modifier","dexterity","constitution","intelligence","wisdom","charisma","luck","calculateStatsWithModifiers","armorMod","moveSpeedMod","meleeAttackMod","meleeAttackSpeedMod","meleeDamageDieMod","meleeDamageMod","hpMod","hitDieMod","spellResistMod","Armor","MoveSpeed","MeleeAttack","MeleeAttackSpeed","MeleeDamageDie","MeleeDamage","RangedAttack","RangedAttackSpeed","RangedDamageDie","RangedDamage","HitPoints","HitDie","SpellResistance","stats","armour","attack","moveSpeed","attackSpeed","damageDie","damageBonus","maxHitPoints","currentHitPoints","hitDie","spellResistance","MockHeroService","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroes","heroId","itemId","heroMatch","find","itemService","originalItem","itemWithSameType","equippedItems","itemType","MockPartyService","reputation","heroService","getPartyIds","getHeroDetail","_heroIds","heroIds","getObject","defaultHeroIds","saveObject","_inventoryItemIds","inventoryIds","defaultInventoryIds","itemIds","inventoryItems","getInventory","setInventory","_stashItemIds","stashIds","defaultStashIds","getStash","setStash","stashItems","appHeader","headerSpan","headerParty","headerImg","border","borderRadius","borderWidth","borderColor","Header","party","setParty","newParty","getParty","console","error","loadParty","imageUrl","MockGameStateService","_state","stateJson","state","defaultState","log","currentMapId","currentVertextId","seed","Math","random","MAX_SAFE_INTEGER","Alignment","HeroClass","StatusFlags","AbilityFlags","ItemType","MockMapService","BlackTempleMap","TownMap","pathColor","vertices","v","Leaflet","latLng","clickRadius","encounterId","marker","exitId","edges","distance","x","y","latDist","lat","lngDist","lng","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","weight","MockStoryEncounterService","currentStory","currentId","currentTitle","Story","TheInterceptContent","commonRoomContent","chasmContent","homeContent","nineBellsContent","brawlContent","dartTrapContent","createEmptyStory","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","variablesState","GetVariableWithName","detailedEncounter","paragraphText","choices","isFinished","finishData","Continue","encounterChoices","currentChoices","c","index","text","heroSelected","HeroSelector","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","partyService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","currentTarget","newSelected","selectedHeroIds","imgClass","output","Tooltip","renderParty","partyButton","partyButtonDiv","textAlign","PartySelection","setHeroIds","isValid","Button","setPartyIds","disabled","color","HeroDismiss","setHeroId","StringConverters","resourceMap","Resources","classToString","heroClass","resources","getResources","alignmentToString","alignment","modifierToString","itemTypeText","abilitiesToString","abilities","None","Acrobatics","Devices","PatronBond","Perception","Sorcery","Stealth","Survival","join","ItemTooltipContent","renderBehaviors","effects","e","valueToString","Fragment","align","traitJsx","newTraits","renderTraits","main","gridItem","inventory","itemSelected","InventorySelector","selectedIds","spacing","alignItems","justify","itemGrids","arrow","emptyItems","emptyGrids","renderInventory","stashImg","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","Stash","stashSelectedIds","setStashSelectedIds","inventorySelectedIds","setInventorySelectedIds","setStashItems","setInventoryItems","stashItemIds","inventoryItemIds","newStashItems","newInventoryItems","loadItems","isStashSelected","isInventorySelected","willInventoryBeTooBig","service","removeStashItem","addInventoryItem","startIcon","removeInventoryItem","addStashItem","paper","overflow","dialog","userSelect","background","opacity","content","minWidth","minHeight","fontFamily","actions","portrait","placeholder","float","paragraph","EncounterDialog","onClose","MockEncounterService","encounterService","setParagraph","setTitle","setChoices","storyStarted","setStoryStarted","open","handleClose","handleChoice","encounter","chooseChoice","encounterFinish","processFinish","handleContinue","finish","encounterDetailId","startEncounter","encChoices","Dialog","aria-labelledby","DialogContent","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","renderParagraph","DialogActions","tooltip","whiteSpace","verticalAlign","justifyContent","marginLeft","marginRight","flexShrink","VertexMarker","onHover","onHoverEnd","vertextId","Icon","iconUrl","image","iconSize","dimensions","iconAnchor","anchor","Marker","onclick","onmouseover","onmouseout","renderTooltipIcon","Queue","_store","val","shift","exports","Leaflet_module","L","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","dragging","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","DriftMarker2","leafletElement","rest","DivIcon","el","contextValue","leaflet","popupContainer","createLeafletElement","forceUpdate","fromProps","toProps","zIndexOffset","setZIndexOffset","setOpacity","draggable","_icon","portal","createPortal","MapLayer","withLeaflet","PartyMarker","isActive","onMoveEnd","iconActive","_","OverheadMap","startState","mapUrl","onNewMap","setPos","path","setPath","vertexQueue","setEncounterId","gameState","setGameState","initialNode","setInitialNode","handleMoveEnd","targetVertex","pop","splits","split","newState","currentEncounterId","clear","stateService","getState","setState","vertexId","npath","aStar","nextVertex","pathVertexes","p","moveToVertexId","mapGraph","match","bounds","LatLngBounds","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","round","zoomControl","ImageOverlay","renderMarkers","Polyline","positions","dashArray","dashOffset","LoadingProgress","CircularProgress","OverheadMapLoader","setGraph","setPathColor","setMapUrl","getMap","Build","loadMap","MockDetailedEncounterService","TavernMap","HeroMarker","progress","circularProgress","percentHp","details","displayPos","colorPrimary","thickness","size","Transforms","isoX","carX","carY","isoY","cardinalToIsometric","car","cardinalToIsometric2","isometricToCardinal","iso","offset","scale","GridHelpers","tokenGrid","grid","mergeGridEntry","gridToDisplayTuple","gridScale","gridOffset","gridToDisplayCenterTuple","gridToDisplay","gridToDisplayCenter","reverseOffset","coords","reverseScale","displayToGrid","result","floor","getGridLocation","char","getInitialPositions","characters","gridPosition","CharacterEncounterData","tokenEntry","baseEntry","buildAstarGrid","isWalkable","getGridPath","start","end","isHeroMove","mergedGrid","buildMergedGrids","endEntry","isFoe","isHero","isBlocked","AStarFinder","matrix","startGridPosition","endGridPosition","findPath","reverse","getHeroPath","getFoePath","findNearestHero","paths","heroEntries","sortedPaths","sort","p1","p2","entry","isEncounter","canEndMove","displayGrid","displayStrings","gridEntry","gridPos","isMoving","queueStrings","convertFunc","GridMarker","gridToDisplayFunc","button","bottom","CombatIndicator","isCombat","initiative","FoeMarker","foe","meleeHover","onMouseOver","onMouseOut","StaticMarker","CombatPath","move","fullPath","remainderPathLength","fullMoveStart","fullMoveEnd","halfMoveStart","remainderPath","slice","fullMovePath","halfMovePath","halfMoveMarker","fullMoveMarker","CustomMarker","RL","zIndexOff","fromPosition","fromZIndexOffset","fromOpacity","fromDraggable","fromClassName","toPosition","toZIndexOffset","toOpacity","toDraggable","toClassName","difference","itemsToRemove","includes","fromClasses","toClasses","classList","remove","updateLeafletElement","LeafletProvider","explode","death","miss","DamageDisplay","damage","show","Fade","in","style","transitionDelay","timeout","enter","exit","DiceRoller","_encounterSeed","rollDie","dieType","ceil","generate","roll20","roll10","reduce","a","b","charCodeAt","mulberry32","imul","InitiativeTracker","initiatives","_initiatives","processDelay","delay","init","getInitiatives","getNextInitiative","displayInitiatives","gameId","foes","roller","heroInitiatives","h","foeInitiatives","f","n1","n2","AttackResult","createMiss","createFumble","createHit","createCritical","createDeath","CombatHelper","determineAttackResult","attacker","target","targetPos","attackerPos","attackerDetail","targetDetail","attackRoll","attackValue","isMiss","isCritical","CombatPositionHelper","updatePosition","newPosition","oldPositions","newPositions","removePosition","getPositionByEntry","findIndex","clearAllQueues","CombatActionHelper","trimPathToMove","maxPath","buildMeleeAttack","movePath","isMeleeAttack","character","action","buildRangedAttack","buildMove","EncounterMap","heroData","setHeroData","foeData","setFoeData","damagePos","setDamagePos","setTokenGrid","selectedHero","setSelectedHero","attackTarget","setAttackTarget","setInitiatives","currentAction","setCurrentAction","startNextActor","initiativeTracker","newNextToMove","gridDisplay","foeMatch","closestHeroPath","newCharacterAction","numMoves","heroPos","getPosition","setCharacterPosition","newInitiatives","executeCurrentAction","onHeroClick","encounters","handleAttack","targetMatch","results","newFoeDetails","addDamagePos","hoverGridPos","displayPath","onFoeHover","onFoeHoverEnd","onClickGridMarker","processMarkerAction","onFoeClick","endPos","endToken","newAction","markers","renderGridMarkers","damages","displayResults","dam","renderDamageMarkers","MockNpcService","thugContent","ArrayHelper","array","count","clonedArray","Object","assign","splice","self","EncounterMapLoader","setEncounter","setFoes","encounterData","getEncounterDetail","newHeroes","foeEntries","entries","npcs","foeIds","removeDuplicates","npcService","newFoes","getFoeDetail","foeInstances","foeDeepClone","buildInitial","loadEncounter","showGrid","MapPage","newGameState","loadGameState","MockWorldService","PartyInventory","onEquipItem","isItemEquipable","itemContainer","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","portraitItemWeapon","portraitItemShield","portraitNoItemImg","portraitItemImg","EquippedItems","headItem","WearableHead","bodyItem","WearableBody","armsItem","WearableArms","feetItem","WearableFeet","weaponItem","WeaponMelee1h","StyledTableCell","withStyles","theme","head","palette","common","black","white","body","TableCell","StyledTableRow","hover","TableRow","table","StatisticsBlock","statistics","createData","total","attributeTotal","attribute","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","row","scope","maxWidth","statisticsBlock","CalculatedStatisticsBlock","md","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","TraitList","renderTraitIcon","renderTrait","characterGrid","gridAutoRows","breakpoints","down","gridTemplateColumns","up","sectionHeading","bannerContainer","portraitImg","overflowY","gridRowEnd","HeroProfile","setHero","world","setWorld","setEquippedItems","setCurrentId","newHero","getPartyStatistics","newWorld","getWorld","newItems","loadHero","class","removedItemId","equipItem","EncounterPage","MainLayout","params","SaveGameSelector","saves","enabledSlots","currentSlot","getDateString","date","toLocaleString","getDescription","isCurrentSlot","saveButtons","chooseText","GameNewMenu","currentSave","clearCache","GameLoadMenu","calculateEnabledSlots","GameDeleteMenu","App","onContextMenu","preventDefault","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5dda581.chunk.js","sourcesContent":["export default class ElectronHelper {\r\n    /*\r\n     * Are we running under electron?\r\n     */\r\n    public static isElectron(): boolean {\r\n        \r\n        // Renderer process\r\n        if (typeof window !== \"undefined\" && typeof window.process === \"object\" && window.process.type === \"renderer\") {\r\n            return true;\r\n        }\r\n\r\n        // Main process\r\n        if (typeof process !== \"undefined\" && typeof process.versions === \"object\" && !!process.versions.electron) {\r\n            return true;\r\n        }\r\n\r\n        // Detect the user agent when the `nodeIntegration` option is set to true\r\n        if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n//import { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    // palette: {\r\n    //     primary: {\r\n    //         light: blue[500],\r\n    //         main: blue[500],\r\n    //         dark: blue[500],\r\n    //     },\r\n    //     secondary: {\r\n    //         light: blue[100],\r\n    //         main: blue[100],\r\n    //         dark: blue[100],\r\n    //     },\r\n    //     action: {\r\n    //         hover: blue[800],\r\n    //     },\r\n    // },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\ntype LinkToProps = {\r\n    url: string;\r\n    children?: React.ReactNode;\r\n    top?: string,\r\n    left?: string;\r\n    width?: string;\r\n};\r\n\r\nconst LinkTo: React.FunctionComponent<LinkToProps> = (props: LinkToProps) => {\r\n    \r\n    const { url, children, top, left, width } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        container: {\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n        containerAbsolute: {\r\n            position: \"absolute\",\r\n            top: top ?? \"20px\",\r\n            left: left ?? \"20px\",\r\n            width: width ?? \"40px\",\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    const isPositioned = top || left || width;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => history.push(url);\r\n\r\n    return (\r\n        <div className={isPositioned ? classes.containerAbsolute : classes.container} onClick={navigateToUrl}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LinkTo;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Mousetrap from \"mousetrap\";\r\n\r\ntype KeyMapsProps = {\r\n    backUrl: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst KeyMaps: React.FunctionComponent<KeyMapsProps> = (props: KeyMapsProps) => {\r\n    const { backUrl, children } = props;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string): void => history.push(url);\r\n\r\n    Mousetrap.bind(\"1\", () => navigateToUrl(\"/profile/1\"));\r\n    Mousetrap.bind(\"2\", () => navigateToUrl(\"/profile/2\"));\r\n    Mousetrap.bind(\"3\", () => navigateToUrl(\"/profile/3\"));\r\n    Mousetrap.bind(\"4\", () => navigateToUrl(\"/profile/4\"));\r\n    Mousetrap.bind(\"esc\", () => navigateToUrl(backUrl));\r\n\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default KeyMaps;\r\n","export default class MockSaveService {\r\n    private static _currentSave = -1;\r\n\r\n    public setCurrentSave = (slot: number) => {\r\n        MockSaveService._currentSave = slot;\r\n        localStorage.setItem(\"currentSlot\", slot.toString());\r\n    };\r\n\r\n    public getCurrentSave = (): number => {\r\n        if (MockSaveService._currentSave > 0) return MockSaveService._currentSave;\r\n        const slot = localStorage.getItem(\"currentSlot\");\r\n\r\n        const slotId = slot ? Number.parseInt(slot) : 0;\r\n\r\n        MockSaveService._currentSave = slotId;\r\n\r\n        return slotId;\r\n    };\r\n\r\n    public markSlotUpdated = () => {\r\n        localStorage.setItem(this.getCurrentSave() + \"_time\", new Date().toString());\r\n    };\r\n\r\n    public getSlotUpdateTimes = (): (Date | null)[] => {\r\n        const slot1 = localStorage.getItem(\"0_time\");\r\n        const slot2 = localStorage.getItem(\"1_time\");\r\n        const slot3 = localStorage.getItem(\"3_time\");\r\n\r\n        const items: (Date | null)[] = [slot1 ? new Date(slot1) : null, slot2 ? new Date(slot2) : null, slot3 ? new Date(slot3) : null];\r\n\r\n        return items;\r\n    }\r\n\r\n    public deleteSlot = (slot: number) => {\r\n\r\n        if (slot === this.getCurrentSave()) {\r\n            throw new Error(\"Can't delete current save\");\r\n        }\r\n\r\n        localStorage.removeItem(slot + \"_time\");\r\n        localStorage.removeItem(slot + \"_state\");\r\n    }\r\n\r\n    public saveObject<T>(key: string, value: T) {\r\n        localStorage.setItem(this.getCurrentSave() + \"_\" + key, JSON.stringify(value));\r\n        this.markSlotUpdated();\r\n    }\r\n\r\n    public getObject<T>(key: string): T | undefined {\r\n        const json = localStorage.getItem(this.getCurrentSave() + \"_\" + key);\r\n        return json ? JSON.parse(json) : undefined;\r\n    }\r\n}\r\n","\r\nexport enum TraitType {\r\n    Uncategorised = 0,\r\n    Mental = 1,\r\n    Mystical = 2,\r\n    Physical = 3,\r\n    Item = 4,\r\n    // MentalPhobia = 100,\r\n    // MysticalCurse = 200,\r\n};\r\n\r\nexport enum ModifierType {\r\n    None = 0,\r\n    Strength = 10,\r\n    Dexterity = 11,\r\n    Constitution = 12,\r\n    Intelligence = 13,\r\n    Wisdom = 14,\r\n    Charisma = 15,\r\n    Luck = 16,\r\n    HitPoints = 20,\r\n    HitDie = 21,\r\n    Armor = 22,\r\n    SpellResistance = 23,\r\n    MoveSpeed = 24,\r\n    MeleeAttackSpeed = 25,\r\n    MeleeAttack = 26,\r\n    MeleeDamageDie = 27,\r\n    MeleeDamage = 28,\r\n    RangedAttackSpeed = 29,\r\n    RangedAttack = 30,\r\n    RangedDamageDie = 31,\r\n    RangedDamage = 32,\r\n    MeleeChanceForParalysis = 50,\r\n    MeleeChanceForPoisoned = 51,\r\n    MeleeChanceForBleeding = 52,\r\n    MeleeChanceForTerrified = 53,\r\n    MeleeChanceForCharmed = 54,\r\n    RangedChanceForParalysis = 60,\r\n    RangedChanceForPoisoned = 61,\r\n    RangedChanceForBleeding = 62,\r\n    RangedChanceForTerrified = 63,\r\n    RangedChanceForCharmed = 64,\r\n    AddAbility = 100,\r\n    RemoveAbility = 101, // Items can prevent abilities being used (e.g. Armor prevents Sorcery)\r\n    AbilitySorcery = 110,\r\n    AbilityStealth = 111,\r\n    AbilityPerception = 112,\r\n    AbilityPatronBond = 113,\r\n    AbilitySurvival = 114,\r\n    AbilityDevices = 115,\r\n    AbilityAcrobatics = 116,\r\n};\r\n\r\nexport interface TraitEffect {\r\n\r\n    modifierType: ModifierType;\r\n\r\n    modifierValue: number;\r\n}\r\n\r\nexport default interface Trait {\r\n    // ID for the trait\r\n    id: string;\r\n\r\n    // A name for the trait\r\n    name: string;\r\n\r\n    // The type of trait\r\n    type: TraitType;\r\n\r\n    // What does it do\r\n    behaviour: TraitEffect[];\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        top: \"1vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"lightsteelblue\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n            backgroundColor: \"ghostwhite\",\r\n        },\r\n    },\r\n    cardDisabled: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkgrey\",\r\n    },\r\n    cardActive: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkseagreen\",\r\n    },\r\n});\r\n\r\nexport type MenuCard = {\r\n    title: string;\r\n    description: string;\r\n    enabled: boolean;\r\n    active?: boolean;\r\n    icon?: JSX.Element;\r\n    onSelected: () => void;\r\n};\r\n\r\ntype MenuCardsProps = {\r\n    items: MenuCard[];\r\n};\r\n\r\nconst MenuCards: React.FunctionComponent<MenuCardsProps> = (props: MenuCardsProps) => {\r\n    const classes = useStyles();\r\n\r\n    const selectClass = (i: MenuCard) => (i.active ? classes.cardActive : i.enabled ? classes.card : classes.cardDisabled);\r\n\r\n    const { items } = props;\r\n    const renderCards = () =>\r\n        items.map((i) => (\r\n            <Card className={selectClass(i)} onClick={i.onSelected}>\r\n                <CardHeader title={<Typography variant=\"h2\">{i.title}</Typography>} avatar={i.icon} />\r\n                <CardContent>{i.description}</CardContent>\r\n            </Card>\r\n        ));\r\n\r\n    return (\r\n        <Grid container className={classes.container}>\r\n            <Grid item xs={3}></Grid>\r\n            <Grid item xs={6}>\r\n                {renderCards()}\r\n            </Grid>\r\n            <Grid item xs={3}></Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MenuCards;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport SystemUpdateAltIcon from \"@material-ui/icons/SystemUpdateAlt\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\n\r\nimport LinkTo from '../components/LinkTo';\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport ElectronHelper from '../helpers/ElectronHelper';\r\nimport MockSaveService from '../services/MockSaveService';\r\nimport MenuCards, { MenuCard } from '../components/MenuCards';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"9vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n});\r\n\r\nconst MainMenu: React.FunctionComponent = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n\r\n    let history = useHistory();\r\n    const navigateToNewGame = () => history.push(\"/game/new\");\r\n    const navigateToLoadGame = () => history.push(\"/game/load\");\r\n    const navigateToDeleteGame = () => history.push(\"/game/delete\");\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    const onElectronExit = () => {\r\n        const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n        ipcRenderer.send(\"close-app\");\r\n    }\r\n\r\n    if (!saveTimes)\r\n        return null;\r\n\r\n    const slotCount = saveTimes.filter(s => s !== null).length;\r\n    const allSlotsFull = slotCount >= 3;\r\n    const oneSlotFull = slotCount === 1;\r\n\r\n    const items: MenuCard[] = [\r\n        {\r\n            title: \"New Game\",\r\n            description: \"Start a new game\" + (allSlotsFull ? \" (All slots full)\" : \"\"),\r\n            enabled: !allSlotsFull,\r\n            icon: <AddCircleOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToNewGame,\r\n        },\r\n        {\r\n            title: \"Load Game\",\r\n            description: \"Load a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <SystemUpdateAltIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToLoadGame,\r\n        },\r\n        {\r\n            title: \"Delete Game\",\r\n            description: \"Delete a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <DeleteOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToDeleteGame,\r\n        },\r\n    ];\r\n\r\n    // Add a quit option if running under Electron\r\n    if (ElectronHelper.isElectron()) {\r\n        items.push({\r\n            title: \"Quit\",\r\n            description: \"Exit the game\",\r\n            enabled: true,\r\n            icon: <ExitToAppIcon className={classes.cardIcon} />,\r\n            onSelected: onElectronExit,\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <MenuCards items={items} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\nimport CeramicHelm from \"./items/ceramic_helm.json\";\r\nimport CeramicArmor from \"./items/ceramic_armor.json\";\r\n\r\nexport default class MockItemService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude;\r\n            case \"hag_teeth\":\r\n                return HagTeeth;\r\n            case \"ceramic_helm\":\r\n                return CeramicHelm;\r\n            case \"ceramic_armor\":\r\n                return CeramicArmor;\r\n            case \"wolf_spear\":\r\n            default:\r\n                return WolfSpear;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import AttributeList from \"../models/AttributeList\";\r\nimport CalculatedStats from \"../models/CalculatedStats\";\r\nimport Hero from \"../models/Hero\";\r\nimport HeroTrait from \"../models/HeroTrait\";\r\nimport Item from \"../models/Item\";\r\nimport Trait, { ModifierType } from \"../models/Trait\";\r\n\r\nexport default class HeroHelper {\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getAllTraits = (hero: Hero): HeroTrait[] => hero.traits.concat(hero.itemTraits).concat(hero.temporaryTraits);\r\n\r\n    /*\r\n     * Add traits from an item to the hero\r\n     */\r\n    public static addItemTraits = (hero: Hero, item: Item): void => {\r\n        for (let i = 0; i < item.traits.length; i++) {\r\n            const itemTrait: Trait = item.traits[i];\r\n            const heroTrait: HeroTrait = {\r\n                id: itemTrait.id,\r\n                name: itemTrait.name,\r\n                type: itemTrait.type,\r\n                behaviour: itemTrait.behaviour,\r\n                from: item.name,\r\n            };\r\n            hero.itemTraits.push(heroTrait);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Remove traits from an item to the hero\r\n     */\r\n    public static removeItemTraits = (hero: Hero, item: Item): void => {\r\n        hero.itemTraits = hero.itemTraits.filter((t) => t.from !== item.name);\r\n    };\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static calculateAttributesWithModifiers = (hero: Hero): AttributeList => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let strMod = 0,\r\n            dexMod = 0,\r\n            conMod = 0,\r\n            intMod = 0,\r\n            wisMod = 0,\r\n            chaMod = 0,\r\n            luckMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Strength:\r\n                        strMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Dexterity:\r\n                        dexMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Constitution:\r\n                        conMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Intelligence:\r\n                        intMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Wisdom:\r\n                        wisMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Charisma:\r\n                        chaMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Luck:\r\n                        luckMod += behaviour.modifierValue;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attributes = hero.attributes;\r\n        const newAttributeList: AttributeList = {\r\n            strength: { base: attributes.strength.base, modifier: strMod },\r\n            dexterity: { base: attributes.dexterity.base, modifier: dexMod },\r\n            constitution: { base: attributes.constitution.base, modifier: conMod },\r\n            intelligence: { base: attributes.intelligence.base, modifier: intMod },\r\n            wisdom: { base: attributes.wisdom.base, modifier: wisMod },\r\n            charisma: { base: attributes.charisma.base, modifier: chaMod },\r\n            luck: { base: attributes.luck.base, modifier: luckMod },\r\n        };\r\n\r\n        return newAttributeList;\r\n    };\r\n\r\n    public static calculateStatsWithModifiers = (hero: Hero): CalculatedStats => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let armorMod = 0,\r\n            moveSpeedMod = 0,\r\n            meleeAttackMod = 0,\r\n            meleeAttackSpeedMod = 0,\r\n            meleeDamageDieMod = 0,\r\n            meleeDamageMod = 0,\r\n            rangedAttackMod = 0,\r\n            rangedAttackSpeedMod = 0,\r\n            rangedDamageDieMod = 0,\r\n            rangedDamageMod = 0,\r\n            hpMod = 0,\r\n            hitDieMod = 0,\r\n            spellResistMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Armor:\r\n                        armorMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MoveSpeed:\r\n                        moveSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeAttack:\r\n                        meleeAttackMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeAttackSpeed:\r\n                        meleeAttackSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeDamageDie:\r\n                        meleeDamageDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeDamage:\r\n                        meleeDamageMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttack:\r\n                        rangedAttackMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttackSpeed:\r\n                        rangedAttackSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedDamageDie:\r\n                        rangedDamageDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedDamage:\r\n                        rangedDamageMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.HitPoints:\r\n                        hpMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.HitDie:\r\n                        hitDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.SpellResistance:\r\n                        spellResistMod += behaviour.modifierValue;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const stats = hero.stats;\r\n        const newStats: CalculatedStats = {\r\n            armour: stats.armour + armorMod,\r\n            attack: stats.attack + meleeAttackMod,\r\n            moveSpeed: stats.moveSpeed + moveSpeedMod,\r\n            attackSpeed: stats.attackSpeed + meleeAttackSpeedMod,\r\n            damageDie: stats.damageDie + meleeDamageDieMod,\r\n            damageBonus: stats.damageBonus + meleeDamageMod,\r\n            maxHitPoints: stats.maxHitPoints + hpMod,\r\n            currentHitPoints: stats.currentHitPoints,\r\n            hitDie: stats.hitDie + hitDieMod,\r\n            spellResistance: stats.spellResistance + spellResistMod,\r\n        };\r\n\r\n        return newStats;\r\n    };\r\n}\r\n","import Hero from \"../models/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\nimport MockItemService from \"./MockItemService\";\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroes: Hero[] = [Gyvwain, Balthazar, Gossamer, Gargamela, Justin];\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return MockHeroService._heroes;\r\n    }\r\n\r\n    /*\r\n    * Equip an item in one of the equip slots\r\n    * If an item needs to be removed, return the item Id\r\n    */\r\n    equipItem(heroId: string, itemId: string): string | null {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const originalItem = itemService.getItemDetail(itemId);\r\n        if (!originalItem) throw new Error(\"Can't find original item\");\r\n\r\n        // Check if the hero already has an item of this type equipped\r\n        const items = itemService.getItems(heroMatch.equippedItems);\r\n        const itemWithSameType = items.find(item => item.itemType === originalItem.itemType);\r\n\r\n        // TODO: We need special logic around equipable weapons\r\n\r\n        heroMatch.equippedItems.push(itemId);\r\n        \r\n        // Add traits from the item\r\n        HeroHelper.addItemTraits(heroMatch, originalItem);\r\n\r\n        if (!itemWithSameType) return null; \r\n\r\n        // Remove traits from the removed item\r\n        HeroHelper.removeItemTraits(heroMatch, itemWithSameType);\r\n        \r\n        return itemWithSameType.id;\r\n    }\r\n\r\n    unequipItem(heroId: string, itemId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw new Error(\"Can't find hero\");\r\n\r\n        const itemService = new MockItemService();\r\n        const item = itemService.getItemDetail(itemId);\r\n        if (!item) throw new Error(\"Can't find original item\");\r\n\r\n        // Remove the item\r\n        heroMatch.equippedItems = heroMatch.equippedItems.filter(i => i !== item.id);\r\n\r\n        // Remove traits from the removed item\r\n        HeroHelper.removeItemTraits(heroMatch, item);\r\n    }\r\n}\r\n","import Hero from \"../models/Hero\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockHeroService from \"./MockHeroService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockPartyService {\r\n    getPartyStatistics(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static defaultHeroIds = (): string[] => [\r\n        \"gyvwain_the_chivalrous\",\r\n        \"balthazar_the_unblemished\",\r\n        \"gossamer\",\r\n        \"gargomela_the_black\",\r\n    ];\r\n\r\n    private static _heroIds: string[] | undefined = undefined;\r\n\r\n    getParty(): Hero[] {\r\n        const heroService = new MockHeroService();\r\n        const party = this.getPartyIds().map((id) => heroService.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    getPartyIds(): string[] {\r\n        if (MockPartyService._heroIds) {\r\n            return MockPartyService._heroIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const heroIds: string[] = saveService.getObject<string[]>(\"heroIds\") ?? MockPartyService.defaultHeroIds();\r\n\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        return MockPartyService._heroIds;\r\n    }\r\n\r\n    setPartyIds(heroIds: string[]): void {\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroIds\", heroIds);\r\n    }\r\n\r\n    private static defaultInventoryIds = (): string[] => [\"wolf_spear\", \"ceramic_helm\", \"ceramic_armor\"];\r\n\r\n    private static defaultStashIds = (): string[] => [\"hag_teeth\", \"token_of_servitude\"];\r\n\r\n    private static _inventoryItemIds: string[] | undefined = undefined;\r\n    private static _stashItemIds: string[] | undefined = undefined;\r\n\r\n    getInventory(): string[] {\r\n        if (MockPartyService._inventoryItemIds) {\r\n            return MockPartyService._inventoryItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const inventoryIds: string[] = saveService.getObject<string[]>(\"inventoryItemIds\") ?? MockPartyService.defaultInventoryIds();\r\n\r\n        MockPartyService._inventoryItemIds = inventoryIds;\r\n\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"inventoryItemIds\", itemIds);\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory();\r\n        inventoryItems.push(id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory().filter(i => i !== id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._stashItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n\r\n        const stashIds: string[] = saveService.getObject<string[]>(\"stashItemIds\") ?? MockPartyService.defaultStashIds();\r\n\r\n        MockPartyService._stashItemIds = stashIds;\r\n\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"stashItemIds\", itemIds);\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        const items = this.getStash();\r\n        items.push(id);\r\n        this.setStash(items);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        const stashItems = this.getStash().filter(i => i !== id);\r\n        this.setStash(stashItems);\r\n    }\r\n\r\n    public clearCache() {\r\n        MockPartyService._heroIds = undefined;\r\n        MockPartyService._inventoryItemIds = undefined;\r\n        MockPartyService._stashItemIds = undefined;\r\n    }\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"./LinkTo\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        \"-webkit-app-region\": \"drag\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"2vh\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n    headerImg: {\r\n        width: \"7vh\",\r\n        height: \"7vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"5vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\n\r\nconst Header: React.FunctionComponent<HeaderProps> = (props: HeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = React.useState<Hero[] | null>(null); // The map graph data\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockPartyService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <LinkTo key={hero.id} url={`${process.env.PUBLIC_URL}/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </LinkTo>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                </LinkTo>\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import GameState from \"../models/GameState\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static defaultState = (): GameState => {\r\n        return {\r\n            currentMapId: \"town\",\r\n            currentVertextId: \"hut-road\", // \"scupperden-road\"\r\n            seed: Math.random() * Number.MAX_SAFE_INTEGER\r\n        }\r\n    };\r\n\r\n    private static _state: GameState | undefined = undefined;\r\n\r\n    public getState(): GameState {\r\n        if (MockGameStateService._state != null) \r\n            return MockGameStateService._state;\r\n            \r\n        const saveService = new MockSaveService();\r\n        \r\n        const stateJson = localStorage.getItem(saveService.getCurrentSave() + \"_state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService.defaultState();\r\n\r\n        MockGameStateService._state = state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        const saveService = new MockSaveService();\r\n\r\n        MockGameStateService._state = state;\r\n        console.log(\"setState : \" + JSON.stringify(state));\r\n        localStorage.setItem(saveService.getCurrentSave() + \"_state\", JSON.stringify(state));\r\n        saveService.markSlotUpdated();\r\n    }\r\n\r\n    public clearCache() {\r\n        MockGameStateService._state = undefined;\r\n    }\r\n}\r\n","import AttributeList from \"./AttributeList\";\r\nimport CalculatedStats from \"./CalculatedStats\";\r\nimport CharacterBehavior from \"./CharacterBehavior\";\r\nimport HeroTrait from \"./HeroTrait\";\r\n\r\nexport enum Alignment {\r\n    Lawful = 0,\r\n    Neutral = 1,\r\n    Chaotic = 2,\r\n}\r\n\r\nexport enum HeroClass {\r\n    /*\r\n     * A traditional fighter, guard, barbarian or mercenary for hire\r\n     */\r\n    Warrior = 0,\r\n    /*\r\n     * A scounrel, bandit, robber\r\n     */\r\n    Thief = 1,\r\n    /*\r\n     * A mistrusted user of magic. Usually obviously marked, correpted or tainted\r\n     */\r\n    Sorcerer = 2,\r\n    /*\r\n     * A follower, patron, or somone bound to a god, demon or higher power\r\n     */\r\n    Templar = 3,\r\n}\r\n\r\nexport enum StatusFlags {\r\n    None = 0x00,\r\n    Paralysed = 0x01,\r\n    Poisoned = 0x04,\r\n    Bleeding = 0x08,\r\n    Terrified = 0x10,\r\n    Charmed = 0x20,\r\n    // Sleeping, Petrified,\r\n}\r\n\r\nexport enum AbilityFlags {\r\n    None = 0x00,\r\n    Sorcery = 0x01,\r\n    Stealth = 0x02,\r\n    Perception = 0x04,\r\n    PatronBond = 0x08,\r\n    Survival = 0x10,\r\n    Devices = 0x20,\r\n    Acrobatics = 0x40,\r\n}\r\n\r\n// TODO: Split hero into core stats & calculated (view) ?\r\ninterface Hero {\r\n    // ID of the hero\r\n    id: string;\r\n\r\n    // Display name of the hero\r\n    name: string;\r\n\r\n    // Origins of the hero\r\n    background: string;\r\n\r\n    imageUrl: string;\r\n\r\n    // Hero attributes\r\n    attributes: AttributeList;\r\n\r\n    // Any special states\r\n    status: StatusFlags;\r\n\r\n    stats: CalculatedStats;\r\n\r\n    abilities: AbilityFlags;\r\n\r\n    alignment: Alignment;\r\n\r\n    class: HeroClass;\r\n\r\n    // Itesm equpped by the hero\r\n    equippedItems: string[];\r\n\r\n    // Hero traits\r\n    traits: HeroTrait[];\r\n\r\n    // Hero traits\r\n    itemTraits: HeroTrait[];\r\n\r\n    // Hero traits\r\n    temporaryTraits: HeroTrait[];\r\n\r\n    behavior: CharacterBehavior[];\r\n}\r\n\r\nexport default Hero;\r\n","import Trait from \"./Trait\";\r\n\r\nexport enum ItemType {\r\n    Usable = 1,\r\n    Quest = 2,\r\n    WearableHead = 10,\r\n    WearableBody = 11,\r\n    WearableArms = 12,\r\n    WearableFeet = 13,\r\n    WeaponMelee1h = 20,\r\n    WeaponMelee2h = 21,\r\n    WeaponRanged1h = 22,\r\n    WeaponRanged2h = 23,\r\n    Shield = 24,\r\n}\r\n\r\nexport default interface Item {\r\n    // ID of the item\r\n    id: string;\r\n\r\n    // Name of the item\r\n    name: string;\r\n\r\n    // Text description for the item\r\n    description: string;\r\n\r\n    // URL of the image to display for the item\r\n    imageUrl: string;\r\n\r\n    // The type of item\r\n    itemType: ItemType;\r\n\r\n    // Item traits\r\n    traits: Trait[];\r\n}","import Leaflet from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            pathColor: json.pathColor,\r\n            vertices: json.vertices.map((v: any) => {\r\n                return {\r\n                    id: v.id,\r\n                    position: Leaflet.latLng(v.position[0], v.position[1]),\r\n                    clickRadius: v.clickRadius,\r\n                    encounterId: v.encounterId,\r\n                    marker: v.marker,\r\n                    exitId: v.exitId,\r\n                } as MapVertex;\r\n            }),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\nimport CustomMarker from \"./CustomMarker\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): Node<NodeData> | null => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n    marker?: CustomMarker;\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n                marker: item.marker,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\nimport TheInterceptContent from \"./encounters/TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/chasm.ink.json\";\r\nimport homeContent from \"./encounters/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/nine-bells.ink.json\";\r\nimport brawlContent from \"./encounters/brawl.ink.json\";\r\nimport dartTrapContent from \"./encounters/dart-trap.ink.json\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        switch (id) {\r\n            case \"hoard\":\r\n                this.currentTitle = \"Treasure !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                //paragraphText: \"You stumble tired and exhaused into a room stuffed to the ceiling with well-crafted wooden coffers.\",\r\n                break;\r\n            case \"wet-room\":\r\n                this.currentTitle = \"The Intercept !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"common-room\":\r\n                this.currentTitle = \"Tracking the Yellow-Bellied Crook\";\r\n                this.currentStory = new Story(commonRoomContent);\r\n                break;\r\n            case \"chasm\":\r\n                this.currentTitle = \"Across the Chasm\";\r\n                this.currentStory = new Story(chasmContent);\r\n                break;\r\n            case \"warrens\":\r\n                this.currentTitle = \"Rats !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"home\":\r\n                this.currentTitle = \"Scupperden\";\r\n                this.currentStory = new Story(homeContent);\r\n                break;\r\n            case \"nine-bells\":\r\n                this.currentTitle = \"The Cathedral\";\r\n                this.currentStory = new Story(nineBellsContent);\r\n                break;\r\n            case \"brawl\":\r\n                this.currentTitle = \"Thugs!\";\r\n                this.currentStory = new Story(brawlContent);\r\n                break;\r\n            case \"dart-trap\":\r\n                this.currentTitle = \"Trap !\";\r\n                this.currentStory = new Story(dartTrapContent);\r\n                break;\r\n            default:\r\n                return MockStoryEncounterService.createEmptyStory();\r\n        }\r\n        this.currentId = id;\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value ?? undefined,\r\n                    detailedEncounter: detailedEncounter?.value ?? undefined,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map(\r\n            (c: Choice) => {\r\n                return {\r\n                    index: c.index,\r\n                    text: c.text,\r\n                } as InkStoryChoice\r\n            }\r\n        );\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    party: {\r\n        padding: \"30px\",\r\n        position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroSelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\n/*\r\n* The selection of heroes one the menu bar\r\n*/\r\nconst HeroSelector: React.FunctionComponent<HeroSelectorProps> = (props: HeroSelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    let [heroes, setHeroes] = React.useState<Hero[] | null>(null); // The map graph data\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <Grid container>{renderParty()}</Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nconst PartySelection: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [heroIds, setHeroIds] = React.useState<string[]>([]);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = () => heroIds.length === 4; \r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockPartyService();\r\n        service.setPartyIds(heroIds);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} multiSelect={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={changeParty} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default PartySelection;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\n\r\nconst HeroDismiss: React.FunctionComponent = (): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [heroId, setHeroId] = React.useState(\"\");\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        if (ids.length > 0)\r\n            setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = () => heroId.length > 0; \r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockHeroService();\r\n        \r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={dismissHero} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Dismiss\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default HeroDismiss;\r\n","import { AbilityFlags, Alignment, HeroClass } from \"../models/Hero\";\r\nimport { ItemType } from \"../models/Item\";\r\nimport { ModifierType } from \"../models/Trait\";\r\nimport Resources from \"../resources.en.json\";\r\n\r\nexport default class StringConverters {\r\n    private static resourceMap: any = null;\r\n\r\n    static getResources(): any {\r\n        if (!StringConverters.resourceMap) {\r\n            // TODO: This is silly\r\n            StringConverters.resourceMap = JSON.parse(JSON.stringify(Resources));\r\n        }\r\n\r\n        return StringConverters.resourceMap;\r\n    }\r\n\r\n    static classToString = (heroClass: HeroClass): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"HeroClass_\" + HeroClass[heroClass];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static alignmentToString = (alignment: Alignment): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"Alignment_\" + Alignment[alignment];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static modifierToString = (modifierType: ModifierType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ModifierType_\" + ModifierType[modifierType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static itemTypeText = (itemType: ItemType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ItemType_\" + ItemType[itemType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static abilitiesToString = (abilities: AbilityFlags): string => {\r\n        if (abilities === AbilityFlags.None) return \"None\";\r\n\r\n        const output: string[] = [];\r\n\r\n        if (abilities & AbilityFlags.Acrobatics) output.push(\"Acrobatics\");\r\n        if (abilities & AbilityFlags.Devices) output.push(\"Disable/Modify Devices\");\r\n        if (abilities & AbilityFlags.PatronBond) output.push(\"Patron Bond\");\r\n        if (abilities & AbilityFlags.Perception) output.push(\"Perception\");\r\n        if (abilities & AbilityFlags.Sorcery) output.push(\"Sorcery\");\r\n        if (abilities & AbilityFlags.Stealth) output.push(\"Stealth\");\r\n        if (abilities & AbilityFlags.Survival) output.push(\"Survival\");\r\n\r\n        return output.join(\", \");\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport Item from \"../models/Item\";\r\nimport Trait, { TraitEffect } from \"../models/Trait\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        padding: \"5px\",\r\n    },\r\n    description: {\r\n        padding: \"10px\",\r\n        margin: \"10px 0\",\r\n        backgroundColor: \"#999\",\r\n    },\r\n    itemType: {\r\n        padding: \"500px 10px 0 10px\",\r\n        margin: \"100px 0 0 0 \",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n    traits: {\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n});\r\n\r\ntype ItemTooltipContentProps = {\r\n    item: Item | undefined;\r\n};\r\n\r\nconst ItemTooltipContent: React.FunctionComponent<ItemTooltipContentProps> = (props: ItemTooltipContentProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { item } = props;\r\n\r\n    const renderTraits = (traits: Trait[]): JSX.Element => {\r\n        let traitJsx: JSX.Element[] = [];\r\n        for (let i = 0; i < traits.length; i++) {\r\n            const newTraits = renderBehaviors(traits[i].behaviour);\r\n            traitJsx = traitJsx.concat(newTraits);\r\n        }\r\n        return <div>{traitJsx}</div>;\r\n    };\r\n\r\n    const renderBehaviors = (effects: TraitEffect[]): JSX.Element[] => {\r\n        return effects.map((e) => (\r\n            <p>\r\n                {valueToString(e.modifierValue)} {StringConverters.modifierToString(e.modifierType)}\r\n            </p>\r\n        ));\r\n    };\r\n\r\n    const valueToString = (value: number): string => (value > 0 ? `+${value}` : value.toString());\r\n\r\n    if (!item) return <p>\"None\"</p>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography className={classes.title} color=\"inherit\">\r\n                {item.name}\r\n            </Typography>\r\n            <p className={classes.description}>{item.description}</p>\r\n            <Typography className={classes.itemType}>{StringConverters.itemTypeText(item.itemType)}</Typography>\r\n            <Typography className={classes.traits} align=\"right\">\r\n                {renderTraits(item.traits)}\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemTooltipContent;\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\nimport Item from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: React.FunctionComponent<InventorySelectorProps> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, items, multiSelect } = props;\r\n\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        const selectedIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedIds.push(items[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) {\r\n            onSelectionChanged(selectedIds);\r\n        }\r\n    };\r\n\r\n    const renderInventory = () => {\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={item.id}>\r\n                    <Tooltip title={<ItemTooltipContent item={item} />} key={index} arrow>\r\n                        <img src={item.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt={item.name} />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map((i) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={index.toString()}>\r\n                    <Tooltip title={\"Nothing\"} key={index}>\r\n                        <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InventorySelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Item from \"../models/Item\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    stashImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\nconst Stash: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [stashSelectedIds, setStashSelectedIds] = React.useState<string[]>([]);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState<string[]>([]);\r\n\r\n    let [stashItems, setStashItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n\r\n    const maxItems = 8;\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const stashSelectionChanged = (ids: string[]) => setStashSelectedIds(ids);\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);;\r\n\r\n    const isStashSelected = (): boolean => stashSelectedIds.length > 0; \r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n\r\n    const willStashBeTooBig = (): boolean => (stashItems ? stashItems.length + inventorySelectedIds.length > maxItems : false);\r\n    const willInventoryBeTooBig = (): boolean => (inventoryItems ? inventoryItems.length + stashSelectedIds.length > maxItems : false);\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isStashSelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < stashSelectedIds.length; i++) {\r\n            service.removeStashItem(stashSelectedIds[i]);\r\n            service.addInventoryItem(stashSelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setStashSelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n\r\n        // TODO: How to trigger a reload?\r\n    }\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < inventorySelectedIds.length; i++) {\r\n            service.removeInventoryItem(inventorySelectedIds[i]);\r\n            service.addStashItem(inventorySelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setInventorySelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    if (!stashItems || !inventoryItems)\r\n        return null;\r\n\r\n    const stashToolTip = () => {\r\n        if (willInventoryBeTooBig())\r\n            return \"Too many items in inventory\";\r\n\r\n        return isStashSelected() ? \"Take Item from the Stash\" : \"Please select a stash item\";\r\n    }\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in stash\";\r\n\r\n        return isInventorySelected() ? \"Put Item in the Stash\" : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src=\"./images/stash.png\" alt=\"stash\" className={classes.stashImg} />\r\n                <InventorySelector items={stashItems} multiSelect={true} onSelectionChanged={stashSelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={stashToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isStashSelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willStashBeTooBig() || !isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector items={inventoryItems} multiSelect={true} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Stash;\r\n","import React from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\nimport PartySelection from \"./PartySelection\";\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\nimport StoryEncounterFinish from \"../models/InkStoryFinish\";\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        overflow: \"visible\",\r\n    },\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n        userSelect: \"none\",\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n    portrait: {\r\n        borderRadius: \"50%\",\r\n        width: \"200px\",\r\n        position: \"absolute\",\r\n        top: \"-60px\",\r\n        left: \"-60px\",\r\n        border: \"8px solid white\",\r\n    },\r\n    placeholder: {\r\n        float: \"left\",\r\n        width: \"130px\",\r\n        height: \"140px\",\r\n    },\r\n    paragraph: {\r\n        display: \"inline-block\",\r\n        width: \"100%\",\r\n    }\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveToNode?: string, startEncounterId?: string) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nconst EncounterDialog: React.FunctionComponent<EncounterDialogProps> = (props: EncounterDialogProps) => {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = React.useState(new MockEncounterService());\r\n    let [paragraph, setParagraph] = React.useState(\"\");\r\n    let [title, setTitle] = React.useState(\"\");\r\n    let [choices, setChoices] = React.useState<InkStoryChoice[]>([]);\r\n    let [storyStarted, setStoryStarted] = React.useState(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo?: string, encounterDetailId?: string) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo, encounterDetailId);\r\n    };\r\n\r\n    const handleChoice = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            const encounterFinish = encounterService.continue();\r\n            processFinish(encounterFinish.finishData);\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraph(encounter.paragraphText);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            processFinish(encounter.finishData);\r\n        }\r\n    };\r\n\r\n    const processFinish = (finish?: StoryEncounterFinish): void => {\r\n        // Finished -> Check variables\r\n        if (!finish || (!finish.moveTo && !finish.detailedEncounter)) {\r\n            handleClose();\r\n        } else {\r\n            handleCloseWithValue(finish.moveTo, finish.detailedEncounter);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n        if (encChoices.length === 0) {\r\n            return <Button onClick={handleContinue}>Continue</Button>;\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    const renderParagraph = (text: string) => {\r\n\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n        }\r\n\r\n        return (\r\n            <div className={classes.paragraph}>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelection /> : null}\r\n                {isHeroSelect ? <HeroSelector /> : null}\r\n                {isHeroDismiss ? <HeroDismiss /> : null}\r\n                {isStash ? <Stash /> : null}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                classes={{\r\n                    paper: classes.paper,\r\n                }}\r\n                className={classes.dialog}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-dialog-title\"\r\n                open={open}\r\n            >\r\n                <DialogContent className={classes.content}>\r\n                    <img src=\"./images/knight.jpg\" className={classes.portrait} alt=\"portrait\" />\r\n                    <div className={classes.placeholder}></div>\r\n                    {/* <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" /> */}\r\n                    <h1>{title}</h1>\r\n                    {renderParagraph(paragraph)}\r\n                </DialogContent>\r\n                <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EncounterDialog;\r\n","import React from \"react\";\r\n\r\nimport Leaflet from \"leaflet\";\r\nimport { Marker, Tooltip } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\n\r\nimport { Node } from \"ngraph.graph\";\r\nimport { NodeData } from \"../../models/MapGraph\";\r\n\r\nconst useStyles = makeStyles({\r\n    tooltip: {\r\n        padding: \"3px 8px 3px 3px\",\r\n        height: \"32px\",\r\n        display: \"inline-flex\",\r\n        fontSize: \"0.8125rem\",\r\n        // //transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        alignItems: \"center\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"',\r\n        whiteSpace: \"nowrap\",\r\n        borderRadius: \"10px\",\r\n        verticalAlign: \"middle\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        color: \"#616161\",\r\n        marginLeft: \"3px\",\r\n        marginRight: \"5px\",\r\n        width: \"1em\",\r\n        height: \"1em\",\r\n        display: \"inline-block\",\r\n        fontSize: \"1.5rem\",\r\n        //transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        flexShrink: 0,\r\n        userSelect: \"none\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype VertexMarkerProps = {\r\n    vertex: Node<NodeData>;\r\n    onHover: (id: string) => void;\r\n    onHoverEnd: (id: string) => void;\r\n    onClick: (id: string) => void;\r\n};\r\n\r\nconst VertexMarker: React.FunctionComponent<VertexMarkerProps> = (props: VertexMarkerProps) => {\r\n\r\n    const { vertex, onHover, onHoverEnd, onClick } = props;\r\n    const vertextId = vertex.id.toString();\r\n\r\n    const classes = useStyles();\r\n\r\n    const iconConversionX = 1.4;\r\n    const iconConversionY = 1.5;\r\n\r\n    const renderTooltipIcon = () => {\r\n        if (vertex.data.exitId) \r\n            return <ExitToAppIcon className={classes.icon} />;\r\n\r\n        // Render icons for special encounters\r\n        switch(vertex.data.encounterId) {\r\n            case \"home\":\r\n                return <HomeIcon className={classes.icon} />;\r\n            default:\r\n                return <GpsFixedIcon className={classes.icon} />;\r\n        }\r\n    }\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: vertex.data.marker ? `/images/markers/${vertex.data.marker.image}.png` : \"images/blank.svg\",\r\n        iconSize: vertex.data.marker\r\n            ? [vertex.data.marker.dimensions[0] * iconConversionX, vertex.data.marker.dimensions[1] * iconConversionY]\r\n            : [50, 50],\r\n        iconAnchor: vertex.data.marker\r\n            ? [vertex.data.marker.anchor[0] * iconConversionX, vertex.data.marker.anchor[1] * iconConversionY]\r\n            : [25, 25],\r\n        className: vertex.data.marker ? \"vertex-icon\" : vertex.data.exitId ? \"exit-icon\" : \"bullseye-icon\",\r\n    });\r\n\r\n    // Note: Leaflet tooltips breaks the onclick detection on the map object\r\n    return (\r\n        <Marker\r\n            key={vertextId}\r\n            position={vertex.data.position}\r\n            icon={icon}\r\n            onclick={() => onClick(vertextId)}\r\n            onmouseover={() => onHover(vertextId)}\r\n            onmouseout={() => onHoverEnd(vertextId)}\r\n        >\r\n            <Tooltip className={classes.tooltip}>\r\n                {renderTooltipIcon()}\r\n                <span>{vertex.id.toString()}</span>\r\n            </Tooltip>\r\n        </Marker>\r\n    );\r\n};\r\n\r\nexport default VertexMarker;\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n  length = (): number => this._store.length;\r\n}\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        // ES: Ignore slides where destination is same as the source\r\n        // ES: I'm not sure why this happens when any state is set on the encounter page\r\n        // const slideTo = latLng(this._slideToLatLng)\r\n        // if (slideTo.lat === this.getLatLng().lat && slideTo.lng === this.getLatLng().lng)\r\n        //     return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import { createPortal } from \"react-dom\";\r\nimport Drift_Marker from \"./Drift_Marker\";\r\nimport { DivIcon, LatLngExpression } from \"leaflet\";\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from \"react-leaflet\";\r\n\r\ntype LeafletElement = Drift_Marker;\r\n\r\ntype DriftMarker2Props = {\r\n    draggable?: boolean;\r\n    opacity?: number;\r\n    position: LatLngExpression;\r\n    duration: number;\r\n    keepAtCenter?: boolean;\r\n    zIndexOffset?: number;\r\n    onClick?: (name: DriftMarker2) => void;\r\n    onMoveEnd?: (name: DriftMarker2) => void;\r\n    onMouseOver?: (name: DriftMarker2) => void;\r\n    onMouseOut?: (name: DriftMarker2) => void;\r\n} & MapLayerProps;\r\n\r\n/*\r\n * A marker combining the drift marker and allowing react components as children\r\n * Modified from CustomMarker & here : https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n */\r\nclass DriftMarker2 extends MapLayer<DriftMarker2Props, LeafletElement> {\r\n    // private onMoveEndCallback?: (name: DriftMarker2) => void;\r\n    // private onClickCallback?: (name: DriftMarker2) => void;\r\n    // private onHover?: (name: DriftMarker2) => void;\r\n    // private onHoverEnd?: (name: DriftMarker2) => void;\r\n\r\n    leafletElement: any;\r\n\r\n    createLeafletElement(props: DriftMarker2Props): any {\r\n        const { position, ...rest } = props;\r\n\r\n        // // when not providing className, the element's background is a white square\r\n        // // when not providing iconSize, the element will be 12x12 pixels\r\n        const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n        const el = new Drift_Marker(position, { icon: icon, ...rest }) as any;\r\n\r\n        // this.onMoveEndCallback = props.onMoveEnd;\r\n        // this.onClickCallback = props.onClick;\r\n        // el.onHover = props.onHover;\r\n        // el.onHoverEnd = props.onHoverEnd;\r\n        // el.on(\"moveend\", this.moveEnd);\r\n        // el.on(\"click\", this.clicked);\r\n        // el.on(\"moveend\", () => {\r\n        //     if (props.onMoveEnd) this.moveEnd(props.onMoveEnd);\r\n        // });\r\n        // el.on(\"click\", () => {\r\n        //     if (props.onClick) this.moveEnd(props.onClick);\r\n        // });\r\n        // el.on(\"mouseover\", () => {\r\n        //     debugger;\r\n        //     if (this.onHover) {\r\n        //         this.onHover(this);\r\n        //     }\r\n        // });\r\n        // el.on(\"mouseout\", () => {\r\n        //     if (this.onHoverEnd) {\r\n        //         this.onHoverEnd(this);\r\n        //     }\r\n        // });\r\n        this.contextValue = { ...props.leaflet, popupContainer: el };\r\n        return el;\r\n    }\r\n\r\n    // moveEnd(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onMoveEndCallback) {\r\n    //     //     this.onMoveEndCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    // clicked(callback: (name: DriftMarker2) => void) {\r\n    //     // if (this.onClickCallback) {\r\n    //     //     this.onClickCallback(this);\r\n    //     // }\r\n    //     //callback(this);\r\n    // }\r\n\r\n    componentWillMount() {\r\n        if (super.componentWillMount) {\r\n            super.componentWillMount();\r\n        }\r\n        this.leafletElement = this.createLeafletElement(this.props);\r\n        this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n    }\r\n\r\n    // Turning this on stops the moveend update\r\n    // componentDidUpdate(fromProps: any) {\r\n    //     this.updateLeafletElement(fromProps, this.props);\r\n    // }\r\n\r\n    updateLeafletElement(fromProps: DriftMarker2Props, toProps: DriftMarker2Props) {\r\n        if (toProps.position !== fromProps.position && typeof toProps.duration == \"number\") {\r\n            this.leafletElement.slideTo(toProps.position, {\r\n                duration: toProps.duration,\r\n                keepAtCenter: toProps.keepAtCenter,\r\n            });\r\n        }\r\n        if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n            this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\r\n        }\r\n        if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n            this.leafletElement.setOpacity(toProps.opacity);\r\n        }\r\n        if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n            if (toProps.draggable === true) {\r\n                this.leafletElement.dragging.enable();\r\n            } else {\r\n                this.leafletElement.dragging.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const container = this.leafletElement._icon;\r\n\r\n        if (!container) {\r\n            return null;\r\n        }\r\n\r\n        const portal = createPortal(children, container);\r\n\r\n        return children == null || this.contextValue == null ? null : <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>;\r\n    }\r\n}\r\n\r\nexport default withLeaflet<DriftMarker2Props>(DriftMarker2);\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { LatLng } from \"leaflet\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\n\r\ntype PartyMarkerProps = {\r\n    name: string;\r\n    id: string;\r\n    imageUrl: string;\r\n    position: LatLng;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (id: string) => void;\r\n    onMoveEnd: (id: string) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst PartyMarker: React.FunctionComponent<PartyMarkerProps> = (props: PartyMarkerProps) => {\r\n    const { id, imageUrl, isActive, position, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-25px\",\r\n            left: \"-25px\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={position}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(id)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(id);\r\n            }}\r\n        >\r\n            <div>\r\n                <img src={imageUrl} className={isActive ? classes.iconActive : classes.icon} alt=\"party\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default PartyMarker;\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Polyline } from \"react-leaflet\";\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\nimport VertexMarker from \"./markers/VertexMarker\";\r\n\r\n// Pathfinding imports\r\nimport npath from \"ngraph.path\";\r\nimport { Node } from \"ngraph.graph\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport Queue from \"../models/Queue\";\r\nimport { MapGraph, NodeData } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport PartyMarker from \"./markers/PartyMarker\";\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    graph: MapGraph; // The map graph data\r\n    mapUrl: string;\r\n    pathColor: string; // The default path colour is brown\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMap: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState, graph, mapUrl, pathColor, onNewMap } = props;\r\n\r\n    const [pos, setPos] = React.useState<LatLng | undefined>(undefined); // The current (target) position of the player marker\r\n    const [path, setPath] = React.useState<LatLng[]>([]); // The path to the hovered vertex\r\n    const [vertexQueue] = React.useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    const [gameState, setGameState] = React.useState<GameState>(startState);\r\n    const [initialNode, setInitialNode] = React.useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (name: string) => {\r\n        console.log(`Move ended : ${name} with ${vertexQueue.length()} queued`);\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update user state\r\n            gameState.currentVertextId = targetVertex.id.toString();\r\n            setGameState(gameState);\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState: GameState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                        currentEncounterId: undefined,\r\n                        seed: startState.seed,\r\n                    };\r\n\r\n                    vertexQueue.clear();\r\n                    onNewMap(newState);\r\n                }\r\n            } else if (vertexQueue.length() <= 0) {\r\n                // Save the movement if its the last move\r\n                const stateService = new MockGameStateService();\r\n                const newState = stateService.getState();\r\n                newState.currentVertextId = targetVertex.id.toString();\r\n                stateService.setState(newState);\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n    };\r\n\r\n    const onClick = (vertexId: string) => {\r\n        console.log(`Clicked on vertex ${vertexId}`);\r\n\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        if (path.length <= 1) {\r\n            console.log(`No route found to ${vertexId}`);\r\n            return;\r\n        }\r\n\r\n        path.pop(); // Remove the current/start node\r\n\r\n        vertexQueue.clear();\r\n        let nextVertex = path.pop();\r\n        while (nextVertex) {\r\n            vertexQueue.push(nextVertex);\r\n            // Stop if a vertex with an an encounter is hit\r\n            if (nextVertex.data.encounterId) {\r\n                break;\r\n            }\r\n            nextVertex = path.pop();\r\n        }\r\n\r\n        handleMoveEnd(\"party\"); // Trigger the move to the next vertex\r\n    };\r\n\r\n    // On hover, show the path to the marker\r\n    const onHover = (vertexId: string) => {\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        let pathVertexes = path.map((p) => p.data.position);\r\n        setPath(pathVertexes);\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(\"party\");\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (encounterDetailId) {\r\n            console.log(\"Start detailed encounter : \" + encounterDetailId);\r\n            const newState: GameState = {\r\n                currentMapId: startState.currentMapId,\r\n                currentVertextId: startState.currentVertextId,\r\n                currentEncounterId: encounterDetailId,\r\n                seed: startState.seed,\r\n            };\r\n\r\n            vertexQueue.clear();\r\n            onNewMap(newState);\r\n        }\r\n\r\n        if (moveTo) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (initialNode) {\r\n            console.log(\"Initial node : \" + gameState.currentMapId + \", \" + gameState.currentVertextId);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(graph, gameState.currentVertextId);\r\n            setInitialNode(false);\r\n        }\r\n    }, [initialNode, gameState.currentMapId, gameState.currentVertextId, moveToVertexId, graph]);\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n\r\n    if (!pos) return null;\r\n\r\n    const renderMarkers = (graph: MapGraph) =>\r\n        graph\r\n            .getVertices()\r\n            .map((v) => <VertexMarker key={v.id} vertex={v} onHover={onHover} onHoverEnd={() => setPath([])} onClick={onClick} />);\r\n\r\n    return (\r\n        <Map\r\n            crs={CRS.Simple}\r\n            zoom={-1}\r\n            minZoom={-1}\r\n            maxZoom={-1}\r\n            bounds={bounds}\r\n            maxBounds={bounds}\r\n            scrollWheelZoom={false}\r\n            onClick={handleClick}\r\n            zoomControl={false}\r\n        >\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n            <ImageOverlay url={mapUrl} bounds={bounds} />\r\n            {renderMarkers(graph)}\r\n            <Polyline positions={path} color={pathColor} dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n            <PartyMarker name=\"party\" id=\"party\" imageUrl=\"images/knight.jpg\" position={pos} onMoveEnd={handleMoveEnd} isActive={true} />\r\n        </Map>\r\n    );\r\n};\r\n\r\nexport default OverheadMap;\r\n","import React from \"react\";\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nconst LoadingProgress: React.FunctionComponent = () => {\r\n    const useStyles = makeStyles(() => ({\r\n        root: {\r\n            textAlign: \"center\",\r\n            padding: \"40vh 0 0 0\",\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingProgress;\r\n","import React from 'react';\r\n\r\n// Models\r\nimport GameState from '../models/GameState';\r\nimport { MapGraph } from '../models/MapGraph';\r\n\r\n// Services\r\nimport MockMapService from \"../services/MockMapService\";\r\nimport GraphBuilder from \"../services/GraphBuilder\";\r\nimport OverheadMap from './OverheadMap';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMapLoader: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n\r\n    const { startState } = props;\r\n\r\n    let [graph, setGraph] = React.useState<MapGraph | undefined>(undefined); // The map graph data\r\n    let [pathColor, setPathColor] = React.useState<string | undefined>(undefined);\r\n\r\n    let [mapUrl, setMapUrl] = React.useState<string | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const service = new MockMapService();\r\n\r\n            const data = service.getMap(startState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\r\n                `Loaded map : ${startState.currentMapId}, ${startState.currentVertextId}. ${data?.vertices.length} vertices. Path Color ${\r\n                    data.pathColor ?? \"None\"\r\n                }`\r\n            );\r\n\r\n            setMapUrl(data.imageUrl);\r\n            setPathColor(data.pathColor ?? \"#5E4E00\"); // The default path colour is brown\r\n\r\n            const mapGraph = GraphBuilder.Build(data);\r\n            setGraph(mapGraph);\r\n        };\r\n\r\n        if (!graph) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n\r\n        props.onNewMap(newState);\r\n\r\n        // Force a reload of the map\r\n        // Need to set the graph last, or the load can happen after the useEffect\r\n        setMapUrl(undefined);\r\n        setPathColor(undefined);\r\n        setGraph(undefined);\r\n    };\r\n\r\n    if (!mapUrl || !graph || !pathColor) return <LoadingProgress />;\r\n\r\n    return <OverheadMap startState={startState} graph={graph} mapUrl={mapUrl} pathColor={pathColor} onNewMap={onNewMap} />;\r\n};\r\n\r\nexport default OverheadMapLoader;\r\n","import EncounterDetail from \"../models/EncounterDetail\";\r\n\r\nimport TavernMap from \"./encounter-maps/tavern.json\";\r\n\r\nexport default class MockDetailedEncounterService {\r\n    public getEncounterDetail(id: string): EncounterDetail | null {\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"tavern\":\r\n            default:\r\n                json = TavernMap;\r\n                break;\r\n        }\r\n\r\n        return json\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype HeroMarkerProps = {\r\n    hero: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (hero: CharacterEncounterData) => void;\r\n    onMoveEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A marker that represents a hero\r\n */\r\nconst HeroMarker: React.FunctionComponent<HeroMarkerProps> = (props: HeroMarkerProps) => {\r\n    const { hero, isActive, duration, onClick, onMoveEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-32px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid lightgrey\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid gold\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (hero.details.stats.currentHitPoints / hero.details.stats.maxHitPoints) * 100;\r\n\r\n    if (!hero.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={hero.displayPos}\r\n            keepAtCenter={false}\r\n            onMoveEnd={(_: any) => onMoveEnd(hero)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(hero);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={isActive ? 7 : 5}\r\n                    size={isActive ? 68 : 62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={hero.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={hero.details.name} />\r\n            </div>\r\n            <div className={classes.root}></div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default HeroMarker;\r\n","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\n\r\nexport default class Transforms {\r\n    // Conversion functions from isometric to cardinal co-ordinates\r\n    public static isoX = (carX: number, carY: number): number => carX + carY;\r\n    public static isoY = (carX: number, carY: number): number => carY - carX;\r\n\r\n    /*\r\n     * Convert cardinal co-ordinates to isometric co-ordinates\r\n     */\r\n    public static cardinalToIsometric = (car: LatLngTuple): LatLng =>\r\n        latLng(Transforms.isoY(car[0], car[1]), Transforms.isoX(car[0], car[1]));\r\n\r\n    public static cardinalToIsometric2 = (car: LatLng): LatLng =>\r\n        latLng(Transforms.isoY(car.lat, car.lng), Transforms.isoX(car.lat, car.lng));\r\n\r\n    public static carX = (isoX: number, isoY: number): number => (isoX + isoY) * 0.5;\r\n    public static carY = (isoX: number, isoY: number): number => (isoY - isoX) * 0.5;\r\n\r\n    /*\r\n     * Convert isometric co-ordinates to cardinal co-ordinates\r\n     */\r\n    public static isometricToCardinal = (iso: LatLng): LatLng =>\r\n        latLng(Transforms.carY(iso.lat, iso.lng), Transforms.carX(iso.lat, iso.lng));\r\n\r\n    public static offset = (iso: LatLng, offset: LatLngTuple): LatLng => latLng(iso.lat + offset[0], iso.lng + offset[1]);\r\n    public static scale = (iso: LatLng, scale: LatLngTuple): LatLng => latLng(iso.lat * scale[0], iso.lng * scale[1]);\r\n}","import { latLng, LatLng, LatLngTuple } from \"leaflet\";\r\nimport Transforms from \"./Transforms\";\r\nimport EncounterDetail, { GridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { AStarFinder } from \"astar-typescript\";\r\nimport Hero from \"../models/Hero\";\r\n\r\nexport default class GridHelpers {\r\n    // Convert a grid co-ordinate to a display co-ordinate by converting to isometric, scaling & offsetting\r\n    public static gridToDisplayTuple = (car: LatLngTuple, encounter: EncounterDetail): LatLng =>\r\n        Transforms.offset(Transforms.scale(Transforms.cardinalToIsometric(car), encounter.gridScale), encounter.gridOffset);\r\n\r\n    public static gridToDisplayCenterTuple = (car: LatLngTuple, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayTuple([car[0] + 0.5, car[1] + 0.5], encounter);\r\n\r\n    public static gridToDisplay = (car: LatLng, encounter: EncounterDetail): LatLng =>\r\n        GridHelpers.gridToDisplayTuple([car.lat, car.lng], encounter);\r\n\r\n    public static gridToDisplayCenter = (car: LatLng, encounter: EncounterDetail) =>\r\n        GridHelpers.gridToDisplayCenterTuple([car.lat, car.lng], encounter);\r\n\r\n    // And the reverse transforms\r\n    public static reverseOffset = (coords: LatLng, gridOffset: LatLngTuple) => Transforms.offset(coords, [-gridOffset[0], -gridOffset[1]]);\r\n\r\n    public static reverseScale = (coords: LatLng, gridScale: LatLngTuple) =>\r\n        Transforms.scale(coords, [1.0 / gridScale[0], 1.0 / gridScale[1]]);\r\n\r\n    public static displayToGrid = (iso: LatLng, encounter: EncounterDetail): [number, number] => {\r\n        const { gridOffset, gridScale } = encounter;\r\n\r\n        const result = Transforms.isometricToCardinal(GridHelpers.reverseScale(GridHelpers.reverseOffset(iso, gridOffset), gridScale));\r\n        return [Math.floor(result.lat), Math.floor(result.lng)];\r\n    };\r\n\r\n    /*\r\n     * Get the first found location for a grid entry (hero or encoutner ID)\r\n     */\r\n    private static getGridLocation = (grid: TokenGridEntry[][], char: GridEntry): LatLng | undefined => {\r\n        for (let x = 0; x < grid.length; x++) {\r\n            const currentRow = grid[x];\r\n            const index = currentRow.indexOf(char);\r\n            if (index >= 0) {\r\n                return latLng(x, index);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    /*\r\n     * Get the initial locations for a grid entry (hero or encoutner ID)\r\n     */\r\n    public static getInitialPositions = (encounter: EncounterDetail, characters: [NpcGridEntry, Hero][]): CharacterEncounterData[] => {\r\n        return characters.map((c: [NpcGridEntry, Hero]) => {\r\n            const gridPosition = GridHelpers.getGridLocation(encounter.tokenGrid, c[0]);\r\n            return new CharacterEncounterData(\r\n                c[1],\r\n                c[0],\r\n                gridPosition,\r\n                GridHelpers.gridToDisplayCenter(gridPosition ?? latLng([0, 0]), encounter)\r\n            );\r\n        });\r\n    };\r\n\r\n    public static mergeGridEntry = (tokenEntry: TokenGridEntry, baseEntry: GridEntry): GridEntry =>\r\n        tokenEntry !== \" \" ? (tokenEntry as GridEntry) : baseEntry;\r\n\r\n    private static buildMergedGrids(tokenGrid: TokenGridEntry[][], grid: GridEntry[][]): GridEntry[][] {\r\n        const output: GridEntry[][] = [];\r\n\r\n        for (let x = 0; x < grid.length; x++) {\r\n            output[x] = [];\r\n            for (let y = 0; y < grid.length; y++) {\r\n                output[x][y] = GridHelpers.mergeGridEntry(tokenGrid[x][y], grid[x][y]);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    private static buildAstarGrid = (grid: GridEntry[][]): number[][] => {\r\n        return grid.map((e) => e.map((item) => (GridHelpers.isWalkable(item) ? 0 : 1)));\r\n    };\r\n\r\n    public static getGridPath = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng,\r\n        end: LatLng,\r\n        isHeroMove: boolean\r\n    ): number[][] => {\r\n        const mergedGrid = GridHelpers.buildMergedGrids(tokenGrid, grid);\r\n        const endEntry = mergedGrid[end.lat][end.lng];\r\n\r\n        const isFoe = GridHelpers.isFoe(endEntry);\r\n        const isHero = GridHelpers.isHero(endEntry);\r\n        const isBlocked = endEntry === \"0\";\r\n\r\n        // Allow movement on start/end points\r\n        mergedGrid[start.lat][start.lng] = \"1\";\r\n        if (isHeroMove && !isBlocked && !isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n        else if (!isHeroMove && !isBlocked && isHero) mergedGrid[end.lat][end.lng] = \"1\";\r\n\r\n        // Build a new crid each time because everything heroes, foes move\r\n        const aStar = new AStarFinder({\r\n            grid: {\r\n                matrix: GridHelpers.buildAstarGrid(mergedGrid),\r\n            },\r\n        });\r\n\r\n        const startGridPosition = { x: start.lng, y: start.lat };\r\n        const endGridPosition = { x: end.lng, y: end.lat };\r\n\r\n        //console.log(`Path from : (${startGridPosition.x},${startGridPosition.y}) to (${endGridPosition.x},${endGridPosition.y})`);\r\n\r\n        const path = aStar.findPath(startGridPosition, endGridPosition);\r\n\r\n        //console.log(`Path length : ${path.length}`);\r\n        // If attacking a foe, don't move onto the foe\r\n        if (isFoe || isHero) path.pop();\r\n\r\n        return path.reverse();\r\n    };\r\n\r\n    public static getHeroPath = (tokenGrid: TokenGridEntry[][], grid: GridEntry[][], start: LatLng, end: LatLng): number[][] =>\r\n        GridHelpers.getGridPath(tokenGrid, grid, start, end, true);\r\n\r\n    public static getFoePath = (tokenGrid: TokenGridEntry[][], grid: GridEntry[][], start: LatLng, end: LatLng): number[][] =>\r\n        GridHelpers.getGridPath(tokenGrid, grid, start, end, false);\r\n\r\n    public static findNearestHero = (\r\n        tokenGrid: TokenGridEntry[][],\r\n        grid: GridEntry[][],\r\n        start: LatLng\r\n    ): [GridEntry, number[][]] | undefined => {\r\n        const paths: [GridEntry, number[][]][] = [];\r\n        const heroEntries: HeroGridEntry[] = [\"A\", \"B\", \"C\", \"D\"];\r\n        for (let i = 0; i < heroEntries.length; i++) {\r\n            const end = GridHelpers.getGridLocation(tokenGrid, heroEntries[i]);\r\n            if (end) {\r\n                paths.push([heroEntries[i], GridHelpers.getFoePath(tokenGrid, grid, start, end)]);\r\n            }\r\n        }\r\n\r\n        const sortedPaths = paths.filter((p) => p[1].length > 0).sort((p1, p2) => p1[1].length - p2[1].length);\r\n        return sortedPaths.length > 0 ? sortedPaths[0] : undefined;\r\n    };\r\n\r\n    public static isHero = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"A\":\r\n            case \"B\":\r\n            case \"C\":\r\n            case \"D\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isEncounter = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"E\":\r\n            case \"F\":\r\n            case \"G\":\r\n            case \"H\":\r\n            case \"I\":\r\n            case \"J\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isFoe = (entry: GridEntry) => {\r\n        switch (entry) {\r\n            case \"K\":\r\n            case \"L\":\r\n            case \"M\":\r\n            case \"N\":\r\n            case \"O\":\r\n            case \"P\":\r\n            case \"Q\":\r\n            case \"R\":\r\n            case \"S\":\r\n            case \"T\":\r\n            case \"U\":\r\n            case \"V\":\r\n            case \"W\":\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n\r\n    public static isWalkable = (entry: GridEntry) => entry !== \"0\" && !GridHelpers.isFoe(entry) && !GridHelpers.isHero(entry);\r\n\r\n    public static canEndMove = (entry: GridEntry) => entry === \"1\" || entry === \"2\" || entry === \"X\" || GridHelpers.isEncounter(entry);\r\n\r\n    public static displayGrid = (tokenGrid: TokenGridEntry[][]): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < tokenGrid.length; i++) {\r\n            displayStrings.push(tokenGrid[i].join(\" - \"));\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","\r\nimport { LatLng } from \"leaflet\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport { NpcGridEntry } from \"./EncounterDetail\";\r\nimport Hero from \"./Hero\";\r\nimport Queue from \"./Queue\";\r\n\r\nexport default class CharacterEncounterData {\r\n    constructor(details: Hero, gridEntry: NpcGridEntry, gridPos?: LatLng, displayPos?: LatLng, vertexQueue?: Queue<[number, number]>) {\r\n        this.gridPos = gridPos;\r\n        this.gridEntry = gridEntry;\r\n        this.displayPos = displayPos;\r\n        this.vertexQueue = vertexQueue ?? new Queue<[number, number]>();\r\n        this.details = details;\r\n    }\r\n\r\n    public details: Hero;\r\n\r\n    public gridEntry: NpcGridEntry;\r\n\r\n    public gridPos?: LatLng;\r\n\r\n    public displayPos?: LatLng;\r\n\r\n    public vertexQueue;\r\n\r\n    public static buildFromGrid(gridPos: LatLng | undefined, convertFunc: (pos: LatLng) => LatLng): CharacterEncounterData {\r\n        const result = <CharacterEncounterData>{\r\n            gridPos: gridPos,\r\n            displayPos: gridPos ? convertFunc(gridPos) : undefined,\r\n            vertexQueue: new Queue<[number, number]>(),\r\n        };\r\n        return result;\r\n    }\r\n\r\n    // TODO: Disable path display when moving\r\n    public isMoving = (): boolean => this.vertexQueue.length() > 0;\r\n\r\n    public toString(): string {\r\n        const queueStrings = this.vertexQueue._store.map((i) => `${i[0]},${i[1]}`);\r\n\r\n        return `${this.gridPos?.lat},${this.gridPos?.lng} display ${this.displayPos?.lat},${this.displayPos?.lng} [${queueStrings.join(\r\n            \"],[\"\r\n        )}]`;\r\n    }\r\n\r\n    public isFoe = (): boolean => GridHelpers.isFoe(this.gridEntry);\r\n\r\n    public isHero = (): boolean => GridHelpers.isHero(this.gridEntry);\r\n}\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLng, LatLngTuple } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { GridEntry } from \"../../models/EncounterDetail\";\r\nimport GridHelpers from \"../../helpers/GridHelpers\";\r\n\r\ntype GridMarkerProps = {\r\n    gridPos: [number, number];\r\n    entry: GridEntry;\r\n    gridToDisplayFunc: (car: LatLngTuple) => LatLng;\r\n    onHover: (gridPos: [number, number]) => void;\r\n    onHoverEnd: (gridPos: [number, number]) => void;\r\n    onClick: (gridPos: [number, number]) => void;\r\n};\r\n\r\nconst GridMarker: React.FunctionComponent<GridMarkerProps> = (props: GridMarkerProps) => {\r\n    const { gridPos, entry, gridToDisplayFunc, onHover, onHoverEnd, onClick } = props;\r\n\r\n    const displayPos = gridToDisplayFunc([gridPos[0] + 0.5, gridPos[1] + 0.5]);\r\n\r\n    const isHero = GridHelpers.isHero(entry);\r\n    const isFoe = GridHelpers.isFoe(entry);\r\n    if (isHero || isFoe) return null; // No markers on hero or foe positions\r\n        \r\n    const canEndMove = GridHelpers.canEndMove(entry);\r\n\r\n    const iconUrl = canEndMove ? \"/images/bullseye-flat.svg\" : \"/images/times-solid.svg\";\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        // TODO: Size not scaled\r\n        iconSize: [50, 50],\r\n        iconAnchor: [25, 25],\r\n        className: \"hover-icon\",\r\n    });\r\n\r\n    return (\r\n        <Marker\r\n            key={`${gridPos[0]}.${gridPos[1]}`}\r\n            position={displayPos}\r\n            icon={icon}\r\n            onclick={() => onClick(gridPos)}\r\n            onmouseover={() => onHover(gridPos)}\r\n            onmouseout={() => onHoverEnd(gridPos)}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GridMarker;\r\n","import React from \"react\";\r\n\r\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport SportsKabaddiIcon from \"@material-ui/icons/SportsKabaddi\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        zIndex: 501,\r\n        position: \"absolute\",\r\n        bottom: \"30px\",\r\n        right: \"30px\",\r\n    },\r\n    icon: {\r\n    },\r\n});\r\n\r\ntype CombatIndicatorProps = {\r\n    isCombat: boolean;\r\n    initiative: number;\r\n};\r\n\r\nconst CombatIndicator: React.FunctionComponent<CombatIndicatorProps> = (props: CombatIndicatorProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            {props.isCombat ? (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <Typography>{Math.round(props.initiative)}</Typography>\r\n                    &nbsp;&nbsp;&nbsp;\r\n                    <SportsKabaddiIcon className={classes.icon} />\r\n                </Button>\r\n            ) : (\r\n                <Button variant=\"contained\" size=\"large\" className={classes.button}>\r\n                    <VisibilityIcon className={classes.icon} />\r\n                </Button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatIndicator;\r\n","import React from \"react\";\r\n\r\nimport { makeStyles, CircularProgress } from \"@material-ui/core\";\r\n\r\nimport DriftMarker from \"./DriftMarker2\";\r\nimport CharacterEncounterData from \"../../models/CharacterEncounterData\";\r\n\r\ntype FoeMarkerProps = {\r\n    foe: CharacterEncounterData;\r\n    isActive: boolean;\r\n    duration?: number;\r\n    onClick?: (foe: CharacterEncounterData) => void;\r\n    onMoveEnd: (foe: CharacterEncounterData) => void;\r\n    onHover: (hero: CharacterEncounterData) => void;\r\n    onHoverEnd: (hero: CharacterEncounterData) => void;\r\n};\r\n\r\n/*\r\n * A map marker that represents an enemy or foe\r\n */\r\nconst FoeMarker: React.FunctionComponent<FoeMarkerProps> = (props: FoeMarkerProps) => {\r\n    const { foe, isActive, duration, onClick, onMoveEnd, onHover, onHoverEnd } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            top: \"-30px\",\r\n            left: \"-54px\",\r\n        },\r\n        icon: {\r\n            borderRadius: \"50%\",\r\n            border: \"6px solid indianred\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            position: \"absolute\",\r\n            \"&:hover\": {\r\n                border: \"6px solid red\",\r\n            },\r\n        },\r\n        iconActive: {\r\n            borderRadius: \"50%\",\r\n            border: \"8px solid red\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            zIndex: 8,\r\n        },\r\n        meleeHover: {\r\n            position: \"absolute\",\r\n            zIndex: 9,\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            opacity: 0,\r\n            \"&:hover\": {\r\n                filter: \"invert(1)\",\r\n                opacity: 1,\r\n            },\r\n        },\r\n        circularProgress: {\r\n            color: \"#444\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const percentHp = (foe.details.stats.currentHitPoints / foe.details.stats.maxHitPoints) * 100;\r\n\r\n    //const ff = foe.details;\r\n\r\n    //console.log(`# ${ff.id},${foe.gridEntry} has ${percentHp}% hp`);\r\n\r\n    if (!foe.displayPos) return null;\r\n\r\n    return (\r\n        <DriftMarker\r\n            duration={duration ?? 1000}\r\n            position={foe.displayPos}\r\n            keepAtCenter={false}\r\n            onMouseOver={() => onHover(foe)}\r\n            onMouseOut={() => onHoverEnd(foe)}\r\n            onMoveEnd={(_: any) => onMoveEnd(foe)}\r\n            onClick={() => {\r\n                if (onClick !== undefined) onClick(foe);\r\n            }}\r\n        >\r\n            <div className={classes.root}>\r\n                <CircularProgress\r\n                    classes={{\r\n                        colorPrimary: classes.circularProgress,\r\n                    }}\r\n                    className={classes.progress}\r\n                    variant=\"determinate\"\r\n                    value={100 - percentHp}\r\n                    thickness={5}\r\n                    size={62}\r\n                    color=\"primary\"\r\n                />\r\n                <img src={foe.details.imageUrl} className={isActive ? classes.iconActive : classes.icon} alt={foe.details.name} />\r\n                <img src=\"./images/melee.svg\" className={classes.meleeHover} alt=\"melee\" />\r\n            </div>\r\n        </DriftMarker>\r\n    );\r\n};\r\n\r\nexport default FoeMarker;\r\n","import React from \"react\";\r\n\r\nimport Leaflet, { LatLngExpression } from \"leaflet\";\r\nimport { Marker } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        filter: \"invert(100%)\",\r\n    },\r\n});\r\n\r\ntype StaticMarkerProps = {\r\n    displayPos: LatLngExpression | undefined;\r\n    iconUrl: string;\r\n    width: number;\r\n    height: number;\r\n};\r\n\r\nconst StaticMarker: React.FunctionComponent<StaticMarkerProps> = (props: StaticMarkerProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { displayPos, iconUrl, width, height } = props;\r\n\r\n    if (!displayPos) return null;\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: iconUrl,\r\n        iconSize: [width, height],\r\n        iconAnchor: [width >> 1, height >> 1],\r\n        className: classes.icon,\r\n    });\r\n\r\n    return <Marker key={displayPos.toString()} position={displayPos} icon={icon} />;\r\n};\r\n\r\nexport default StaticMarker;\r\n","import React from \"react\";\r\nimport { LatLng } from \"leaflet\";\r\nimport { Polyline } from \"react-leaflet\";\r\nimport StaticMarker from \"./StaticMarker\";\r\n\r\ntype CombatPathProps = {\r\n    // How far the hero can move\r\n    move: number;\r\n\r\n    // The path color\r\n    pathColor: string;\r\n\r\n    // The path to display\r\n    path: LatLng[];\r\n};\r\n\r\n/*\r\n* Display a movement path during combat, split into segments showing how much movement is consumed\r\n*/\r\nconst CombatPath: React.FunctionComponent<CombatPathProps> = (props: CombatPathProps): JSX.Element => {\r\n    const { move, pathColor } = props;\r\n\r\n    const fullPath = props.path;\r\n\r\n    const length = fullPath.length;\r\n    const remainderPathLength = length - move * 2;\r\n    const fullMoveStart = remainderPathLength > 0 ? remainderPathLength - 1 : 0;\r\n    const fullMoveEnd = length - move;\r\n    const halfMoveStart = fullMoveEnd > 0 ? length - move - 1 : 0;\r\n\r\n    const remainderPath = remainderPathLength > 0 ? fullPath.slice(0, remainderPathLength) : [];\r\n    const fullMovePath = fullMoveEnd > 0 ? fullPath.slice(fullMoveStart, fullMoveEnd) : [];\r\n    const halfMovePath = fullPath.slice(halfMoveStart);\r\n\r\n    // A marker for the half move path\r\n    const halfMoveMarker = halfMovePath.length > 0 ? halfMovePath[0] : undefined;\r\n\r\n    // A marker for the (!damagePos) move path\r\n    const fullMoveMarker = fullMovePath.length > 0 ? fullMovePath[0] : undefined;\r\n\r\n    return (\r\n        <div>\r\n            <StaticMarker displayPos={halfMoveMarker} iconUrl=\"./images/half.svg\" width={30} height={20} />\r\n            <StaticMarker displayPos={fullMoveMarker} iconUrl=\"./images/circle.svg\" width={30} height={20} />\r\n            <Polyline positions={remainderPath} color=\"indianred\" dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n            <Polyline positions={fullMovePath} color=\"#c6c6c6\" dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n            <Polyline positions={halfMovePath} color={pathColor} dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CombatPath;\r\n","import * as React from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { DivIcon, LatLngExpression, marker } from \"leaflet\";\r\nimport * as RL from \"react-leaflet\";\r\nimport { MapLayer, MapLayerProps } from \"react-leaflet\";\r\n\r\ntype CustomMarkerProps = {\r\n    position: LatLngExpression,\r\n    zIndexOff: number;\r\n} & MapLayerProps;\r\n\r\n/*\r\n* From:\r\n* https://stackoverflow.com/questions/47018368/implementing-a-dynamic-jsx-element-within-a-marker-using-react-leaflet\r\n*/\r\nconst CustomMarker = (RL as any).withLeaflet(\r\n    class extends MapLayer<CustomMarkerProps> {\r\n        leafletElement: any;\r\n\r\n        createLeafletElement(props: CustomMarkerProps) {\r\n            const { position, ...rest } = props;\r\n\r\n            // when not providing className, the element's background is a white square\r\n            // when not providing iconSize, the element will be 12x12 pixels\r\n            const icon = new DivIcon({ ...rest, className: \"\", iconSize: undefined });\r\n\r\n            const el = marker(position, { icon: icon, zIndexOffset: props.zIndexOff, ...rest });\r\n            this.contextValue = { ...props.leaflet, popupContainer: el };\r\n            return el;\r\n        }\r\n\r\n        updateLeafletElement(fromProps: any, toProps: any) {\r\n            const {\r\n                position: fromPosition,\r\n                zIndexOffset: fromZIndexOffset,\r\n                opacity: fromOpacity,\r\n                draggable: fromDraggable,\r\n                className: fromClassName,\r\n            } = fromProps;\r\n            const {\r\n                position: toPosition,\r\n                zIndexOffset: toZIndexOffset,\r\n                toOpacity,\r\n                draggable: toDraggable,\r\n                className: toClassName,\r\n            } = toProps;\r\n\r\n            function difference<T>(items: Array<T>, itemsToRemove: Array<T>): Array<T> {\r\n                return items.filter((item) => !itemsToRemove.includes(item));\r\n            }\r\n\r\n            if (toPosition !== fromPosition) {\r\n                this.leafletElement.setLatLng(toPosition);\r\n            }\r\n            if (toZIndexOffset !== fromZIndexOffset) {\r\n                this.leafletElement.setZIndexOffset(toZIndexOffset);\r\n            }\r\n            if (toOpacity !== fromOpacity) {\r\n                this.leafletElement.setOpacity(toOpacity);\r\n            }\r\n            if (toDraggable !== fromDraggable) {\r\n                if (toDraggable) {\r\n                    this.leafletElement.dragging.enable();\r\n                } else {\r\n                    this.leafletElement.dragging.disable();\r\n                }\r\n            }\r\n            if (toClassName !== fromClassName) {\r\n                const fromClasses = fromClassName.split(\" \");\r\n                const toClasses = toClassName.split(\" \");\r\n                this.leafletElement._icon.classList.remove(...difference(fromClasses, toClasses));\r\n                this.leafletElement._icon.classList.add(...difference(toClasses, fromClasses));\r\n            }\r\n        }\r\n\r\n        componentWillMount() {\r\n            if (super.componentWillMount) {\r\n                super.componentWillMount();\r\n            }\r\n            this.leafletElement = this.createLeafletElement(this.props);\r\n            this.leafletElement.on(\"add\", () => this.forceUpdate());\r\n        }\r\n\r\n        componentDidUpdate(fromProps: any) {\r\n            this.updateLeafletElement(fromProps, this.props);\r\n        }\r\n\r\n        render() {\r\n            const { children } = this.props;\r\n            const container = this.leafletElement._icon;\r\n\r\n            if (!container) {\r\n                return null;\r\n            }\r\n\r\n            const portal = createPortal(children, container);\r\n\r\n            const LeafletProvider = (RL as any).LeafletProvider;\r\n\r\n            return children == null || portal == null || this.contextValue == null ? null : (\r\n                <LeafletProvider value={this.contextValue}>{portal}</LeafletProvider>\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport default CustomMarker;","import React from \"react\";\r\n\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\nimport { Fade } from \"@material-ui/core\";\r\nimport CustomMarker from \"./CustomMarker\";\r\nimport { latLng, LatLng } from \"leaflet\";\r\nimport AttackResult from \"../../models/AttackResult\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"relative\",\r\n        top: \"-20px\",\r\n        left: \"-20px\",\r\n        pointerEvents: \"none\",\r\n    },\r\n    explode: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n    },\r\n    death: {\r\n        position: \"absolute\",\r\n        width: \"55px\",\r\n        height: \"55px\",\r\n        filter: \"invert(0.9)\",\r\n    },\r\n    miss: {\r\n        position: \"absolute\",\r\n        width: \"80px\",\r\n        height: \"80px\",\r\n        filter: \"invert(0.67)\", // TODO: Use different svg\r\n    },\r\n    text: {\r\n        position: \"absolute\",\r\n        color: \"white\",\r\n        top: \"27px\",\r\n        width: \"80px\",\r\n    },\r\n});\r\n\r\ntype DamageDisplayProps = {\r\n    result: AttackResult;\r\n};\r\n\r\nconst DamageDisplay: React.FunctionComponent<DamageDisplayProps> = (props: DamageDisplayProps): JSX.Element => {\r\n    const { position, damage, result } = props.result;\r\n    const classes = useStyles();\r\n\r\n    const show = damage !== undefined;\r\n\r\n    return (\r\n        <CustomMarker position={position ?? latLng([0, 0])} zIndexOff={1000}>\r\n            <Fade in={show} style={{ transitionDelay: \"300ms\" }} timeout={{ enter: 500, exit: 500 }}>\r\n                {result === \"death\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/skull.svg\" className={classes.death} alt=\"death\" />\r\n                    </div>\r\n                ) : result === \"miss\" ? (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.miss} alt=\"miss\" />\r\n                        <Typography className={classes.text}>Miss</Typography>\r\n                    </div>\r\n                ) : (\r\n                    <div className={classes.root}>\r\n                        <img src=\"images/explode1.svg\" className={classes.explode} alt=\"damage\" />\r\n                        <Typography className={classes.text}>{damage}</Typography>\r\n                    </div>\r\n                )}\r\n            </Fade>\r\n        </CustomMarker>\r\n    );\r\n};\r\n\r\nexport default DamageDisplay;\r\n","import MockGameStateService from \"./MockGameStateService\";\r\n\r\n/*\r\n* Use the random game seed & encounter ID to determine initiative values\r\n* in a random but recreateable way\r\n*/\r\nexport default class DiceRoller {\r\n    public constructor(id: string) {\r\n        const hashCode = (s: string) =>\r\n            s.split(\"\").reduce((a, b) => {\r\n                a = (a << 5) - a + b.charCodeAt(0);\r\n                return a & a;\r\n            }, 0);\r\n\r\n        const service = new MockGameStateService();\r\n        const state = service.getState();\r\n        this._encounterSeed = hashCode(id) ^ state.seed;\r\n    }\r\n\r\n    private _encounterSeed: number;\r\n\r\n    private generate(): number {\r\n        const result = DiceRoller.mulberry32(this._encounterSeed);\r\n        this._encounterSeed = result * Number.MAX_SAFE_INTEGER;\r\n        return result;\r\n    }\r\n\r\n    public rollDie = (dieType: number): number => {\r\n        return Math.ceil(this.generate() * dieType);\r\n    };\r\n\r\n    public roll20 = (): number => this.rollDie(20);\r\n\r\n    public roll10 = (): number => this.rollDie(10);\r\n\r\n    private static mulberry32(a: number): number {\r\n        var t = (a += 0x6d2b79f5);\r\n        t = Math.imul(t ^ (t >>> 15), t | 1);\r\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\r\n    }\r\n}\r\n","import { NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport Hero from \"../models/Hero\";\r\nimport DiceRoller from \"./DiceRoller\";\r\n\r\n/*\r\n * Use the random game seed & encounter ID to determine initiative values\r\n * in a random but recreateable way\r\n */\r\nexport default class InitiativeTracker {\r\n    private _initiatives: [string, NpcGridEntry, number][] = [];\r\n\r\n    constructor(initiatives: [string, NpcGridEntry, number][]) {\r\n        this._initiatives = initiatives;\r\n    }\r\n\r\n    public static buildInitial(\r\n        gameId: string,\r\n        heroes: [NpcGridEntry, Hero][],\r\n        foes: [NpcGridEntry, Hero][]\r\n    ): [string, NpcGridEntry, number][] {\r\n        // Generate some random initial initiatives\r\n        const roller = new DiceRoller(gameId);\r\n        const heroInitiatives: [string, NpcGridEntry, number][] = heroes.map((h) => {\r\n            return [h[1].id, h[0], -(roller.roll10() + h[1].attributes.dexterity.modifier)];\r\n        });\r\n        const foeInitiatives: [string, NpcGridEntry, number][] = foes.map((f) => {\r\n            return [f[1].id, f[0], -(roller.roll10() + f[1].attributes.dexterity.modifier)];\r\n        });\r\n\r\n        const initiatives = heroInitiatives.concat(foeInitiatives);\r\n        return InitiativeTracker.sort(initiatives);\r\n    }\r\n\r\n    public processDelay = (name: string, delay: number): [string, NpcGridEntry, number][] => {\r\n        const match = this._initiatives.find((init) => init[0] === name);\r\n        if (!match) {\r\n            console.log(\"Initiative not found : \" + name);\r\n            return this._initiatives;\r\n        }\r\n        match[2] += delay;\r\n        this._initiatives = InitiativeTracker.sort(this._initiatives);\r\n        return this._initiatives;\r\n    };\r\n\r\n    private static sort = (initiatives: [string, NpcGridEntry, number][]): [string, NpcGridEntry, number][] => {\r\n        const result = initiatives.sort((n1, n2) => n1[2] - n2[2]);\r\n        return result;\r\n    };\r\n\r\n    public getInitiatives = (): [string, NpcGridEntry, number][] => this._initiatives;\r\n\r\n    public getNextInitiative = () => this._initiatives[0];\r\n\r\n    public displayInitiatives = (): string[] => {\r\n        const displayStrings: string[] = [];\r\n        for (let i = 0; i < this._initiatives.length; i++) {\r\n            displayStrings.push(`${this._initiatives[i][0]} : ${this._initiatives[i][1]}`);\r\n        }\r\n        return displayStrings;\r\n    };\r\n}\r\n","import { LatLng } from \"leaflet\";\r\n\r\nexport default class AttackResult {\r\n    public constructor(result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\", damage: number, position: LatLng) {\r\n        this.result = result;\r\n        this.damage = damage;\r\n        this.position = position;\r\n    }\r\n\r\n    public result: \"miss\" | \"fumble\" | \"hit\" | \"critical\" | \"death\";\r\n    public damage: number;\r\n    public position: LatLng;\r\n\r\n    public static createMiss = (position: LatLng): AttackResult => new AttackResult(\"miss\", 0, position);\r\n    public static createFumble = (position: LatLng): AttackResult => new AttackResult(\"fumble\", 0, position);\r\n    public static createHit = (damage: number, position: LatLng): AttackResult => new AttackResult(\"hit\", damage, position);\r\n    public static createCritical = (damage: number, position: LatLng): AttackResult => new AttackResult(\"critical\", damage, position);\r\n    public static createDeath = (damage: number, position: LatLng): AttackResult => new AttackResult(\"death\", damage, position);\r\n}\r\n","import AttackResult from \"../models/AttackResult\";\r\nimport IAttackResult from \"../models/AttackResult\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport DiceRoller from \"../services/DiceRoller\";\r\n\r\n/** Combat results helper functions */\r\nexport default class CombatHelper {\r\n    public static determineAttackResult = (\r\n        encounterId: string,\r\n        attacker: CharacterEncounterData,\r\n        target: CharacterEncounterData\r\n    ): IAttackResult => {\r\n        const targetPos = target.gridPos;\r\n        const attackerPos = attacker.gridPos;\r\n\r\n        if (!attackerPos) throw new Error(\"Attacker missing position\");\r\n        if (!targetPos) throw new Error(\"Target missing position\");\r\n\r\n        const roller = new DiceRoller(encounterId);\r\n        const attackerDetail = attacker.details;\r\n        const targetDetail = target.details;\r\n\r\n        const attackRoll = roller.roll20();\r\n        const attackValue = attackerDetail.stats.attack + attackRoll;\r\n\r\n        const isMiss = attackValue < targetDetail.stats.armour;\r\n        const isFumble = attackRoll <= 1;\r\n        const isCritical = attackRoll >= 20;\r\n\r\n        if (isFumble) {\r\n            console.log(`${attackerDetail.id} : Funbles`);\r\n            // TODO: Add a fumble table?\r\n            return AttackResult.createFumble(attackerPos);\r\n        }\r\n\r\n        if (isMiss) {\r\n            // Miss\r\n            console.log(\r\n                `${attackerDetail.id} : Miss ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry})`\r\n            );\r\n            return AttackResult.createMiss(targetPos);\r\n        }\r\n\r\n        // Hit\r\n        let damage = roller.rollDie(attackerDetail.stats.damageDie) + attackerDetail.stats.damageBonus;\r\n        if (isCritical) {\r\n            damage = damage * 2;\r\n        }\r\n\r\n        console.log(\r\n            `${attackerDetail.id} hits ${attackValue} vs ${targetDetail.stats.armour} on ${targetDetail.name} (${target.gridEntry}) for ${damage}`\r\n        );\r\n\r\n        return isCritical ? AttackResult.createCritical(damage, targetPos) : AttackResult.createHit(damage, targetPos);\r\n    };\r\n}\r\n","import CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { NpcGridEntry } from \"../models/EncounterDetail\";\r\n\r\nexport default class CombatPositionHelper {\r\n    /** Update the hero or foe position */\r\n    public static updatePosition = (\r\n        newPosition: CharacterEncounterData,\r\n        oldPositions: CharacterEncounterData[]\r\n    ): CharacterEncounterData[] => {\r\n        // We need a new array here, or the update is not detected\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            newPositions.push(oldPositions[i].gridEntry === newPosition.gridEntry ? newPosition : oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Remove the position of the foe or hero (death of fled) */\r\n    public static removePosition = (entry: NpcGridEntry, oldPositions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < oldPositions.length; i++) {\r\n            if (oldPositions[i].gridEntry !== entry) newPositions.push(oldPositions[i]);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /** Get the position of a hero or foe by the grid entry */\r\n    public static getPositionByEntry = (entry: NpcGridEntry, positions: CharacterEncounterData[]): CharacterEncounterData | undefined => {\r\n        const index = positions.findIndex((h) => h.gridEntry === entry);\r\n        if (index < 0 || index >= positions.length) {\r\n            console.error(\"Can't find character : \" + entry);\r\n            return undefined;\r\n        }\r\n        return positions[index];\r\n    };\r\n\r\n    /** Clear all hero/foe movement queues */\r\n    public static clearAllQueues = (positions: CharacterEncounterData[]): CharacterEncounterData[] => {\r\n        const newPositions: CharacterEncounterData[] = [];\r\n        for (let i = 0; i < positions.length; i++) {\r\n            newPositions.push(positions[i]); // TODO: Should we deep clone here?\r\n            newPositions[i].vertexQueue.clear();\r\n        }\r\n        return newPositions;\r\n    };\r\n}\r\n","import CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\nimport { TokenGridEntry } from \"../models/EncounterDetail\";\r\n\r\n/** Trim the move path to just the max move allowed */\r\nexport default class CombatActionHelper {\r\n    public static trimPathToMove = (path: number[][], maxPath: number): number[][] => {\r\n        let remainderPathLength = path.length - maxPath * 2 - 1;\r\n        if (remainderPathLength <= 0) remainderPathLength = 0; // Always remove the start grid item\r\n\r\n        return path.slice(remainderPathLength);\r\n    };\r\n\r\n    /**\r\n     * Build an action to melee attack foe, or move toward them if too far away\r\n     */\r\n    public static buildMeleeAttack = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n        const isMeleeAttack = path.length === movePath.length;\r\n\r\n        if (isMeleeAttack) {\r\n            console.log(`${attacker.gridEntry} melee attack ${target} (${path.length})`);\r\n        } else {\r\n            console.log(`${attacker.gridEntry} move towards ${target} (${path.length})`);\r\n        }\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: isMeleeAttack ? \"melee\" : \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n\r\n    /**\r\n     * Build an action to melee attack foe, or move toward them if too far away\r\n     */\r\n    public static buildRangedAttack = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        // TODO: Trim path to max ranged distance. Maybe simple trim by length to begin with\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n        const isMeleeAttack = path.length === movePath.length;\r\n\r\n        if (isMeleeAttack) {\r\n            console.log(`${attacker.gridEntry} melee attack ${target} (${path.length})`);\r\n        } else {\r\n            console.log(`${attacker.gridEntry} move towards ${target} (${path.length})`);\r\n        }\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: isMeleeAttack ? \"ranged\" : \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n\r\n    /**\r\n     * Build an action to melee attack foe, or move toward them if too far away\r\n     */\r\n    public static buildMove = (\r\n        attacker: CharacterEncounterData,\r\n        target: TokenGridEntry,\r\n        path: number[][],\r\n        maxPath: number\r\n    ): CharacterAction => {\r\n        const movePath = CombatActionHelper.trimPathToMove(path, maxPath);\r\n\r\n        console.log(`${attacker.gridEntry} melee attack ${target} (${path.length})`);\r\n\r\n        movePath.pop(); // Ignore the first move\r\n        const newCharacterAction: CharacterAction = {\r\n            id: attacker.details.id,\r\n            character: attacker.gridEntry,\r\n            path: movePath,\r\n            action: \"move\",\r\n            target: target,\r\n        };\r\n\r\n        return newCharacterAction;\r\n    };\r\n}\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds, LatLngTuple } from \"leaflet\";\r\nimport { Map, ImageOverlay } from \"react-leaflet\";\r\nimport EncounterDialog from \"./EncounterDialog\";\r\n\r\n// Models\r\nimport EncounterDetail, { EncounterGridEntry, FoeGridEntry, HeroGridEntry, NpcGridEntry, TokenGridEntry } from \"../models/EncounterDetail\";\r\nimport HeroMarker from \"./markers/HeroMarker\";\r\nimport Hero from \"../models/Hero\";\r\nimport CharacterAction from \"../models/CharacterAction\";\r\nimport CharacterEncounterData from \"../models/CharacterEncounterData\";\r\n\r\n// Markers\r\nimport GridMarker from \"./markers/GridMarker\";\r\nimport CombatIndicator from \"./CombatIndicator\";\r\nimport FoeMarker from \"./markers/FoeMarker\";\r\nimport CombatPath from \"./encounter-map/CombatPath\";\r\nimport DamageDisplay from \"./markers/DamageDisplay\";\r\n\r\n// Helpers\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport CombatHelper from \"../helpers/CombatHelper\";\r\nimport CombatPositionHelper from \"../helpers/CombatPositionHelper\";\r\nimport GridHelpers from \"../helpers/GridHelpers\";\r\nimport CombatActionHelper from \"../helpers/CombatActionHelper\";\r\nimport AttackResult from \"../models/AttackResult\";\r\n\r\ntype EncounterMapProps = {\r\n    /** The encounter data */\r\n    encounter: EncounterDetail;\r\n\r\n    /** The heroes detailed information, referenced by grid-entry */\r\n    heroes: [HeroGridEntry, Hero][];\r\n\r\n    /** The foes detailed information, referenced by grid-entry */\r\n    foes: [FoeGridEntry, Hero][];\r\n\r\n    /** If true, show a helper grid */\r\n    showGrid: boolean;\r\n\r\n    /** The inititive scores for heroes & foes */\r\n    initiatives: [string, NpcGridEntry, number][];\r\n};\r\n\r\nconst EncounterMap: React.FunctionComponent<EncounterMapProps> = (props: EncounterMapProps): JSX.Element => {\r\n    const { encounter } = props;\r\n\r\n    const pathColor = props.encounter.pathColor ?? \"white\";\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n    const {\r\n        gridToDisplayTuple,\r\n        gridToDisplayCenterTuple,\r\n        gridToDisplayCenter,\r\n        displayToGrid,\r\n        getInitialPositions,\r\n        mergeGridEntry,\r\n    } = GridHelpers;\r\n\r\n    // The current (grid) position of the hero markers\r\n    const [heroData, setHeroData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.heroes));\r\n    const [foeData, setFoeData] = React.useState<CharacterEncounterData[]>(getInitialPositions(encounter, props.foes));\r\n\r\n    // The positions to display damage markers\r\n    const [damagePos, setDamagePos] = React.useState<AttackResult[]>([]);\r\n\r\n    // The path to the hovered vertex (display when hovering over the grid)\r\n    const [path, setPath] = React.useState<LatLng[]>([]);\r\n\r\n    // The current grid state\r\n    const [tokenGrid, setTokenGrid] = React.useState<TokenGridEntry[][]>(encounter.tokenGrid);\r\n    // TODO: We could go further and custom create a network of these grid points and use the other pathfindind algorithm?\r\n\r\n    // The current ink encouter begind displayed\r\n    const [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // The ID of the currently selected hero. Inital hero is selected on initiative score\r\n    const [selectedHero, setSelectedHero] = React.useState<NpcGridEntry | undefined>(undefined);\r\n\r\n    // Is the current move an attack?\r\n    const [attackTarget, setAttackTarget] = React.useState<TokenGridEntry | undefined>(undefined);\r\n\r\n    // TODO: Is this a state\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][]>(props.initiatives);\r\n\r\n    const [currentAction, setCurrentAction] = React.useState<CharacterAction | undefined>(undefined);\r\n\r\n    // Is the encounter is combat mode?\r\n    const isCombat = (): boolean => foeData.length > 0;\r\n\r\n    // The max length of a path\r\n    const maxPath = isCombat() ? 3 : 20;\r\n\r\n    // This effect tracks when the end of the current character's turn happens\r\n    React.useEffect(() => {\r\n        // Start the next character's turn\r\n        const startNextActor = () => {\r\n            const initiativeTracker = new InitiativeTracker(initiatives);\r\n            const newNextToMove = initiativeTracker.getNextInitiative();\r\n            const name = newNextToMove[0];\r\n            const entry = newNextToMove[1];\r\n\r\n            console.log(`** Next to move ${name} (${entry})`);\r\n\r\n            // console.log(\" - \" + initiativeTracker.displayInitiatives().join(\"\\n- \"));\r\n\r\n            const gridDisplay = GridHelpers.displayGrid(tokenGrid);\r\n            console.log(gridDisplay.join(\"\\n\"));\r\n\r\n            setSelectedHero(entry);\r\n\r\n            if (!GridHelpers.isHero(entry)) {\r\n                // TODO: Foe has their action\r\n                const foeMatch = foeData.find((f) => f.gridEntry === entry);\r\n                if (foeMatch && foeMatch.gridPos) {\r\n                    const closestHeroPath = GridHelpers.findNearestHero(tokenGrid, encounter.grid, foeMatch.gridPos);\r\n                    if (closestHeroPath !== undefined) {\r\n                        const newCharacterAction = CombatActionHelper.buildMeleeAttack(\r\n                            foeMatch,\r\n                            closestHeroPath[0],\r\n                            closestHeroPath[1],\r\n                            maxPath\r\n                        );\r\n                        if (newCharacterAction.action === \"melee\") {\r\n                            setAttackTarget(newCharacterAction.target);\r\n                        }\r\n                        setCurrentAction(newCharacterAction);\r\n                    } else {\r\n                        console.error(`Foe : ${foeMatch.gridEntry} has no hero accessible`);\r\n                        initiativeTracker.processDelay(name, foeMatch.details.stats.moveSpeed);\r\n                        startNextActor(); // Trigger next to move\r\n                    }\r\n                } else {\r\n                    console.error(\"Can't find matching foe : \" + name);\r\n                    initiativeTracker.processDelay(name, 1000);\r\n                    startNextActor(); // Trigger next to move\r\n                }\r\n                //startNextActor(); // Trigger next to move\r\n            }\r\n        };\r\n\r\n        const executeCurrentAction = (currentAction: CharacterAction) => {\r\n            try {\r\n                const { id, path, action } = currentAction;\r\n\r\n                const numMoves = Math.ceil((path.length - 1) / maxPath);\r\n                console.log(`Moving ${id} (${currentAction.character}) distance ${path.length - 1} with ${numMoves} moves`);\r\n\r\n                const heroPos = getPosition(currentAction.character);\r\n                if (heroPos === undefined) {\r\n                    console.error(\"Can't find hero for action : \" + id);\r\n                    return;\r\n                }\r\n\r\n                // TODO: Chech nodes for encounters\r\n                let nextVertex = path.pop();\r\n                while (nextVertex) {\r\n                    //console.log(`Queue vertex ${nextVertex[0]}, ${nextVertex[1]}`);\r\n                    heroPos.vertexQueue.push([nextVertex[0], nextVertex[1]]);\r\n                    nextVertex = path.pop();\r\n                }\r\n\r\n                const newPosition = new CharacterEncounterData(\r\n                    heroPos.details,\r\n                    heroPos.gridEntry,\r\n                    heroPos.gridPos,\r\n                    heroPos.displayPos,\r\n                    heroPos.vertexQueue\r\n                );\r\n                setCharacterPosition(newPosition);\r\n\r\n                // Calculates new initiatives after move\r\n                const initiativeTracker = new InitiativeTracker(initiatives);\r\n                let delay = numMoves * heroPos.details.stats.moveSpeed;\r\n                if (action === \"melee\") delay += heroPos.details.stats.attackSpeed;\r\n                const newInitiatives = initiativeTracker.processDelay(id, delay);\r\n                setInitiatives(newInitiatives);\r\n\r\n                // Trigger the move to the next vertex\r\n                handleMoveEnd(newPosition);\r\n            } finally {\r\n                // Clear the current action so that we don't run again\r\n                setCurrentAction(undefined);\r\n            }\r\n        };\r\n\r\n        // console.log(\"useEffect end of turn\");\r\n        if (!selectedHero) {\r\n            startNextActor();\r\n        }\r\n        if (currentAction) {\r\n            executeCurrentAction(currentAction);\r\n        }\r\n    }, [selectedHero, currentAction]);\r\n\r\n    const handleEncounterClose = (moveTo?: string, encounterDetailId?: string) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    /** Clicked on a hero to move if in combat mode */\r\n    const onHeroClick = (hero: CharacterEncounterData) => {\r\n        console.log(\"Select hero : \" + hero.details.id);\r\n        setSelectedHero(hero.gridEntry);\r\n    };\r\n\r\n    /** Get the position of a hero or foe */\r\n    const getPosition = (entry: NpcGridEntry): CharacterEncounterData | undefined =>\r\n        GridHelpers.isHero(entry)\r\n            ? CombatPositionHelper.getPositionByEntry(entry, heroData)\r\n            : CombatPositionHelper.getPositionByEntry(entry, foeData);\r\n\r\n    /** Clear hero & foe movement queues */\r\n    const clearAllQueues = () => {\r\n        setHeroData(CombatPositionHelper.clearAllQueues(heroData));\r\n        setFoeData(CombatPositionHelper.clearAllQueues(foeData));\r\n    };\r\n\r\n    /** Update the hero or foe position */\r\n    const setCharacterPosition = (position: CharacterEncounterData) => {\r\n        // console.log(`setCharacterPosition : ${position.details.id}`);\r\n        if (position.isHero()) {\r\n            setHeroData(CombatPositionHelper.updatePosition(position, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.updatePosition(position, foeData));\r\n        }\r\n    };\r\n\r\n    /** Remove the hero or foe position due to death or fleeing */\r\n    const removeCharacterPosition = (entry: NpcGridEntry) => {\r\n        if (GridHelpers.isHero(entry)) {\r\n            setHeroData(CombatPositionHelper.removePosition(entry, heroData));\r\n        } else {\r\n            setFoeData(CombatPositionHelper.removePosition(entry, foeData));\r\n        }\r\n    };\r\n\r\n    /** Clicked on the map (not on grid) */\r\n    const onMapClick = (e: any) => console.log(`Clicked at: ${e.latlng}, grid ${displayToGrid(e.latlng, encounter)}`);\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (character: CharacterEncounterData) => {\r\n        setPath([]);\r\n\r\n        //console.log(`handleMoveEnd : ${character.details.id}`);\r\n\r\n        const targetVertex = character.vertexQueue.pop();\r\n        if (targetVertex !== undefined) {\r\n            const gridPos = latLng(targetVertex[1], targetVertex[0]);\r\n            const displayPos = gridToDisplayCenter(gridPos, encounter);\r\n\r\n            // Update the token grid\r\n            if (character.gridPos) {\r\n                // const oldEntry = tokenGrid[prevPos.gridPos.lat][prevPos.gridPos.lng];\r\n                tokenGrid[character.gridPos.lat][character.gridPos.lng] = \" \";\r\n                tokenGrid[gridPos.lat][gridPos.lng] = character.gridEntry;\r\n\r\n                console.log(\r\n                    `Move end: ${character.details.id} (${character.vertexQueue.length()} queued) next, ${targetVertex[0]},${\r\n                        targetVertex[1]\r\n                    }, previous position : ${character.gridPos.lng},${character.gridPos.lat}`\r\n                );\r\n            } else {\r\n                console.error(`Can't find current grid pos ${targetVertex[0]},${targetVertex[1]}`);\r\n                return;\r\n            }\r\n\r\n            const newPosition = new CharacterEncounterData(\r\n                character.details,\r\n                character.gridEntry,\r\n                gridPos,\r\n                displayPos,\r\n                character.vertexQueue\r\n            );\r\n            setCharacterPosition(newPosition);\r\n\r\n            // Stop if a vertex with an an encounter is hit\r\n            const entry = encounter.grid[gridPos.lat][gridPos.lng];\r\n            if (GridHelpers.isEncounter(entry)) {\r\n                const encounterId = encounter.encounters[entry as EncounterGridEntry];\r\n                if (encounterId) {\r\n                    console.log(`Encounter : ${encounterId}`);\r\n                    clearAllQueues();\r\n                    setEncounterId(encounterId);\r\n                }\r\n            }\r\n\r\n            // Check if the current hero has finished their move\r\n            if (character.vertexQueue.length() > 0) {\r\n                //console.log(\"Continuing move\");\r\n                return;\r\n            }\r\n        } else {\r\n            handleAttack(character);\r\n\r\n            // Trigger the end of turn effect for this hero\r\n            setSelectedHero(undefined);\r\n            setTokenGrid(tokenGrid);\r\n        }\r\n    };\r\n\r\n    const handleAttack = (character: CharacterEncounterData) => {\r\n        if (attackTarget) {\r\n            // Get the attacker & target\r\n            console.log(`Finished move : ${character.details.id} with attack`);\r\n            const targetMatch = getPosition(attackTarget as NpcGridEntry);\r\n            if (targetMatch && targetMatch.displayPos) {\r\n                let results = CombatHelper.determineAttackResult(encounter.id, character, targetMatch);\r\n\r\n                if (results.result !== \"fumble\" && results.result !== \"miss\") {\r\n                    const newFoeDetails = { ...targetMatch };\r\n\r\n                    // Reduce hit points & check for death\r\n                    newFoeDetails.details.stats.currentHitPoints -= results.damage;\r\n                    const isDeath = newFoeDetails.details.stats.currentHitPoints <= 0;\r\n\r\n                    if (isDeath) {\r\n                        if (newFoeDetails.displayPos) results = AttackResult.createDeath(results.damage, newFoeDetails.displayPos);\r\n                        removeCharacterPosition(targetMatch.gridEntry);\r\n                        if (targetMatch.gridPos) tokenGrid[targetMatch.gridPos.lat][targetMatch.gridPos.lng] = \" \";\r\n                    } else {\r\n                        setCharacterPosition(newFoeDetails);\r\n                    }\r\n                }\r\n                addDamagePos(results);\r\n            } else console.error(`Can't find foe at : ${attackTarget}`);\r\n\r\n            setAttackTarget(undefined);\r\n        } else {\r\n            console.log(`Finished move : ${character.details.id} no attack`);\r\n        }\r\n    };\r\n\r\n    const addDamagePos = (result: AttackResult) => {\r\n        setDamagePos((state) => state.concat(result));\r\n    };\r\n\r\n    const onHover = (hoverGridPos: [number, number]) => {\r\n        if (!selectedHero) return;\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n        if (heroPos.isMoving()) return;\r\n\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, latLng(hoverGridPos));\r\n        const displayPath = fullPath.map((item) => gridToDisplayCenterTuple([item[1], item[0]], encounter));\r\n        setPath(displayPath);\r\n    };\r\n\r\n    const onHoverEnd = (hoverGridPos: [number, number]) => setPath([]);\r\n\r\n    const onFoeHover = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            onHover([foe.gridPos.lat, foe.gridPos.lng]);\r\n        }\r\n    };\r\n\r\n    const onFoeHoverEnd = (foe: CharacterEncounterData) => {\r\n        if (foe.gridPos) {\r\n            onHoverEnd([foe.gridPos.lat, foe.gridPos.lng]);\r\n        }\r\n    };\r\n\r\n    const onClickGridMarker = (gridPos: [number, number]) => processMarkerAction(gridPos, false);\r\n\r\n    /** Clicked on a foe to attack */\r\n    const onFoeClick = (position: CharacterEncounterData) => {\r\n        if (position.gridPos) processMarkerAction([position.gridPos.lat, position.gridPos.lng], true);\r\n    };\r\n\r\n    const processMarkerAction = (hoverGridPos: [number, number], isFoe: boolean) => {\r\n        if (!selectedHero) return;\r\n\r\n        const heroPos = getPosition(selectedHero);\r\n        if (!heroPos || !heroPos.gridPos) {\r\n            console.error(\"Can't find hero position\");\r\n            return;\r\n        }\r\n\r\n        clearAllQueues();\r\n        setDamagePos([]);\r\n\r\n        const endPos = latLng(hoverGridPos);\r\n        const endToken = tokenGrid[endPos.lat][endPos.lng];\r\n        const fullPath = GridHelpers.getHeroPath(tokenGrid, encounter.grid, heroPos.gridPos, endPos);\r\n\r\n        const newAction = isFoe\r\n            ? CombatActionHelper.buildMeleeAttack(heroPos, endToken, fullPath, maxPath)\r\n            : CombatActionHelper.buildMove(heroPos, endToken, fullPath, maxPath);\r\n\r\n        if (newAction.action === \"melee\") {\r\n            setAttackTarget(endToken);\r\n        }\r\n\r\n        setCurrentAction(newAction);\r\n\r\n        console.log(`Set current action : ${newAction.id} ${newAction.action}`);\r\n    };\r\n\r\n    const renderHeroes = () => {\r\n        return heroData.map((hero) => (\r\n            <HeroMarker\r\n                hero={hero}\r\n                isActive={selectedHero === hero.gridEntry}\r\n                duration={300}\r\n                onMoveEnd={handleMoveEnd}\r\n                onClick={onHeroClick}\r\n            />\r\n        ));\r\n    };\r\n\r\n    const renderFoes = () => {\r\n        return foeData.map((foe) => (\r\n            <FoeMarker\r\n                foe={foe}\r\n                isActive={selectedHero === foe.gridEntry}\r\n                duration={300}\r\n                onMoveEnd={handleMoveEnd}\r\n                onClick={onFoeClick}\r\n                onHover={onFoeHover}\r\n                onHoverEnd={onFoeHoverEnd}\r\n            />\r\n        ));\r\n    };\r\n\r\n    const renderGridMarkers = (encounter: EncounterDetail): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        for (let x = 0; x < encounter.grid.length; x++) {\r\n            for (let y = 0; y < encounter.grid.length; y++) {\r\n                markers.push(\r\n                    <GridMarker\r\n                        gridPos={[x, y]}\r\n                        entry={mergeGridEntry(encounter.tokenGrid[x][y], encounter.grid[x][y])}\r\n                        gridToDisplayFunc={(pos: LatLngTuple) => gridToDisplayTuple(pos, encounter)}\r\n                        onHover={onHover}\r\n                        onHoverEnd={onHoverEnd}\r\n                        onClick={onClickGridMarker}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    const renderDamageMarkers = (damages: AttackResult[]): JSX.Element[] => {\r\n        const markers: JSX.Element[] = [];\r\n        // Map damage markers to dsipaly positions\r\n        const displayResults = damages.map((dam) => new AttackResult(dam.result, dam.damage, gridToDisplayCenter(dam.position, encounter)));\r\n        for (let i = 0; i < displayResults.length; i++) {\r\n            markers.push(<DamageDisplay result={displayResults[i]} />);\r\n        }\r\n        return markers;\r\n    };\r\n\r\n    // Note: Order of markers matters for z-index\r\n    return (\r\n        <div>\r\n            <CombatIndicator isCombat={isCombat()} initiative={initiatives[0][2]} />\r\n            <Map\r\n                crs={CRS.Simple}\r\n                zoom={0}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={onMapClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                <ImageOverlay url={encounter.imageUrl} bounds={bounds} />\r\n                <CombatPath path={path} pathColor={pathColor} move={maxPath} />\r\n                {renderGridMarkers(encounter)}\r\n                {renderHeroes()}\r\n                {renderFoes()}\r\n                {renderDamageMarkers(damagePos)}\r\n            </Map>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EncounterMap;\r\n","import Hero from \"../models/Hero\";\r\nimport thugContent from \"./npcs/thug.json\";\r\n\r\nexport default class MockNpcService {\r\n    getFoeDetail(id: string): Hero {\r\n        switch (id) {\r\n            case \"thug\":\r\n            default:\r\n                return thugContent as any;\r\n        }\r\n    }\r\n}\r\n","export default class ArrayHelper {\r\n    /*\r\n     * Take the first N items from an array\r\n     */\r\n    public static take<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        if (count > array.length) return clonedArray;\r\n        clonedArray.splice(count);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Take the last N items from an array\r\n     */\r\n    public static takeLast<T>(array: T[], count: number): Array<T> {\r\n        if (count < 0) return [];\r\n        const clonedArray = Object.assign([], array);\r\n        const offset = clonedArray.length - count - 1;\r\n        if (offset > array.length) return clonedArray;\r\n        clonedArray.splice(0, offset);\r\n        return clonedArray;\r\n    }\r\n\r\n    /*\r\n     * Remove duplicates from an array\r\n     */\r\n    public static removeDuplicates<T>(array: T[]): Array<T> {\r\n        function onlyUnique(value: T, index: number, self: Array<T>) {\r\n            return self.indexOf(value) === index;\r\n        }\r\n\r\n        return array.filter(onlyUnique);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport EncounterDetail, { FoeGridEntry, HeroGridEntry, NpcGridEntry } from \"../models/EncounterDetail\";\r\nimport EncounterMap from \"./EncounterMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Hero from \"../models/Hero\";\r\nimport MockNpcService from \"../services/MockNpcService\";\r\nimport InitiativeTracker from \"../services/InitiativeTracker\";\r\nimport ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport GameState from \"../models/GameState\";\r\n\r\ntype EncounterMapLoaderProps = {\r\n    encounterId: string;\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst EncounterMapLoader: React.FunctionComponent<EncounterMapLoaderProps> = (props: EncounterMapLoaderProps): JSX.Element => {\r\n    const [encounter, setEncounter] = React.useState<EncounterDetail | undefined>(undefined);\r\n    const [initiatives, setInitiatives] = React.useState<[string, NpcGridEntry, number][] | undefined>(undefined);\r\n\r\n    // The heroe detailed information\r\n    const [heroes, setHeroes] = React.useState<[HeroGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    // The foe detailed information, referenced my token entries so that we can keep track of each foe instamce\r\n    const [foes, setFoes] = React.useState<[FoeGridEntry, Hero][] | undefined>(undefined);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEncounter = () => {\r\n            const service = new MockDetailedEncounterService();\r\n            const encounterData = service.getEncounterDetail(props.encounterId);\r\n            if (!encounterData) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n            setEncounter(encounterData);\r\n\r\n            // Load heroes\r\n            const partyService = new MockPartyService();\r\n            const newHeroes = partyService.getParty();\r\n            if (!newHeroes) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n\r\n            const heroEntries: [HeroGridEntry, Hero][] = [\r\n                [\"A\", newHeroes[0]],\r\n                [\"B\", newHeroes[1]],\r\n                [\"C\", newHeroes[2]],\r\n                [\"D\", newHeroes[3]],\r\n            ];\r\n\r\n            setHeroes(heroEntries);\r\n\r\n            // Load foes\r\n            const foeEntries = Object.entries(encounterData.npcs);\r\n            const foeIds = ArrayHelper.removeDuplicates(foeEntries.map((f) => f[1]));\r\n            const npcService = new MockNpcService();\r\n\r\n            const newFoes = foeIds.map((id) => npcService.getFoeDetail(id));\r\n            const foeInstances: [FoeGridEntry, Hero][] = [];\r\n            for (let i = 0; i < foeEntries.length; i++) {\r\n                const foeData = foeEntries[i];\r\n                const foe = newFoes.find((f) => f.id === foeData[1]);\r\n                if (foe) {\r\n                    // Add a clone of the foe data referenced by grid location so that we can track for instance stats separately\r\n                    const foeDeepClone: Hero = JSON.parse(JSON.stringify(foe)); // Was { ...foe }\r\n                    foeInstances.push([foeData[0] as FoeGridEntry, foeDeepClone]);\r\n                }\r\n            }\r\n            setFoes(foeInstances);\r\n\r\n            // Generate some random initial initiatives\r\n            const initiatives: [string, NpcGridEntry, number][] = InitiativeTracker.buildInitial(\r\n                encounterData.id,\r\n                heroEntries,\r\n                foeInstances\r\n            );\r\n            console.log(\" - \" + new InitiativeTracker(initiatives).displayInitiatives().join(\"\\n- \"));\r\n            setInitiatives(initiatives);\r\n        };\r\n\r\n        if (encounter == null) {\r\n            loadEncounter();\r\n        }\r\n    });\r\n\r\n    if (!encounter || !initiatives || !heroes || !foes) return <LoadingProgress />;\r\n\r\n    return <EncounterMap encounter={encounter} heroes={heroes} foes={foes} showGrid={true} initiatives={initiatives} />;\r\n};\r\n\r\nexport default EncounterMapLoader;\r\n","import React from \"react\";\r\n\r\n// Pathfinding imports\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport GameState from \"../models/GameState\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport OverheadMapLoader from \"../components/OverheadMapLoader\";\r\nimport EncounterMapLoader from \"../components/EncounterMapLoader\";\r\n\r\nconst MapPage: React.FunctionComponent = () => {\r\n    let [gameState, setGameState] = React.useState<GameState | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of game state data\r\n        const loadGameState = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newGameState = stateService.getState();\r\n            if (!newGameState) {\r\n                console.error(`No game state data`);\r\n                return;\r\n            }\r\n\r\n            setGameState(newGameState);\r\n        };\r\n\r\n        if (gameState == null) {\r\n            loadGameState();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n        console.log(`New map : ${newState.currentMapId}, ${newState.currentVertextId}, ${newState.currentEncounterId}`);\r\n\r\n        // Save the new map state\r\n        const stateService = new MockGameStateService();\r\n        stateService.setState(newState);\r\n        setGameState(newState);\r\n    };\r\n\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    if (!gameState) return null;\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            {gameState.currentEncounterId ? (\r\n                <EncounterMapLoader encounterId={gameState.currentEncounterId} onNewMap={onNewMap} />\r\n            ) : (\r\n                <OverheadMapLoader startState={gameState} onNewMap={onNewMap} />\r\n            )}\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default MapPage;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventoryProps = {\r\n    items: Item[];\r\n    onEquipItem: (itemId: string) => void;\r\n};\r\n\r\nconst PartyInventory: React.FunctionComponent<PartyInventoryProps> = (props: PartyInventoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, onEquipItem } = props;\r\n\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState<string[]>([]);\r\n\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);\r\n\r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n    const isItemEquipable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n\r\n        const match = items.find((item) => item.id === inventorySelectedIds[0]);\r\n        if (!match) return false; // Error?\r\n\r\n        return match.itemType >= 10;\r\n    };\r\n\r\n    const equipItem = () => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        if (onEquipItem) onEquipItem(inventorySelectedIds[0]);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected()) return \"Please select an inventory item\";\r\n\r\n        return isItemEquipable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={items} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventory;\r\n","import React from \"react\";\r\nimport { makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport Item, { ItemType } from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"7vw\",\r\n        top: \"-1vh\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"7vw\",\r\n        top: \"6.5vh\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"7vw\",\r\n        top: \"14vh\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"7vw\",\r\n        top: \"21.5vh\",\r\n    },\r\n    portraitItemWeapon: {\r\n        left: \"3.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitItemShield: {\r\n        left: \"10.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitNoItemImg: {\r\n        filter: \"brightness(35%)\",\r\n    },\r\n    portraitItemImg: {\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"50%\",\r\n    },\r\n});\r\n\r\ntype EquippedItemsProps = {\r\n    equippedItems: Item[];\r\n};\r\n\r\n/*\r\n* Hero Profile Screen : Display the items that the hero has equipped\r\n*/\r\nconst EquippedItems: React.FunctionComponent<EquippedItemsProps> = (props: EquippedItemsProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const { equippedItems } = props;\r\n\r\n    const headItem = equippedItems.find((item) => item.itemType === ItemType.WearableHead);\r\n    const bodyItem = equippedItems.find((item) => item.itemType === ItemType.WearableBody);\r\n    const armsItem = equippedItems.find((item) => item.itemType === ItemType.WearableArms);\r\n    const feetItem = equippedItems.find((item) => item.itemType === ItemType.WearableFeet);\r\n    const weaponItem = equippedItems.find((item) => item.itemType === ItemType.WeaponMelee1h);\r\n\r\n    return (\r\n        <div className={classes.itemContainer}>\r\n            <Tooltip title={<ItemTooltipContent item={headItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemHelm}`}>\r\n                    {headItem ? (\r\n                        <img src={headItem.imageUrl} className={classes.portraitItemImg} alt=\"helm\" />\r\n                    ) : (\r\n                        <img src=\"images/helm.svg\" className={classes.portraitNoItemImg} alt=\"helm\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={bodyItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}>\r\n                    {bodyItem ? (\r\n                        <img src={bodyItem.imageUrl} className={classes.portraitItemImg} alt=\"breastplate\" />\r\n                    ) : (\r\n                        <img src=\"images/breastplate.svg\" className={classes.portraitNoItemImg} alt=\"breastplate\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={feetItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemLegs}`}>\r\n                    {feetItem ? (\r\n                        <img src={feetItem.imageUrl} className={classes.portraitItemImg} alt=\"legs\" />\r\n                    ) : (\r\n                        <img src=\"images/leg.svg\" className={classes.portraitNoItemImg} alt=\"legs\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={armsItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemGloves}`}>\r\n                    {armsItem ? (\r\n                        <img src={armsItem.imageUrl} className={classes.portraitItemImg} alt=\"gloves\" />\r\n                    ) : (\r\n                        <img src=\"images/glove.svg\" className={classes.portraitNoItemImg} alt=\"gloves\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={weaponItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemWeapon}`}>\r\n                    {weaponItem ? (\r\n                        <img src={weaponItem.imageUrl} className={classes.portraitItemImg} alt=\"weapon\" />\r\n                    ) : (\r\n                        <img src=\"images/sword.svg\" className={classes.portraitNoItemImg} alt=\"weapon\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemShield}`}>\r\n                    <img src=\"images/shield.svg\" className={classes.portraitNoItemImg} alt=\"shield\" />\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EquippedItems;\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/AttributeList\";\r\nimport Attribute from \"../models/Attribute\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nconst StatisticsBlock: React.FunctionComponent<StatisticsBlockProps> = (props: StatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    const createData = (name: string, base: number, modifier: number, total: number) => {\r\n        return { name, base, modifier, total };\r\n    }\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.modifier;\r\n\r\n    const rows = [\r\n        createData(\"Strength\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n        createData(\"Dexterity\", statistics.dexterity.base, statistics.dexterity.modifier, attributeTotal(statistics.dexterity)),\r\n        createData(\"Consitution\", statistics.constitution.base, statistics.constitution.modifier, attributeTotal(statistics.constitution)),\r\n        createData(\"Intelligence\", statistics.intelligence.base, statistics.intelligence.modifier, attributeTotal(statistics.intelligence)),\r\n        createData(\"Wisdom\", statistics.wisdom.base, statistics.wisdom.modifier, attributeTotal(statistics.wisdom)),\r\n        createData(\"Charisma\", statistics.charisma.base, statistics.charisma.modifier, attributeTotal(statistics.charisma)),\r\n        createData(\"Luck\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Base</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Total</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.base}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.total}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default StatisticsBlock;","import React from \"react\";\r\nimport { Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport LocationSearchingIcon from \"@material-ui/icons/LocationSearching\";\r\n\r\nimport CalculatedStats from \"../models/CalculatedStats\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        //backgroundColor: theme.palette.background.paper,\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype CalculatedStatisticsBlockProps = {\r\n    statistics: CalculatedStats;\r\n};\r\n\r\nconst CalculatedStatisticsBlock: React.FunctionComponent<CalculatedStatisticsBlockProps> = (props: CalculatedStatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    return (\r\n        <div className={classes.statisticsBlock}>\r\n            <Grid container>\r\n                <Grid item xs={1} md={1}></Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FavoriteIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Hit Points ${statistics.currentHitPoints} / ${statistics.currentHitPoints}`}\r\n                                secondary={`Hit Die D${statistics.hitDie}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <SecurityIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Armor Class ${statistics.armour}`}\r\n                                secondary={`Spell Resistance ${statistics.spellResistance}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FastForwardIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack Speed ${statistics.attackSpeed}`}\r\n                                secondary={`Move Speed ${statistics.moveSpeed}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <LocationSearchingIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack +${statistics.attack}`}\r\n                                secondary={`Damage D${statistics.damageDie} + ${statistics.damageBonus}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={1} md={1}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalculatedStatisticsBlock;\r\n","import React from \"react\";\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, ListItemText, Grid } from \"@material-ui/core\";\r\n\r\nimport HeroTrait from \"../models/HeroTrait\";\r\n\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\n\r\nconst useStyles = makeStyles({\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype TraitListProps = {\r\n    traits: HeroTrait[];\r\n};\r\n\r\nconst TraitList: React.FunctionComponent<TraitListProps> = (props: TraitListProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { traits } = props;\r\n\r\n    const renderTraitIcon = ((t: HeroTrait) => {\r\n        switch (t.type) {\r\n            case 1: // Mental\r\n                return <FaceIcon />;\r\n            case 2: // Mystical\r\n                return <FlashOnIcon />;\r\n            case 3: // Physical\r\n                return <AccessibilityNewIcon />;\r\n            case 4: // Item\r\n                return <AllInboxIcon />;\r\n            default:\r\n                return <AllInboxIcon />;\r\n        }\r\n    });\r\n\r\n\r\n    // TODO: Add behiavor , {t.behaviour}\r\n    const renderTrait = (t: HeroTrait) => (\r\n        <ListItem key={t.id}>\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    {renderTraitIcon(t)}\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={t.name}\r\n                secondary={t.from}\r\n            />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <Grid container className={classes.statisticsBlock}>\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8}>\r\n                <List>{traits.map((t) => renderTrait(t))}</List>\r\n            </Grid>\r\n            <Grid item xs={2}></Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TraitList;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport Item from \"../models/Item\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\nimport MockItemService from \"../services/MockItemService\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nimport PartyInventory from \"../components/PartyInventory\";\r\nimport EquippedItems from \"../components/EquippedItems\";\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport CalculatedStatisticsBlock from \"../components/CalculatedStatisticsBlock\";\r\nimport TraitList from \"../components/TraitList\";\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"91.5vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"56vh\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        //left: \"20%\",\r\n        width: \"18vw\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"28px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"34vh\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statistics: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n}));\r\n\r\ntype HeroProfileProps = {\r\n    id: string,\r\n};\r\n\r\nconst HeroProfile: React.FunctionComponent<HeroProfileProps> = (props: HeroProfileProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { id } = props;\r\n\r\n    let [hero, setHero] = React.useState<Hero | null>(null);\r\n    let [party, setParty] = React.useState<PartyStatistics | null>(null);\r\n    let [world, setWorld] = React.useState<WorldStatistics | null>(null);\r\n    let [equippedItems, setEquippedItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n    let [currentId, setCurrentId] = React.useState(\"\");\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const partyService = new MockPartyService();\r\n\r\n            // Process special keypress IDs, and re-direct to the correct hero\r\n            switch (id) {\r\n                case \"1\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[0]);\r\n                    return;\r\n                case \"2\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[1]);\r\n                    return;\r\n                case \"3\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[2]);\r\n                    return;\r\n                case \"4\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[3]);\r\n                    return;\r\n            }\r\n\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const newParty = partyService.getPartyStatistics();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            const itemsService = new MockItemService();\r\n            const newItems = itemsService.getItems(newHero.equippedItems);\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n            if (!newItems) {\r\n                console.error(`No items data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n            setEquippedItems(newItems);\r\n        };\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world || !equippedItems || !inventoryItems) return null;\r\n\r\n    const onEquipItem = (itemId: string) => {\r\n        // console.log(`hero '${id}' equips ${itemId}`);\r\n\r\n        // Equip the item\r\n        const heroService = new MockHeroService();\r\n        const removedItemId = heroService.equipItem(id, itemId);\r\n\r\n        // Remove the item from party inventory\r\n        const partyService = new MockPartyService();\r\n        partyService.removeInventoryItem(itemId);\r\n        if (removedItemId) {\r\n            partyService.addInventoryItem(removedItemId);\r\n        }\r\n\r\n        // Force a refresh\r\n        setCurrentId(\"\");\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.characterGrid}>\r\n                <div className={classes.left}>\r\n                    <div className={classes.portrait}>\r\n                        <br />\r\n                        <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                            <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                        </LinkTo>\r\n                        <div className={classes.bannerContainer}>\r\n                            <h1 className=\"banner\">{hero.name}</h1>\r\n                        </div>\r\n                        <div className={classes.itemContainer}>\r\n                            <p>\r\n                                {StringConverters.classToString(hero.class)} - {StringConverters.alignmentToString(hero.alignment)}\r\n                            </p>\r\n                            <Grid container>\r\n                                <Grid item xs={3}>\r\n                                    <EquippedItems equippedItems={equippedItems} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                                </Grid>\r\n                                <Grid item xs={3}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.inventory}>\r\n                        <br />\r\n                        <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                        <PartyInventory items={inventoryItems} onEquipItem={onEquipItem} />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.statistics}>\r\n                    <br />\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{hero.background}</p>\r\n                    </div>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <StatisticsBlock statistics={HeroHelper.calculateAttributesWithModifiers(hero)} />\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Other</h1>\r\n                    <CalculatedStatisticsBlock statistics={HeroHelper.calculateStatsWithModifiers(hero)} />\r\n                    <h1 className={classes.sectionHeading}>Abilities</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{StringConverters.abilitiesToString(hero.abilities)}</p>\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Traits</h1>\r\n                    <TraitList traits={HeroHelper.getAllTraits(hero)} />\r\n                    <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>Reputation {party.reputation}</p>\r\n                        {party.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        {world.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default HeroProfile;\r\n","import React from 'react';\r\n\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport EncounterMapLoader from '../components/EncounterMapLoader';\r\nimport GameState from '../models/GameState';\r\n\r\n/*\r\n* Page for testing encounters\r\n* Actual encounters will be loaded through the main map page tracking the GameState.\r\n*/\r\nconst EncounterPage: React.FunctionComponent = (): JSX.Element => {\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n\r\n        console.log(\"New map : \" + newState.currentMapId + \", \" + newState.currentVertextId);\r\n    };\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <EncounterMapLoader encounterId=\"tavern\" onNewMap={onNewMap} />\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default EncounterPage;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\n\r\n// Pages\r\nimport MapPage from \"./pages/MapPage\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterPage from \"./pages/EncounterPage\";\r\nimport KeyMaps from \"./components/KeyMaps\";\r\n\r\nconst MainLayout: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <KeyMaps backUrl=\"/menu\">\r\n                <Header />\r\n            </KeyMaps>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path={`${process.env.PUBLIC_URL}/profile/:id`}\r\n                        component={(props: any) => <HeroProfile id={props.match.params.id} />}\r\n                    />\r\n                    <Route path={`${process.env.PUBLIC_URL}/encounter`} component={EncounterPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/`} component={MapPage} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport MenuCards, { MenuCard } from \"./MenuCards\";\r\n\r\nconst useStyles = makeStyles({\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n});\r\n\r\ntype SaveGameSelectorProps = {\r\n    enabledSlots: boolean[];\r\n    saves: (Date | null)[];\r\n    currentSlot: number;\r\n    onSelected: (slot: number) => void;\r\n};\r\n\r\nconst SaveGameSelector: React.FunctionComponent<SaveGameSelectorProps> = (props: SaveGameSelectorProps) => {\r\n    const classes = useStyles();\r\n    \r\n    const { saves, enabledSlots, currentSlot, onSelected } = props;\r\n\r\n    const getDateString = (date: Date | null) => (date ? `${date.toLocaleString()}` : \"Empty\");\r\n    const getDescription = (date: Date | null, isCurrentSlot: boolean) => {\r\n        return isCurrentSlot ? `Current Save (${getDateString(date)})` : getDateString(date);\r\n    };\r\n\r\n    const saveButtons: MenuCard[] = [\r\n        {\r\n            title: \"Slot A\",\r\n            description: getDescription(saves[0], currentSlot === 0),\r\n            enabled: enabledSlots[0],\r\n            active: currentSlot === 0,\r\n            onSelected: () => onSelected(0),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot B\",\r\n            description: getDescription(saves[1], currentSlot === 1),\r\n            enabled: enabledSlots[1],\r\n            active: currentSlot === 1,\r\n            onSelected: () => onSelected(1),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot C\",\r\n            description: getDescription(saves[2], currentSlot === 2),\r\n            enabled: enabledSlots[2],\r\n            active: currentSlot === 2,\r\n            onSelected: () => onSelected(2),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n    ];\r\n\r\n    return <MenuCards items={saveButtons} />;\r\n};\r\n\r\nexport default SaveGameSelector;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameNewMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHome = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"New game in slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHome();\r\n    };\r\n\r\n    // Can choose any empty slots\r\n    const enabledSlots = (): boolean[] => saveTimes.map((s) => s === null);\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose an empty save slot\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameNewMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameLoadMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHomeMap = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Loaing slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHomeMap();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const calculateEnabledSlots = (saves: (Date | null)[]): boolean[] => {\r\n        const enabledSlots = saves.map((s) => s !== null);\r\n        console.log(\"Games : \" + JSON.stringify(enabledSlots));\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to load\r\n                </Typography>\r\n                <SaveGameSelector\r\n                    enabledSlots={calculateEnabledSlots(saveTimes)}\r\n                    currentSlot={currentSave}\r\n                    saves={saveTimes}\r\n                    onSelected={saveSelected}\r\n                />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameLoadMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameDeleteMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToMenu = () => history.push(\"/menu\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Deleting slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.deleteSlot(slot);\r\n\r\n        navigateToMenu();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const enabledSlots = (): boolean[] => {\r\n        const enabledSlots = saveTimes.map((s) => s !== null);\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to delete\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameDeleteMenu;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport PitTheme from \"./PitTheme\";\r\n\r\n// Pages\r\nimport MainMenu from \"./pages/MainMenu\";\r\nimport MainLayout from \"./MainLayout\";\r\nimport GameNewMenu from \"./pages/GameNewMenu\";\r\nimport GameLoadMenu from \"./pages/GameLoadMenu\";\r\nimport GameDeleteMenu from \"./pages/GameDeleteMenu\";\r\n\r\nconst App : React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <div\r\n            className=\"app\"\r\n            onContextMenu={(e) => {\r\n                // Disable right-lick menu\r\n                e.preventDefault();\r\n                return false;\r\n            }}\r\n        >\r\n            <ThemeProvider theme={PitTheme}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path={`${process.env.PUBLIC_URL}/menu`} component={MainMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/new`} component={GameNewMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/load`} component={GameLoadMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/delete`} component={GameDeleteMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/`} component={MainLayout} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}