{"version":3,"sources":["helpers/ElectronHelper.ts","PitTheme.tsx","components/LinkTo.tsx","components/KeyMaps.tsx","services/MockSaveService.ts","models/Trait.ts","components/MenuCards.tsx","pages/MainMenu.tsx","helpers/ArrayHelper.ts","services/MockItemService.ts","helpers/HeroHelper.ts","services/MockHeroService.ts","services/MockPartyService.ts","components/Header.tsx","services/MockGameStateService.ts","models/Hero.ts","models/Item.ts","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","services/MockStoryEncounterService.ts","components/HeroSelector.tsx","components/PartySelection.tsx","components/HeroDismiss.tsx","services/StringConverters.ts","components/ItemTooltipContent.tsx","components/InventorySelector.tsx","components/Stash.tsx","components/EncounterDialog.tsx","components/VertexMarker.tsx","components/Drift_Marker.tsx","components/DriftMarker.tsx","components/HeroMarker.tsx","models/Queue.ts","components/OverheadMap.tsx","components/LoadingProgress.tsx","components/OverheadMapLoader.tsx","pages/MapPage.tsx","services/MockWorldService.ts","components/PartyInventory.tsx","components/EquippedItems.tsx","components/StatisticsBlock.tsx","components/CalculatedStatisticsBlock.tsx","components/TraitList.tsx","pages/HeroProfile.tsx","services/MockDetailedEncounterService.ts","components/EncounterMap.tsx","components/EncounterMapLoader.tsx","pages/EncounterPage.tsx","MainLayout.tsx","components/SaveGameSelector.tsx","pages/GameNewMenu.tsx","pages/GameLoadMenu.tsx","pages/GameDeleteMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ElectronHelper","window","process","type","versions","electron","navigator","userAgent","indexOf","PitTheme","createMuiTheme","LinkTo","props","url","children","top","left","width","classes","makeStyles","container","zIndex","display","cursor","containerAbsolute","position","useStyles","isPositioned","history","useHistory","className","onClick","event","push","KeyMaps","backUrl","navigateToUrl","Mousetrap","bind","MockSaveService","setCurrentSave","slot","_currentSave","localStorage","setItem","toString","getCurrentSave","getItem","slotId","Number","parseInt","markSlotUpdated","Date","getSlotUpdateTimes","slot1","slot2","slot3","deleteSlot","removeItem","key","value","this","JSON","stringify","json","parse","undefined","TraitType","ModifierType","card","margin","backgroundColor","right","boxShadow","cardDisabled","cardActive","MenuCards","selectClass","i","active","enabled","items","Grid","item","xs","map","Card","onSelected","CardHeader","title","Typography","variant","avatar","icon","CardContent","description","root","height","close","filter","cardIcon","fontSize","titleContainer","padding","appLogo","pointerEvents","MainMenu","React","useState","saveTimes","setSaveTimes","useEffect","saveService","loadSaves","slotCount","s","length","allSlotsFull","oneSlotFull","isElectron","require","ipcRenderer","send","src","alt","ArrayHelper","array","index","splice","MockItemService","getItems","ids","id","getItemDetail","TokenOfServitude","HagTeeth","CeramicHelm","CeramicArmor","WolfSpear","HeroHelper","getAllTraits","hero","traits","concat","itemTraits","temporaryTraits","addItemTraits","itemTrait","heroTrait","name","behaviour","from","removeItemTraits","matches","t","remove","calculateAttributesWithModifiers","allTraits","strMod","dexMod","conMod","intMod","wisMod","chaMod","luckMod","j","modifierType","Strength","modifierValue","Dexterity","Constitution","Intelligence","Wisdom","Charisma","Luck","attributes","strength","base","modifier","dexterity","constitution","intelligence","wisdom","charisma","luck","calculateStatsWithModifiers","armorMod","moveSpeedMod","meleeAttackMod","meleeAttackSpeedMod","meleeDamageDieMod","meleeDamageMod","hpMod","hitDieMod","spellResistMod","Armor","MoveSpeed","MeleeAttack","MeleeAttackSpeed","MeleeDamageDie","MeleeDamage","RangedAttack","RangedAttackSpeed","RangedDamageDie","RangedDamage","HitPoints","HitDie","SpellResistance","stats","armour","attack","moveSpeed","attackSpeed","damageDie","damageBonus","maxHitPoints","currentHitPoints","hitDie","spellResistance","MockHeroService","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroes","heroId","itemId","heroMatch","find","itemService","originalItem","itemWithSameType","equippedItems","itemType","MockPartyService","reputation","heroService","getPartyIds","getHeroDetail","_heroIds","heroIds","getObject","defaultHeroIds","saveObject","_inventoryItemIds","inventoryIds","defaultInventoryIds","itemIds","inventoryItems","getInventory","setInventory","_stashItemIds","stashIds","defaultStashIds","getStash","setStash","appHeader","headerSpan","headerParty","headerImg","border","borderRadius","borderWidth","borderColor","Header","party","setParty","newParty","getParty","console","error","loadParty","imageUrl","MockGameStateService","_state","stateJson","state","defaultState","log","currentMapId","currentVertextId","Alignment","HeroClass","StatusFlags","AbilityFlags","ItemType","MockMapService","BlackTempleMap","TownMap","pathColor","vertices","v","Leaflet","latLng","clickRadius","encounterId","marker","exitId","edges","distance","x","y","latDist","lat","lngDist","lng","Math","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","weight","MockStoryEncounterService","currentStory","currentId","currentTitle","Story","TheInterceptContent","commonRoomContent","chasmContent","homeContent","nineBellsContent","brawlContent","createEmptyStory","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","variablesState","GetVariableWithName","detailedEncounter","paragraphText","choices","isFinished","finishData","Continue","encounterChoices","currentChoices","c","text","heroSelected","HeroSelector","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","partyService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","currentTarget","newSelected","selectedHeroIds","imgClass","output","Tooltip","renderParty","partyButton","partyButtonDiv","textAlign","PartySelection","setHeroIds","isValid","Button","setPartyIds","disabled","color","HeroDismiss","setHeroId","StringConverters","resourceMap","Resources","classToString","heroClass","resources","getResources","alignmentToString","alignment","modifierToString","itemTypeText","abilitiesToString","abilities","None","Acrobatics","Devices","PatronBond","Perception","Sorcery","Stealth","Survival","join","ItemTooltipContent","renderBehaviors","effects","e","valueToString","Fragment","align","traitJsx","newTraits","renderTraits","main","gridItem","inventory","itemSelected","InventorySelector","selectedIds","spacing","alignItems","justify","itemGrids","arrow","emptyItems","emptyGrids","renderInventory","stashImg","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","Stash","stashSelectedIds","setStashSelectedIds","inventorySelectedIds","setInventorySelectedIds","stashItems","setStashItems","setInventoryItems","stashItemIds","inventoryItemIds","newStashItems","newInventoryItems","loadItems","isStashSelected","isInventorySelected","willInventoryBeTooBig","service","removeStashItem","addInventoryItem","startIcon","removeInventoryItem","addStashItem","dialog","userSelect","background","opacity","content","minWidth","minHeight","fontFamily","actions","EncounterDialog","onClose","MockEncounterService","encounterService","paragraph","setParagraph","setTitle","setChoices","storyStarted","setStoryStarted","open","handleClose","handleChoice","encounter","chooseChoice","handleContinue","startEncounter","encChoices","Dialog","aria-labelledby","DialogContent","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","renderParagraph","DialogActions","tooltip","whiteSpace","verticalAlign","justifyContent","marginLeft","marginRight","flexShrink","overflow","VertexMarker","onHover","onHoverEnd","vertextId","Icon","iconUrl","image","iconSize","dimensions","iconAnchor","anchor","Marker","onclick","onmouseover","onmouseout","renderTooltipIcon","exports","Leaflet_module","L","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","dragging","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","DriftMarker","onMoveEndCallback","el","getOptions","onMoveEnd","moveEnd","contextValue","leaflet","popupContainer","fromProps","toProps","leafletElement","setIcon","zIndexOffset","setZIndexOffset","setOpacity","draggable","MapLayer","withLeaflet","HeroMarker","markerIcon","_","Queue","_store","val","shift","OverheadMap","startState","mapUrl","onNewMap","setPos","path","setPath","vertexQueue","setEncounterId","gameState","setGameState","initialNode","setInitialNode","handleMoveEnd","targetVertex","pop","splits","split","newState","clear","stateService","getState","setState","vertexId","npath","aStar","nextVertex","pathVertexes","p","moveToVertexId","mapGraph","match","bounds","LatLngBounds","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","round","zoomControl","ImageOverlay","renderMarkers","Polyline","positions","dashArray","dashOffset","LoadingProgress","CircularProgress","OverheadMapLoader","setGraph","setPathColor","setMapUrl","getMap","Build","loadMap","MapPage","newGameState","loadGameState","MockWorldService","PartyInventory","onEquipItem","isItemEquipable","itemContainer","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","portraitItemWeapon","portraitItemShield","portraitNoItemImg","portraitItemImg","EquippedItems","headItem","WearableHead","bodyItem","WearableBody","armsItem","WearableArms","feetItem","WearableFeet","weaponItem","WeaponMelee1h","StyledTableCell","withStyles","theme","head","palette","common","black","white","body","TableCell","StyledTableRow","action","hover","TableRow","table","StatisticsBlock","statistics","createData","total","attributeTotal","attribute","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","row","scope","maxWidth","statisticsBlock","CalculatedStatisticsBlock","md","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","TraitList","renderTraitIcon","renderTrait","characterGrid","gridAutoRows","breakpoints","down","gridTemplateColumns","up","sectionHeading","bannerContainer","portrait","portraitImg","overflowY","gridRowEnd","HeroProfile","useParams","setHero","world","setWorld","setEquippedItems","setCurrentId","newHero","getPartyStatistics","newWorld","getWorld","newItems","loadHero","class","removedItemId","equipItem","MockDetailedEncounterService","TavernMap","EncounterMap","showGrid","gridPolygons","gridOffset","gridScale","iso","car","carX","carY","isoX","isoY","offset","scale","grid","gridPoly","Polygon","EncounterMapLoader","setEncounter","getEncounterDetail","loadEncounter","EncounterPage","MainLayout","SaveGameSelector","saves","enabledSlots","currentSlot","getDateString","date","toLocaleString","getDescription","isCurrentSlot","saveButtons","chooseText","GameNewMenu","currentSave","clearCache","GameLoadMenu","calculateEnabledSlots","GameDeleteMenu","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cceb357c.chunk.js","sourcesContent":["export default class ElectronHelper {\r\n    /*\r\n     * Are we running under electron?\r\n     */\r\n    public static isElectron(): boolean {\r\n        \r\n        // Renderer process\r\n        if (typeof window !== \"undefined\" && typeof window.process === \"object\" && window.process.type === \"renderer\") {\r\n            return true;\r\n        }\r\n\r\n        // Main process\r\n        if (typeof process !== \"undefined\" && typeof process.versions === \"object\" && !!process.versions.electron) {\r\n            return true;\r\n        }\r\n\r\n        // Detect the user agent when the `nodeIntegration` option is set to true\r\n        if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    // palette: {\r\n    //     primary: {\r\n    //         light: blue[500],\r\n    //         main: blue[500],\r\n    //         dark: blue[500],\r\n    //     },\r\n    //     secondary: {\r\n    //         light: blue[100],\r\n    //         main: blue[100],\r\n    //         dark: blue[100],\r\n    //     },\r\n    //     action: {\r\n    //         hover: blue[800],\r\n    //     },\r\n    // },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\ntype LinkToProps = {\r\n    url: string;\r\n    children?: React.ReactNode;\r\n    top?: string,\r\n    left?: string;\r\n    width?: string;\r\n};\r\n\r\nconst LinkTo: React.FunctionComponent<LinkToProps> = (props: LinkToProps) => {\r\n    \r\n    const { url, children, top, left, width } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        container: {\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n        containerAbsolute: {\r\n            position: \"absolute\",\r\n            top: top ?? \"20px\",\r\n            left: left ?? \"20px\",\r\n            width: width ?? \"40px\",\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    const isPositioned = top || left || width;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => history.push(url);\r\n\r\n    return (\r\n        <div className={isPositioned ? classes.containerAbsolute : classes.container} onClick={navigateToUrl}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LinkTo;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Mousetrap from \"mousetrap\";\r\n\r\ntype KeyMapsProps = {\r\n    backUrl: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst KeyMaps: React.FunctionComponent<KeyMapsProps> = (props: KeyMapsProps) => {\r\n    const { backUrl, children } = props;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string): void => history.push(url);\r\n\r\n    Mousetrap.bind(\"1\", () => navigateToUrl(\"/profile/1\"));\r\n    Mousetrap.bind(\"2\", () => navigateToUrl(\"/profile/2\"));\r\n    Mousetrap.bind(\"3\", () => navigateToUrl(\"/profile/3\"));\r\n    Mousetrap.bind(\"4\", () => navigateToUrl(\"/profile/4\"));\r\n    Mousetrap.bind(\"esc\", () => navigateToUrl(backUrl));\r\n\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default KeyMaps;\r\n","export default class MockSaveService {\r\n    private static _currentSave = -1;\r\n\r\n    public setCurrentSave = (slot: number) => {\r\n        MockSaveService._currentSave = slot;\r\n        localStorage.setItem(\"currentSlot\", slot.toString());\r\n    };\r\n\r\n    public getCurrentSave = (): number => {\r\n        if (MockSaveService._currentSave > 0) return MockSaveService._currentSave;\r\n        const slot = localStorage.getItem(\"currentSlot\");\r\n\r\n        const slotId = slot ? Number.parseInt(slot) : 0;\r\n\r\n        MockSaveService._currentSave = slotId;\r\n\r\n        return slotId;\r\n    };\r\n\r\n    public markSlotUpdated = () => {\r\n        localStorage.setItem(this.getCurrentSave() + \"_time\", new Date().toString());\r\n    };\r\n\r\n    public getSlotUpdateTimes = (): (Date | null)[] => {\r\n        const slot1 = localStorage.getItem(\"0_time\");\r\n        const slot2 = localStorage.getItem(\"1_time\");\r\n        const slot3 = localStorage.getItem(\"3_time\");\r\n\r\n        const items: (Date | null)[] = [slot1 ? new Date(slot1) : null, slot2 ? new Date(slot2) : null, slot3 ? new Date(slot3) : null];\r\n\r\n        return items;\r\n    }\r\n\r\n    public deleteSlot = (slot: number) => {\r\n\r\n        if (slot === this.getCurrentSave()) {\r\n            throw \"Can't delete current save\";\r\n        }\r\n\r\n        localStorage.removeItem(slot + \"_time\");\r\n        localStorage.removeItem(slot + \"_state\");\r\n    }\r\n\r\n    public saveObject<T>(key: string, value: T) {\r\n        localStorage.setItem(this.getCurrentSave() + \"_\" + key, JSON.stringify(value));\r\n        this.markSlotUpdated();\r\n    }\r\n\r\n    public getObject<T>(key: string): T | undefined {\r\n        const json = localStorage.getItem(this.getCurrentSave() + \"_\" + key);\r\n        return json ? JSON.parse(json) : undefined;\r\n    }\r\n}\r\n","\r\nexport enum TraitType {\r\n    Uncategorised = 0,\r\n    Mental = 1,\r\n    Mystical = 2,\r\n    Physical = 3,\r\n    Item = 4,\r\n    // MentalPhobia = 100,\r\n    // MysticalCurse = 200,\r\n};\r\n\r\nexport enum ModifierType {\r\n    None = 0,\r\n    Strength = 10,\r\n    Dexterity = 11,\r\n    Constitution = 12,\r\n    Intelligence = 13,\r\n    Wisdom = 14,\r\n    Charisma = 15,\r\n    Luck = 16,\r\n    HitPoints = 20,\r\n    HitDie = 21,\r\n    Armor = 22,\r\n    SpellResistance = 23,\r\n    MoveSpeed = 24,\r\n    MeleeAttackSpeed = 25,\r\n    MeleeAttack = 26,\r\n    MeleeDamageDie = 27,\r\n    MeleeDamage = 28,\r\n    RangedAttackSpeed = 29,\r\n    RangedAttack = 30,\r\n    RangedDamageDie = 31,\r\n    RangedDamage = 32,\r\n    MeleeChanceForParalysis = 50,\r\n    MeleeChanceForPoisoned = 51,\r\n    MeleeChanceForBleeding = 52,\r\n    MeleeChanceForTerrified = 53,\r\n    MeleeChanceForCharmed = 54,\r\n    RangedChanceForParalysis = 60,\r\n    RangedChanceForPoisoned = 61,\r\n    RangedChanceForBleeding = 62,\r\n    RangedChanceForTerrified = 63,\r\n    RangedChanceForCharmed = 64,\r\n    AddAbility = 100,\r\n    RemoveAbility = 101, // Items can prevent abilities being used (e.g. Armor prevents Sorcery)\r\n    AbilitySorcery = 110,\r\n    AbilityStealth = 111,\r\n    AbilityPerception = 112,\r\n    AbilityPatronBond = 113,\r\n    AbilitySurvival = 114,\r\n    AbilityDevices = 115,\r\n    AbilityAcrobatics = 116,\r\n};\r\n\r\nexport interface TraitEffect {\r\n\r\n    modifierType: ModifierType;\r\n\r\n    modifierValue: number;\r\n}\r\n\r\nexport default interface Trait {\r\n    // ID for the trait\r\n    id: string;\r\n\r\n    // A name for the trait\r\n    name: string;\r\n\r\n    // The type of trait\r\n    type: TraitType;\r\n\r\n    // What does it do\r\n    behaviour: TraitEffect[];\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        top: \"1vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"lightsteelblue\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n            backgroundColor: \"ghostwhite\",\r\n        },\r\n    },\r\n    cardDisabled: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkgrey\",\r\n    },\r\n    cardActive: {\r\n        position: \"relative\",\r\n        margin: \"35px\",\r\n        cursor: \"not-allowed\",\r\n        backgroundColor: \"darkseagreen\",\r\n    },\r\n});\r\n\r\nexport type MenuCard = {\r\n    title: string;\r\n    description: string;\r\n    enabled: boolean;\r\n    active?: boolean;\r\n    icon?: JSX.Element;\r\n    onSelected: () => void;\r\n};\r\n\r\ntype MenuCardsProps = {\r\n    items: MenuCard[];\r\n};\r\n\r\nconst MenuCards: React.FunctionComponent<MenuCardsProps> = (props: MenuCardsProps) => {\r\n    const classes = useStyles();\r\n\r\n    const selectClass = (i: MenuCard) => (i.active ? classes.cardActive : i.enabled ? classes.card : classes.cardDisabled);\r\n\r\n    const { items } = props;\r\n    const renderCards = () =>\r\n        items.map((i) => (\r\n            <Card className={selectClass(i)} onClick={i.onSelected}>\r\n                <CardHeader title={<Typography variant=\"h2\">{i.title}</Typography>} avatar={i.icon} />\r\n                <CardContent>{i.description}</CardContent>\r\n            </Card>\r\n        ));\r\n\r\n    return (\r\n        <Grid container className={classes.container}>\r\n            <Grid item xs={3}></Grid>\r\n            <Grid item xs={6}>\r\n                {renderCards()}\r\n            </Grid>\r\n            <Grid item xs={3}></Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MenuCards;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport SystemUpdateAltIcon from \"@material-ui/icons/SystemUpdateAlt\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\n\r\nimport LinkTo from '../components/LinkTo';\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport ElectronHelper from '../helpers/ElectronHelper';\r\nimport MockSaveService from '../services/MockSaveService';\r\nimport MenuCards, { MenuCard } from '../components/MenuCards';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"9vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n});\r\n\r\nconst MainMenu: React.FunctionComponent = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n\r\n    let history = useHistory();\r\n    const navigateToNewGame = () => history.push(\"/game/new\");\r\n    const navigateToLoadGame = () => history.push(\"/game/load\");\r\n    const navigateToDeleteGame = () => history.push(\"/game/delete\");\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    const onElectronExit = () => {\r\n        const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n        ipcRenderer.send(\"close-app\");\r\n    }\r\n\r\n    if (!saveTimes)\r\n        return null;\r\n\r\n    const slotCount = saveTimes.filter(s => s !== null).length;\r\n    const allSlotsFull = slotCount >= 3;\r\n    const oneSlotFull = slotCount === 1;\r\n\r\n    const items: MenuCard[] = [\r\n        {\r\n            title: \"New Game\",\r\n            description: \"Start a new game\" + (allSlotsFull ? \" (All slots full)\" : \"\"),\r\n            enabled: !allSlotsFull,\r\n            icon: <AddCircleOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToNewGame,\r\n        },\r\n        {\r\n            title: \"Load Game\",\r\n            description: \"Load a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <SystemUpdateAltIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToLoadGame,\r\n        },\r\n        {\r\n            title: \"Delete Game\",\r\n            description: \"Delete a game\" + (oneSlotFull ? \" (Only one slot in use)\" : \"\"),\r\n            enabled: !oneSlotFull,\r\n            icon: <DeleteOutlineIcon className={classes.cardIcon} />,\r\n            onSelected: navigateToDeleteGame,\r\n        },\r\n    ];\r\n\r\n    // Add a quit option if running under Electron\r\n    if (ElectronHelper.isElectron()) {\r\n        items.push({\r\n            title: \"Quit\",\r\n            description: \"Exit the game\",\r\n            enabled: true,\r\n            icon: <ExitToAppIcon className={classes.cardIcon} />,\r\n            onSelected: onElectronExit,\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <MenuCards items={items} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","export default class ArrayHelper {\r\n    /*\r\n    * Remove an item from an array\r\n    */\r\n    public static remove<T>(array: T[], item: T): void {\r\n        const index = array.indexOf(item);\r\n        if (index > -1) {\r\n            array.splice(index, 1);\r\n        }\r\n    }\r\n}","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\nimport CeramicHelm from \"./items/ceramic_helm.json\";\r\nimport CeramicArmor from \"./items/ceramic_armor.json\";\r\n\r\nexport default class MockItemService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude;\r\n            case \"hag_teeth\":\r\n                return HagTeeth;\r\n            case \"ceramic_helm\":\r\n                return CeramicHelm;\r\n            case \"ceramic_armor\":\r\n                return CeramicArmor;\r\n            case \"wolf_spear\":\r\n            default:\r\n                return WolfSpear;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import AttributeList from \"../models/AttributeList\";\r\nimport CalculatedStats from \"../models/CalculatedStats\";\r\nimport Hero from \"../models/Hero\";\r\nimport HeroTrait from \"../models/HeroTrait\";\r\nimport Item from \"../models/Item\";\r\nimport Trait, { ModifierType } from \"../models/Trait\";\r\nimport ArrayHelper from \"./ArrayHelper\";\r\n\r\nexport default class HeroHelper {\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getAllTraits = (hero: Hero): HeroTrait[] => hero.traits.concat(hero.itemTraits).concat(hero.temporaryTraits);\r\n\r\n    /*\r\n     * Add traits from an item to the hero\r\n     */\r\n    public static addItemTraits = (hero: Hero, item: Item): void => {\r\n        for (let i = 0; i < item.traits.length; i++) {\r\n            const itemTrait: Trait = item.traits[i];\r\n            const heroTrait: HeroTrait = {\r\n                id: itemTrait.id,\r\n                name: itemTrait.name,\r\n                type: itemTrait.type,\r\n                behaviour: itemTrait.behaviour,\r\n                from: item.name,\r\n            };\r\n            hero.itemTraits.push(heroTrait);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Remove traits from an item to the hero\r\n     */\r\n    public static removeItemTraits = (hero: Hero, item: Item): void => {\r\n        const matches = hero.itemTraits.filter((t) => t.from === item.name);\r\n        for (let i = 0; i < matches.length; i++) {\r\n            ArrayHelper.remove(hero.itemTraits, matches[i]);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static calculateAttributesWithModifiers = (hero: Hero): AttributeList => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let strMod = 0,\r\n            dexMod = 0,\r\n            conMod = 0,\r\n            intMod = 0,\r\n            wisMod = 0,\r\n            chaMod = 0,\r\n            luckMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Strength:\r\n                        strMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Dexterity:\r\n                        dexMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Constitution:\r\n                        conMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Intelligence:\r\n                        intMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Wisdom:\r\n                        wisMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Charisma:\r\n                        chaMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Luck:\r\n                        luckMod += behaviour.modifierValue;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attributes = hero.attributes;\r\n        const newAttributeList: AttributeList = {\r\n            strength: { base: attributes.strength.base, modifier: strMod },\r\n            dexterity: { base: attributes.dexterity.base, modifier: dexMod },\r\n            constitution: { base: attributes.constitution.base, modifier: conMod },\r\n            intelligence: { base: attributes.intelligence.base, modifier: intMod },\r\n            wisdom: { base: attributes.wisdom.base, modifier: wisMod },\r\n            charisma: { base: attributes.charisma.base, modifier: chaMod },\r\n            luck: { base: attributes.luck.base, modifier: luckMod },\r\n        };\r\n\r\n        return newAttributeList;\r\n    };\r\n\r\n    public static calculateStatsWithModifiers = (hero: Hero): CalculatedStats => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let armorMod = 0,\r\n            moveSpeedMod = 0,\r\n            meleeAttackMod = 0,\r\n            meleeAttackSpeedMod = 0,\r\n            meleeDamageDieMod = 0,\r\n            meleeDamageMod = 0,\r\n            rangedAttackMod = 0,\r\n            rangedAttackSpeedMod = 0,\r\n            rangedDamageDieMod = 0,\r\n            rangedDamageMod = 0,\r\n            hpMod = 0,\r\n            hitDieMod = 0,\r\n            spellResistMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Armor:\r\n                        armorMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MoveSpeed:\r\n                        moveSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeAttack:\r\n                        meleeAttackMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeAttackSpeed:\r\n                        meleeAttackSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeDamageDie:\r\n                        meleeDamageDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeDamage:\r\n                        meleeDamageMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttack:\r\n                        rangedAttackMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttackSpeed:\r\n                        rangedAttackSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedDamageDie:\r\n                        rangedDamageDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedDamage:\r\n                        rangedDamageMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.HitPoints:\r\n                        hpMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.HitDie:\r\n                        hitDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.SpellResistance:\r\n                        spellResistMod += behaviour.modifierValue;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const stats = hero.stats;\r\n        const newStats: CalculatedStats = {\r\n            armour: stats.armour + armorMod,\r\n            attack: stats.attack + meleeAttackMod,\r\n            moveSpeed: stats.moveSpeed + moveSpeedMod,\r\n            attackSpeed: stats.attackSpeed + meleeAttackSpeedMod,\r\n            damageDie: stats.damageDie + meleeDamageDieMod,\r\n            damageBonus: stats.damageBonus + meleeDamageMod,\r\n            maxHitPoints: stats.maxHitPoints + hpMod,\r\n            currentHitPoints: stats.currentHitPoints,\r\n            hitDie: stats.hitDie + hitDieMod,\r\n            spellResistance: stats.spellResistance + spellResistMod,\r\n        };\r\n\r\n        return newStats;\r\n    };\r\n}\r\n","import Hero from \"../models/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\nimport ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport MockItemService from \"./MockItemService\";\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroes: Hero[] = [Gyvwain, Balthazar, Gossamer, Gargamela, Justin];\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return MockHeroService._heroes;\r\n    }\r\n\r\n    /*\r\n    * Equip an item in one of the equip slots\r\n    * If an item needs to be removed, return the item Id\r\n    */\r\n    equipItem(heroId: string, itemId: string): string | null {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw \"Can't find hero\";\r\n\r\n        const itemService = new MockItemService();\r\n        const originalItem = itemService.getItemDetail(itemId);\r\n        if (!originalItem) throw \"Can't find original item\";\r\n\r\n        // Check if the hero already has an item of this type equipped\r\n        const items = itemService.getItems(heroMatch.equippedItems);\r\n        const itemWithSameType = items.find(item => item.itemType === originalItem.itemType);\r\n\r\n        // TODO: We need special logic around equipable weapons\r\n\r\n        heroMatch.equippedItems.push(itemId);\r\n        \r\n        // Add traits from the item\r\n        HeroHelper.addItemTraits(heroMatch, originalItem);\r\n\r\n        if (!itemWithSameType) return null; \r\n\r\n        // Remove traits from the removed item\r\n        HeroHelper.removeItemTraits(heroMatch, itemWithSameType);\r\n        \r\n        return itemWithSameType.id;\r\n    }\r\n\r\n    unequipItem(heroId: string, itemId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw \"Can't find hero\";\r\n\r\n        const itemService = new MockItemService();\r\n        const item = itemService.getItemDetail(itemId);\r\n        if (!item) throw \"Can't find original item\";\r\n\r\n        ArrayHelper.remove(heroMatch.equippedItems, item.id);\r\n\r\n        // Remove traits from the removed item\r\n        HeroHelper.removeItemTraits(heroMatch, item);\r\n    }\r\n}\r\n","import ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport Hero from \"../models/Hero\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockHeroService from \"./MockHeroService\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockPartyService {\r\n    getPartyStatistics(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static defaultHeroIds = (): string[] => [\r\n        \"gyvwain_the_chivalrous\",\r\n        \"balthazar_the_unblemished\",\r\n        \"gossamer\",\r\n        \"gargomela_the_black\",\r\n    ];\r\n\r\n    private static _heroIds: string[] | undefined = undefined;\r\n\r\n    getParty(): Hero[] {\r\n        const heroService = new MockHeroService();\r\n        const party = this.getPartyIds().map((id) => heroService.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    getPartyIds(): string[] {\r\n        if (MockPartyService._heroIds) {\r\n            return MockPartyService._heroIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const heroIds: string[] = saveService.getObject<string[]>(\"heroIds\") ?? MockPartyService.defaultHeroIds();\r\n\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        return MockPartyService._heroIds;\r\n    }\r\n\r\n    setPartyIds(heroIds: string[]): void {\r\n        MockPartyService._heroIds = heroIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"heroIds\", heroIds);\r\n    }\r\n\r\n    private static defaultInventoryIds = (): string[] => [\"wolf_spear\", \"ceramic_helm\", \"ceramic_armor\"];\r\n\r\n    private static defaultStashIds = (): string[] => [\"hag_teeth\", \"token_of_servitude\"];\r\n\r\n    private static _inventoryItemIds: string[] | undefined = undefined;\r\n    private static _stashItemIds: string[] | undefined = undefined;\r\n\r\n    getInventory(): string[] {\r\n        if (MockPartyService._inventoryItemIds) {\r\n            return MockPartyService._inventoryItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n        const inventoryIds: string[] = saveService.getObject<string[]>(\"inventoryItemIds\") ?? MockPartyService.defaultInventoryIds();\r\n\r\n        MockPartyService._inventoryItemIds = inventoryIds;\r\n\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"inventoryItemIds\", itemIds);\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory();\r\n        inventoryItems.push(id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        const inventoryItems = this.getInventory();\r\n        ArrayHelper.remove(inventoryItems, id);\r\n        this.setInventory(inventoryItems);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        if (MockPartyService._stashItemIds) {\r\n            return MockPartyService._stashItemIds;\r\n        }\r\n\r\n        const saveService = new MockSaveService();\r\n\r\n        const stashIds: string[] = saveService.getObject<string[]>(\"stashItemIds\") ?? MockPartyService.defaultStashIds();\r\n\r\n        MockPartyService._stashItemIds = stashIds;\r\n\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.saveObject(\"stashItemIds\", itemIds);\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        const items = this.getStash();\r\n        items.push(id);\r\n        this.setStash(items);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        const items = this.getStash();\r\n        ArrayHelper.remove(items, id);\r\n        this.setStash(items);\r\n    }\r\n\r\n    public clearCache() {\r\n        MockPartyService._heroIds = undefined;\r\n        MockPartyService._inventoryItemIds = undefined;\r\n        MockPartyService._stashItemIds = undefined;\r\n    }\r\n}\r\n","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"./LinkTo\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        \"-webkit-app-region\": \"drag\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"2vh\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n    headerImg: {\r\n        width: \"7vh\",\r\n        height: \"7vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"5vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\n\r\nconst Header: React.FunctionComponent<HeaderProps> = (props: HeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = React.useState<Hero[] | null>(null); // The map graph data\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockPartyService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <LinkTo key={hero.id} url={`${process.env.PUBLIC_URL}/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </LinkTo>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                </LinkTo>\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import GameState from \"../models/GameState\";\r\nimport MockSaveService from \"./MockSaveService\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static defaultState = (): GameState => {\r\n        return {\r\n            currentMapId: \"town\",\r\n            currentVertextId: \"hut-road\", // \"scupperden-road\"\r\n        }\r\n    };\r\n\r\n    private static _state: GameState | undefined = undefined;\r\n\r\n    public getState(): GameState {\r\n        if (MockGameStateService._state != null) \r\n            return MockGameStateService._state;\r\n            \r\n        const saveService = new MockSaveService();\r\n        \r\n        const stateJson = localStorage.getItem(saveService.getCurrentSave() + \"_state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService.defaultState();\r\n\r\n        MockGameStateService._state = state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        const saveService = new MockSaveService();\r\n\r\n        MockGameStateService._state = state;\r\n        console.log(\"setState : \" + JSON.stringify(state));\r\n        localStorage.setItem(saveService.getCurrentSave() + \"_state\", JSON.stringify(state));\r\n        saveService.markSlotUpdated();\r\n    }\r\n\r\n    public clearCache() {\r\n        MockGameStateService._state = undefined;\r\n    }\r\n}\r\n","import AttributeList from \"./AttributeList\";\r\nimport CalculatedStats from \"./CalculatedStats\";\r\nimport HeroTrait from \"./HeroTrait\";\r\n\r\nexport enum Alignment {\r\n    Lawful = 0,\r\n    Neutral = 1,\r\n    Chaotic = 2,\r\n}\r\n\r\nexport enum HeroClass {\r\n    /*\r\n     * A traditional fighter, guard, barbarian or mercenary for hire\r\n     */\r\n    Warrior = 0,\r\n    /*\r\n     * A scounrel, bandit, robber\r\n     */\r\n    Thief = 1,\r\n    /*\r\n     * A mistrusted user of magic. Usually obviously marked, correpted or tainted\r\n     */\r\n    Sorcerer = 2,\r\n    /*\r\n     * A follower, patron, or somone bound to a god, demon or higher power\r\n     */\r\n    Templar = 3,\r\n}\r\n\r\nexport enum StatusFlags {\r\n    None = 0x00,\r\n    Paralysed = 0x01,\r\n    Poisoned = 0x04,\r\n    Bleeding = 0x08,\r\n    Terrified = 0x10,\r\n    Charmed = 0x20,\r\n    // Sleeping, Petrified,\r\n}\r\n\r\nexport enum AbilityFlags {\r\n    None = 0x00,\r\n    Sorcery = 0x01,\r\n    Stealth = 0x02,\r\n    Perception = 0x04,\r\n    PatronBond = 0x08,\r\n    Survival = 0x10,\r\n    Devices = 0x20,\r\n    Acrobatics = 0x40,\r\n}\r\n\r\n// TODO: Split hero into core stats & calculated (view) ?\r\ninterface Hero {\r\n    // ID of the hero\r\n    id: string;\r\n\r\n    // Display name of the hero\r\n    name: string;\r\n\r\n    // Origins of the hero\r\n    background: string;\r\n\r\n    imageUrl: string;\r\n\r\n    // Hero attributes\r\n    attributes: AttributeList;\r\n\r\n    // Any special states\r\n    status: StatusFlags;\r\n\r\n    stats: CalculatedStats;\r\n\r\n    abilities: AbilityFlags;\r\n\r\n    alignment: Alignment;\r\n\r\n    class: HeroClass;\r\n\r\n    // Itesm equpped by the hero\r\n    equippedItems: string[];\r\n\r\n    // Hero traits\r\n    traits: HeroTrait[];\r\n\r\n    // Hero traits\r\n    itemTraits: HeroTrait[];\r\n\r\n    // Hero traits\r\n    temporaryTraits: HeroTrait[];\r\n}\r\n\r\nexport default Hero;\r\n","import Trait from \"./Trait\";\r\n\r\nexport enum ItemType {\r\n    Usable = 1,\r\n    Quest = 2,\r\n    WearableHead = 10,\r\n    WearableBody = 11,\r\n    WearableArms = 12,\r\n    WearableFeet = 13,\r\n    WeaponMelee1h = 20,\r\n    WeaponMelee2h = 21,\r\n    WeaponRanged1h = 22,\r\n    WeaponRanged2h = 23,\r\n    Shield = 24,\r\n}\r\n\r\nexport default interface Item {\r\n    // ID of the item\r\n    id: string;\r\n\r\n    // Name of the item\r\n    name: string;\r\n\r\n    // Text description for the item\r\n    description: string;\r\n\r\n    // URL of the image to display for the item\r\n    imageUrl: string;\r\n\r\n    // The type of item\r\n    itemType: ItemType;\r\n\r\n    // Item traits\r\n    traits: Trait[];\r\n}","import Leaflet from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            pathColor: json.pathColor,\r\n            vertices: json.vertices.map((v: any) => {\r\n                return {\r\n                    id: v.id,\r\n                    position: Leaflet.latLng(v.position[0], v.position[1]),\r\n                    clickRadius: v.clickRadius,\r\n                    encounterId: v.encounterId,\r\n                    marker: v.marker,\r\n                    exitId: v.exitId,\r\n                } as MapVertex;\r\n            }),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\nimport CustomMarker from \"./CustomMarker\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): Node<NodeData> | null => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n    marker?: CustomMarker;\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n                marker: item.marker,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\nimport TheInterceptContent from \"./encounters/TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/chasm.ink.json\";\r\nimport homeContent from \"./encounters/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/nine-bells.ink.json\";\r\nimport brawlContent from \"./encounters/brawl.ink.json\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        switch (id) {\r\n            case \"hoard\":\r\n                this.currentTitle = \"Treasure !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                //paragraphText: \"You stumble tired and exhaused into a room stuffed to the ceiling with well-crafted wooden coffers.\",\r\n                break;\r\n            case \"wet-room\":\r\n                this.currentTitle = \"The Intercept !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"common-room\":\r\n                this.currentTitle = \"Tracking the Yellow-Bellied Crook\";\r\n                this.currentStory = new Story(commonRoomContent);\r\n                break;\r\n            case \"chasm\":\r\n                this.currentTitle = \"Across the Chasm\";\r\n                this.currentStory = new Story(chasmContent);\r\n                break;\r\n            case \"warrens\":\r\n                this.currentTitle = \"Rats !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"home\":\r\n                this.currentTitle = \"Scupperden\";\r\n                this.currentStory = new Story(homeContent);\r\n                break;\r\n            case \"nine-bells\":\r\n                this.currentTitle = \"The Cathedral\";\r\n                this.currentStory = new Story(nineBellsContent);\r\n                break;\r\n            case \"brawl\":\r\n                this.currentTitle = \"Thugs!\";\r\n                this.currentStory = new Story(brawlContent);\r\n                break;\r\n            default:\r\n                return MockStoryEncounterService.createEmptyStory();\r\n        }\r\n        this.currentId = id;\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value,\r\n                    detailedEncounter: detailedEncounter?.value,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map(\r\n            (c: Choice) => {\r\n                return {\r\n                    index: c.index,\r\n                    text: c.text,\r\n                } as InkStoryChoice\r\n            }\r\n        );\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    party: {\r\n        padding: \"30px\",\r\n        position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroSelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\nconst HeroSelector: React.FunctionComponent<HeroSelectorProps> = (props: HeroSelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    let [heroes, setHeroes] = React.useState<Hero[] | null>(null); // The map graph data\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <Grid container>{renderParty()}</Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nconst PartySelection: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [heroIds, setHeroIds] = React.useState<string[]>([]);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = () => heroIds.length === 4; \r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockPartyService();\r\n        service.setPartyIds(heroIds);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} multiSelect={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={changeParty} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default PartySelection;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\n\r\nconst HeroDismiss: React.FunctionComponent = (): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [heroId, setHeroId] = React.useState(\"\");\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        if (ids.length > 0)\r\n            setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = () => heroId.length > 0; \r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockHeroService();\r\n        \r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={dismissHero} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Dismiss\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default HeroDismiss;\r\n","import { AbilityFlags, Alignment, HeroClass } from \"../models/Hero\";\r\nimport { ItemType } from \"../models/Item\";\r\nimport { ModifierType } from \"../models/Trait\";\r\nimport Resources from \"../resources.en.json\";\r\n\r\nexport default class StringConverters {\r\n    private static resourceMap: any = null;\r\n\r\n    static getResources(): any {\r\n        if (!StringConverters.resourceMap) {\r\n            // TODO: This is silly\r\n            StringConverters.resourceMap = JSON.parse(JSON.stringify(Resources));\r\n        }\r\n\r\n        return StringConverters.resourceMap;\r\n    }\r\n\r\n    static classToString = (heroClass: HeroClass): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"HeroClass_\" + HeroClass[heroClass];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static alignmentToString = (alignment: Alignment): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"Alignment_\" + Alignment[alignment];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static modifierToString = (modifierType: ModifierType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ModifierType_\" + ModifierType[modifierType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static itemTypeText = (itemType: ItemType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ItemType_\" + ItemType[itemType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static abilitiesToString = (abilities: AbilityFlags): string => {\r\n        if (abilities === AbilityFlags.None) return \"None\";\r\n\r\n        const output: string[] = [];\r\n\r\n        if (abilities & AbilityFlags.Acrobatics) output.push(\"Acrobatics\");\r\n        if (abilities & AbilityFlags.Devices) output.push(\"Disable/Modify Devices\");\r\n        if (abilities & AbilityFlags.PatronBond) output.push(\"Patron Bond\");\r\n        if (abilities & AbilityFlags.Perception) output.push(\"Perception\");\r\n        if (abilities & AbilityFlags.Sorcery) output.push(\"Sorcery\");\r\n        if (abilities & AbilityFlags.Stealth) output.push(\"Stealth\");\r\n        if (abilities & AbilityFlags.Survival) output.push(\"Survival\");\r\n\r\n        return output.join(\", \");\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport Item from \"../models/Item\";\r\nimport Trait, { TraitEffect } from \"../models/Trait\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        padding: \"5px\",\r\n    },\r\n    description: {\r\n        padding: \"10px\",\r\n        margin: \"10px 0\",\r\n        backgroundColor: \"#999\",\r\n    },\r\n    itemType: {\r\n        padding: \"500px 10px 0 10px\",\r\n        margin: \"100px 0 0 0 \",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n    traits: {\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n});\r\n\r\ntype ItemTooltipContentProps = {\r\n    item: Item | undefined;\r\n};\r\n\r\nconst ItemTooltipContent: React.FunctionComponent<ItemTooltipContentProps> = (props: ItemTooltipContentProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { item } = props;\r\n\r\n    const renderTraits = (traits: Trait[]): JSX.Element => {\r\n        let traitJsx: JSX.Element[] = [];\r\n        for (let i = 0; i < traits.length; i++) {\r\n            const newTraits = renderBehaviors(traits[i].behaviour);\r\n            traitJsx = traitJsx.concat(newTraits);\r\n        }\r\n        return <div>{traitJsx}</div>;\r\n    };\r\n\r\n    const renderBehaviors = (effects: TraitEffect[]): JSX.Element[] => {\r\n        return effects.map((e) => (\r\n            <p>\r\n                {valueToString(e.modifierValue)} {StringConverters.modifierToString(e.modifierType)}\r\n            </p>\r\n        ));\r\n    };\r\n\r\n    const valueToString = (value: number): string => (value > 0 ? `+${value}` : value.toString());\r\n\r\n    if (!item) return <p>\"None\"</p>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography className={classes.title} color=\"inherit\">\r\n                {item.name}\r\n            </Typography>\r\n            <p className={classes.description}>{item.description}</p>\r\n            <Typography className={classes.itemType}>{StringConverters.itemTypeText(item.itemType)}</Typography>\r\n            <Typography className={classes.traits} align=\"right\">\r\n                {renderTraits(item.traits)}\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemTooltipContent;\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\nimport Item from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: React.FunctionComponent<InventorySelectorProps> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, items, multiSelect } = props;\r\n\r\n    let [selected, setSelected] = React.useState<boolean[]>([]);\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        const selectedIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedIds.push(items[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) {\r\n            const result = onSelectionChanged(selectedIds);\r\n        }\r\n    };\r\n\r\n    const renderInventory = () => {\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={item.id}>\r\n                    <Tooltip title={<ItemTooltipContent item={item} />} key={index} arrow>\r\n                        <img src={item.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt={item.name} />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map((i) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={index.toString()}>\r\n                    <Tooltip title={\"Nothing\"} key={index}>\r\n                        <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InventorySelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Item from \"../models/Item\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    stashImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\nconst Stash: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [stashSelectedIds, setStashSelectedIds] = React.useState<string[]>([]);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState<string[]>([]);\r\n\r\n    let [stashItems, setStashItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n\r\n    const maxItems = 8;\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const stashSelectionChanged = (ids: string[]) => setStashSelectedIds(ids);\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);;\r\n\r\n    const isStashSelected = (): boolean => stashSelectedIds.length > 0; \r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n\r\n    const willStashBeTooBig = (): boolean => (stashItems ? stashItems.length + inventorySelectedIds.length > maxItems : false);\r\n    const willInventoryBeTooBig = (): boolean => (inventoryItems ? inventoryItems.length + stashSelectedIds.length > maxItems : false);\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isStashSelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < stashSelectedIds.length; i++) {\r\n            service.removeStashItem(stashSelectedIds[i]);\r\n            service.addInventoryItem(stashSelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setStashSelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n\r\n        // TODO: How to trigger a reload?\r\n    }\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < inventorySelectedIds.length; i++) {\r\n            service.removeInventoryItem(inventorySelectedIds[i]);\r\n            service.addStashItem(inventorySelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setInventorySelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    if (!stashItems || !inventoryItems)\r\n        return null;\r\n\r\n    const stashToolTip = () => {\r\n        if (willInventoryBeTooBig())\r\n            return \"Too many items in inventory\";\r\n\r\n        return isStashSelected() ? \"Take Item from the Stash\" : \"Please select a stash item\";\r\n    }\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in stash\";\r\n\r\n        return isInventorySelected() ? \"Put Item in the Stash\" : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src=\"./images/stash.png\" alt=\"stash\" className={classes.stashImg} />\r\n                <InventorySelector items={stashItems} multiSelect={true} onSelectionChanged={stashSelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={stashToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isStashSelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willStashBeTooBig() || !isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector items={inventoryItems} multiSelect={true} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Stash;\r\n","import React from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\nimport PartySelection from \"./PartySelection\";\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\n\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n        userSelect: \"none\",\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveTo?: string) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nconst EncounterDialog: React.FunctionComponent<EncounterDialogProps> = (props: EncounterDialogProps) => {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = React.useState(new MockEncounterService());\r\n    let [paragraph, setParagraph] = React.useState(\"\");\r\n    let [title, setTitle] = React.useState(\"\");\r\n    let [choices, setChoices] = React.useState<InkStoryChoice[]>([]);\r\n    let [storyStarted, setStoryStarted] = React.useState(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo: string) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo);\r\n    };\r\n\r\n    const handleChoice = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            // Finish the story\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraph(encounter.paragraphText);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            // Finished -> Check variables\r\n            if (encounter.finishData) {\r\n                const moveTo = encounter.finishData.moveTo;\r\n                if (moveTo) {\r\n                    handleCloseWithValue(moveTo);\r\n                    return;\r\n                }\r\n            }\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n        if (encChoices.length === 0) {\r\n            return <Button onClick={handleContinue}>Continue</Button>;\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    const renderParagraph = (text: string) => {\r\n\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelection /> : null}\r\n                {isHeroSelect ? <HeroSelector /> : null}\r\n                {isHeroDismiss ? <HeroDismiss /> : null}\r\n                {isStash ? <Stash /> : null}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        // className={classes.dialog}\r\n        <Dialog\r\n            className={classes.dialog}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-dialog-title\"\r\n            open={open}\r\n            //disableBackdropClick={true}\r\n        >\r\n            {/* <DialogTitle id=\"simple-dialog-title\">Set backup account</DialogTitle> */}\r\n            <DialogContent className={classes.content}>\r\n                <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" />\r\n                <h1>{title}</h1>\r\n                {renderParagraph(paragraph)}\r\n            </DialogContent>\r\n            <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EncounterDialog;\r\n","import React from \"react\";\r\n\r\nimport Leaflet from \"leaflet\";\r\nimport { Marker, Tooltip } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\n\r\nimport { Node } from \"ngraph.graph\";\r\nimport { NodeData } from \"../models/MapGraph\";\r\n\r\nconst useStyles = makeStyles({\r\n    tooltip: {\r\n        padding: \"3px 8px 3px 3px\",\r\n        height: \"32px\",\r\n        display: \"inline-flex\",\r\n        fontSize: \"0.8125rem\",\r\n        // //transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        alignItems: \"center\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"',\r\n        whiteSpace: \"nowrap\",\r\n        borderRadius: \"10px\",\r\n        verticalAlign: \"middle\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        color: \"#616161\",\r\n        marginLeft: \"3px\",\r\n        marginRight: \"5px\",\r\n        width: \"1em\",\r\n        height: \"1em\",\r\n        display: \"inline-block\",\r\n        fontSize: \"1.5rem\",\r\n        //transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        flexShrink: 0,\r\n        userSelect: \"none\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype VertexMarkerProps = {\r\n    vertex: Node<NodeData>;\r\n    onHover: (id: string) => void;\r\n    onHoverEnd: (id: string) => void;\r\n    onClick: (id: string) => void;\r\n};\r\n\r\nconst VertexMarker: React.FunctionComponent<VertexMarkerProps> = (props: VertexMarkerProps) => {\r\n\r\n    const { vertex, onHover, onHoverEnd, onClick } = props;\r\n    const vertextId = vertex.id.toString();\r\n\r\n    const classes = useStyles();\r\n\r\n    const iconConversionX = 1.4;\r\n    const iconConversionY = 1.5;\r\n\r\n    const renderTooltipIcon = () => {\r\n        if (vertex.data.exitId) \r\n            return <ExitToAppIcon className={classes.icon} />;\r\n\r\n        // Render icons for special encounters\r\n        switch(vertex.data.encounterId) {\r\n            case \"home\":\r\n                return <HomeIcon className={classes.icon} />;\r\n            default:\r\n                return <GpsFixedIcon className={classes.icon} />;\r\n        }\r\n    }\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: vertex.data.marker ? `/images/markers/${vertex.data.marker.image}.png` : \"images/blank.svg\",\r\n        iconSize: vertex.data.marker\r\n            ? [vertex.data.marker.dimensions[0] * iconConversionX, vertex.data.marker.dimensions[1] * iconConversionY]\r\n            : [50, 50],\r\n        iconAnchor: vertex.data.marker\r\n            ? [vertex.data.marker.anchor[0] * iconConversionX, vertex.data.marker.anchor[1] * iconConversionY]\r\n            : [25, 25],\r\n        className: vertex.data.marker ? \"vertex-icon\" : vertex.data.exitId ? \"exit-icon\" : \"bullseye-icon\",\r\n    });\r\n\r\n    // Note: Leaflet tooltips breaks the onclick detection on the map object\r\n    return (\r\n        <Marker\r\n            key={vertextId}\r\n            position={vertex.data.position}\r\n            icon={icon}\r\n            onclick={() => onClick(vertextId)}\r\n            onmouseover={() => onHover(vertextId)}\r\n            onmouseout={() => onHoverEnd(vertextId)}\r\n        >\r\n            <Tooltip className={classes.tooltip}>\r\n                {renderTooltipIcon()}\r\n                <span>{vertex.id.toString()}</span>\r\n            </Tooltip>\r\n        </Marker>\r\n    );\r\n};\r\n\r\nexport default VertexMarker;\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import React from 'react'\r\nimport Drift_Marker from \"./Drift_Marker\" \r\nimport { Icon, DivIcon, LatLngExpression } from 'leaflet'\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from 'react-leaflet';\r\n\r\ntype LeafletElement = Drift_Marker\r\n\r\ntype DriftMarkerProps = {\r\n  icon?: Icon | DivIcon,\r\n  draggable?: boolean,\r\n  opacity?: number,\r\n  position: LatLngExpression,\r\n  duration: number,\r\n  keepAtCenter?: boolean,\r\n  zIndexOffset?: number,\r\n  onMoveEnd?: (name: DriftMarker) => void;\r\n} & MapLayerProps\r\n\r\nclass DriftMarker extends MapLayer<DriftMarkerProps, LeafletElement> {\r\n\r\n  private onMoveEndCallback?: (name: DriftMarker) => void;\r\n\r\n  createLeafletElement(props: DriftMarkerProps): LeafletElement {\r\n    const el = new Drift_Marker(props.position, this.getOptions(props));\r\n    this.onMoveEndCallback = props.onMoveEnd;\r\n    el.on('moveend', this.moveEnd);\r\n    this.contextValue = { ...props.leaflet, popupContainer: el }\r\n    return el\r\n  }\r\n\r\n  moveEnd() {\r\n    if (this.onMoveEndCallback) {\r\n      this.onMoveEndCallback(this);\r\n    }\r\n  }\r\n\r\n  updateLeafletElement(fromProps: DriftMarkerProps, toProps: DriftMarkerProps) {\r\n    if (toProps.position !== fromProps.position && typeof toProps.duration == 'number') {\r\n      this.leafletElement.slideTo(toProps.position, {\r\n        duration: toProps.duration,\r\n        keepAtCenter: toProps.keepAtCenter\r\n      })\r\n    }\r\n    if (toProps.icon !== fromProps.icon && toProps.icon) {\r\n      this.leafletElement.setIcon(toProps.icon)\r\n    }\r\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset)\r\n    }\r\n    if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n      this.leafletElement.setOpacity(toProps.opacity)\r\n    }\r\n    if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n      if (toProps.draggable === true) {\r\n        this.leafletElement.dragging.enable()\r\n      } else {\r\n        this.leafletElement.dragging.disable()\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props\r\n\r\n    return children == null || this.contextValue == null ? null : (\r\n      <LeafletProvider value={this.contextValue}>\r\n        {children}\r\n      </LeafletProvider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withLeaflet<DriftMarkerProps>(DriftMarker);\r\n\r\nexport {};\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Icon, LatLng } from \"leaflet\";\r\n\r\nimport DriftMarker from \"./DriftMarker\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        borderRadius: \"50%\",\r\n        border: \"6px solid gold\",\r\n    },\r\n});\r\n\r\n/*\r\n* Marker to represent a hero\r\n*/\r\ntype HeroMarkerProps = {\r\n    name: string;\r\n    position: LatLng;\r\n    onMoveEnd: (name: string) => void;\r\n};\r\n\r\nconst HeroMarker: React.FunctionComponent<HeroMarkerProps> = (props: HeroMarkerProps) => {\r\n\r\n    const { name, position, onMoveEnd } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    var markerIcon = new Icon({\r\n        iconUrl: \"images/knight.jpg\",\r\n        iconSize: [50, 50],\r\n        iconAnchor: [25, 40],\r\n        className: classes.icon,\r\n        // popupAnchor: [-3, -76],\r\n        // shadowUrl: 'my-icon-shadow.png',\r\n        // shadowSize: [68, 95],\r\n        // shadowAnchor: [22, 94]\r\n    });\r\n\r\n    return (\r\n        <DriftMarker duration={1000} position={position} keepAtCenter={false} icon={markerIcon} onMoveEnd={(_: any) => onMoveEnd(name)} />\r\n    );\r\n};\r\n\r\nexport default HeroMarker;\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n  length = (): number => this._store.length;\r\n}\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Polyline } from \"react-leaflet\";\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\nimport VertexMarker from \"../components/VertexMarker\";\r\nimport HeroMarker from \"../components/HeroMarker\";\r\n\r\n// Pathfinding imports\r\nimport npath from \"ngraph.path\";\r\nimport { Node } from \"ngraph.graph\";\r\n\r\n// Models\r\nimport GameState from \"../models/GameState\";\r\nimport Queue from \"../models/Queue\";\r\nimport { MapGraph, NodeData } from \"../models/MapGraph\";\r\n\r\n// Services\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n    graph: MapGraph; // The map graph data\r\n    mapUrl: string;\r\n    pathColor: string; // The default path colour is brown\r\n    onNewMap: (state: GameState) => void; // Fire when a new map load is needed\r\n};\r\n\r\nconst OverheadMap: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n    const { startState, graph, mapUrl, pathColor, onNewMap } = props;\r\n\r\n    let [pos, setPos] = React.useState<LatLng | null>(null); // The current (target) position of the player marker\r\n    let [path, setPath] = React.useState<LatLng[]>([]); // The path to the hovered vertex\r\n    let [vertexQueue] = React.useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    let [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    let [gameState, setGameState] = React.useState<GameState>(startState);\r\n    let [initialNode, setInitialNode] = React.useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (name: string) => {\r\n        console.log(\"Move ended : \" + name);\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update user state\r\n            gameState.currentVertextId = targetVertex.id.toString();\r\n            setGameState(gameState);\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState: GameState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                    };\r\n\r\n                    vertexQueue.clear();\r\n                    onNewMap(newState);\r\n                }\r\n            } else if (vertexQueue.length() <= 0) {\r\n                // Save the movement if its the last move\r\n                const stateService = new MockGameStateService();\r\n                const newState = stateService.getState();\r\n                newState.currentVertextId = targetVertex.id.toString();\r\n                stateService.setState(newState);\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n    };\r\n\r\n    const onClick = (vertexId: string) => {\r\n        console.log(`Clicked on vertex ${vertexId}`);\r\n\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        if (path.length <= 1) {\r\n            console.log(`No route found to ${vertexId}`);\r\n            return;\r\n        }\r\n\r\n        path.pop(); // Remove the current/start node\r\n\r\n        vertexQueue.clear();\r\n        let nextVertex = path.pop();\r\n        while (nextVertex) {\r\n            vertexQueue.push(nextVertex);\r\n            // Stop if a vertex with an an encounter is hit\r\n            if (nextVertex.data.encounterId) {\r\n                break;\r\n            }\r\n            nextVertex = path.pop();\r\n        }\r\n\r\n        handleMoveEnd(\"party\"); // Trigger the move to the next vertex\r\n    };\r\n\r\n    // On hover, show the path to the marker\r\n    const onHover = (vertexId: string) => {\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(gameState.currentVertextId, vertexId);\r\n\r\n        let pathVertexes = path.map((p) => p.data.position);\r\n        setPath(pathVertexes);\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(\"party\");\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo: string | undefined) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (moveTo) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (initialNode) {\r\n\r\n            console.log(\"Initial node : \" + gameState.currentMapId + \", \" + gameState.currentVertextId);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(graph, gameState.currentVertextId);\r\n            setInitialNode(false);\r\n        }\r\n    });\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n\r\n    if (!pos) return null;\r\n\r\n    const renderMarkers = (graph: MapGraph) =>\r\n        graph\r\n            .getVertices()\r\n            .map((v) => <VertexMarker key={v.id} vertex={v} onHover={onHover} onHoverEnd={() => setPath([])} onClick={onClick} />);\r\n\r\n    return (\r\n        <Map\r\n            crs={CRS.Simple}\r\n            zoom={-1}\r\n            minZoom={-1}\r\n            maxZoom={-1}\r\n            bounds={bounds}\r\n            maxBounds={bounds}\r\n            scrollWheelZoom={false}\r\n            onClick={handleClick}\r\n            zoomControl={false}\r\n        >\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n            <ImageOverlay url={mapUrl} bounds={bounds} />\r\n            <HeroMarker name=\"party\" position={pos} onMoveEnd={handleMoveEnd} />\r\n            {renderMarkers(graph)}\r\n            <Polyline positions={path} color={pathColor} dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n        </Map>\r\n    );\r\n};\r\n\r\nexport default OverheadMap;\r\n","import React from \"react\";\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nconst LoadingProgress: React.FunctionComponent = () => {\r\n    const useStyles = makeStyles(() => ({\r\n        root: {\r\n            textAlign: \"center\",\r\n            padding: \"40vh 0 0 0\",\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingProgress;\r\n","import React from 'react';\r\n\r\n// Models\r\nimport GameState from '../models/GameState';\r\nimport { MapGraph } from '../models/MapGraph';\r\n\r\n// Services\r\nimport MockMapService from \"../services/MockMapService\";\r\nimport GraphBuilder from \"../services/GraphBuilder\";\r\nimport OverheadMap from './OverheadMap';\r\nimport MockGameStateService from '../services/MockGameStateService';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\ntype OverheadMapProps = {\r\n    startState: GameState;\r\n};\r\n\r\nconst OverheadMapLoader: React.FunctionComponent<OverheadMapProps> = (props: OverheadMapProps) => {\r\n\r\n    const { startState } = props;\r\n\r\n    let [graph, setGraph] = React.useState<MapGraph | undefined>(undefined); // The map graph data\r\n    let [pathColor, setPathColor] = React.useState<string | undefined>(undefined);\r\n\r\n    let [mapUrl, setMapUrl] = React.useState<string | undefined>(undefined);\r\n    let [gameState, setGameState] = React.useState<GameState>(startState);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const service = new MockMapService();\r\n\r\n            const data = service.getMap(gameState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\r\n                `Loaded map : ${gameState.currentMapId}, ${gameState.currentVertextId}. ${data?.vertices.length} vertices. Path Color ${\r\n                    data.pathColor ?? \"None\"\r\n                }`\r\n            );\r\n\r\n            setMapUrl(data.imageUrl);\r\n            setPathColor(data.pathColor ?? \"#5E4E00\"); // The default path colour is brown\r\n\r\n            const mapGraph = GraphBuilder.Build(data);\r\n            setGraph(mapGraph);\r\n        };\r\n\r\n        if (!graph) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const onNewMap = (newState: GameState) => {\r\n\r\n        console.log(\"New map : \" + newState.currentMapId + \", \" + newState.currentVertextId);\r\n\r\n        // Save the new map state\r\n        const stateService = new MockGameStateService();\r\n        stateService.setState(newState);\r\n        setGameState(newState);\r\n\r\n        // Force a reload of the map\r\n        // Need to set the graph last, or the load can happen after the useEffect\r\n        setMapUrl(undefined);\r\n        setPathColor(undefined);\r\n        setGraph(undefined);\r\n    };\r\n\r\n    if (!mapUrl || !graph || !pathColor) return <LoadingProgress />;\r\n\r\n    return <OverheadMap startState={gameState} graph={graph} mapUrl={mapUrl} pathColor={pathColor} onNewMap={onNewMap} />;\r\n};\r\n\r\nexport default OverheadMapLoader;\r\n","import React from 'react';\r\n\r\n// Pathfinding imports\r\nimport MockGameStateService from '../services/MockGameStateService';\r\nimport GameState from '../models/GameState';\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport OverheadMapLoader from '../components/OverheadMapLoader';\r\n\r\nconst MapPage: React.FunctionComponent = () => {\r\n\r\n    let [gameState, setGameState] = React.useState<GameState | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of game state data\r\n        const loadGameState = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newGameState = stateService.getState();\r\n            if (!newGameState) {\r\n                console.error(`No game state data`);\r\n                return;\r\n            }\r\n\r\n            setGameState(newGameState);\r\n        };\r\n\r\n        if (gameState == null) {\r\n            loadGameState();\r\n        }\r\n    });\r\n\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    if (!gameState) return null;\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <OverheadMapLoader startState={gameState} />\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default MapPage;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventoryProps = {\r\n    items: Item[];\r\n    onEquipItem: (itemId: string) => void;\r\n};\r\n\r\nconst PartyInventory: React.FunctionComponent<PartyInventoryProps> = (props: PartyInventoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, onEquipItem } = props;\r\n\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState<string[]>([]);\r\n\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);\r\n\r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n    const isItemEquipable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n\r\n        const match = items.find((item) => item.id === inventorySelectedIds[0]);\r\n        if (!match) return false; // Error?\r\n\r\n        return match.itemType >= 10;\r\n    };\r\n\r\n    const equipItem = () => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        if (onEquipItem) onEquipItem(inventorySelectedIds[0]);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected()) return \"Please select an inventory item\";\r\n\r\n        return isItemEquipable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={items} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventory;\r\n","import React from \"react\";\r\nimport { makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport Item, { ItemType } from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"7vw\",\r\n        top: \"-1vh\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"7vw\",\r\n        top: \"6.5vh\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"7vw\",\r\n        top: \"14vh\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"7vw\",\r\n        top: \"21.5vh\",\r\n    },\r\n    portraitItemWeapon: {\r\n        left: \"3.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitItemShield: {\r\n        left: \"10.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitNoItemImg: {\r\n        filter: \"brightness(35%)\",\r\n    },\r\n    portraitItemImg: {\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"50%\",\r\n    },\r\n});\r\n\r\ntype EquippedItemsProps = {\r\n    equippedItems: Item[];\r\n};\r\n\r\n/*\r\n* Hero Profile Screen : Display the items that the hero has equipped\r\n*/\r\nconst EquippedItems: React.FunctionComponent<EquippedItemsProps> = (props: EquippedItemsProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const { equippedItems } = props;\r\n\r\n    const headItem = equippedItems.find((item) => item.itemType === ItemType.WearableHead);\r\n    const bodyItem = equippedItems.find((item) => item.itemType === ItemType.WearableBody);\r\n    const armsItem = equippedItems.find((item) => item.itemType === ItemType.WearableArms);\r\n    const feetItem = equippedItems.find((item) => item.itemType === ItemType.WearableFeet);\r\n    const weaponItem = equippedItems.find((item) => item.itemType === ItemType.WeaponMelee1h);\r\n\r\n    return (\r\n        <div className={classes.itemContainer}>\r\n            <Tooltip title={<ItemTooltipContent item={headItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemHelm}`}>\r\n                    {headItem ? (\r\n                        <img src={headItem.imageUrl} className={classes.portraitItemImg} alt=\"helm\" />\r\n                    ) : (\r\n                        <img src=\"images/helm.svg\" className={classes.portraitNoItemImg} alt=\"helm\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={bodyItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}>\r\n                    {bodyItem ? (\r\n                        <img src={bodyItem.imageUrl} className={classes.portraitItemImg} alt=\"breastplate\" />\r\n                    ) : (\r\n                        <img src=\"images/breastplate.svg\" className={classes.portraitNoItemImg} alt=\"breastplate\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={feetItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemLegs}`}>\r\n                    {feetItem ? (\r\n                        <img src={feetItem.imageUrl} className={classes.portraitItemImg} alt=\"legs\" />\r\n                    ) : (\r\n                        <img src=\"images/leg.svg\" className={classes.portraitNoItemImg} alt=\"legs\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={armsItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemGloves}`}>\r\n                    {armsItem ? (\r\n                        <img src={armsItem.imageUrl} className={classes.portraitItemImg} alt=\"gloves\" />\r\n                    ) : (\r\n                        <img src=\"images/glove.svg\" className={classes.portraitNoItemImg} alt=\"gloves\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={weaponItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemWeapon}`}>\r\n                    {weaponItem ? (\r\n                        <img src={weaponItem.imageUrl} className={classes.portraitItemImg} alt=\"weapon\" />\r\n                    ) : (\r\n                        <img src=\"images/sword.svg\" className={classes.portraitNoItemImg} alt=\"weapon\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemShield}`}>\r\n                    <img src=\"images/shield.svg\" className={classes.portraitNoItemImg} alt=\"shield\" />\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EquippedItems;\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/AttributeList\";\r\nimport Attribute from \"../models/Attribute\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nconst StatisticsBlock: React.FunctionComponent<StatisticsBlockProps> = (props: StatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    const createData = (name: string, base: number, modifier: number, total: number) => {\r\n        return { name, base, modifier, total };\r\n    }\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.modifier;\r\n\r\n    const rows = [\r\n        createData(\"Strength\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n        createData(\"Dexterity\", statistics.dexterity.base, statistics.dexterity.modifier, attributeTotal(statistics.dexterity)),\r\n        createData(\"Consitution\", statistics.constitution.base, statistics.constitution.modifier, attributeTotal(statistics.constitution)),\r\n        createData(\"Intelligence\", statistics.intelligence.base, statistics.intelligence.modifier, attributeTotal(statistics.intelligence)),\r\n        createData(\"Wisdom\", statistics.wisdom.base, statistics.wisdom.modifier, attributeTotal(statistics.wisdom)),\r\n        createData(\"Charisma\", statistics.charisma.base, statistics.charisma.modifier, attributeTotal(statistics.charisma)),\r\n        createData(\"Luck\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Base</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Total</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.base}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.total}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default StatisticsBlock;","import React from \"react\";\r\nimport { Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport LocationSearchingIcon from \"@material-ui/icons/LocationSearching\";\r\n\r\nimport CalculatedStats from \"../models/CalculatedStats\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        //backgroundColor: theme.palette.background.paper,\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype CalculatedStatisticsBlockProps = {\r\n    statistics: CalculatedStats;\r\n};\r\n\r\nconst CalculatedStatisticsBlock: React.FunctionComponent<CalculatedStatisticsBlockProps> = (props: CalculatedStatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    return (\r\n        <div className={classes.statisticsBlock}>\r\n            <Grid container>\r\n                <Grid item xs={1} md={1}></Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FavoriteIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Hit Points ${statistics.currentHitPoints} / ${statistics.currentHitPoints}`}\r\n                                secondary={`Hit Die D${statistics.hitDie}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <SecurityIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Armor Class ${statistics.armour}`}\r\n                                secondary={`Spell Resistance ${statistics.spellResistance}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FastForwardIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack Speed ${statistics.attackSpeed}`}\r\n                                secondary={`Move Speed ${statistics.moveSpeed}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <LocationSearchingIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack +${statistics.attack}`}\r\n                                secondary={`Damage D${statistics.damageDie} + ${statistics.damageBonus}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={1} md={1}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalculatedStatisticsBlock;\r\n","import React from \"react\";\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, ListItemText, Grid } from \"@material-ui/core\";\r\n\r\nimport HeroTrait from \"../models/HeroTrait\";\r\n\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\n\r\nconst useStyles = makeStyles({\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype TraitListProps = {\r\n    traits: HeroTrait[];\r\n};\r\n\r\nconst TraitList: React.FunctionComponent<TraitListProps> = (props: TraitListProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { traits } = props;\r\n\r\n    const renderTraitIcon = ((t: HeroTrait) => {\r\n        switch (t.type) {\r\n            case 1: // Mental\r\n                return <FaceIcon />;\r\n            case 2: // Mystical\r\n                return <FlashOnIcon />;\r\n            case 3: // Physical\r\n                return <AccessibilityNewIcon />;\r\n            case 4: // Item\r\n                return <AllInboxIcon />;\r\n            default:\r\n                return <AllInboxIcon />;\r\n        }\r\n    });\r\n\r\n\r\n    // TODO: Add behiavor , {t.behaviour}\r\n    const renderTrait = (t: HeroTrait) => (\r\n        <ListItem key={t.id}>\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    {renderTraitIcon(t)}\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={t.name}\r\n                secondary={t.from}\r\n            />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <Grid container className={classes.statisticsBlock}>\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8}>\r\n                <List>{traits.map((t) => renderTrait(t))}</List>\r\n            </Grid>\r\n            <Grid item xs={2}></Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TraitList;\r\n","import React from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport Item from \"../models/Item\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\nimport MockItemService from \"../services/MockItemService\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nimport PartyInventory from \"../components/PartyInventory\";\r\nimport EquippedItems from \"../components/EquippedItems\";\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport CalculatedStatisticsBlock from \"../components/CalculatedStatisticsBlock\";\r\nimport TraitList from \"../components/TraitList\";\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"91.5vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"56vh\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        //left: \"20%\",\r\n        width: \"18vw\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"28px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"34vh\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statistics: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n}));\r\n\r\ntype HeroProfileProps = {\r\n    //id: string,\r\n};\r\n\r\ntype HeroProfileParams = {\r\n    id: string,\r\n};\r\n\r\nconst HeroProfile: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const { id } = useParams() as HeroProfileParams;\r\n\r\n    let [hero, setHero] = React.useState<Hero | null>(null);\r\n    let [party, setParty] = React.useState<PartyStatistics | null>(null);\r\n    let [world, setWorld] = React.useState<WorldStatistics | null>(null);\r\n    let [equippedItems, setEquippedItems] = React.useState<Item[] | null>(null);\r\n    let [inventoryItems, setInventoryItems] = React.useState<Item[] | null>(null);\r\n    let [currentId, setCurrentId] = React.useState(\"\");\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const partyService = new MockPartyService();\r\n\r\n            // Process special keypress IDs, and re-direct to the correct hero\r\n            switch (id) {\r\n                case \"1\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[0]);\r\n                    return;\r\n                case \"2\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[1]);\r\n                    return;\r\n                case \"3\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[2]);\r\n                    return;\r\n                case \"4\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[3]);\r\n                    return;\r\n            }\r\n\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const newParty = partyService.getPartyStatistics();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            const itemsService = new MockItemService();\r\n            const newItems = itemsService.getItems(newHero.equippedItems);\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n            if (!newItems) {\r\n                console.error(`No items data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n            setEquippedItems(newItems);\r\n        };\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world || !equippedItems || !inventoryItems) return null;\r\n\r\n    const onEquipItem = (itemId: string) => {\r\n\r\n        // console.log(`hero '${id}' equips ${itemId}`);\r\n\r\n        // Equip the item\r\n        const heroService = new MockHeroService();\r\n        const removedItemId = heroService.equipItem(id, itemId);\r\n\r\n        // Remove the item from party inventory\r\n        const partyService = new MockPartyService();\r\n        partyService.removeInventoryItem(itemId);\r\n        if (removedItemId) {\r\n            partyService.addInventoryItem(removedItemId);\r\n        }\r\n\r\n        // Force a refresh\r\n        setCurrentId(\"\");\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.characterGrid}>\r\n                <div className={classes.left}>\r\n                    <div className={classes.portrait}>\r\n                        <br />\r\n                        <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                            <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                        </LinkTo>\r\n                        <div className={classes.bannerContainer}>\r\n                            <h1 className=\"banner\">{hero.name}</h1>\r\n                        </div>\r\n                        <div className={classes.itemContainer}>\r\n                            <p>\r\n                                {StringConverters.classToString(hero.class)} - {StringConverters.alignmentToString(hero.alignment)}\r\n                            </p>\r\n                            <Grid container>\r\n                                <Grid item xs={3}>\r\n                                    <EquippedItems equippedItems={equippedItems} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                                </Grid>\r\n                                <Grid item xs={3}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.inventory}>\r\n                        <br />\r\n                        <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                        <PartyInventory items={inventoryItems} onEquipItem={onEquipItem} />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.statistics}>\r\n                    <br />\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{hero.background}</p>\r\n                    </div>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <StatisticsBlock statistics={HeroHelper.calculateAttributesWithModifiers(hero)} />\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Other</h1>\r\n                    <CalculatedStatisticsBlock statistics={HeroHelper.calculateStatsWithModifiers(hero)} />\r\n                    <h1 className={classes.sectionHeading}>Abilities</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{StringConverters.abilitiesToString(hero.abilities)}</p>\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Traits</h1>\r\n                    <TraitList traits={HeroHelper.getAllTraits(hero)} />\r\n                    <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>Reputation {party.reputation}</p>\r\n                        {party.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        {world.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default HeroProfile;\r\n","import EncounterDetail from \"../models/EncounterDetail\";\r\n\r\nimport TavernMap from \"./encounter-maps/tavern.json\";\r\n\r\nexport default class MockDetailedEncounterService {\r\n    public getEncounterDetail(id: string): EncounterDetail | null {\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"tavern\":\r\n            default:\r\n                json = TavernMap;\r\n                break;\r\n        }\r\n\r\n        return json\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds, LatLngExpression, LatLngTuple } from \"leaflet\";\r\nimport { Map, ImageOverlay, Polygon } from \"react-leaflet\";\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\n\r\n// Models\r\nimport EncounterDetail from \"../models/EncounterDetail\";\r\n\r\ntype EncounterMapProps = {\r\n    encounter: EncounterDetail;\r\n    showGrid: boolean;\r\n};\r\n\r\nconst EncounterMap: React.FunctionComponent<EncounterMapProps> = (props: EncounterMapProps): JSX.Element => {\r\n\r\n    const { encounter, showGrid } = props;\r\n\r\n    let [pos, setPos] = React.useState<LatLng[] | undefined>(undefined); // The current (target) position of the hero markers\r\n    let [encounterId, setEncounterId] = React.useState<string | null>(null);\r\n\r\n    // TODO: Need the following:\r\n    // A grid of points that the payer can move to, and grid of blocked points\r\n    // A different library for grid-based pathfinding\r\n    // Define the hero starting points on the encounter\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        //if (!graph) return; // Map not loaded\r\n\r\n        console.log(\"clicked at: \" + e.latlng);\r\n    };\r\n\r\n    const handleEncounterClose = (moveTo: string | undefined) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n    });\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n\r\n    const gridPolygons: JSX.Element[] = [];\r\n\r\n    const { gridOffset, gridScale } = encounter;\r\n\r\n    // Conversion functions from isometric to cardinal co-ordinates\r\n    const isoX = (carX: number, carY: number): number => carX + carY;\r\n    const isoY = (carX: number, carY: number): number => carY - carX / 2.0;\r\n\r\n    const carX = (isoX: number, isoY: number): number => (isoX - isoY) / 1.5;\r\n    const carY = (isoX: number, isoY: number): number => isoX / 3.0 + isoY / 1.5;\r\n\r\n    const iso = (car: LatLngTuple): LatLng => latLng(isoX(car[0], car[1]), isoY(car[0], car[1]));\r\n    const car = (iso: LatLngTuple): LatLng => latLng(carX(iso[0], iso[1]), carY(iso[0], iso[1]));\r\n    const offset = (iso: LatLng, offset: LatLngTuple): LatLng => latLng(iso.lat + offset[0], iso.lng + offset[1]);\r\n    const scale = (iso: LatLng, scale: LatLngTuple): LatLng => latLng(iso.lat * scale[0], iso.lng * scale[1]);\r\n\r\n    if (showGrid) {\r\n        for (let x = 0; x < encounter.grid.length; x++) {\r\n            for (let y = 0; y < encounter.grid.length; y++) {\r\n                const gridPoly = (\r\n                    <Polygon\r\n                        positions={[\r\n                            offset(scale(iso([x, y]), gridScale), gridOffset),\r\n                            offset(scale(iso([x + 1, y]), gridScale), gridOffset),\r\n                            offset(scale(iso([x + 1, y + 1]), gridScale), gridOffset),\r\n                            offset(scale(iso([x, y + 1]), gridScale), gridOffset),\r\n                        ]}\r\n                        color={encounter.grid[x][y] === \"1\" ? \"green\" : \"red\"}\r\n                    />\r\n                );\r\n                gridPolygons.push(gridPoly);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Map crs={CRS.Simple} zoom={0} bounds={bounds} maxBounds={bounds} scrollWheelZoom={false} onClick={handleClick} zoomControl={false}>\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            <ImageOverlay url={encounter.imageUrl} bounds={bounds} />\r\n            {gridPolygons}\r\n            <Polygon\r\n                positions={[\r\n                    [37, 109.05],\r\n                    [141, 109.03],\r\n                    [141, 202.05],\r\n                    [37, 202.04],\r\n                ]}\r\n                color={\"white\"}\r\n            />\r\n        </Map>\r\n    );\r\n};\r\n\r\nexport default EncounterMap;\r\n","import React from \"react\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport EncounterDetail from \"../models/EncounterDetail\";\r\nimport EncounterMap from \"./EncounterMap\";\r\nimport LoadingProgress from \"./LoadingProgress\";\r\n\r\ntype EncounterMapLoaderProps = {};\r\n\r\nconst EncounterMapLoader: React.FunctionComponent<EncounterMapLoaderProps> = (props: EncounterMapLoaderProps): JSX.Element => {\r\n    \r\n    let [encounter, setEncounter] = React.useState<EncounterDetail | null>(null);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const loadEncounter = () => {\r\n            const service = new MockDetailedEncounterService();\r\n            const data = service.getEncounterDetail(\"tavern\");\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n            setEncounter(data);\r\n        };\r\n        if (encounter == null) {\r\n            loadEncounter();\r\n        }\r\n    });\r\n\r\n    if (!encounter) return <LoadingProgress />;\r\n\r\n    return (\r\n        <EncounterMap encounter={encounter} showGrid={true} />\r\n    );\r\n};\r\n\r\nexport default EncounterMapLoader;\r\n","import React from 'react';\r\n\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport EncounterMapLoader from '../components/EncounterMapLoader';\r\n\r\n/*\r\n* Page for testing encounters\r\n* Actual encounters will be loaded through the main map page tracking the GameState.\r\n*/\r\nconst EncounterPage: React.FunctionComponent = (): JSX.Element => {\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <EncounterMapLoader />\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default EncounterPage;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\n\r\n// Pages\r\nimport MapPage from \"./pages/MapPage\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterPage from \"./pages/EncounterPage\";\r\nimport KeyMaps from \"./components/KeyMaps\";\r\n\r\nconst MainLayout: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <KeyMaps backUrl=\"/menu\">\r\n                <Header />\r\n            </KeyMaps>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path={`${process.env.PUBLIC_URL}/profile/:id`}\r\n                        component={() => {\r\n                            return <HeroProfile />;\r\n                        }}\r\n                    />\r\n                    <Route path={`${process.env.PUBLIC_URL}/encounter`} component={EncounterPage} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/`} component={MapPage} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport MenuCards, { MenuCard } from \"./MenuCards\";\r\n\r\nconst useStyles = makeStyles({\r\n    cardIcon: {\r\n        width: \"100px\",\r\n        position: \"absolute\",\r\n        fontSize: \"50px\",\r\n    },\r\n});\r\n\r\ntype SaveGameSelectorProps = {\r\n    enabledSlots: boolean[];\r\n    saves: (Date | null)[];\r\n    currentSlot: number;\r\n    onSelected: (slot: number) => void;\r\n};\r\n\r\nconst SaveGameSelector: React.FunctionComponent<SaveGameSelectorProps> = (props: SaveGameSelectorProps) => {\r\n    const classes = useStyles();\r\n    \r\n    const { saves, enabledSlots, currentSlot, onSelected } = props;\r\n\r\n    const getDateString = (date: Date | null) => (date ? `${date.toLocaleString()}` : \"Empty\");\r\n    const getDescription = (date: Date | null, isCurrentSlot: boolean) => {\r\n        return isCurrentSlot ? `Current Save (${getDateString(date)})` : getDateString(date);\r\n    };\r\n\r\n    const saveButtons: MenuCard[] = [\r\n        {\r\n            title: \"Slot A\",\r\n            description: getDescription(saves[0], currentSlot === 0),\r\n            enabled: enabledSlots[0],\r\n            active: currentSlot === 0,\r\n            onSelected: () => onSelected(0),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot B\",\r\n            description: getDescription(saves[1], currentSlot === 1),\r\n            enabled: enabledSlots[1],\r\n            active: currentSlot === 1,\r\n            onSelected: () => onSelected(1),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n        {\r\n            title: \"Slot C\",\r\n            description: getDescription(saves[2], currentSlot === 2),\r\n            enabled: enabledSlots[2],\r\n            active: currentSlot === 2,\r\n            onSelected: () => onSelected(2),\r\n            icon: <SaveIcon className={classes.cardIcon} />,\r\n        },\r\n    ];\r\n\r\n    return <MenuCards items={saveButtons} />;\r\n};\r\n\r\nexport default SaveGameSelector;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameNewMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHome = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"New game in slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHome();\r\n    };\r\n\r\n    // Can choose any empty slots\r\n    const enabledSlots = (): boolean[] => saveTimes.map((s) => s === null);\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose an empty save slot\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameNewMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockGameStateService from \"../services/MockGameStateService\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameLoadMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToHomeMap = () => history.push(\"/\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Loaing slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.setCurrentSave(slot);\r\n\r\n        const stateService = new MockGameStateService();\r\n        stateService.clearCache();\r\n        const partyService = new MockPartyService();\r\n        partyService.clearCache();\r\n\r\n        navigateToHomeMap();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const calculateEnabledSlots = (saves: (Date | null)[]): boolean[] => {\r\n        const enabledSlots = saves.map((s) => s !== null);\r\n        console.log(\"Games : \" + JSON.stringify(enabledSlots));\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to load\r\n                </Typography>\r\n                <SaveGameSelector\r\n                    enabledSlots={calculateEnabledSlots(saveTimes)}\r\n                    currentSlot={currentSave}\r\n                    saves={saveTimes}\r\n                    onSelected={saveSelected}\r\n                />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameLoadMenu;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\nimport MockSaveService from \"../services/MockSaveService\";\r\nimport SaveGameSelector from \"../components/SaveGameSelector\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n});\r\n\r\nconst GameDeleteMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const [saveTimes, setSaveTimes] = React.useState<undefined | (Date | null)[]>(undefined);\r\n    const [currentSave, setCurrentSave] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadSaves = () => {\r\n            const saveService = new MockSaveService();\r\n            setSaveTimes(saveService.getSlotUpdateTimes());\r\n            setCurrentSave(saveService.getCurrentSave());\r\n        };\r\n\r\n        if (!saveTimes) {\r\n            loadSaves();\r\n        }\r\n    });\r\n\r\n    let history = useHistory();\r\n    const navigateToMenu = () => history.push(\"/menu\");\r\n\r\n    if (!saveTimes) return null;\r\n\r\n    const saveSelected = (slot: number) => {\r\n        console.log(\"Deleting slot : \" + slot);\r\n\r\n        const saveService = new MockSaveService();\r\n        saveService.deleteSlot(slot);\r\n\r\n        navigateToMenu();\r\n    };\r\n\r\n    // Can choose any non-empty slots, except the current one\r\n    const enabledSlots = (): boolean[] => {\r\n        const enabledSlots = saveTimes.map((s) => s !== null);\r\n        enabledSlots[currentSave] = false;\r\n        return enabledSlots;\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>\r\n                    Choose a slot to delete\r\n                </Typography>\r\n                <SaveGameSelector enabledSlots={enabledSlots()} currentSlot={currentSave} saves={saveTimes} onSelected={saveSelected} />\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default GameDeleteMenu;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport PitTheme from \"./PitTheme\";\r\n\r\n// Pages\r\nimport MainMenu from \"./pages/MainMenu\";\r\nimport MainLayout from \"./MainLayout\";\r\nimport GameNewMenu from \"./pages/GameNewMenu\";\r\nimport GameLoadMenu from \"./pages/GameLoadMenu\";\r\nimport GameDeleteMenu from \"./pages/GameDeleteMenu\";\r\n\r\nconst App : React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <ThemeProvider theme={PitTheme}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path={`${process.env.PUBLIC_URL}/menu`} component={MainMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/new`} component={GameNewMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/load`} component={GameLoadMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/game/delete`} component={GameDeleteMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/`} component={MainLayout} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}