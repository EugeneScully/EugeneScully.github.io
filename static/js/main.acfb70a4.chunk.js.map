{"version":3,"sources":["pages/MainMenu.tsx","pages/SavesMenu.tsx","models/Trait.ts","PitTheme.tsx","helpers/ArrayHelper.ts","services/MockItemService.ts","helpers/HeroHelper.ts","services/MockHeroService.ts","services/MockPartyService.ts","models/Hero.ts","models/Item.ts","components/Header.tsx","services/MockStoryEncounterService.ts","components/HeroSelector.tsx","components/PartySelection.tsx","components/HeroDismiss.tsx","services/StringConverters.ts","components/ItemTooltipContent.tsx","components/InventorySelector.tsx","components/Stash.tsx","components/EncounterDialog.tsx","services/MockMapService.ts","models/MapGraph.ts","services/GraphBuilder.ts","models/Queue.ts","services/MockGameStateService.ts","components/VertexMarker.tsx","components/Drift_Marker.tsx","components/DriftMarker.tsx","components/HeroMarker.tsx","pages/OverheadMap.tsx","services/MockWorldService.ts","components/PartyInventory.tsx","components/EquippedItems.tsx","components/StatisticsBlock.tsx","components/CalculatedStatisticsBlock.tsx","components/TraitList.tsx","pages/HeroProfile.tsx","pages/EncounterMap.tsx","MainLayout.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/KeyMaps.tsx","components/LinkTo.tsx"],"names":["useStyles","makeStyles","root","backgroundColor","height","close","filter","container","top","position","titleContainer","padding","appLogo","pointerEvents","card","margin","cursor","right","boxShadow","MainMenu","classes","history","useHistory","backUrl","className","url","process","left","width","src","alt","item","xs","title","variant","onClick","push","window","type","versions","electron","navigator","userAgent","indexOf","require","ipcRenderer","send","chooseText","color","SavesMenu","TraitType","ModifierType","PitTheme","createMuiTheme","ArrayHelper","array","index","splice","MockItemService","getItems","ids","map","id","getItemDetail","TokenOfServitude","HagTeeth","CeramicHelm","CeramicArmor","WolfSpear","HeroHelper","getAllTraits","hero","traits","concat","itemTraits","temporaryTraits","addItemTraits","i","length","itemTrait","heroTrait","name","behaviour","from","removeItemTraits","matches","t","remove","calculateAttributesWithModifiers","allTraits","strMod","dexMod","conMod","intMod","wisMod","chaMod","luckMod","j","modifierType","Strength","modifierValue","Dexterity","Constitution","Intelligence","Wisdom","Charisma","Luck","attributes","strength","base","modifier","dexterity","constitution","intelligence","wisdom","charisma","luck","calculateStatsWithModifiers","armorMod","moveSpeedMod","meleeAttackMod","meleeAttackSpeedMod","meleeDamageDieMod","meleeDamageMod","hpMod","hitDieMod","spellResistMod","Armor","MoveSpeed","MeleeAttack","MeleeAttackSpeed","MeleeDamageDie","MeleeDamage","RangedAttack","RangedAttackSpeed","RangedDamageDie","RangedDamage","HitPoints","HitDie","SpellResistance","stats","armour","attack","moveSpeed","attackSpeed","damageDie","damageBonus","maxHitPoints","currentHitPoints","hitDie","spellResistance","MockHeroService","Gyvwain","Balthazar","Gossamer","Justin","Gargamela","_heroes","heroId","itemId","heroMatch","find","itemService","originalItem","itemWithSameType","equippedItems","itemType","MockPartyService","reputation","heroService","_heroIds","getHeroDetail","heroIds","_inventoryItemIds","itemIds","_stashItemIds","Alignment","HeroClass","StatusFlags","AbilityFlags","ItemType","appHeader","headerSpan","display","headerParty","zIndex","headerImg","border","borderRadius","borderWidth","borderColor","Header","props","React","useState","party","setParty","useEffect","newParty","getParty","console","error","loadParty","LinkTo","imageUrl","MockStoryEncounterService","currentStory","currentId","currentTitle","this","Story","TheInterceptContent","commonRoomContent","chasmContent","homeContent","nineBellsContent","brawlContent","createEmptyStory","continue","choiceId","ChooseChoiceIndex","canContinue","moveTo","variablesState","GetVariableWithName","detailedEncounter","paragraphText","choices","isFinished","finishData","value","Continue","encounterChoices","currentChoices","c","text","heroSelected","HeroSelector","onSelectionChanged","multiSelect","heroes","setHeroes","selected","setSelected","partyService","chooseAll","getAllAvailable","loadHeroes","onSelect","ev","Number","parseInt","currentTarget","newSelected","selectedHeroIds","Grid","imgClass","output","Tooltip","toString","renderParty","partyButton","partyButtonDiv","textAlign","PartySelection","setHeroIds","isValid","Button","setPartyIds","disabled","HeroDismiss","setHeroId","StringConverters","resourceMap","JSON","parse","stringify","Resources","classToString","heroClass","resources","getResources","key","alignmentToString","alignment","modifierToString","itemTypeText","abilitiesToString","abilities","None","Acrobatics","Devices","PatronBond","Perception","Sorcery","Stealth","Survival","join","description","ItemTooltipContent","renderBehaviors","effects","e","valueToString","Fragment","Typography","align","traitJsx","newTraits","renderTraits","main","gridItem","inventory","itemSelected","InventorySelector","items","selectedIds","spacing","alignItems","justify","itemGrids","arrow","emptyItems","emptyGrids","renderInventory","stashImg","inventoryImg","itemsButton","itemsButtonDiv","paddingBottom","Stash","stashSelectedIds","setStashSelectedIds","inventorySelectedIds","setInventorySelectedIds","stashItems","setStashItems","inventoryItems","setInventoryItems","stashItemIds","getStash","inventoryItemIds","getInventory","newStashItems","newInventoryItems","loadItems","isStashSelected","isInventorySelected","willInventoryBeTooBig","service","removeStashItem","addInventoryItem","startIcon","removeInventoryItem","addStashItem","dialog","userSelect","background","opacity","content","minWidth","minHeight","fontFamily","actions","EncounterDialog","onClose","encounterId","MockEncounterService","encounterService","paragraph","setParagraph","setTitle","setChoices","storyStarted","setStoryStarted","open","handleClose","handleChoice","encounter","chooseChoice","log","handleContinue","startEncounter","encChoices","Dialog","aria-labelledby","DialogContent","isHeroSwap","replace","isHeroSelect","isHeroDismiss","isStash","renderParagraph","DialogActions","MockMapService","json","BlackTempleMap","TownMap","vertices","v","Leaflet","latLng","clickRadius","marker","exitId","edges","distance","x","y","latDist","lat","lngDist","lng","Math","sqrt","MapGraph","graph","_graph","getNGraph","getVertices","forEachNode","n","findVertex","nodeId","getNode","findNearestVertex","pos","vertex","data","GraphBuilder","mapData","outGraph","createGraph","addNode","addLink","to","weight","Queue","_store","val","shift","MockGameStateService","_state","state","currentMapId","currentVertextId","tooltip","fontSize","whiteSpace","verticalAlign","justifyContent","icon","marginLeft","marginRight","flexShrink","overflow","VertexMarker","onHover","onHoverEnd","vertextId","Icon","iconUrl","image","iconSize","dimensions","iconAnchor","anchor","Marker","onclick","onmouseover","onmouseout","renderTooltipIcon","exports","Leaflet_module","L","Drift_Marker","_slideToUntil","_slideToDuration","_slideToLatLng","_slideFromLatLng","_slideKeepAtCenter","_slideDraggingWasAllowed","_slideFrame","addInitHook","on","slideCancel","slideTo","latlng","options","_map","duration","performance","now","getLatLng","keepAtCenter","undefined","dragging","enabled","disable","doubleClickZoom","touchZoom","scrollWheelZoom","fire","_slideTo","remaining","setLatLng","enable","startPoint","latLngToContainerPoint","endPoint","percentDone","currPoint","multiplyBy","add","currLatLng","containerPointToLatLng","panTo","animate","Util","requestAnimFrame","cancelAnimFrame","DriftMarker","onMoveEndCallback","el","getOptions","onMoveEnd","moveEnd","contextValue","leaflet","popupContainer","fromProps","toProps","leafletElement","setIcon","zIndexOffset","setZIndexOffset","setOpacity","draggable","children","MapLayer","withLeaflet","HeroMarker","markerIcon","_","OverheadMap","setGraph","setPos","path","setPath","vertexQueue","setEncounterId","mapUrl","setMapUrl","userState","setUserState","initialNode","setInitialNode","handleMoveEnd","vertexId","targetVertex","pop","splits","split","newState","stateService","setState","npath","aStar","clear","nextVertex","pathVertexes","p","moveToVertexId","mapGraph","match","newUserState","getState","getMap","Build","initialVertex","loadMap","bounds","LatLngBounds","KeyMaps","Map","crs","CRS","Simple","zoom","minZoom","maxZoom","maxBounds","round","zoomControl","ImageOverlay","Polyline","positions","dashArray","dashOffset","MockWorldService","PartyInventory","onEquipItem","isItemEquipable","itemContainer","portraitItem","portraitItemHelm","portraitItemBreastplate","portraitItemGloves","portraitItemLegs","portraitItemWeapon","portraitItemShield","portraitNoItemImg","portraitItemImg","EquippedItems","headItem","WearableHead","bodyItem","WearableBody","armsItem","WearableArms","feetItem","WearableFeet","StyledTableCell","withStyles","theme","head","palette","common","black","white","body","TableCell","StyledTableRow","action","hover","TableRow","table","StatisticsBlock","statistics","createData","total","attributeTotal","attribute","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","row","scope","maxWidth","statisticsBlock","CalculatedStatisticsBlock","md","List","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","TraitList","renderTraitIcon","renderTrait","characterGrid","gridAutoRows","breakpoints","down","gridTemplateColumns","up","sectionHeading","bannerContainer","portrait","portraitImg","overflowY","gridRowEnd","HeroProfile","useParams","setHero","world","setWorld","setEquippedItems","setCurrentId","navigateToUrl","getPartyIds","newHero","getPartyStatistics","newWorld","getWorld","newItems","loadHero","class","removedItemId","equipItem","EncounterMap","initialPos","MainLayout","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Mousetrap","bind","containerAbsolute","isPositioned","event"],"mappings":"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","file":"static/js/main.acfb70a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from '../components/LinkTo';\r\nimport KeyMaps from '../components/KeyMaps';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    container: {\r\n        top: \"8vh\",\r\n        position: \"relative\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"40px\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"lightsteelblue\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n            backgroundColor: \"ghostwhite\",\r\n        },\r\n    },\r\n});\r\n\r\nconst MainMenu: React.FunctionComponent = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    let history = useHistory();\r\n    const navigateToSaves = () => history.push(\"/saves\");\r\n\r\n    const isElectron = () => {\r\n        // Renderer process\r\n        if (typeof window !== \"undefined\" && typeof window.process === \"object\" && window.process.type === \"renderer\") {\r\n            return true;\r\n        }\r\n\r\n        // Main process\r\n        if (typeof process !== \"undefined\" && typeof process.versions === \"object\" && !!process.versions.electron) {\r\n            return true;\r\n        }\r\n\r\n        // Detect the user agent when the `nodeIntegration` option is set to true\r\n        if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    const onElectronExit = () => {\r\n        const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n        ipcRenderer.send(\"close-app\");\r\n    }\r\n    \r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Grid container className={classes.container}>\r\n                    <Grid item xs={3}></Grid>\r\n                    <Grid item xs={6}>\r\n                        <Card className={classes.card}>\r\n                            <CardHeader\r\n                                title={\r\n                                    <Typography variant=\"h2\" onClick={navigateToSaves}>\r\n                                        New Game\r\n                                    </Typography>\r\n                                }\r\n                            />\r\n                            <CardContent>Start a new game</CardContent>\r\n                        </Card>\r\n                        {isElectron() ? (\r\n                            <Card className={classes.card} onClick={onElectronExit}>\r\n                                <CardHeader title={<Typography variant=\"h2\">Quit</Typography>} />\r\n                                <CardContent>Exit the game</CardContent>\r\n                            </Card>\r\n                        ) : null}\r\n                    </Grid>\r\n                    <Grid item xs={3}></Grid>\r\n                </Grid>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Card, CardHeader, CardContent, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport LinkTo from '../components/LinkTo';\r\nimport KeyMaps from '../components/KeyMaps';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#282c34\",\r\n        height: \"100vh\",\r\n    },\r\n    close: {\r\n        filter: \"invert(60%)\",\r\n    },\r\n    container: {\r\n        top: \"1vh\",\r\n        position: \"relative\",\r\n    },\r\n    titleContainer: {\r\n        padding: \"10vh\",\r\n    },\r\n    appLogo: {\r\n        height: \"10vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n    },\r\n    chooseText: {\r\n        color: \"white\",\r\n    },\r\n    card: {\r\n        position: \"relative\",\r\n        margin: \"40px\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"lightsteelblue\",\r\n        \"&:hover\": {\r\n            top: \"-5px\",\r\n            right: \"5px\",\r\n            boxShadow: \"10px 10px\",\r\n            backgroundColor: \"ghostwhite\",\r\n        },\r\n    },\r\n});\r\n\r\nconst SavesMenu: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let history = useHistory();\r\n\r\n    const isElectron = () => {\r\n        // Renderer process\r\n        if (typeof window !== \"undefined\" && typeof window.process === \"object\" && window.process.type === \"renderer\") {\r\n            return true;\r\n        }\r\n\r\n        // Main process\r\n        if (typeof process !== \"undefined\" && typeof process.versions === \"object\" && !!process.versions.electron) {\r\n            return true;\r\n        }\r\n\r\n        // Detect the user agent when the `nodeIntegration` option is set to true\r\n        if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const onExit = () => {\r\n        if (isElectron()) {\r\n            const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n            ipcRenderer.send(\"close-app\");\r\n        } else {\r\n            history.push(\"/\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <div className={classes.root}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`} top=\"20px\" left=\"20px\" width=\"40px\">\r\n                    <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                </LinkTo>\r\n                <div className={classes.titleContainer}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                    <img className=\"title-large shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                </div>\r\n                <Typography variant=\"h4\" className={classes.chooseText}>Choose a save slot</Typography>\r\n                <Grid container className={classes.container}>\r\n                    <Grid item xs={3}></Grid>\r\n                    <Grid item xs={6}>\r\n                        <Card className={classes.card}>\r\n                            <CardHeader title={<Typography variant=\"h2\">Slot A</Typography>} />\r\n                            <CardContent>Empty</CardContent>\r\n                        </Card>\r\n                        <Card className={classes.card}>\r\n                            <CardHeader title={<Typography variant=\"h2\">Slot B</Typography>} />\r\n                            <CardContent>Empty</CardContent>\r\n                        </Card>\r\n                        <Card className={classes.card}>\r\n                            <CardHeader title={<Typography variant=\"h2\">Slot C</Typography>} />\r\n                            <CardContent>Empty</CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={3}></Grid>\r\n                </Grid>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default SavesMenu;\r\n","\r\nexport enum TraitType {\r\n    Uncategorised = 0,\r\n    Mental = 1,\r\n    Mystical = 2,\r\n    Physical = 3,\r\n    Item = 4,\r\n    // MentalPhobia = 100,\r\n    // MysticalCurse = 200,\r\n};\r\n\r\nexport enum ModifierType {\r\n    None = 0,\r\n    Strength = 10,\r\n    Dexterity = 11,\r\n    Constitution = 12,\r\n    Intelligence = 13,\r\n    Wisdom = 14,\r\n    Charisma = 15,\r\n    Luck = 16,\r\n    HitPoints = 20,\r\n    HitDie = 21,\r\n    Armor = 22,\r\n    SpellResistance = 23,\r\n    MoveSpeed = 24,\r\n    MeleeAttackSpeed = 25,\r\n    MeleeAttack = 26,\r\n    MeleeDamageDie = 27,\r\n    MeleeDamage = 28,\r\n    RangedAttackSpeed = 29,\r\n    RangedAttack = 30,\r\n    RangedDamageDie = 31,\r\n    RangedDamage = 32,\r\n    MeleeChanceForParalysis = 50,\r\n    MeleeChanceForPoisoned = 51,\r\n    MeleeChanceForBleeding = 52,\r\n    MeleeChanceForTerrified = 53,\r\n    MeleeChanceForCharmed = 54,\r\n    RangedChanceForParalysis = 60,\r\n    RangedChanceForPoisoned = 61,\r\n    RangedChanceForBleeding = 62,\r\n    RangedChanceForTerrified = 63,\r\n    RangedChanceForCharmed = 64,\r\n    AddAbility = 100,\r\n    RemoveAbility = 101, // Items can prevent abilities being used (e.g. Armor prevents Sorcery)\r\n    AbilitySorcery = 110,\r\n    AbilityStealth = 111,\r\n    AbilityPerception = 112,\r\n    AbilityPatronBond = 113,\r\n    AbilitySurvival = 114,\r\n    AbilityDevices = 115,\r\n    AbilityAcrobatics = 116,\r\n};\r\n\r\nexport interface TraitEffect {\r\n\r\n    modifierType: ModifierType;\r\n\r\n    modifierValue: number;\r\n}\r\n\r\nexport default interface Trait {\r\n    // ID for the trait\r\n    id: string;\r\n\r\n    // A name for the trait\r\n    name: string;\r\n\r\n    // The type of trait\r\n    type: TraitType;\r\n\r\n    // What does it do\r\n    behaviour: TraitEffect[];\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst PitTheme = createMuiTheme({\r\n    // palette: {\r\n    //     primary: {\r\n    //         light: blue[500],\r\n    //         main: blue[500],\r\n    //         dark: blue[500],\r\n    //     },\r\n    //     secondary: {\r\n    //         light: blue[100],\r\n    //         main: blue[100],\r\n    //         dark: blue[100],\r\n    //     },\r\n    //     action: {\r\n    //         hover: blue[800],\r\n    //     },\r\n    // },\r\n    // overrides: {\r\n    //     MuiButton: {\r\n    //         root: {\r\n    //             \"&:hover\": {\r\n    //                 // backgroundColor: \"rgba(150, 150, 150, 0.25) !important\",\r\n    //                 color: \"white\",\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // },\r\n});\r\n\r\nexport default PitTheme;\r\n","export default class ArrayHelper {\r\n    /*\r\n    * Remove an item from an array\r\n    */\r\n    public static remove<T>(array: T[], item: T): void {\r\n        const index = array.indexOf(item);\r\n        if (index > -1) {\r\n            array.splice(index, 1);\r\n        }\r\n    }\r\n}","import Item from \"../models/Item\";\r\n\r\nimport WolfSpear from \"./items/wolf_spear.json\";\r\nimport TokenOfServitude from \"./items/token_of_servitude.json\";\r\nimport HagTeeth from \"./items/hag_teeth.json\";\r\nimport CeramicHelm from \"./items/ceramic_helm.json\";\r\nimport CeramicArmor from \"./items/ceramic_armor.json\";\r\n\r\nexport default class MockItemService {\r\n    getItemDetail(id: string): Item {\r\n        switch (id) {\r\n            case \"token_of_servitude\":\r\n                return TokenOfServitude;\r\n            case \"hag_teeth\":\r\n                return HagTeeth;\r\n            case \"ceramic_helm\":\r\n                return CeramicHelm;\r\n            case \"ceramic_armor\":\r\n                return CeramicArmor;\r\n            case \"wolf_spear\":\r\n            default:\r\n                return WolfSpear;\r\n        }\r\n    }\r\n\r\n    getItems = (ids: string[]): Item[] => ids.map(id => this.getItemDetail(id));\r\n}\r\n","import AttributeList from \"../models/AttributeList\";\r\nimport CalculatedStats from \"../models/CalculatedStats\";\r\nimport Hero from \"../models/Hero\";\r\nimport HeroTrait from \"../models/HeroTrait\";\r\nimport Item from \"../models/Item\";\r\nimport Trait, { ModifierType } from \"../models/Trait\";\r\nimport ArrayHelper from \"./ArrayHelper\";\r\n\r\nexport default class HeroHelper {\r\n    /*\r\n     * Return all traits (item, core, temporary) on the hero\r\n     */\r\n    public static getAllTraits = (hero: Hero): HeroTrait[] => hero.traits.concat(hero.itemTraits).concat(hero.temporaryTraits);\r\n\r\n    /*\r\n     * Add traits from an item to the hero\r\n     */\r\n    public static addItemTraits = (hero: Hero, item: Item): void => {\r\n        for (let i = 0; i < item.traits.length; i++) {\r\n            const itemTrait: Trait = item.traits[i];\r\n            const heroTrait: HeroTrait = {\r\n                id: itemTrait.id,\r\n                name: itemTrait.name,\r\n                type: itemTrait.type,\r\n                behaviour: itemTrait.behaviour,\r\n                from: item.name,\r\n            };\r\n            hero.itemTraits.push(heroTrait);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Remove traits from an item to the hero\r\n     */\r\n    public static removeItemTraits = (hero: Hero, item: Item): void => {\r\n        const matches = hero.itemTraits.filter((t) => t.from === item.name);\r\n        for (let i = 0; i < matches.length; i++) {\r\n            ArrayHelper.remove(hero.itemTraits, matches[i]);\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Calculate attribute modifiers\r\n     */\r\n    public static calculateAttributesWithModifiers = (hero: Hero): AttributeList => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let strMod = 0,\r\n            dexMod = 0,\r\n            conMod = 0,\r\n            intMod = 0,\r\n            wisMod = 0,\r\n            chaMod = 0,\r\n            luckMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Strength:\r\n                        strMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Dexterity:\r\n                        dexMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Constitution:\r\n                        conMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Intelligence:\r\n                        intMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Wisdom:\r\n                        wisMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Charisma:\r\n                        chaMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.Luck:\r\n                        luckMod += behaviour.modifierValue;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attributes = hero.attributes;\r\n        const newAttributeList: AttributeList = {\r\n            strength: { base: attributes.strength.base, modifier: strMod },\r\n            dexterity: { base: attributes.dexterity.base, modifier: dexMod },\r\n            constitution: { base: attributes.constitution.base, modifier: conMod },\r\n            intelligence: { base: attributes.intelligence.base, modifier: intMod },\r\n            wisdom: { base: attributes.wisdom.base, modifier: wisMod },\r\n            charisma: { base: attributes.charisma.base, modifier: chaMod },\r\n            luck: { base: attributes.luck.base, modifier: luckMod },\r\n        };\r\n\r\n        return newAttributeList;\r\n    };\r\n\r\n    public static calculateStatsWithModifiers = (hero: Hero): CalculatedStats => {\r\n        const allTraits = HeroHelper.getAllTraits(hero);\r\n        let armorMod = 0,\r\n            moveSpeedMod = 0,\r\n            meleeAttackMod = 0,\r\n            meleeAttackSpeedMod = 0,\r\n            meleeDamageDieMod = 0,\r\n            meleeDamageMod = 0,\r\n            rangedAttackMod = 0,\r\n            rangedAttackSpeedMod = 0,\r\n            rangedDamageDieMod = 0,\r\n            rangedDamageMod = 0,\r\n            hpMod = 0,\r\n            hitDieMod = 0,\r\n            spellResistMod = 0;\r\n\r\n        for (let i = 0; i < allTraits.length; i++) {\r\n            for (let j = 0; j < allTraits[i].behaviour.length; j++) {\r\n                const behaviour = allTraits[i].behaviour[j];\r\n                switch (behaviour.modifierType) {\r\n                    case ModifierType.Armor:\r\n                        armorMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MoveSpeed:\r\n                        moveSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeAttack:\r\n                        meleeAttackMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeAttackSpeed:\r\n                        meleeAttackSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeDamageDie:\r\n                        meleeDamageDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.MeleeDamage:\r\n                        meleeDamageMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttack:\r\n                        rangedAttackMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedAttackSpeed:\r\n                        rangedAttackSpeedMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedDamageDie:\r\n                        rangedDamageDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.RangedDamage:\r\n                        rangedDamageMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.HitPoints:\r\n                        hpMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.HitDie:\r\n                        hitDieMod += behaviour.modifierValue;\r\n                        break;\r\n                    case ModifierType.SpellResistance:\r\n                        spellResistMod += behaviour.modifierValue;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const stats = hero.stats;\r\n        const newStats: CalculatedStats = {\r\n            armour: stats.armour + armorMod,\r\n            attack: stats.attack + meleeAttackMod,\r\n            moveSpeed: stats.moveSpeed + moveSpeedMod,\r\n            attackSpeed: stats.attackSpeed + meleeAttackSpeedMod,\r\n            damageDie: stats.damageDie + meleeDamageDieMod,\r\n            damageBonus: stats.damageBonus + meleeDamageMod,\r\n            maxHitPoints: stats.maxHitPoints + hpMod,\r\n            currentHitPoints: stats.currentHitPoints,\r\n            hitDie: stats.hitDie + hitDieMod,\r\n            spellResistance: stats.spellResistance + spellResistMod,\r\n        };\r\n\r\n        return newStats;\r\n    };\r\n}\r\n","import Hero from \"../models/Hero\";\r\n\r\nimport Gossamer from \"./heroes/gossamer.json\";\r\nimport Balthazar from \"./heroes/balthazar_the_unblemished.json\";\r\nimport Gargamela from \"./heroes/gargomela_the_black.json\";\r\nimport Gyvwain from \"./heroes/gyvwain_the_chivalrous.json\";\r\nimport Justin from \"./heroes/justin_the_unwanted.json\";\r\nimport ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport MockItemService from \"./MockItemService\";\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nexport default class MockHeroService {\r\n    getHeroDetail(id: string): Hero {\r\n        switch (id) {\r\n            case \"Gyvwain the Chivalrous\":\r\n            case \"gyvwain_the_chivalrous\":\r\n                return Gyvwain;\r\n            case \"Balthazar the Unblemished\":\r\n            case \"balthazar_the_unblemished\":\r\n                return Balthazar;\r\n            case \"Gossamer\":\r\n            case \"gossamer\":\r\n                return Gossamer;\r\n            case \"Justin the Unwanted\":\r\n            case \"justin_the_unwanted\":\r\n                return Justin;\r\n            case \"gargomela_the_black\":\r\n            default:\r\n                return Gargamela;\r\n        }\r\n    }\r\n\r\n    private static _heroes: Hero[] = [Gyvwain, Balthazar, Gossamer, Gargamela, Justin];\r\n\r\n    getAllAvailable(): Hero[] {\r\n        return MockHeroService._heroes;\r\n    }\r\n\r\n    /*\r\n    * Equip an item in one of the equip slots\r\n    * If an item needs to be removed, return the item Id\r\n    */\r\n    equipItem(heroId: string, itemId: string): string | null {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw \"Can't find hero\";\r\n\r\n        const itemService = new MockItemService();\r\n        const originalItem = itemService.getItemDetail(itemId);\r\n        if (!originalItem) throw \"Can't find original item\";\r\n\r\n        // Check if the hero already has an item of this type equipped\r\n        const items = itemService.getItems(heroMatch.equippedItems);\r\n        const itemWithSameType = items.find(item => item.itemType == originalItem.itemType);\r\n\r\n        // TODO: We need special logic around equipable weapons\r\n\r\n        heroMatch.equippedItems.push(itemId);\r\n        \r\n        // Add traits from the item\r\n        HeroHelper.addItemTraits(heroMatch, originalItem);\r\n\r\n        if (!itemWithSameType) return null; \r\n\r\n        // Remove traits from the removed item\r\n        HeroHelper.removeItemTraits(heroMatch, itemWithSameType);\r\n        \r\n        return itemWithSameType.id;\r\n    }\r\n\r\n    unequipItem(heroId: string, itemId: string) {\r\n        // TODO: Should we check that the hero is in the party?\r\n        const heroMatch = MockHeroService._heroes.find((hero) => hero.id === heroId);\r\n        if (!heroMatch) throw \"Can't find hero\";\r\n\r\n        const itemService = new MockItemService();\r\n        const item = itemService.getItemDetail(itemId);\r\n        if (!item) throw \"Can't find original item\";\r\n\r\n        ArrayHelper.remove(heroMatch.equippedItems, item.id);\r\n\r\n        // Remove traits from the removed item\r\n        HeroHelper.removeItemTraits(heroMatch, item);\r\n    }\r\n}\r\n","import ArrayHelper from \"../helpers/ArrayHelper\";\r\nimport Hero from \"../models/Hero\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport MockHeroService from \"./MockHeroService\";\r\n\r\nexport default class MockPartyService {\r\n    getPartyStatistics(): PartyStatistics {\r\n        return {\r\n            reputation: 12,\r\n            traits: [\"Humiliated the Dread Pirate Roberts\", \"Gouged the eye from a Titan\"],\r\n        };\r\n    }\r\n\r\n    private static _heroIds: string[] = [\"gyvwain_the_chivalrous\", \"balthazar_the_unblemished\", \"gossamer\", \"gargomela_the_black\"];\r\n\r\n    getParty(): Hero[] {\r\n        const heroService = new MockHeroService();\r\n        const party = MockPartyService._heroIds.map((id) => heroService.getHeroDetail(id));\r\n        return party;\r\n    }\r\n\r\n    getPartyIds(): string[] {\r\n        return MockPartyService._heroIds;\r\n    }\r\n\r\n    setPartyIds(heroIds: string[]): void {\r\n        MockPartyService._heroIds = heroIds;\r\n    }\r\n\r\n    private static _inventoryItemIds: string[] = [\"wolf_spear\", \"ceramic_helm\", \"ceramic_armor\"];\r\n    private static _stashItemIds: string[] = [\"hag_teeth\", \"token_of_servitude\"];\r\n\r\n    getInventory(): string[] {\r\n        return MockPartyService._inventoryItemIds;\r\n    }\r\n\r\n    setInventory(itemIds: string[]) {\r\n        MockPartyService._inventoryItemIds = itemIds;\r\n    }\r\n\r\n    addInventoryItem(id: string) {\r\n        MockPartyService._inventoryItemIds.push(id);\r\n    }\r\n\r\n    removeInventoryItem(id: string) {\r\n        ArrayHelper.remove(MockPartyService._inventoryItemIds, id);\r\n    }\r\n\r\n    getStash(): string[] {\r\n        return MockPartyService._stashItemIds;\r\n    }\r\n\r\n    setStash(itemIds: string[]) {\r\n        MockPartyService._stashItemIds = itemIds;\r\n    }\r\n\r\n    addStashItem(id: string) {\r\n        MockPartyService._stashItemIds.push(id);\r\n    }\r\n\r\n    removeStashItem(id: string) {\r\n        ArrayHelper.remove(MockPartyService._stashItemIds, id);\r\n    }\r\n}\r\n","import AttributeList from \"./AttributeList\";\r\nimport CalculatedStats from \"./CalculatedStats\";\r\nimport HeroTrait from \"./HeroTrait\";\r\n\r\nexport enum Alignment {\r\n    Lawful = 0,\r\n    Neutral = 1,\r\n    Chaotic = 2,\r\n}\r\n\r\nexport enum HeroClass {\r\n    /*\r\n     * A traditional fighter, guard, barbarian or mercenary for hire\r\n     */\r\n    Warrior = 0,\r\n    /*\r\n     * A scounrel, bandit, robber\r\n     */\r\n    Thief = 1,\r\n    /*\r\n     * A mistrusted user of magic. Usually obviously marked, correpted or tainted\r\n     */\r\n    Sorcerer = 2,\r\n    /*\r\n     * A follower, patron, or somone bound to a god, demon or higher power\r\n     */\r\n    Templar = 3,\r\n}\r\n\r\nexport enum StatusFlags {\r\n    None = 0x00,\r\n    Paralysed = 0x01,\r\n    Poisoned = 0x04,\r\n    Bleeding = 0x08,\r\n    Terrified = 0x10,\r\n    Charmed = 0x20,\r\n    // Sleeping, Petrified,\r\n}\r\n\r\nexport enum AbilityFlags {\r\n    None = 0x00,\r\n    Sorcery = 0x01,\r\n    Stealth = 0x02,\r\n    Perception = 0x04,\r\n    PatronBond = 0x08,\r\n    Survival = 0x10,\r\n    Devices = 0x20,\r\n    Acrobatics = 0x40,\r\n}\r\n\r\n// TODO: Split hero into core stats & calculated (view) ?\r\ninterface Hero {\r\n    // ID of the hero\r\n    id: string;\r\n\r\n    // Display name of the hero\r\n    name: string;\r\n\r\n    // Origins of the hero\r\n    background: string;\r\n\r\n    imageUrl: string;\r\n\r\n    // Hero attributes\r\n    attributes: AttributeList;\r\n\r\n    // Any special states\r\n    status: StatusFlags;\r\n\r\n    stats: CalculatedStats;\r\n\r\n    abilities: AbilityFlags;\r\n\r\n    alignment: Alignment;\r\n\r\n    class: HeroClass;\r\n\r\n    // Itesm equpped by the hero\r\n    equippedItems: string[];\r\n\r\n    // Hero traits\r\n    traits: HeroTrait[];\r\n\r\n    // Hero traits\r\n    itemTraits: HeroTrait[];\r\n\r\n    // Hero traits\r\n    temporaryTraits: HeroTrait[];\r\n}\r\n\r\nexport default Hero;\r\n","import Trait from \"./Trait\";\r\n\r\nexport enum ItemType {\r\n    Usable = 1,\r\n    Quest = 2,\r\n    WearableHead = 10,\r\n    WearableBody = 11,\r\n    WearableArms = 12,\r\n    WearableFeet = 13,\r\n    WeaponMelee1h = 20,\r\n    WeaponMelee2h = 21,\r\n    WeaponRanged1h = 22,\r\n    WeaponRanged2h = 23,\r\n    Shield = 24,\r\n}\r\n\r\nexport default interface Item {\r\n    // ID of the item\r\n    id: string;\r\n\r\n    // Name of the item\r\n    name: string;\r\n\r\n    // Text description for the item\r\n    description: string;\r\n\r\n    // URL of the image to display for the item\r\n    imageUrl: string;\r\n\r\n    // The type of item\r\n    itemType: ItemType;\r\n\r\n    // Item traits\r\n    traits: Trait[];\r\n}","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport LinkTo from \"./LinkTo\";\r\n\r\nconst useStyles = makeStyles({\r\n    appHeader: {\r\n        backgroundColor: \"#282c34\",\r\n        \"-webkit-app-region\": \"drag\",\r\n    },\r\n    headerSpan: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n    },\r\n    headerParty: {\r\n        position: \"absolute\",\r\n        zIndex: 1000,\r\n        right: \"10px\",\r\n        top: \"2vh\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n    headerImg: {\r\n        width: \"7vh\",\r\n        height: \"7vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"#282c34\",\r\n        margin: \"4px\",\r\n    },\r\n    appLogo: {\r\n        height: \"5vh\",\r\n        pointerEvents: \"none\",\r\n        padding: \"20px\",\r\n        \"-webkit-app-region\": \"none\",\r\n    },\r\n});\r\n\r\ntype HeaderProps = {};\r\n\r\n\r\nconst Header: React.FunctionComponent<HeaderProps> = (props: HeaderProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [party, setParty] = React.useState(null as Hero[] | null); // The map graph data\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadParty = () => {\r\n            const heroService = new MockPartyService();\r\n            const newParty = heroService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setParty(newParty);\r\n        };\r\n\r\n        if (party == null) {\r\n            loadParty();\r\n        }\r\n    });\r\n\r\n    const renderParty = () => {\r\n        if (!party) return null;\r\n\r\n        return party.map((hero) => {\r\n            return (\r\n                <LinkTo key={hero.id} url={`${process.env.PUBLIC_URL}/profile/${hero.id}`}>\r\n                    <img src={hero.imageUrl} className={classes.headerImg} alt=\"profile\" />\r\n                </LinkTo>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <header className={classes.appHeader}>\r\n            <span className={classes.headerSpan}>\r\n                <LinkTo url={`${process.env.PUBLIC_URL}/menu`}>\r\n                    <img src=\"./volcano.svg\" className={classes.appLogo} alt=\"logo\" />\r\n                </LinkTo>\r\n                <img className=\"title shadow\" alt=\"Tales from the Pit\" src=\"title.svg\" />\r\n                <span className={classes.headerParty}>{renderParty()}</span>\r\n            </span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import { Choice } from \"inkjs/engine/Choice\";\r\nimport { Story } from \"inkjs/engine/Story\";\r\nimport { StringValue } from \"inkjs/engine/Value\";\r\nimport InkStoryEncounter from \"../models/InkStoryEncounter\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\n\r\nimport TheInterceptContent from \"./encounters/TheIntercept.json\";\r\nimport commonRoomContent from \"./encounters/common-room.ink.json\";\r\nimport chasmContent from \"./encounters/chasm.ink.json\";\r\nimport homeContent from \"./encounters/home.ink.json\";\r\nimport nineBellsContent from \"./encounters/nine-bells.ink.json\";\r\nimport brawlContent from \"./encounters/brawl.ink.json\";\r\n\r\n// A mock story service\r\n// Story state will be kept on the server\r\nexport default class MockStoryEncounterService {\r\n    private currentStory: Story | null = null;\r\n    private currentId: string | null = null;\r\n    private currentTitle: string = \"\";\r\n\r\n    public startEncounter(id: string): InkStoryEncounter {\r\n        switch (id) {\r\n            case \"hoard\":\r\n                this.currentTitle = \"Treasure !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                //paragraphText: \"You stumble tired and exhaused into a room stuffed to the ceiling with well-crafted wooden coffers.\",\r\n                break;\r\n            case \"wet-room\":\r\n                this.currentTitle = \"The Intercept !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"common-room\":\r\n                this.currentTitle = \"Tracking the Yellow-Bellied Crook\";\r\n                this.currentStory = new Story(commonRoomContent);\r\n                break;\r\n            case \"chasm\":\r\n                this.currentTitle = \"Across the Chasm\";\r\n                this.currentStory = new Story(chasmContent);\r\n                break;\r\n            case \"warrens\":\r\n                this.currentTitle = \"Rats !\";\r\n                this.currentStory = new Story(TheInterceptContent);\r\n                break;\r\n            case \"home\":\r\n                this.currentTitle = \"Scupperden\";\r\n                this.currentStory = new Story(homeContent);\r\n                break;\r\n            case \"nine-bells\":\r\n                this.currentTitle = \"The Cathedral\";\r\n                this.currentStory = new Story(nineBellsContent);\r\n                break;\r\n            case \"brawl\":\r\n                this.currentTitle = \"Thugs!\";\r\n                this.currentStory = new Story(brawlContent);\r\n                break;\r\n            default:\r\n                return MockStoryEncounterService.createEmptyStory();\r\n        }\r\n        this.currentId = id;\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public chooseChoice(choiceId: number): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n        this.currentStory.ChooseChoiceIndex(choiceId);\r\n\r\n        return this.continue();\r\n    }\r\n\r\n    public continue(): InkStoryEncounter {\r\n        if (!this.currentStory || !this.currentId) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        if (!this.currentStory.canContinue) {\r\n            const moveTo = this.currentStory.variablesState.GetVariableWithName(\"moveTo\") as StringValue;\r\n            const detailedEncounter = this.currentStory.variablesState.GetVariableWithName(\"detailedEncounter\") as StringValue;\r\n            return {\r\n                id: this.currentId,\r\n                title: this.currentTitle,\r\n                paragraphText: \"\",\r\n                choices: [],\r\n                isFinished: true,\r\n                finishData: {\r\n                    moveTo: moveTo?.value,\r\n                    detailedEncounter: detailedEncounter?.value,\r\n                },\r\n            };\r\n        }\r\n\r\n        const paragraphText = this.currentStory.Continue();\r\n        if (!paragraphText) return MockStoryEncounterService.createEmptyStory();\r\n\r\n        const encounterChoices: InkStoryChoice[] = this.currentStory.currentChoices.map(\r\n            (c: Choice) => {\r\n                return {\r\n                    index: c.index,\r\n                    text: c.text,\r\n                } as InkStoryChoice\r\n            }\r\n        );\r\n\r\n        const encounter: InkStoryEncounter = {\r\n            id: this.currentId,\r\n            title: this.currentTitle,\r\n            paragraphText: paragraphText,\r\n            choices: encounterChoices,\r\n            isFinished: false,\r\n        };\r\n\r\n        return encounter;\r\n    }\r\n\r\n    private static createEmptyStory(): InkStoryEncounter {\r\n        return {\r\n            id: \"\",\r\n            title: \"\",\r\n            paragraphText: \"\",\r\n            choices: [],\r\n            isFinished: true,\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n    },\r\n    party: {\r\n        padding: \"30px\",\r\n        position: \"absolute\",\r\n    },\r\n    hero: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightgrey\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    heroSelected: {\r\n        width: \"70px\",\r\n        height: \"70px\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"mediumaquamarine\",\r\n        margin: \"4px\",\r\n        cursor: \"pointer\",\r\n    },\r\n});\r\n\r\ntype HeroSelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    // encounterId: string | null;\r\n    chooseAll?: boolean;\r\n    multiSelect?: boolean;\r\n};\r\n\r\nconst HeroSelector: React.FunctionComponent<HeroSelectorProps> = (props: HeroSelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, multiSelect } = props;\r\n\r\n    let [heroes, setHeroes] = React.useState(null as Hero[] | null); // The map graph data\r\n    let [selected, setSelected] = React.useState([] as boolean[]);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of party\r\n        const loadHeroes = () => {\r\n            const heroService = new MockHeroService();\r\n            const partyService = new MockPartyService();\r\n            const newParty = props.chooseAll ? heroService.getAllAvailable() : partyService.getParty();\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n\r\n            setHeroes(newParty);\r\n        };\r\n\r\n        if (heroes == null) {\r\n            loadHeroes();\r\n        }\r\n    });\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        if (!heroes) return;\r\n\r\n        const selectedHeroIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedHeroIds.push(heroes[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) onSelectionChanged(selectedHeroIds);\r\n    };\r\n\r\n    const renderParty = () => {\r\n        if (!heroes) return null;\r\n\r\n        let index = 0;\r\n\r\n        return heroes.map((hero) => {\r\n            const imgClass = selected[index] ? `${classes.heroSelected}` : `${classes.hero}`;\r\n            const output = (\r\n                <Grid item xs={3}>\r\n                    <Tooltip title={hero.name} key={index}>\r\n                        <img src={hero.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt=\"profile\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.party}>\r\n                <Grid container>{renderParty()}</Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroSelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\nconst PartySelection: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [heroIds, setHeroIds] = React.useState([] as string[]);\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        setHeroIds(ids);\r\n    };\r\n\r\n    const isValid = () => heroIds.length === 4; \r\n\r\n    const changeParty = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockPartyService();\r\n        service.setPartyIds(heroIds);\r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} multiSelect={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Apply party changes\" : \"Please select four heroes\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={changeParty} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default PartySelection;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport MockHeroService from \"../services/MockHeroService\";\r\n\r\nconst useStyles = makeStyles({\r\n    partyButton: {\r\n        //margin: \"auto 10px\",\r\n    },\r\n    partyButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n\r\n\r\nconst HeroDismiss: React.FunctionComponent = (): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    let [heroId, setHeroId] = React.useState(\"\");\r\n\r\n    const selectionChanged = (ids: string[]) => {\r\n\r\n        if (ids.length > 0)\r\n            setHeroId(ids[0]);\r\n    };\r\n\r\n    const isValid = () => heroId.length > 0; \r\n\r\n    const dismissHero = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isValid()) return;\r\n\r\n        const service = new MockHeroService();\r\n        \r\n        // TODO: How to trigger a header reload?\r\n        // TODO: Maybe a shared callback?\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeroSelector onSelectionChanged={selectionChanged} chooseAll={true} />\r\n            {/* TODO: Tooltip not working when button disabled? */}\r\n            <Tooltip title={isValid() ? \"Dismiss a hero\" : \"Please select a hero\"}>\r\n                <div className={classes.partyButtonDiv}>\r\n                    <Button className={classes.partyButton} onClick={dismissHero} disabled={!isValid()} variant=\"contained\" color=\"primary\">\r\n                        Dismiss\r\n                    </Button>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default HeroDismiss;\r\n","import { AbilityFlags, Alignment, HeroClass } from \"../models/Hero\";\r\nimport { ItemType } from \"../models/Item\";\r\nimport { ModifierType } from \"../models/Trait\";\r\nimport Resources from \"../resources.en.json\";\r\n\r\nexport default class StringConverters {\r\n    private static resourceMap: any = null;\r\n\r\n    static getResources(): any {\r\n        if (!StringConverters.resourceMap) {\r\n            // TODO: This is silly\r\n            StringConverters.resourceMap = JSON.parse(JSON.stringify(Resources));\r\n        }\r\n\r\n        return StringConverters.resourceMap;\r\n    }\r\n\r\n    static classToString = (heroClass: HeroClass): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"HeroClass_\" + HeroClass[heroClass];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static alignmentToString = (alignment: Alignment): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"Alignment_\" + Alignment[alignment];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static modifierToString = (modifierType: ModifierType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ModifierType_\" + ModifierType[modifierType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static itemTypeText = (itemType: ItemType): string => {\r\n        const resources = StringConverters.getResources();\r\n\r\n        const key = \"ItemType_\" + ItemType[itemType];\r\n        return key in resources ? resources[key] : \"Unsure\";\r\n    };\r\n\r\n    static abilitiesToString = (abilities: AbilityFlags): string => {\r\n        if (abilities === AbilityFlags.None) return \"None\";\r\n\r\n        const output: string[] = [];\r\n\r\n        if (abilities & AbilityFlags.Acrobatics) output.push(\"Acrobatics\");\r\n        if (abilities & AbilityFlags.Devices) output.push(\"Disable/Modify Devices\");\r\n        if (abilities & AbilityFlags.PatronBond) output.push(\"Patron Bond\");\r\n        if (abilities & AbilityFlags.Perception) output.push(\"Perception\");\r\n        if (abilities & AbilityFlags.Sorcery) output.push(\"Sorcery\");\r\n        if (abilities & AbilityFlags.Stealth) output.push(\"Stealth\");\r\n        if (abilities & AbilityFlags.Survival) output.push(\"Survival\");\r\n\r\n        return output.join(\", \");\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nimport Item from \"../models/Item\";\r\nimport Trait, { TraitEffect } from \"../models/Trait\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        padding: \"5px\",\r\n    },\r\n    description: {\r\n        padding: \"10px\",\r\n        margin: \"10px 0\",\r\n        backgroundColor: \"#999\",\r\n    },\r\n    itemType: {\r\n        padding: \"500px 10px 0 10px\",\r\n        margin: \"100px 0 0 0 \",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n    traits: {\r\n        padding: \"0\",\r\n        margin: \"0\",\r\n        width: \"100px\",\r\n        display: \"inline\",\r\n    },\r\n});\r\n\r\ntype ItemTooltipContentProps = {\r\n    item: Item | undefined;\r\n};\r\n\r\nconst ItemTooltipContent: React.FunctionComponent<ItemTooltipContentProps> = (props: ItemTooltipContentProps): JSX.Element => {\r\n    const classes = useStyles();\r\n    const { item } = props;\r\n\r\n    const renderTraits = (traits: Trait[]): JSX.Element => {\r\n        let traitJsx: JSX.Element[] = [];\r\n        for (let i = 0; i < traits.length; i++) {\r\n            const newTraits = renderBehaviors(traits[i].behaviour);\r\n            traitJsx = traitJsx.concat(newTraits);\r\n        }\r\n        return <div>{traitJsx}</div>;\r\n    };\r\n\r\n    const renderBehaviors = (effects: TraitEffect[]): JSX.Element[] => {\r\n        return effects.map((e) => (\r\n            <p>\r\n                {valueToString(e.modifierValue)} {StringConverters.modifierToString(e.modifierType)}\r\n            </p>\r\n        ));\r\n    };\r\n\r\n    const valueToString = (value: number): string => (value > 0 ? `+${value}` : value.toString());\r\n\r\n    if (!item) return <p>\"None\"</p>;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography className={classes.title} color=\"inherit\">\r\n                {item.name}\r\n            </Typography>\r\n            <p className={classes.description}>{item.description}</p>\r\n            <Typography className={classes.itemType}>{StringConverters.itemTypeText(item.itemType)}</Typography>\r\n            <Typography className={classes.traits} align=\"right\">\r\n                {renderTraits(item.traits)}\r\n            </Typography>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemTooltipContent;\r\n","import React from \"react\";\r\nimport { Grid, Tooltip, makeStyles } from \"@material-ui/core\";\r\nimport Item from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    main: {\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    container: {\r\n        position: \"relative\",\r\n        height: \"180px\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n    },\r\n    gridItem: {\r\n        height: \"85px\",\r\n    },\r\n    inventory: {\r\n        padding: \"10px 30px\",\r\n        position: \"absolute\",\r\n    },\r\n    item: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"lightgrey\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"whitesmoke\",\r\n    },\r\n    itemSelected: {\r\n        width: \"100%\",\r\n        border: \"solid\",\r\n        borderRadius: \"15%\",\r\n        borderWidth: \"3px\",\r\n        borderColor: \"cadetblue\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"powderblue\",\r\n    },\r\n});\r\n\r\ntype InventorySelectorProps = {\r\n    onSelectionChanged?: (ids: string[]) => void;\r\n    multiSelect?: boolean;\r\n    items: Item[];\r\n};\r\n\r\nconst InventorySelector: React.FunctionComponent<InventorySelectorProps> = (props: InventorySelectorProps) => {\r\n    const classes = useStyles();\r\n    const { onSelectionChanged, items, multiSelect } = props;\r\n\r\n    let [selected, setSelected] = React.useState([] as boolean[]);\r\n\r\n    const onSelect = (ev: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n        const id = Number.parseInt(ev.currentTarget.id);\r\n\r\n        const newSelected = multiSelect ? selected.map((t) => t) : [];\r\n\r\n        newSelected[id] = !newSelected[id];\r\n        setSelected(newSelected);\r\n\r\n        const selectedIds: string[] = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            if (newSelected[i]) selectedIds.push(items[i].id);\r\n        }\r\n\r\n        if (onSelectionChanged) {\r\n            const result = onSelectionChanged(selectedIds);\r\n        }\r\n    };\r\n\r\n    const renderInventory = () => {\r\n        let index = 0;\r\n        const maxItems = 8;\r\n\r\n        const itemGrids = items.map((item) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={item.id}>\r\n                    <Tooltip title={<ItemTooltipContent item={item} />} key={index} arrow>\r\n                        <img src={item.imageUrl} id={index.toString()} onClick={onSelect} className={imgClass} alt={item.name} />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        const emptyItems = [];\r\n        for (let i = items.length; i < maxItems; i++) {\r\n            emptyItems.push(\"\");\r\n        }\r\n\r\n        const emptyGrids = emptyItems.map((i) => {\r\n            const imgClass = selected[index] ? `${classes.itemSelected}` : `${classes.item}`;\r\n            const output = (\r\n                <Grid item xs={3} className={classes.gridItem} key={index.toString()}>\r\n                    <Tooltip title={\"Nothing\"} key={index}>\r\n                        <img src={\"/images/items/empty.png\"} id={index.toString()} className={imgClass} alt=\"nothing\" />\r\n                    </Tooltip>\r\n                </Grid>\r\n            );\r\n            index++;\r\n            return output;\r\n        });\r\n\r\n        return itemGrids.concat(emptyGrids);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.main}>\r\n            <div className={classes.container}>\r\n                <div className={classes.inventory}>\r\n                    <Grid container spacing={3} alignItems=\"center\" justify=\"space-evenly\">\r\n                        {renderInventory()}\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InventorySelector;\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport Item from \"../models/Item\";\r\nimport MockItemService from \"../services/MockItemService\";\r\n\r\nconst useStyles = makeStyles({\r\n    stashImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"220px\",\r\n        left: \"100px\",\r\n    },\r\n    inventoryImg: {\r\n        width: \"25px\",\r\n        position: \"absolute\",\r\n        top: \"420px\",\r\n        left: \"100px\",\r\n    },\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\nconst Stash: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    let [stashSelectedIds, setStashSelectedIds] = React.useState([] as string[]);\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState([] as string[]);\r\n\r\n    let [stashItems, setStashItems] = React.useState(null as Item[] | null);\r\n    let [inventoryItems, setInventoryItems] = React.useState(null as Item[] | null);\r\n\r\n    const maxItems = 8;\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const stashItemIds = partyService.getStash();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newStashItems = itemService.getItems(stashItemIds);\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setStashItems(newStashItems);\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (stashItems === null && inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n    });\r\n\r\n    const stashSelectionChanged = (ids: string[]) => setStashSelectedIds(ids);\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);;\r\n\r\n    const isStashSelected = (): boolean => stashSelectedIds.length > 0; \r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n\r\n    const willStashBeTooBig = (): boolean => (stashItems ? stashItems.length + inventorySelectedIds.length > maxItems : false);\r\n    const willInventoryBeTooBig = (): boolean => (inventoryItems ? inventoryItems.length + stashSelectedIds.length > maxItems : false);\r\n\r\n    const takeItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isStashSelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < stashSelectedIds.length; i++) {\r\n            service.removeStashItem(stashSelectedIds[i]);\r\n            service.addInventoryItem(stashSelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setStashSelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n\r\n        // TODO: How to trigger a reload?\r\n    }\r\n\r\n    const putItem = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        const service = new MockPartyService();\r\n        for (let i = 0; i < inventorySelectedIds.length; i++) {\r\n            service.removeInventoryItem(inventorySelectedIds[i]);\r\n            service.addStashItem(inventorySelectedIds[i]);\r\n        }\r\n\r\n        // Force a reload of items\r\n        setInventorySelectedIds([]);\r\n        setStashItems(null);\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    if (!stashItems || !inventoryItems)\r\n        return null;\r\n\r\n    const stashToolTip = () => {\r\n        if (willInventoryBeTooBig())\r\n            return \"Too many items in inventory\";\r\n\r\n        return isStashSelected() ? \"Take Item from the Stash\" : \"Please select a stash item\";\r\n    }\r\n\r\n    const inventoryToolTip = () => {\r\n        if (willInventoryBeTooBig()) return \"Too many items in stash\";\r\n\r\n        return isInventorySelected() ? \"Put Item in the Stash\" : \"Please select an inventory item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <img src=\"./images/stash.png\" alt=\"stash\" className={classes.stashImg} />\r\n                <InventorySelector items={stashItems} multiSelect={true} onSelectionChanged={stashSelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={stashToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={takeItem}\r\n                            disabled={willInventoryBeTooBig() || !isStashSelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowDownwardIcon />}\r\n                        >\r\n                            Take\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={putItem}\r\n                            disabled={willStashBeTooBig() || !isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Put\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n            <span>\r\n                <img src=\"./images/inventory.png\" alt=\"inventory\" className={classes.inventoryImg} />\r\n                <InventorySelector items={inventoryItems} multiSelect={true} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Stash;\r\n","import React from \"react\";\r\n\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport MockEncounterService from \"../services/MockStoryEncounterService\";\r\nimport { Button, DialogActions, DialogContent } from \"@material-ui/core\";\r\nimport InkStoryChoice from \"../models/InkStoryChoice\";\r\nimport PartySelection from \"./PartySelection\";\r\nimport HeroSelector from \"./HeroSelector\";\r\nimport HeroDismiss from \"./HeroDismiss\";\r\nimport Stash from \"./Stash\";\r\n\r\nconst useStyles = makeStyles({\r\n    dialog: {\r\n        // backgroundImage: \"url(images/scroll.png)\"\r\n        userSelect: \"none\",\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        opacity: 0.1,\r\n        right: \"20px\",\r\n    },\r\n    content: {\r\n        minWidth: \"520px\",\r\n        minHeight: \"460px\",\r\n        padding: \"40px\",\r\n        fontFamily: \"Martel\",\r\n    },\r\n    actions: {\r\n        padding: \"30px\",\r\n        //paddingBottom: \"100px\",\r\n        //paddingRight: \"80px\",\r\n    },\r\n});\r\n\r\ntype EncounterDialogProps = {\r\n    onClose: (moveTo?: string) => void;\r\n    encounterId: string | null;\r\n};\r\n\r\nconst EncounterDialog: React.FunctionComponent<EncounterDialogProps> = (props: EncounterDialogProps) => {\r\n    const { onClose, encounterId } = props;\r\n\r\n    const [encounterService] = React.useState(new MockEncounterService());\r\n    let [paragraph, setParagraph] = React.useState(\"\");\r\n    let [title, setTitle] = React.useState(\"\");\r\n    let [choices, setChoices] = React.useState([] as InkStoryChoice[]);\r\n    let [storyStarted, setStoryStarted] = React.useState(false);\r\n\r\n    const open: boolean = encounterId !== null;\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n        setStoryStarted(false);\r\n        onClose();\r\n    };\r\n\r\n    const handleCloseWithValue = (moveTo: string) => {\r\n        setStoryStarted(false);\r\n        onClose(moveTo);\r\n    };\r\n\r\n    const handleChoice = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const choiceId = Number.parseInt(ev.currentTarget.id);\r\n\r\n        // Tell the story where to go next\r\n        const encounter = encounterService.chooseChoice(choiceId);\r\n\r\n        if (!encounter.isFinished) {\r\n            console.log(`Selected ${choiceId} for ${encounter.id}`);\r\n\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            // Finish the story\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    const handleContinue = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const encounter = encounterService.continue();\r\n\r\n        if (!encounter.isFinished) {\r\n            setParagraph(encounter.paragraphText);\r\n            setChoices(encounter.choices);\r\n        } else {\r\n            // Finished -> Check variables\r\n            if (encounter.finishData) {\r\n                const moveTo = encounter.finishData.moveTo;\r\n                if (moveTo) {\r\n                    handleCloseWithValue(moveTo);\r\n                    return;\r\n                }\r\n            }\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of encounter data\r\n        const startEncounter = () => {\r\n            if (!encounterId) return;\r\n\r\n            console.log(`Loading encounter ${encounterId}`);\r\n\r\n            setStoryStarted(true);\r\n\r\n            const encounter = encounterService.startEncounter(encounterId);\r\n            if (encounter.isFinished) {\r\n                console.error(`No encounter data for ${encounterId}`);\r\n                return;\r\n            }\r\n            console.log(`Started ${encounter.id} encounter`);\r\n            setParagraph(encounter.paragraphText);\r\n            setTitle(encounter.title);\r\n            setChoices(encounter.choices);\r\n        };\r\n\r\n        // console.log(`useEffect2 ${encounterId} open=${open} storyStarted=${storyStarted}`);\r\n\r\n        if (open && !storyStarted) {\r\n            startEncounter();\r\n        }\r\n    }, [encounterId]);\r\n\r\n    const renderChoices = (encChoices: InkStoryChoice[]) => {\r\n        if (encChoices.length === 0) {\r\n            return <Button onClick={handleContinue}>Continue</Button>;\r\n        }\r\n\r\n        return encChoices.map((c: InkStoryChoice) => (\r\n            <Button id={c.index.toString()} key={c.index} onClick={handleChoice}>\r\n                {c.text}\r\n            </Button>\r\n        ));\r\n    };\r\n\r\n    const renderParagraph = (text: string) => {\r\n\r\n        let paragraphText = text;\r\n\r\n        const isHeroSwap = text.indexOf(\"[HeroSwap]\") >= 0;\r\n        if (isHeroSwap) {\r\n            paragraphText = paragraphText.replace(\"[HeroSwap]\", \"\");\r\n        }\r\n        const isHeroSelect = text.indexOf(\"[HeroSelect]\") >= 0;\r\n        if (isHeroSelect) {\r\n            paragraphText = paragraphText.replace(\"[HeroSelect]\", \"\");\r\n        }\r\n        const isHeroDismiss = text.indexOf(\"[HeroDismiss]\") >= 0;\r\n        if (isHeroDismiss) {\r\n            paragraphText = paragraphText.replace(\"[HeroDismiss]\", \"\");\r\n        }\r\n        const isStash = text.indexOf(\"[Stash]\") >= 0;\r\n        if (isStash) {\r\n            paragraphText = paragraphText.replace(\"[Stash]\", \"\");\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <p>{paragraphText}</p>\r\n                {isHeroSwap ? <PartySelection /> : null}\r\n                {isHeroSelect ? <HeroSelector /> : null}\r\n                {isHeroDismiss ? <HeroDismiss /> : null}\r\n                {isStash ? <Stash /> : null}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        // className={classes.dialog}\r\n        <Dialog\r\n            className={classes.dialog}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-dialog-title\"\r\n            open={open}\r\n            //disableBackdropClick={true}\r\n        >\r\n            {/* <DialogTitle id=\"simple-dialog-title\">Set backup account</DialogTitle> */}\r\n            <DialogContent className={classes.content}>\r\n                <img className={classes.background} alt=\"\" src=\"./images/chest.jpg\" />\r\n                <h1>{title}</h1>\r\n                {renderParagraph(paragraph)}\r\n            </DialogContent>\r\n            <DialogActions className={classes.actions}>{renderChoices(choices)}</DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EncounterDialog;\r\n","import Leaflet from \"leaflet\";\r\n\r\nimport MapData from \"../models/MapData\";\r\nimport MapVertex from \"../models/MapVertex\";\r\nimport IMapService from \"./IMapService\";\r\n\r\nimport BlackTempleMap from \"./maps/blacktemple.json\";\r\nimport TownMap from \"./maps/town.json\";\r\n\r\nexport default class MockMapService implements IMapService {\r\n    public getMap(id: string): MapData | null {\r\n\r\n        let json: any = null;\r\n\r\n        switch (id) {\r\n            case \"black_temple\":\r\n                json = BlackTempleMap;\r\n                break;\r\n            case \"town\":\r\n                json = TownMap;\r\n                break;\r\n            default:\r\n                json = BlackTempleMap;\r\n                break;\r\n        }\r\n        \r\n        const map = {\r\n            id: json.id,\r\n            imageUrl: json.imageUrl,\r\n            vertices: json.vertices.map(\r\n                (v: any) => {\r\n                    return {\r\n                        id: v.id,\r\n                        position: Leaflet.latLng(v.position[0], v.position[1]),\r\n                        clickRadius: v.clickRadius,\r\n                        encounterId: v.encounterId,\r\n                        marker: v.marker,\r\n                        exitId: v.exitId,\r\n                    } as MapVertex;\r\n                }\r\n            ),\r\n            edges: json.edges,\r\n        } as MapData;\r\n\r\n        return map;\r\n    }\r\n}\r\n","import { LatLng } from \"leaflet\";\r\nimport { Graph, Node } from \"ngraph.graph\";\r\nimport CustomMarker from \"./CustomMarker\";\r\n\r\n// Calculates the distance between two points\r\nexport const distance = (x: LatLng, y: LatLng): number => {\r\n    const latDist = x.lat - y.lat;\r\n    const lngDist = x.lng - y.lng;\r\n    return Math.sqrt(latDist * latDist + lngDist * lngDist);\r\n};\r\n\r\nexport class MapGraph {\r\n    constructor(graph: Graph<NodeData, VertexData>) {\r\n        this._graph = graph;\r\n    }\r\n\r\n    private _graph: Graph<NodeData, VertexData>;\r\n\r\n    public getNGraph = (): Graph<NodeData, VertexData> => this._graph;\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    public getVertices = (): Node<NodeData>[] => {\r\n        var vertices: Node<NodeData>[] = [];\r\n        this._graph.forEachNode((n: Node<NodeData>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    public findVertex = (nodeId: string): Node<NodeData> | undefined => this._graph?.getNode(nodeId);\r\n\r\n    // Get the vertex nearest to the clicked point\r\n    public findNearestVertex = (pos: LatLng): Node<NodeData> | null => {\r\n        const vertices = this.getVertices();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            const vertex = vertices[i];\r\n\r\n            const dist = distance(pos, vertex.data.position);\r\n            const isInRadius = dist < vertex.data.clickRadius;\r\n\r\n            if (isInRadius) {\r\n                console.log(\"match\");\r\n                return vertex;\r\n            }\r\n            // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.data.clickRadius}) = ${isInRadius}`);\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n\r\nexport interface NodeData {\r\n    position: LatLng;\r\n    clickRadius: number;\r\n    encounterId?: string;\r\n    exitId?: string;\r\n    marker?: CustomMarker;\r\n}\r\n\r\nexport interface VertexData {\r\n    weight: number;\r\n}","import createGraph from \"ngraph.graph\";\r\nimport MapData from \"../models/MapData\";\r\nimport { MapGraph, NodeData, VertexData } from \"../models/MapGraph\";\r\n\r\n/*\r\n  Convert the Map data DTO to an ngaph.graph object for pathfinding\r\n*/\r\nexport default class GraphBuilder {\r\n    public static Build(mapData: MapData): MapGraph {\r\n        let outGraph = createGraph<NodeData, VertexData>();\r\n\r\n        for (let i = 0; i < mapData.vertices.length; i++) {\r\n            const item = mapData.vertices[i];\r\n            outGraph.addNode(item.id, {\r\n                position: item.position,\r\n                clickRadius: item.clickRadius,\r\n                encounterId: item.encounterId,\r\n                exitId: item.exitId,\r\n                marker: item.marker,\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < mapData.edges.length; i++) {\r\n            const item = mapData.edges[i];\r\n            outGraph.addLink(item.to, item.from, { weight: item.weight });\r\n        }\r\n\r\n        return new MapGraph(outGraph);\r\n    }\r\n}\r\n","\r\nexport default class Queue<T> {\r\n  _store: T[] = [];\r\n  push(val: T) {\r\n    this._store.push(val);\r\n  }\r\n  pop(): T | undefined {\r\n    return this._store.shift();\r\n  }\r\n  clear() {\r\n      this._store = [];\r\n  }\r\n}\r\n","import GameState from \"../models/GameState\";\r\n\r\nexport default class MockGameStateService {\r\n\r\n    private static _state: GameState = {\r\n        currentMapId: \"town\",\r\n        currentVertextId: \"hut-road\", // \"scupperden-road\",\r\n    };\r\n\r\n    public getState(): GameState {\r\n        const stateJson = null; //localStorage.getItem(\"state\");\r\n        const state: GameState = stateJson ? JSON.parse(stateJson) : MockGameStateService._state;\r\n\r\n        return state;\r\n    }\r\n\r\n    public setState(state: GameState) {\r\n        MockGameStateService._state = state;\r\n        // localStorage.setItem(\"state\", JSON.stringify(state));\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport Leaflet from \"leaflet\";\r\nimport { Marker, Tooltip } from \"react-leaflet\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\n\r\nimport { Node } from \"ngraph.graph\";\r\nimport { NodeData } from \"../models/MapGraph\";\r\n\r\nconst useStyles = makeStyles({\r\n    tooltip: {\r\n        padding: \"3px 8px 3px 3px\",\r\n        height: \"32px\",\r\n        display: \"inline-flex\",\r\n        fontSize: \"0.8125rem\",\r\n        // //transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        alignItems: \"center\",\r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\"',\r\n        whiteSpace: \"nowrap\",\r\n        borderRadius: \"10px\",\r\n        verticalAlign: \"middle\",\r\n        justifyContent: \"center\",\r\n    },\r\n    icon: {\r\n        color: \"#616161\",\r\n        marginLeft: \"3px\",\r\n        marginRight: \"5px\",\r\n        width: \"1em\",\r\n        height: \"1em\",\r\n        display: \"inline-block\",\r\n        fontSize: \"1.5rem\",\r\n        //transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n        flexShrink: 0,\r\n        userSelect: \"none\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n});\r\n\r\ntype VertexMarkerProps = {\r\n    vertex: Node<NodeData>;\r\n    onHover: (id: string) => void;\r\n    onHoverEnd: (id: string) => void;\r\n    onClick: (id: string) => void;\r\n};\r\n\r\nconst VertexMarker: React.FunctionComponent<VertexMarkerProps> = (props: VertexMarkerProps) => {\r\n\r\n    const { vertex, onHover, onHoverEnd, onClick } = props;\r\n    const vertextId = vertex.id.toString();\r\n\r\n    const classes = useStyles();\r\n\r\n    const iconConversionX = 1.4;\r\n    const iconConversionY = 1.5;\r\n\r\n    const renderTooltipIcon = () => {\r\n        if (vertex.data.exitId) \r\n            return <ExitToAppIcon className={classes.icon} />;\r\n\r\n        // Render icons for special encounters\r\n        switch(vertex.data.encounterId) {\r\n            case \"home\":\r\n                return <HomeIcon className={classes.icon} />;\r\n            default:\r\n                return <GpsFixedIcon className={classes.icon} />;\r\n        }\r\n    }\r\n\r\n    const icon = new Leaflet.Icon({\r\n        iconUrl: vertex.data.marker ? `/images/markers/${vertex.data.marker.image}.png` : \"images/blank.svg\",\r\n        iconSize: vertex.data.marker\r\n            ? [vertex.data.marker.dimensions[0] * iconConversionX, vertex.data.marker.dimensions[1] * iconConversionY]\r\n            : [50, 50],\r\n        iconAnchor: vertex.data.marker\r\n            ? [vertex.data.marker.anchor[0] * iconConversionX, vertex.data.marker.anchor[1] * iconConversionY]\r\n            : [25, 25],\r\n        className: vertex.data.marker ? \"vertex-icon\" : vertex.data.exitId ? \"exit-icon\" : \"bullseye-icon\",\r\n    });\r\n\r\n    // Note: Leaflet tooltips breaks the onclick detection on the map object\r\n    return (\r\n        <Marker\r\n            key={vertextId}\r\n            position={vertex.data.position}\r\n            icon={icon}\r\n            onclick={() => onClick(vertextId)}\r\n            onmouseover={() => onHover(vertextId)}\r\n            onmouseout={() => onHoverEnd(vertextId)}\r\n        >\r\n            <Tooltip className={classes.tooltip}>\r\n                {renderTooltipIcon()}\r\n                <span>{vertex.id.toString()}</span>\r\n            </Tooltip>\r\n        </Marker>\r\n    );\r\n};\r\n\r\nexport default VertexMarker;\r\n","import { Marker as LeafletMarker, LatLngExpression } from 'leaflet';\r\n\r\nif (typeof window.exports != 'object') {\r\n    //cdn usage on browsers without \"exports\" variable\r\n    window.exports = {}\r\n}\r\n\r\n// constructor type \r\ntype ConstMarker = new (...args: any[]) => LeafletMarker;\r\n// needed leaflet type\r\ntype LeafletType = {\r\n    Marker: ConstMarker,\r\n    Util: any\r\n}\r\ndeclare global {\r\n    interface Window {\r\n        Drift_Marker: any,\r\n        exports: Object,\r\n        L: LeafletType\r\n    }\r\n}\r\n\r\nlet Leaflet_module = window.L ? window.L : require(\"leaflet\") as LeafletType\r\n\r\ntype slideOptions = {\r\n    duration: number\r\n    keepAtCenter?: boolean\r\n}\r\n\r\nclass Drift_Marker extends Leaflet_module.Marker {\r\n\r\n    private _slideToUntil = 0\r\n    private _slideToDuration = 1000\r\n    private _slideToLatLng: LatLngExpression = [0, 0]\r\n    private _slideFromLatLng: LatLngExpression = [0, 0]\r\n    private _slideKeepAtCenter = false\r\n    private _slideDraggingWasAllowed = false\r\n    private _slideFrame = 0\r\n\r\n    addInitHook = () => {\r\n        this.on('move', this.slideCancel, this);\r\n    }\r\n\r\n    // 🍂method slideTo(latlng: LatLng, options: Slide Options): this\r\n    // Moves this marker until `latlng`, like `setLatLng()`, but with a smooth\r\n    // sliding animation. Fires `movestart` and `moveend` events.\r\n    slideTo = (latlng: LatLngExpression, options: slideOptions) => {\r\n        if (!this._map) return;\r\n\r\n        this._slideToDuration = options.duration;\r\n        this._slideToUntil = performance.now() + options.duration;\r\n        this._slideFromLatLng = this.getLatLng();\r\n        this._slideToLatLng = latlng;\r\n        this._slideKeepAtCenter = !!options.keepAtCenter;\r\n        this._slideDraggingWasAllowed =\r\n            this._slideDraggingWasAllowed !== undefined ?\r\n                this._slideDraggingWasAllowed :\r\n                this._map.dragging.enabled();\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.dragging.disable();\r\n            this._map.doubleClickZoom.disable();\r\n            this._map.options.touchZoom = 'center';\r\n            this._map.options.scrollWheelZoom = 'center';\r\n        }\r\n\r\n        this.fire('movestart');\r\n        this._slideTo();\r\n\r\n        return this;\r\n    }\r\n\r\n    // 🍂method slideCancel(): this\r\n    // Cancels the sliding animation from `slideTo`, if applicable.\r\n    slideCancel() {\r\n        Leaflet_module.Util.cancelAnimFrame(this._slideFrame);\r\n    }\r\n\r\n    private _slideTo = () => {\r\n        if (!this._map) return;\r\n\r\n        var remaining = this._slideToUntil - performance.now();\r\n\r\n        if (remaining < 0) {\r\n            this.setLatLng(this._slideToLatLng);\r\n            this.fire('moveend');\r\n            if (this._slideDraggingWasAllowed) {\r\n                this._map.dragging.enable();\r\n                this._map.doubleClickZoom.enable();\r\n                this._map.options.touchZoom = true;\r\n                this._map.options.scrollWheelZoom = true;\r\n            }\r\n            this._slideDraggingWasAllowed = false;\r\n            return this;\r\n        }\r\n\r\n        var startPoint = this._map.latLngToContainerPoint(this._slideFromLatLng);\r\n        var endPoint = this._map.latLngToContainerPoint(this._slideToLatLng);\r\n        var percentDone = (this._slideToDuration - remaining) / this._slideToDuration;\r\n\r\n        var currPoint = endPoint.multiplyBy(percentDone).add(\r\n            startPoint.multiplyBy(1 - percentDone)\r\n        );\r\n        var currLatLng = this._map.containerPointToLatLng(currPoint)\r\n        this.setLatLng(currLatLng);\r\n\r\n        if (this._slideKeepAtCenter) {\r\n            this._map.panTo(currLatLng, { animate: false })\r\n        }\r\n\r\n        this._slideFrame = Leaflet_module.Util.requestAnimFrame(this._slideTo, this);\r\n    }\r\n\r\n}\r\n\r\nwindow.Drift_Marker = Drift_Marker\r\n\r\nexport default Drift_Marker;\r\n","import React from 'react'\r\nimport Drift_Marker from \"./Drift_Marker\" \r\nimport { Icon, DivIcon, LatLngExpression } from 'leaflet'\r\nimport { LeafletProvider, MapLayer, MapLayerProps, withLeaflet } from 'react-leaflet';\r\n\r\ntype LeafletElement = Drift_Marker\r\n\r\ntype DriftMarkerProps = {\r\n  icon?: Icon | DivIcon,\r\n  draggable?: boolean,\r\n  opacity?: number,\r\n  position: LatLngExpression,\r\n  duration: number,\r\n  keepAtCenter?: boolean,\r\n  zIndexOffset?: number,\r\n  onMoveEnd?: (name: DriftMarker) => void;\r\n} & MapLayerProps\r\n\r\nclass DriftMarker extends MapLayer<DriftMarkerProps, LeafletElement> {\r\n\r\n  private onMoveEndCallback?: (name: DriftMarker) => void;\r\n\r\n  createLeafletElement(props: DriftMarkerProps): LeafletElement {\r\n    const el = new Drift_Marker(props.position, this.getOptions(props));\r\n    this.onMoveEndCallback = props.onMoveEnd;\r\n    el.on('moveend', this.moveEnd);\r\n    this.contextValue = { ...props.leaflet, popupContainer: el }\r\n    return el\r\n  }\r\n\r\n  moveEnd() {\r\n    if (this.onMoveEndCallback) {\r\n      this.onMoveEndCallback(this);\r\n    }\r\n  }\r\n\r\n  updateLeafletElement(fromProps: DriftMarkerProps, toProps: DriftMarkerProps) {\r\n    if (toProps.position !== fromProps.position && typeof toProps.duration == 'number') {\r\n      this.leafletElement.slideTo(toProps.position, {\r\n        duration: toProps.duration,\r\n        keepAtCenter: toProps.keepAtCenter\r\n      })\r\n    }\r\n    if (toProps.icon !== fromProps.icon && toProps.icon) {\r\n      this.leafletElement.setIcon(toProps.icon)\r\n    }\r\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset && toProps.zIndexOffset !== undefined) {\r\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset)\r\n    }\r\n    if (toProps.opacity !== fromProps.opacity && toProps.opacity !== undefined) {\r\n      this.leafletElement.setOpacity(toProps.opacity)\r\n    }\r\n    if (toProps.draggable !== fromProps.draggable && this.leafletElement.dragging !== undefined) {\r\n      if (toProps.draggable === true) {\r\n        this.leafletElement.dragging.enable()\r\n      } else {\r\n        this.leafletElement.dragging.disable()\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props\r\n\r\n    return children == null || this.contextValue == null ? null : (\r\n      <LeafletProvider value={this.contextValue}>\r\n        {children}\r\n      </LeafletProvider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withLeaflet<DriftMarkerProps>(DriftMarker);\r\n\r\nexport {};\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Icon, LatLng } from \"leaflet\";\r\n\r\nimport DriftMarker from \"./DriftMarker\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        borderRadius: \"50%\",\r\n        border: \"6px solid gold\",\r\n    },\r\n});\r\n\r\n/*\r\n* Marker to represent a hero\r\n*/\r\ntype HeroMarkerProps = {\r\n    name: string;\r\n    position: LatLng;\r\n    onMoveEnd: (name: string) => void;\r\n};\r\n\r\nconst HeroMarker: React.FunctionComponent<HeroMarkerProps> = (props: HeroMarkerProps) => {\r\n\r\n    const { name, position, onMoveEnd } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    var markerIcon = new Icon({\r\n        iconUrl: \"images/knight.jpg\",\r\n        iconSize: [50, 50],\r\n        iconAnchor: [25, 40],\r\n        className: classes.icon,\r\n        // popupAnchor: [-3, -76],\r\n        // shadowUrl: 'my-icon-shadow.png',\r\n        // shadowSize: [68, 95],\r\n        // shadowAnchor: [22, 94]\r\n    });\r\n\r\n    return (\r\n        <DriftMarker duration={1000} position={position} keepAtCenter={false} icon={markerIcon} onMoveEnd={(_: any) => onMoveEnd(name)} />\r\n    );\r\n};\r\n\r\nexport default HeroMarker;\r\n","import React from 'react';\r\n\r\n// UI Elements\r\nimport { CRS, latLng, LatLng, LatLngBounds } from \"leaflet\";\r\nimport { ImageOverlay, Map, Polyline } from 'react-leaflet';\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\n\r\n// Services\r\nimport MockMapService from '../services/MockMapService';\r\n\r\n// Pathfinding imports\r\nimport npath from 'ngraph.path';\r\nimport GraphBuilder  from '../services/GraphBuilder';\r\nimport Queue from '../models/Queue';\r\nimport { Node } from \"ngraph.graph\";\r\nimport MockGameStateService from '../services/MockGameStateService';\r\nimport GameState from '../models/GameState';\r\nimport { MapGraph, NodeData } from '../models/MapGraph';\r\nimport KeyMaps from '../components/KeyMaps';\r\nimport VertexMarker from '../components/VertexMarker';\r\nimport HeroMarker from '../components/HeroMarker';\r\n\r\ntype OverheadMapProps = {\r\n    // None\r\n};\r\n\r\nconst OverheadMap: React.FunctionComponent<OverheadMapProps> = () => {\r\n    let [graph, setGraph] = React.useState(null as MapGraph | null); // The map graph data\r\n    let [pos, setPos] = React.useState(null as LatLng | null); // The current (target) position of the player marker\r\n    let [path, setPath] = React.useState([] as LatLng[]); // The path to the hovered vertex\r\n    let [vertexQueue] = React.useState(new Queue<Node<NodeData>>()); // A queue of points to visit during path-finding\r\n    let [encounterId, setEncounterId] = React.useState(null as string | null);\r\n    let [mapUrl, setMapUrl] = React.useState(null as string | null);\r\n    let [userState, setUserState] = React.useState(null as GameState | null);\r\n    let [initialNode, setInitialNode] = React.useState(true); // Is it the first node arrived on a new map (So that we don't bounce between maps)\r\n\r\n    const setCurrentVertex = (vertexId: string) => {\r\n        if (!userState) return;\r\n\r\n        userState.currentVertextId = vertexId;\r\n        setUserState(userState);\r\n    };\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (name: string) => {\r\n        console.log(\"Move ended : \" + name);\r\n\r\n        const targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data.position);\r\n\r\n            // Update user state\r\n            setCurrentVertex(targetVertex.id.toString());\r\n\r\n            // Activate exit if there is one, move to new map\r\n            if (targetVertex.data.exitId && !initialNode) {\r\n                console.log(`Set exit ${targetVertex.data.exitId}`);\r\n                const splits = targetVertex.data.exitId.split(\",\");\r\n                if (splits.length === 2) {\r\n                    const newState = {\r\n                        currentMapId: splits[0],\r\n                        currentVertextId: splits[1],\r\n                    } as GameState;\r\n                    const stateService = new MockGameStateService();\r\n\r\n                    setInitialNode(true);\r\n                    setPos(null);\r\n                    setPath([]);\r\n                    stateService.setState(newState);\r\n                    setUserState(newState);\r\n                    setGraph(null);\r\n                    setMapUrl(null);\r\n                }\r\n            }\r\n\r\n            // Activate encounter if there is one\r\n            if (targetVertex.data.encounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetVertex.data.encounterId);\r\n            }\r\n\r\n            setInitialNode(false);\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        if (!graph || !userState) return; // Map not loaded\r\n\r\n        console.log(`clicked at: ${Math.round(e.latlng.lat)},${Math.round(e.latlng.lng)}`);\r\n\r\n        // Move to the nearest vertex to the clicked point\r\n        //const match = graph.findNearestVertex(e.latlng);\r\n    };\r\n\r\n    const onClick = (vertexId: string) => {\r\n        if (!graph || !userState) return; // Map not loaded\r\n\r\n        console.log(`Clicked on vertex ${vertexId}`);\r\n\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(userState?.currentVertextId, vertexId);\r\n\r\n        if (path.length <= 1) {\r\n            console.log(`No route found to ${vertexId}`);\r\n            return;\r\n        }\r\n\r\n        path.pop(); // Remove the current/start node\r\n\r\n        vertexQueue.clear();\r\n        let nextVertex = path.pop();\r\n        while (nextVertex) {\r\n            vertexQueue.push(nextVertex);\r\n            // Stop if a vertex with an an encounter is hit\r\n            if (nextVertex.data.encounterId) {\r\n                break;\r\n            }\r\n            nextVertex = path.pop();\r\n        }\r\n\r\n        handleMoveEnd(\"party\"); // Trigger the move to the next vertex\r\n    };\r\n\r\n    const onHover = (vertexId: string) => {\r\n        if (!graph || !userState) return; // Map not loaded\r\n\r\n        console.log(`Hover: ${vertexId}`);\r\n\r\n        // Show the path to the marker?\r\n        var pathFinder = npath.aStar(graph.getNGraph());\r\n        let path = pathFinder.find(userState?.currentVertextId, vertexId);\r\n\r\n        let pathVertexes = path.map((p) => p.data.position);\r\n        setPath(pathVertexes);\r\n    };\r\n\r\n    // Move to a vertex\r\n    const moveToVertexId = (mapGraph: MapGraph, vertexId: string) => {\r\n        if (!mapGraph) return;\r\n\r\n        const match = mapGraph.findVertex(vertexId);\r\n        if (match) {\r\n            vertexQueue.push(match);\r\n            handleMoveEnd(\"party\");\r\n        } else {\r\n            console.error(`Can't find vertex ${vertexId}`);\r\n        }\r\n    };\r\n\r\n    // On encounter dialog closed\r\n    const handleEncounterClose = (moveTo: string | undefined) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n\r\n        if (moveTo && graph) {\r\n            moveToVertexId(graph, moveTo);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of map data\r\n        const loadMap = () => {\r\n            const stateService = new MockGameStateService();\r\n            const newUserState = stateService.getState();\r\n            if (!newUserState) {\r\n                console.error(`No user state data`);\r\n                return;\r\n            }\r\n\r\n            setUserState(newUserState);\r\n\r\n            const service = new MockMapService();\r\n            const data = service.getMap(newUserState.currentMapId);\r\n            if (!data) {\r\n                console.error(`No map data`);\r\n                return;\r\n            }\r\n\r\n            setMapUrl(data.imageUrl);\r\n\r\n            console.log(`Found ${data?.vertices.length} vertices`);\r\n            const mapGraph = GraphBuilder.Build(data);\r\n\r\n            const initialVertex = mapGraph.findVertex(newUserState.currentVertextId);\r\n            if (initialVertex) {\r\n                setPos(initialVertex?.data.position);\r\n            }\r\n\r\n            setGraph(mapGraph);\r\n\r\n            // Mpve to the initial node\r\n            moveToVertexId(mapGraph, newUserState.currentVertextId);\r\n        };\r\n\r\n        if (graph == null) {\r\n            loadMap();\r\n        }\r\n    });\r\n\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([3200, 4000]));\r\n    // const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    if (!userState || !mapUrl || !pos || !graph) return null;\r\n\r\n    // maxBounds={bounds}\r\n    return (\r\n        <KeyMaps backUrl=\"/menu\">\r\n            <Map\r\n                crs={CRS.Simple}\r\n                zoom={-1}\r\n                minZoom={-1}\r\n                maxZoom={-1}\r\n                bounds={bounds}\r\n                maxBounds={bounds}\r\n                scrollWheelZoom={false}\r\n                onClick={handleClick}\r\n                zoomControl={false}\r\n            >\r\n                <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n                {/* <TileLayer url=\"tiles/{z}/{x}/{y}.png\" bounds={bounds} /> */}\r\n                <ImageOverlay url={mapUrl} bounds={bounds} />\r\n                <HeroMarker name=\"party\" position={pos} onMoveEnd={handleMoveEnd} />\r\n                {graph.getVertices().map((v) => (\r\n                    <VertexMarker vertex={v} onHover={onHover} onHoverEnd={() => setPath([])} onClick={onClick} />\r\n                ))}\r\n                <Polyline positions={path} color=\"#5E4E00\" dashArray=\"5,10,3,7,11,9\" weight={4} dashOffset=\"0\" />\r\n            </Map>\r\n        </KeyMaps>\r\n    );\r\n};\r\n\r\nexport default OverheadMap;\r\n","import WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nexport default class MockWorldService {\r\n    getWorld(): WorldStatistics {\r\n        return {\r\n            traits: [\r\n                \"Ruled by a militarstic uncaring God-King Sorcerer\",\r\n                \"A Democractic council controls the Docks\",\r\n                \"A powerful midget controls the theives guild\",\r\n            ],\r\n        };\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button, makeStyles, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\n\r\nimport InventorySelector from \"./InventorySelector\";\r\nimport Item from \"../models/Item\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemsButton: {\r\n        //margin: \"auto 10px\",\r\n        margin: \"0 10px\",\r\n    },\r\n    itemsButtonDiv: {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        paddingBottom: \"10px\",\r\n    },\r\n});\r\n\r\ntype PartyInventoryProps = {\r\n    items: Item[];\r\n    onEquipItem: (itemId: string) => void;\r\n};\r\n\r\nconst PartyInventory: React.FunctionComponent<PartyInventoryProps> = (props: PartyInventoryProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { items, onEquipItem } = props;\r\n\r\n    let [inventorySelectedIds, setInventorySelectedIds] = React.useState([] as string[]);\r\n\r\n    const inventorySelectionChanged = (ids: string[]) => setInventorySelectedIds(ids);\r\n\r\n    const isInventorySelected = (): boolean => inventorySelectedIds.length > 0;\r\n    const isItemEquipable = (): boolean => {\r\n        if (!isInventorySelected) return false;\r\n\r\n        const match = items.find((item) => item.id === inventorySelectedIds[0]);\r\n        if (!match) return false; // Error?\r\n\r\n        return match.itemType >= 10;\r\n    };\r\n\r\n    const equipItem = () => {\r\n        if (!isInventorySelected()) return;\r\n\r\n        if (onEquipItem) onEquipItem(inventorySelectedIds[0]);\r\n    };\r\n\r\n    const inventoryToolTip = () => {\r\n        if (!isInventorySelected()) return \"Please select an inventory item\";\r\n\r\n        return isItemEquipable() ? \"Equip the item\" : \"Please select an equipable item\";\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span>\r\n                <InventorySelector items={items} onSelectionChanged={inventorySelectionChanged} />\r\n            </span>\r\n            <div className={classes.itemsButtonDiv}>\r\n                <Tooltip title={inventoryToolTip()}>\r\n                    <span>\r\n                        <Button\r\n                            className={classes.itemsButton}\r\n                            onClick={equipItem}\r\n                            disabled={!isInventorySelected()}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<ArrowUpwardIcon />}\r\n                        >\r\n                            Equip\r\n                        </Button>\r\n                    </span>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PartyInventory;\r\n","import React from \"react\";\r\nimport { makeStyles, Tooltip } from \"@material-ui/core\";\r\nimport Item, { ItemType } from \"../models/Item\";\r\nimport ItemTooltipContent from \"./ItemTooltipContent\";\r\n\r\nconst useStyles = makeStyles({\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    portraitItem: {\r\n        position: \"absolute\",\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"6px\",\r\n        borderColor: \"lightslategrey\",\r\n    },\r\n    portraitItemHelm: {\r\n        left: \"7vw\",\r\n        top: \"-1vh\",\r\n    },\r\n    portraitItemBreastplate: {\r\n        left: \"7vw\",\r\n        top: \"6.5vh\",\r\n    },\r\n    portraitItemGloves: {\r\n        left: \"7vw\",\r\n        top: \"14vh\",\r\n    },\r\n    portraitItemLegs: {\r\n        left: \"7vw\",\r\n        top: \"21.5vh\",\r\n    },\r\n    portraitItemWeapon: {\r\n        left: \"3.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitItemShield: {\r\n        left: \"10.5vw\",\r\n        top: \"28vh\",\r\n    },\r\n    portraitNoItemImg: {\r\n        filter: \"brightness(35%)\",\r\n    },\r\n    portraitItemImg: {\r\n        width: \"5.5vh\",\r\n        height: \"5.5vh\",\r\n        backgroundColor: \"lightblue\",\r\n        borderRadius: \"50%\",\r\n    },\r\n});\r\n\r\ntype EquippedItemsProps = {\r\n    equippedItems: Item[];\r\n};\r\n\r\n/*\r\n* Hero Profile Screen : Display the items that the hero has equipped\r\n*/\r\nconst EquippedItems: React.FunctionComponent<EquippedItemsProps> = (props: EquippedItemsProps): JSX.Element => {\r\n    const classes = useStyles();\r\n\r\n    const { equippedItems } = props;\r\n\r\n    const headItem = equippedItems.find((item) => item.itemType === ItemType.WearableHead);\r\n    const bodyItem = equippedItems.find((item) => item.itemType === ItemType.WearableBody);\r\n    const armsItem = equippedItems.find((item) => item.itemType === ItemType.WearableArms);\r\n    const feetItem = equippedItems.find((item) => item.itemType === ItemType.WearableFeet);\r\n\r\n    return (\r\n        <div className={classes.itemContainer}>\r\n            <Tooltip title={<ItemTooltipContent item={headItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemHelm}`}>\r\n                    {headItem ? (\r\n                        <img src={headItem.imageUrl} className={classes.portraitItemImg} alt=\"helm\" />\r\n                    ) : (\r\n                        <img src=\"images/helm.svg\" className={classes.portraitNoItemImg} alt=\"helm\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={bodyItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemBreastplate}`}>\r\n                    {bodyItem ? (\r\n                        <img src={bodyItem.imageUrl} className={classes.portraitItemImg} alt=\"breastplate\" />\r\n                    ) : (\r\n                        <img src=\"images/breastplate.svg\" className={classes.portraitNoItemImg} alt=\"breastplate\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={feetItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemLegs}`}>\r\n                    {feetItem ? (\r\n                        <img src={feetItem.imageUrl} className={classes.portraitItemImg} alt=\"legs\" />\r\n                    ) : (\r\n                        <img src=\"images/leg.svg\" className={classes.portraitNoItemImg} alt=\"legs\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={<ItemTooltipContent item={armsItem} />} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemGloves}`}>\r\n                    {armsItem ? (\r\n                        <img src={armsItem.imageUrl} className={classes.portraitItemImg} alt=\"gloves\" />\r\n                    ) : (\r\n                        <img src=\"images/glove.svg\" className={classes.portraitNoItemImg} alt=\"gloves\" />\r\n                    )}\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemWeapon}`}>\r\n                    <img src=\"images/sword.svg\" className={classes.portraitNoItemImg} alt=\"weapon\" />\r\n                </div>\r\n            </Tooltip>\r\n            <Tooltip title={\"None\"} arrow>\r\n                <div className={`${classes.portraitItem} ${classes.portraitItemShield}`}>\r\n                    <img src=\"images/shield.svg\" className={classes.portraitNoItemImg} alt=\"shield\" />\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EquippedItems;\r\n","import React from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AttributeList from \"../models/AttributeList\";\r\nimport Attribute from \"../models/Attribute\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        fontFamily: \"Martel\",\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontFamily: \"Martel\",\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        \"&:nth-of-type(odd)\": {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // minWidth: 700,\r\n    },\r\n});\r\n\r\ntype StatisticsBlockProps = {\r\n    statistics: AttributeList\r\n};\r\n\r\nconst StatisticsBlock: React.FunctionComponent<StatisticsBlockProps> = (props: StatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    const createData = (name: string, base: number, modifier: number, total: number) => {\r\n        return { name, base, modifier, total };\r\n    }\r\n\r\n    const attributeTotal = (attribute: Attribute) => attribute.base + attribute.modifier;\r\n\r\n    const rows = [\r\n        createData(\"Strength\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n        createData(\"Dexterity\", statistics.dexterity.base, statistics.dexterity.modifier, attributeTotal(statistics.dexterity)),\r\n        createData(\"Consitution\", statistics.constitution.base, statistics.constitution.modifier, attributeTotal(statistics.constitution)),\r\n        createData(\"Intelligence\", statistics.intelligence.base, statistics.intelligence.modifier, attributeTotal(statistics.intelligence)),\r\n        createData(\"Wisdom\", statistics.wisdom.base, statistics.wisdom.modifier, attributeTotal(statistics.wisdom)),\r\n        createData(\"Charisma\", statistics.charisma.base, statistics.charisma.modifier, attributeTotal(statistics.charisma)),\r\n        createData(\"Luck\", statistics.strength.base, statistics.strength.modifier, attributeTotal(statistics.strength)),\r\n    ];\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell>Attribute</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Base</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Modifier</StyledTableCell>\r\n                        <StyledTableCell align=\"right\">Total</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.base}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.modifier}</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{row.total}</StyledTableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default StatisticsBlock;","import React from \"react\";\r\nimport { Avatar, Grid, List, ListItem, ListItemAvatar, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport SecurityIcon from \"@material-ui/icons/Security\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport LocationSearchingIcon from \"@material-ui/icons/LocationSearching\";\r\n\r\nimport CalculatedStats from \"../models/CalculatedStats\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        //backgroundColor: theme.palette.background.paper,\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype CalculatedStatisticsBlockProps = {\r\n    statistics: CalculatedStats;\r\n};\r\n\r\nconst CalculatedStatisticsBlock: React.FunctionComponent<CalculatedStatisticsBlockProps> = (props: CalculatedStatisticsBlockProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { statistics } = props;\r\n\r\n    return (\r\n        <div className={classes.statisticsBlock}>\r\n            <Grid container>\r\n                <Grid item xs={1} md={1}></Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FavoriteIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Hit Points ${statistics.currentHitPoints} / ${statistics.currentHitPoints}`}\r\n                                secondary={`Hit Die D${statistics.hitDie}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <SecurityIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Armor Class ${statistics.armour}`}\r\n                                secondary={`Spell Resistance ${statistics.spellResistance}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={10} md={5}>\r\n                    <List className={classes.root}>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <FastForwardIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack Speed ${statistics.attackSpeed}`}\r\n                                secondary={`Move Speed ${statistics.moveSpeed}`}\r\n                            />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <LocationSearchingIcon />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={`Attack +${statistics.attack}`}\r\n                                secondary={`Damage D${statistics.damageDie} + ${statistics.damageBonus}`}\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={1} md={1}></Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CalculatedStatisticsBlock;\r\n","import React from \"react\";\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, ListItemText, Grid } from \"@material-ui/core\";\r\n\r\nimport HeroTrait from \"../models/HeroTrait\";\r\n\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AccessibilityNewIcon from \"@material-ui/icons/AccessibilityNew\";\r\nimport AllInboxIcon from \"@material-ui/icons/AllInbox\";\r\n\r\nconst useStyles = makeStyles({\r\n    statisticsBlock: {\r\n        padding: \"40px 0\",\r\n    },\r\n});\r\n\r\ntype TraitListProps = {\r\n    traits: HeroTrait[];\r\n};\r\n\r\nconst TraitList: React.FunctionComponent<TraitListProps> = (props: TraitListProps) => {\r\n    const classes = useStyles();\r\n\r\n    const { traits } = props;\r\n\r\n    const renderTraitIcon = ((t: HeroTrait) => {\r\n        switch (t.type) {\r\n            case 1: // Mental\r\n                return <FaceIcon />;\r\n            case 2: // Mystical\r\n                return <FlashOnIcon />;\r\n            case 3: // Physical\r\n                return <AccessibilityNewIcon />;\r\n            case 4: // Item\r\n                return <AllInboxIcon />;\r\n            default:\r\n                return <AllInboxIcon />;\r\n        }\r\n    });\r\n\r\n\r\n    // TODO: Add behiavor , {t.behaviour}\r\n    const renderTrait = (t: HeroTrait) => (\r\n        <ListItem key={t.id}>\r\n            <ListItemAvatar>\r\n                <Avatar>\r\n                    {renderTraitIcon(t)}\r\n                </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={t.name}\r\n                secondary={t.from}\r\n            />\r\n        </ListItem>\r\n    );\r\n\r\n    return (\r\n        <Grid container className={classes.statisticsBlock}>\r\n            <Grid item xs={2}></Grid>\r\n            <Grid item xs={8}>\r\n                <List>{traits.map((t) => renderTrait(t))}</List>\r\n            </Grid>\r\n            <Grid item xs={2}></Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TraitList;\r\n","import React from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nimport Hero from \"../models/Hero\";\r\nimport Item from \"../models/Item\";\r\nimport PartyStatistics from \"../models/PartyStatistics\";\r\nimport WorldStatistics from \"../models/WorldStatistics\";\r\n\r\nimport MockHeroService from \"../services/MockHeroService\";\r\nimport MockPartyService from \"../services/MockPartyService\";\r\nimport MockWorldService from \"../services/MockWorldService\";\r\nimport MockItemService from \"../services/MockItemService\";\r\nimport StringConverters from \"../services/StringConverters\";\r\n\r\nimport HeroHelper from \"../helpers/HeroHelper\";\r\n\r\nimport PartyInventory from \"../components/PartyInventory\";\r\nimport EquippedItems from \"../components/EquippedItems\";\r\nimport StatisticsBlock from \"../components/StatisticsBlock\";\r\nimport CalculatedStatisticsBlock from \"../components/CalculatedStatisticsBlock\";\r\nimport TraitList from \"../components/TraitList\";\r\nimport LinkTo from \"../components/LinkTo\";\r\nimport KeyMaps from \"../components/KeyMaps\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    characterGrid: {\r\n        backgroundColor: \"beige\",\r\n        fontFamily: \"Martel\",\r\n        display: \"grid\",\r\n        gridAutoRows: \"minmax(100px, auto)\",\r\n        height: \"91.5vh\",\r\n        [theme.breakpoints.down(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(1, 1fr)\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            gridTemplateColumns: \"repeat(2, 1fr)\",\r\n        },\r\n    },\r\n    left: {},\r\n    sectionHeading: {\r\n        fontFamily: \"MedievalSharp\",\r\n    },\r\n    bannerContainer: {\r\n        position: \"relative\",\r\n        height: \"15%\",\r\n        top: \"-80px\",\r\n        zIndex: 1,\r\n    },\r\n    itemContainer: {\r\n        position: \"relative\",\r\n    },\r\n    close: {\r\n        filter: \"invert(42%) sepia(93%) saturate(1352%) hue-rotate(32deg) brightness(60%) contrast(119%)\",\r\n    },\r\n    portrait: {\r\n        backgroundColor: \"ivory\",\r\n        height: \"56vh\",\r\n        zIndex: 0,\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    portraitImg: {\r\n        //left: \"20%\",\r\n        width: \"18vw\",\r\n        border: \"solid\",\r\n        borderRadius: \"50%\",\r\n        borderWidth: \"10px\",\r\n        borderColor: \"lightslategrey\",\r\n        margin: \"28px\",\r\n    },\r\n    inventory: {\r\n        position: \"relative\",\r\n        height: \"34vh\",\r\n        backgroundColor: \"ivory\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statistics: {\r\n        overflowY: \"scroll\",\r\n        backgroundColor: \"ivory\",\r\n        gridRowEnd: \"span 2\",\r\n        border: \"solid\",\r\n        borderWidth: \"4px\",\r\n        borderColor: \"beige\",\r\n        borderRadius: \"20px\",\r\n    },\r\n    statisticsBlock: {\r\n        padding: \"40px 80px\",\r\n    },\r\n}));\r\n\r\ntype HeroProfileProps = {\r\n    //id: string,\r\n};\r\n\r\ntype HeroProfileParams = {\r\n    id: string,\r\n};\r\n\r\nconst HeroProfile: React.FunctionComponent = () => {\r\n    const classes = useStyles();\r\n\r\n    const { id } = useParams() as HeroProfileParams;\r\n\r\n    let [hero, setHero] = React.useState(null as Hero | null);\r\n    let [party, setParty] = React.useState(null as PartyStatistics | null);\r\n    let [world, setWorld] = React.useState(null as WorldStatistics | null);\r\n    let [equippedItems, setEquippedItems] = React.useState(null as Item[] | null);\r\n    let [inventoryItems, setInventoryItems] = React.useState(null as Item[] | null);\r\n    let [currentId, setCurrentId] = React.useState(\"\");\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string) => history.push(url);\r\n\r\n    React.useEffect(() => {\r\n        // Initial load of hero data\r\n        const loadHero = () => {\r\n            const partyService = new MockPartyService();\r\n\r\n            // Process special keypress IDs, and re-direct to the correct hero\r\n            switch (id) {\r\n                case \"1\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[0]);\r\n                    return;\r\n                case \"2\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[1]);\r\n                    return;\r\n                case \"3\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[2]);\r\n                    return;\r\n                case \"4\":\r\n                    navigateToUrl(\"/profile/\" + partyService.getPartyIds()[3]);\r\n                    return;\r\n            }\r\n\r\n            const service = new MockHeroService();\r\n            const newHero = service.getHeroDetail(id);\r\n\r\n            const newParty = partyService.getPartyStatistics();\r\n\r\n            const worldService = new MockWorldService();\r\n            const newWorld = worldService.getWorld();\r\n\r\n            const itemsService = new MockItemService();\r\n            const newItems = itemsService.getItems(newHero.equippedItems);\r\n\r\n            if (!newHero) {\r\n                console.error(`No hero data`);\r\n                return;\r\n            }\r\n            if (!newParty) {\r\n                console.error(`No party data`);\r\n                return;\r\n            }\r\n            if (!newWorld) {\r\n                console.error(`No world data`);\r\n                return;\r\n            }\r\n            if (!newItems) {\r\n                console.error(`No items data`);\r\n                return;\r\n            }\r\n\r\n            console.log(\"Loading hero\");\r\n\r\n            setCurrentId(id);\r\n            setHero(newHero);\r\n            setParty(newParty);\r\n            setWorld(newWorld);\r\n            setEquippedItems(newItems);\r\n        };\r\n\r\n        // Initial load of inventory\r\n        const loadItems = () => {\r\n            // TODO: Try / catch\r\n            const partyService = new MockPartyService();\r\n            const inventoryItemIds = partyService.getInventory();\r\n\r\n            const itemService = new MockItemService();\r\n            const newInventoryItems = itemService.getItems(inventoryItemIds);\r\n\r\n            setInventoryItems(newInventoryItems);\r\n        };\r\n\r\n        if (inventoryItems === null) {\r\n            loadItems();\r\n        }\r\n\r\n        if (currentId !== id) {\r\n            loadHero();\r\n        }\r\n    });\r\n\r\n    if (!hero || !party || !world || !equippedItems || !inventoryItems) return null;\r\n\r\n    const onEquipItem = (itemId: string) => {\r\n\r\n        // console.log(`hero '${id}' equips ${itemId}`);\r\n\r\n        // Equip the item\r\n        const heroService = new MockHeroService();\r\n        const removedItemId = heroService.equipItem(id, itemId);\r\n\r\n        // Remove the item from party inventory\r\n        const partyService = new MockPartyService();\r\n        partyService.removeInventoryItem(itemId);\r\n        if (removedItemId) {\r\n            partyService.addInventoryItem(removedItemId);\r\n        }\r\n\r\n        // Force a refresh\r\n        setCurrentId(\"\");\r\n        setInventoryItems(null);\r\n    };\r\n\r\n    return (\r\n        <KeyMaps backUrl=\"/\">\r\n            <div className={classes.characterGrid}>\r\n                <div className={classes.left}>\r\n                    <div className={classes.portrait}>\r\n                        <br />\r\n                        <LinkTo url={`${process.env.PUBLIC_URL}/`} top=\"10.2%\" left=\"1%\" width=\"40px\">\r\n                            <img src=\"images/close.svg\" className={classes.close} alt=\"close\" />\r\n                        </LinkTo>\r\n                        <div className={classes.bannerContainer}>\r\n                            <h1 className=\"banner\">{hero.name}</h1>\r\n                        </div>\r\n                        <div className={classes.itemContainer}>\r\n                            <p>\r\n                                {StringConverters.classToString(hero.class)} - {StringConverters.alignmentToString(hero.alignment)}\r\n                            </p>\r\n                            <Grid container>\r\n                                <Grid item xs={3}>\r\n                                    <EquippedItems equippedItems={equippedItems} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <img src={hero.imageUrl} className={classes.portraitImg} alt=\"profile\" />\r\n                                </Grid>\r\n                                <Grid item xs={3}></Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.inventory}>\r\n                        <br />\r\n                        <h1 className={classes.sectionHeading}>Party Inventory</h1>\r\n                        <PartyInventory items={inventoryItems} onEquipItem={onEquipItem} />\r\n                    </div>\r\n                </div>\r\n                <div className={classes.statistics}>\r\n                    <br />\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{hero.background}</p>\r\n                    </div>\r\n                    <br />\r\n                    <h1 className={classes.sectionHeading}>Statistics</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <StatisticsBlock statistics={HeroHelper.calculateAttributesWithModifiers(hero)} />\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Other</h1>\r\n                    <CalculatedStatisticsBlock statistics={HeroHelper.calculateStatsWithModifiers(hero)} />\r\n                    <h1 className={classes.sectionHeading}>Abilities</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>{StringConverters.abilitiesToString(hero.abilities)}</p>\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Traits</h1>\r\n                    <TraitList traits={HeroHelper.getAllTraits(hero)} />\r\n                    <h1 className={classes.sectionHeading}>Party Standing</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        <p>Reputation {party.reputation}</p>\r\n                        {party.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                    <h1 className={classes.sectionHeading}>Voormithadreth Status</h1>\r\n                    <div className={classes.statisticsBlock}>\r\n                        {world.traits.map((t) => (\r\n                            <p key={t}>{t}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </KeyMaps>\r\n    );\r\n}\r\n\r\nexport default HeroProfile;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// UI Elements\r\nimport { CRS, Icon, latLng, LatLngBounds } from 'leaflet';\r\nimport { Map, ImageOverlay, Polygon } from \"react-leaflet\";\r\nimport DriftMarker from '../components/DriftMarker';\r\nimport EncounterDialog from \"../components/EncounterDialog\";\r\n\r\n// Services\r\nimport MockDetailedEncounterService from \"../services/MockDetailedEncounterService\";\r\n\r\n// Pathfinding imports\r\nimport Queue from '../models/Queue';\r\nimport { Graph, Node } from \"ngraph.graph\";\r\n\r\ntype EncounterMapProps = {\r\n    // None\r\n};\r\n\r\nexport function EncounterMap(props: EncounterMapProps) {\r\n    // const pos = { lat: -51.505, lng: -0.09 } as any;\r\n    const initialPos = latLng([0, 0]);\r\n    const initialNode = \"common-room\";\r\n\r\n    let [pos, setPos] = useState(initialPos); // The current (target) position of the player marker\r\n    let [currentVertex, setCurrentVertex] = useState(initialNode); // The current vertex that the player marker is at\r\n    let [vertexQueue] = useState(new Queue<any>()); // A queue of points to visit during path-finding\r\n    let [encounterId, setEncounterId] = useState(null as string | null);\r\n\r\n    // Build verticies from the graph\r\n    // TODO: Is there an easier method to use?\r\n    const getVertices = (graph: Graph<any, any> | null): Node<any>[] => {\r\n        if (!graph) return [];\r\n\r\n        var vertices: Node<any>[] = [];\r\n        graph.forEachNode((n: Node<any>) => {\r\n            vertices.push(n);\r\n        });\r\n\r\n        return vertices;\r\n    };\r\n\r\n    // // Get the vertex nearest to the clicked point\r\n    // const findNearestVertex = (graph: Graph<any, any> | null, pos: LatLng): any => {\r\n    //     const vertices = getVertices(graph);\r\n\r\n    //     for (let i = 0; i < vertices.length; i++) {\r\n    //         const vertex = vertices[i];\r\n\r\n    //         const dist = distance(pos, vertex.data[\"position\"]);\r\n    //         const isInRadius = dist < vertex.data[\"clickRadius\"];\r\n\r\n    //         if (isInRadius) {\r\n    //             return vertex;\r\n    //         }\r\n    //         // console.log(`Distance to ${vertex.id} is (${dist} < ${vertex.clickRadius}) = ${isInRadius}`);\r\n    //     }\r\n\r\n    //     return null;\r\n    // };\r\n\r\n    // Fire when marker move has finished\r\n    const handleMoveEnd = (marker: any) => {\r\n        console.log(\"Move ended\");\r\n\r\n        var targetVertex = vertexQueue.pop();\r\n        if (targetVertex) {\r\n            console.log(`Next vertex ${targetVertex.id}`);\r\n\r\n            setPos(targetVertex.data[\"position\"]);\r\n            setCurrentVertex(targetVertex.id);\r\n\r\n            const targetEncounterId = targetVertex.data[\"encounterId\"];\r\n            if (targetEncounterId) {\r\n                // console.log(`Set encounter ${targetEncounterId}`);\r\n                setEncounterId(targetEncounterId);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Fire when user clicks on the map\r\n    const handleClick = (e: any) => {\r\n        //if (!graph) return; // Map not loaded\r\n\r\n        console.log(\"clicked at: \" + e.latlng);\r\n    };\r\n\r\n    const handleEncounterClose = (moveTo: string | undefined) => {\r\n        console.log(\"Close encounter\");\r\n        setEncounterId(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Initial load of map data\r\n        // const loadMap = () => {\r\n        //     const service = new MockMapService();\r\n        //     const data = service.getMap(\"temple\");\r\n        //     if (!data) {\r\n        //         console.error(`No map data`);\r\n        //         return;\r\n        //     }\r\n        //     console.log(`Found ${data?.vertices.length} vertices`);\r\n        //     const graph = GraphBuilder.Build(data);\r\n        //     setGraph(graph);\r\n        // };\r\n        // if (graph == null) {\r\n        //     loadMap();\r\n        // }\r\n    });\r\n\r\n    //const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([0.009634, 0.009642]));\r\n    const bounds = new LatLngBounds(latLng([0.0, 0.0]), latLng([1609, 2143]));\r\n    //const maxBounds = new LatLngBounds(latLng([-0.0002, 0.0]), latLng([0.01025, 0.012]));\r\n\r\n    // maxBounds={bounds}\r\n    return (\r\n        <Map\r\n            crs={CRS.Simple}\r\n            zoom={3}\r\n            minZoom={-5}\r\n            maxZoom={20}\r\n            bounds={bounds}\r\n            maxBounds={bounds}\r\n            scrollWheelZoom={false}\r\n            onClick={handleClick}\r\n            zoomControl={true}\r\n        >\r\n            <EncounterDialog onClose={handleEncounterClose} encounterId={encounterId} />\r\n            {/* <TileLayer url=\"tiles/Tavern/row-{x}-col-{y}.png\" bounds={bounds} /> */}\r\n            <ImageOverlay url=\"maps/tavern.png\" bounds={bounds} />\r\n        </Map>\r\n    );\r\n}\r\n\r\nexport default EncounterMap;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/Header\";\r\n\r\n// Pages\r\nimport OverheadMap from \"./pages/OverheadMap\";\r\nimport HeroProfile from \"./pages/HeroProfile\";\r\nimport EncounterMap from \"./pages/EncounterMap\";\r\nimport KeyMaps from \"./components/KeyMaps\";\r\n\r\nconst MainLayout: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <KeyMaps backUrl=\"/menu\">\r\n                <Header />\r\n            </KeyMaps>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route\r\n                        path={`${process.env.PUBLIC_URL}/profile/:id`}\r\n                        component={() => {\r\n                            return <HeroProfile />;\r\n                        }}\r\n                    />\r\n                    <Route path={`${process.env.PUBLIC_URL}/encounter`} component={EncounterMap} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/:id`} component={OverheadMap} />\r\n                    <Route path={`${process.env.PUBLIC_URL}/`} component={OverheadMap} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainLayout;\r\n","import \"./App.scss\";\r\n\r\nimport React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport PitTheme from \"./PitTheme\";\r\n\r\n// Pages\r\nimport MainMenu from \"./pages/MainMenu\";\r\nimport MainLayout from \"./MainLayout\";\r\nimport SavesMenu from \"./pages/SavesMenu\";\r\n\r\nconst App : React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <ThemeProvider theme={PitTheme}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path={`${process.env.PUBLIC_URL}/menu`} component={MainMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/saves`} component={SavesMenu} />\r\n                        <Route path={`${process.env.PUBLIC_URL}/`} component={MainLayout} />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Mousetrap from \"mousetrap\";\r\n\r\ntype KeyMapsProps = {\r\n    backUrl: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst KeyMaps: React.FunctionComponent<KeyMapsProps> = (props: KeyMapsProps) => {\r\n    const { backUrl, children } = props;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (url: string): void => history.push(url);\r\n\r\n    Mousetrap.bind(\"1\", () => navigateToUrl(\"/profile/1\"));\r\n    Mousetrap.bind(\"2\", () => navigateToUrl(\"/profile/2\"));\r\n    Mousetrap.bind(\"3\", () => navigateToUrl(\"/profile/3\"));\r\n    Mousetrap.bind(\"4\", () => navigateToUrl(\"/profile/4\"));\r\n    Mousetrap.bind(\"esc\", () => navigateToUrl(backUrl));\r\n\r\n    return <div>{children}</div>;\r\n};\r\n\r\nexport default KeyMaps;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\ntype LinkToProps = {\r\n    url: string;\r\n    children?: React.ReactNode;\r\n    top?: string,\r\n    left?: string;\r\n    width?: string;\r\n};\r\n\r\nconst LinkTo: React.FunctionComponent<LinkToProps> = (props: LinkToProps) => {\r\n    \r\n    const { url, children, top, left, width } = props;\r\n\r\n    const useStyles = makeStyles({\r\n        container: {\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n        containerAbsolute: {\r\n            position: \"absolute\",\r\n            top: top ?? \"20px\",\r\n            left: left ?? \"20px\",\r\n            width: width ?? \"40px\",\r\n            zIndex: 2,\r\n            display: \"inline\",\r\n            cursor: \"pointer\",\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    const isPositioned = top || left || width;\r\n\r\n    const history = useHistory();\r\n    const navigateToUrl = (event: React.MouseEvent<HTMLDivElement, MouseEvent>): void => history.push(url);\r\n\r\n    return (\r\n        <div className={isPositioned ? classes.containerAbsolute : classes.container} onClick={navigateToUrl}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LinkTo;\r\n"],"sourceRoot":""}